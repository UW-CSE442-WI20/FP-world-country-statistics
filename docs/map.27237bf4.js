// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"geoworld.json":[function(require,module,exports) {
module.exports = {
  "type": "Topology",
  "objects": {
    "countries": {
      "type": "GeometryCollection",
      "geometries": [{
        "type": "Polygon",
        "arcs": [[0, 1, 2, 3]],
        "id": "716",
        "properties": {
          "name": "Zimbabwe"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-3, 4, 5, 6, 7, 8, 9]],
        "id": "894",
        "properties": {
          "name": "Zambia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[10, 11, 12]], [[13]], [[14]], [[15]], [[16]]],
        "id": "887",
        "properties": {
          "name": "Yemen"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[17]], [[18, 19, 20, 21]], [[22]], [[23]], [[24]], [[25]], [[26]], [[27]]],
        "id": "704",
        "properties": {
          "name": "Vietnam"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[28]], [[29]], [[30]], [[31]], [[32, 33, 34, 35]]],
        "id": "862",
        "properties": {
          "name": "Venezuela"
        }
      }, {
        "type": "Polygon",
        "arcs": [[36]],
        "id": "336",
        "properties": {
          "name": "Vatican"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[37]], [[38]], [[39]], [[40]], [[41]], [[42]], [[43]], [[44]], [[45]], [[46]], [[47]], [[48]], [[49]], [[50]]],
        "id": "548",
        "properties": {
          "name": "Vanuatu"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[51, 52, 53, 54, 55], [56]], [[57]], [[58]]],
        "id": "860",
        "properties": {
          "name": "Uzbekistan"
        }
      }, {
        "type": "Polygon",
        "arcs": [[59, 60, 61]],
        "id": "858",
        "properties": {
          "name": "Uruguay"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[62]], [[63]], [[64]], [[65]], [[66]]],
        "id": "583",
        "properties": {
          "name": "Micronesia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[67]], [[68]], [[69]], [[70]], [[71]]],
        "id": "584",
        "properties": {
          "name": "Marshall Is."
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[72]], [[73]], [[74]], [[75]], [[76]], [[77]]],
        "id": "580",
        "properties": {
          "name": "N. Mariana Is."
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[78]], [[79]], [[80]]],
        "id": "850",
        "properties": {
          "name": "U.S. Virgin Is."
        }
      }, {
        "type": "Polygon",
        "arcs": [[81]],
        "id": "316",
        "properties": {
          "name": "Guam"
        }
      }, {
        "type": "Polygon",
        "arcs": [[82]],
        "id": "016",
        "properties": {
          "name": "American Samoa"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[83]], [[84]], [[85]]],
        "id": "630",
        "properties": {
          "name": "Puerto Rico"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[86]], [[87]], [[88]], [[89]], [[90]], [[91]], [[92]], [[93]], [[94]], [[95]], [[96]], [[97]], [[98]], [[99]], [[100]], [[101]], [[102, 103, 104, 105]], [[106]], [[107]], [[108]], [[109]], [[110]], [[111]], [[112]], [[113]], [[114]], [[115]], [[116]], [[117]], [[118]], [[119]], [[120]], [[121]], [[122]], [[123]], [[124]], [[125]], [[126]], [[127]], [[128]], [[129]], [[130]], [[131]], [[132]], [[133]], [[134]], [[135]], [[136]], [[137]], [[138]], [[139]], [[140]], [[141]], [[142]], [[143]], [[144]], [[145]], [[146]], [[147]], [[148]], [[149]], [[150]], [[151]], [[152]], [[153]], [[154]], [[155]], [[156]], [[157]], [[158]], [[159]], [[160]], [[161]], [[162]], [[163]], [[164, 165, 166, 167, 168]], [[169]], [[170]], [[171]], [[172]], [[173]], [[174]], [[175]], [[176]], [[177]], [[178]], [[179]], [[180]], [[181]], [[182]], [[183]], [[184]], [[185]], [[186]], [[187]], [[188]], [[189]], [[190]], [[191]], [[192]], [[193]], [[194]], [[195]], [[196]], [[197]], [[198]], [[199]], [[200]], [[201]], [[202]], [[203]], [[204]], [[205]], [[206]], [[207]], [[208]], [[209]], [[210]], [[211]], [[212]], [[213]], [[214]], [[215]], [[216]], [[217]], [[218]], [[219]]],
        "id": "840",
        "properties": {
          "name": "United States of America"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[220]], [[221]]],
        "id": "239",
        "properties": {
          "name": "S. Geo. and the Is."
        }
      }, {
        "type": "Polygon",
        "arcs": [[222]],
        "id": "086",
        "properties": {
          "name": "Br. Indian Ocean Ter."
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[223]], [[224]]],
        "id": "654",
        "properties": {
          "name": "Saint Helena"
        }
      }, {
        "type": "Polygon",
        "arcs": [[225]],
        "id": "612",
        "properties": {
          "name": "Pitcairn Is."
        }
      }, {
        "type": "Polygon",
        "arcs": [[226]],
        "id": "660",
        "properties": {
          "name": "Anguilla"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[227]], [[228]], [[229]], [[230]], [[231]], [[232]]],
        "id": "238",
        "properties": {
          "name": "Falkland Is."
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[233]], [[234]], [[235]]],
        "id": "136",
        "properties": {
          "name": "Cayman Is."
        }
      }, {
        "type": "Polygon",
        "arcs": [[236]],
        "id": "060",
        "properties": {
          "name": "Bermuda"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[237]], [[238]], [[239]]],
        "id": "092",
        "properties": {
          "name": "British Virgin Is."
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[240]], [[241]], [[242]]],
        "id": "796",
        "properties": {
          "name": "Turks and Caicos Is."
        }
      }, {
        "type": "Polygon",
        "arcs": [[243]],
        "id": "500",
        "properties": {
          "name": "Montserrat"
        }
      }, {
        "type": "Polygon",
        "arcs": [[244]],
        "id": "832",
        "properties": {
          "name": "Jersey"
        }
      }, {
        "type": "Polygon",
        "arcs": [[245]],
        "id": "831",
        "properties": {
          "name": "Guernsey"
        }
      }, {
        "type": "Polygon",
        "arcs": [[246]],
        "id": "833",
        "properties": {
          "name": "Isle of Man"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[247]], [[248]], [[249]], [[250]], [[251]], [[252]], [[253]], [[254]], [[255]], [[256]], [[257]], [[258]], [[259]], [[260]], [[261]], [[262]], [[263]], [[264]], [[265]], [[266]], [[267]], [[268, 269]], [[270]]],
        "id": "826",
        "properties": {
          "name": "United Kingdom"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[271, 272, 273, 274, 275], [276]], [[277]], [[278]], [[279]], [[280]]],
        "id": "784",
        "properties": {
          "name": "United Arab Emirates"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291]], [[292]]],
        "id": "804",
        "properties": {
          "name": "Ukraine"
        }
      }, {
        "type": "Polygon",
        "arcs": [[293, 294, 295, 296, 297]],
        "id": "800",
        "properties": {
          "name": "Uganda"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[298]], [[-55, 299, 300, 301, 302]]],
        "id": "795",
        "properties": {
          "name": "Turkmenistan"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[303]], [[304, 305, 306, 307, 308, 309, 310]], [[311, 312, 313]]],
        "id": "792",
        "properties": {
          "name": "Turkey"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[314, 315, 316]], [[317]], [[318]]],
        "id": "788",
        "properties": {
          "name": "Tunisia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[319]], [[320]]],
        "id": "780",
        "properties": {
          "name": "Trinidad and Tobago"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[321]], [[322]], [[323]]],
        "id": "776",
        "properties": {
          "name": "Tonga"
        }
      }, {
        "type": "Polygon",
        "arcs": [[324, 325, 326, 327]],
        "id": "768",
        "properties": {
          "name": "Togo"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[328]], [[329, 330]], [[331, 332]]],
        "id": "626",
        "properties": {
          "name": "Timor-Leste"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[333]], [[334]], [[335]], [[336, 337, 338, 339, 340, 341]], [[342]], [[343]], [[344]], [[345]], [[346]], [[347]]],
        "id": "764",
        "properties": {
          "name": "Thailand"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[348]], [[349]], [[-8, 350, 351, 352, -294, 353, 354, 355, 356]], [[357]]],
        "id": "834",
        "properties": {
          "name": "Tanzania"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-53, 358, 359, 360]], [[-57]], [[361]]],
        "id": "762",
        "properties": {
          "name": "Tajikistan"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[362]], [[363]]],
        "id": "158",
        "properties": {
          "name": "Taiwan"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-310, 364, 365, 366, 367, 368]],
        "id": "760",
        "properties": {
          "name": "Syria"
        }
      }, {
        "type": "Polygon",
        "arcs": [[369, 370, 371, 372, 373, 374]],
        "id": "756",
        "properties": {
          "name": "Switzerland"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[375]], [[376]], [[377, 378, 379]], [[380]], [[381]], [[382]]],
        "id": "752",
        "properties": {
          "name": "Sweden"
        }
      }, {
        "type": "Polygon",
        "arcs": [[383, 384]],
        "id": "748",
        "properties": {
          "name": "eSwatini"
        }
      }, {
        "type": "Polygon",
        "arcs": [[385, 386, 387, 388]],
        "id": "740",
        "properties": {
          "name": "Suriname"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-297, 389, 390, 391, 392, 393]],
        "id": "728",
        "properties": {
          "name": "S. Sudan"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-392, 394, 395, 396, 397, 398, 399, 400]],
        "id": "729",
        "properties": {
          "name": "Sudan"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[401]], [[402]], [[403]]],
        "id": "144",
        "properties": {
          "name": "Sri Lanka"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[404]], [[405]], [[406]], [[407]], [[408, 409, 410, 411, 412, 413]], [[414]], [[415]], [[416]], [[417]], [[418]], [[419]], [[420]]],
        "id": "724",
        "properties": {
          "name": "Spain"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[421, 422]], [[423]], [[424]], [[425]], [[426]], [[427]], [[428]], [[429]], [[430]], [[431]], [[432]]],
        "id": "410",
        "properties": {
          "name": "South Korea"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-1, 433, -385, 434, 435, 436, 437], [438]], [[439]]],
        "id": "710",
        "properties": {
          "name": "South Africa"
        }
      }, {
        "type": "Polygon",
        "arcs": [[440, 441, 442, 443]],
        "id": "706",
        "properties": {
          "name": "Somalia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-443, 444, 445, 446]],
        "properties": {
          "name": "Somaliland"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[447]], [[448]], [[449]], [[450]], [[451]], [[452]], [[453]], [[454]], [[455]], [[456]], [[457]], [[458]], [[459]], [[460]], [[461]], [[462]], [[463]], [[464]], [[465]], [[466]], [[467]]],
        "id": "090",
        "properties": {
          "name": "Solomon Is."
        }
      }, {
        "type": "Polygon",
        "arcs": [[-289, 468, 469, 470, 471]],
        "id": "703",
        "properties": {
          "name": "Slovakia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[472, 473, 474, 475, 476]],
        "id": "705",
        "properties": {
          "name": "Slovenia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[477]],
        "id": "702",
        "properties": {
          "name": "Singapore"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[478, 479, 480]], [[481]]],
        "id": "694",
        "properties": {
          "name": "Sierra Leone"
        }
      }, {
        "type": "Polygon",
        "arcs": [[482]],
        "id": "690",
        "properties": {
          "name": "Seychelles"
        }
      }, {
        "type": "Polygon",
        "arcs": [[483, 484, 485, 486, 487, 488, 489, 490]],
        "id": "688",
        "properties": {
          "name": "Serbia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[491, 492, 493, 494, 495, 496, 497]],
        "id": "686",
        "properties": {
          "name": "Senegal"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[498]], [[499]], [[-12, 500, 501, 502, 503, 504, 505, 506, -274, 507]], [[508]]],
        "id": "682",
        "properties": {
          "name": "Saudi Arabia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[509]], [[510]]],
        "id": "678",
        "properties": {
          "name": "São Tomé and Principe"
        }
      }, {
        "type": "Polygon",
        "arcs": [[511]],
        "id": "674",
        "properties": {
          "name": "San Marino"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[512]], [[513]]],
        "id": "882",
        "properties": {
          "name": "Samoa"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[514]], [[515]], [[516]]],
        "id": "670",
        "properties": {
          "name": "St. Vin. and Gren."
        }
      }, {
        "type": "Polygon",
        "arcs": [[517]],
        "id": "662",
        "properties": {
          "name": "Saint Lucia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[518]], [[519]]],
        "id": "659",
        "properties": {
          "name": "St. Kitts and Nevis"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-295, -353, 520, 521]],
        "id": "646",
        "properties": {
          "name": "Rwanda"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[522]], [[523]], [[524]], [[525]], [[526]], [[527]], [[528]], [[529]], [[530]], [[531]], [[532]], [[533]], [[534]], [[535]], [[536]], [[537]], [[538]], [[539, 540, 541, 542, 543, 544, 545, 546, 547, -292, 548, 549, 550, 551, 552, 553, 554]], [[555]], [[556]], [[557]], [[558]], [[559]], [[560]], [[561]], [[562]], [[563]], [[564]], [[565]], [[566]], [[567]], [[568]], [[569]], [[570]], [[571]], [[572]], [[573]], [[574]], [[575]], [[576]], [[577]], [[578]], [[579]], [[580]], [[581]], [[582]], [[583]], [[584]], [[585]], [[586]], [[587]], [[588]], [[589]], [[590]], [[591]], [[592]], [[593]], [[594]], [[595]], [[596]], [[597]], [[598]], [[599]], [[600]], [[601]], [[602]], [[603]], [[604]], [[605]], [[606]], [[607]], [[608]], [[609]], [[610]], [[611]], [[612]], [[613]], [[614]], [[615]], [[616]], [[617]], [[618]], [[619]], [[620]], [[621]], [[622]], [[623]], [[624]], [[625]], [[626]], [[627]], [[628]], [[629]], [[630]], [[631]], [[632]], [[633]], [[634, 635, 636, 637, 638]], [[-283, 639]]],
        "id": "643",
        "properties": {
          "name": "Russia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-285, 640, 641, -491, 642, -287, 643]],
        "id": "642",
        "properties": {
          "name": "Romania"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-506, 644]],
        "id": "634",
        "properties": {
          "name": "Qatar"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[645]], [[-413, 646]], [[647]], [[648]], [[649]], [[650]], [[651]], [[652]], [[653]]],
        "id": "620",
        "properties": {
          "name": "Portugal"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-290, -472, 654, 655, 656, 657, 658, -637, 659, 660]],
        "id": "616",
        "properties": {
          "name": "Poland"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[661]], [[662]], [[663]], [[664]], [[665]], [[666]], [[667]], [[668]], [[669]], [[670]], [[671]], [[672]], [[673]], [[674]], [[675]], [[676]], [[677]], [[678]], [[679]], [[680]], [[681]], [[682]], [[683]], [[684]], [[685]], [[686]], [[687]], [[688]], [[689]], [[690]], [[691]], [[692]], [[693]], [[694]], [[695]], [[696]], [[697]], [[698]], [[699]], [[700]], [[701]], [[702]], [[703]], [[704]], [[705]], [[706]], [[707]], [[708]]],
        "id": "608",
        "properties": {
          "name": "Philippines"
        }
      }, {
        "type": "Polygon",
        "arcs": [[709, 710, 711, 712, 713, 714]],
        "id": "604",
        "properties": {
          "name": "Peru"
        }
      }, {
        "type": "Polygon",
        "arcs": [[715, 716, 717]],
        "id": "600",
        "properties": {
          "name": "Paraguay"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[718]], [[719]], [[720, 721]], [[722]], [[723]], [[724]], [[725]], [[726]], [[727]], [[728]], [[729]], [[730]], [[731]], [[732]], [[733]], [[734]], [[735]], [[736]], [[737]], [[738]], [[739]], [[740]], [[741]], [[742]], [[743]], [[744]]],
        "id": "598",
        "properties": {
          "name": "Papua New Guinea"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[745, 746, 747, 748]], [[749]], [[750]], [[751]], [[752]]],
        "id": "591",
        "properties": {
          "name": "Panama"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[753]], [[754]]],
        "id": "585",
        "properties": {
          "name": "Palau"
        }
      }, {
        "type": "Polygon",
        "arcs": [[755, 756, 757, 758, 759, 760]],
        "id": "586",
        "properties": {
          "name": "Pakistan"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[761]], [[-13, -508, -273, 762]], [[-276, 763]], [[-277]]],
        "id": "512",
        "properties": {
          "name": "Oman"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-378, 764, -554, 765]], [[766]], [[767]], [[768]], [[769]], [[770]], [[771]], [[772]], [[773]], [[774]], [[775]], [[776]], [[777]], [[778]], [[779]], [[780]], [[781]], [[782]], [[783]], [[784]], [[785]], [[786]], [[787]], [[788]], [[789]], [[790]], [[791]], [[792]], [[793]], [[794]], [[795]], [[796]]],
        "id": "578",
        "properties": {
          "name": "Norway"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-422, 797, 798, -540, 799]], [[800]]],
        "id": "408",
        "properties": {
          "name": "North Korea"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[801]], [[802, 803, 804, 805, 806]]],
        "id": "566",
        "properties": {
          "name": "Nigeria"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-807, 807, 808, 809, 810, 811, 812]],
        "id": "562",
        "properties": {
          "name": "Niger"
        }
      }, {
        "type": "Polygon",
        "arcs": [[813, 814, 815, 816]],
        "id": "558",
        "properties": {
          "name": "Nicaragua"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[817]], [[818]], [[819]], [[820]], [[821]], [[822]], [[823]], [[824]], [[825]], [[826]], [[827]], [[828]], [[829]]],
        "id": "554",
        "properties": {
          "name": "New Zealand"
        }
      }, {
        "type": "Polygon",
        "arcs": [[830]],
        "id": "570",
        "properties": {
          "name": "Niue"
        }
      }, {
        "type": "Polygon",
        "arcs": [[831]],
        "id": "184",
        "properties": {
          "name": "Cook Is."
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[832, 833, 834]], [[835, 836]], [[837]], [[838]], [[839]], [[840]], [[841]], [[842]], [[843]], [[844]], [[845]], [[846]]],
        "id": "528",
        "properties": {
          "name": "Netherlands"
        }
      }, {
        "type": "Polygon",
        "arcs": [[847]],
        "id": "533",
        "properties": {
          "name": "Aruba"
        }
      }, {
        "type": "Polygon",
        "arcs": [[848]],
        "id": "531",
        "properties": {
          "name": "Curaçao"
        }
      }, {
        "type": "Polygon",
        "arcs": [[849, 850]],
        "id": "524",
        "properties": {
          "name": "Nepal"
        }
      }, {
        "type": "Polygon",
        "arcs": [[851]],
        "id": "520",
        "properties": {
          "name": "Nauru"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-5, 852, -437, 853, 854]],
        "id": "516",
        "properties": {
          "name": "Namibia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-4, -10, 855, -356, 856, -435, -384, -434], [857], [858]],
        "id": "508",
        "properties": {
          "name": "Mozambique"
        }
      }, {
        "type": "Polygon",
        "arcs": [[859, 860, 861]],
        "id": "504",
        "properties": {
          "name": "Morocco"
        }
      }, {
        "type": "Polygon",
        "arcs": [[862, 863, 864, -861]],
        "id": "732",
        "properties": {
          "name": "W. Sahara"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-487, 865, 866, 867, 868, 869]],
        "id": "499",
        "properties": {
          "name": "Montenegro"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-542, 870]],
        "id": "496",
        "properties": {
          "name": "Mongolia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-286, -644]],
        "id": "498",
        "properties": {
          "name": "Moldova"
        }
      }, {
        "type": "Polygon",
        "arcs": [[871, 872]],
        "id": "492",
        "properties": {
          "name": "Monaco"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-167, 873, 874, 875, 876]], [[877]], [[878]], [[879]], [[880]], [[881]], [[882]], [[883]], [[884]], [[885]], [[886]], [[887]], [[888]], [[889]], [[890]], [[891]]],
        "id": "484",
        "properties": {
          "name": "Mexico"
        }
      }, {
        "type": "Polygon",
        "arcs": [[892]],
        "id": "480",
        "properties": {
          "name": "Mauritius"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[893]], [[-498, 894, -864, 895, 896]]],
        "id": "478",
        "properties": {
          "name": "Mauritania"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[897]], [[898]]],
        "id": "470",
        "properties": {
          "name": "Malta"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-492, -897, 899, -810, 900, 901, 902]],
        "id": "466",
        "properties": {
          "name": "Mali"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[903]], [[904]]],
        "id": "462",
        "properties": {
          "name": "Maldives"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-340, 905]], [[906, 907, 908, 909, 910]], [[911]], [[912]], [[913]], [[914]], [[915]], [[916]], [[917, 918]]],
        "id": "458",
        "properties": {
          "name": "Malaysia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-859]], [[-858]], [[-9, -357, -856]]],
        "id": "454",
        "properties": {
          "name": "Malawi"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[919]], [[920]], [[921]]],
        "id": "450",
        "properties": {
          "name": "Madagascar"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-485, 922, 923, 924, 925]],
        "id": "807",
        "properties": {
          "name": "Macedonia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[926, 927, 928]],
        "id": "442",
        "properties": {
          "name": "Luxembourg"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-639, 929]], [[-636, 930, 931, 932, -660]]],
        "id": "440",
        "properties": {
          "name": "Lithuania"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-371, 933]],
        "id": "438",
        "properties": {
          "name": "Liechtenstein"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-315, 934, 935, -397, 936, -812, 937]],
        "id": "434",
        "properties": {
          "name": "Libya"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-479, 938, 939, 940]],
        "id": "430",
        "properties": {
          "name": "Liberia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-439]],
        "id": "426",
        "properties": {
          "name": "Lesotho"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-368, 941, 942]],
        "id": "422",
        "properties": {
          "name": "Lebanon"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-932, 943, 944, -550, 945]],
        "id": "428",
        "properties": {
          "name": "Latvia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-21, 946, -337, 947, 948]],
        "id": "418",
        "properties": {
          "name": "Laos"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-52, 949, 950, -359], [-58], [-59], [-362]],
        "id": "417",
        "properties": {
          "name": "Kyrgyzstan"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[951]], [[-504, 952, 953]]],
        "id": "414",
        "properties": {
          "name": "Kuwait"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-486, -926, 954, -866]],
        "properties": {
          "name": "Kosovo"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[955]], [[956]], [[957]], [[958]], [[959]], [[960]], [[961]], [[962]], [[963]], [[964]], [[965]], [[966]], [[967]], [[968]], [[969]], [[970]], [[971]], [[972]], [[973]]],
        "id": "296",
        "properties": {
          "name": "Kiribati"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[974]], [[-298, -394, 975, -441, 976, -354]]],
        "id": "404",
        "properties": {
          "name": "Kenya"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[977]], [[978]], [[979]], [[-56, -303, 980, -544, 981, -950]]],
        "id": "398",
        "properties": {
          "name": "Kazakhstan"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-366, 982, -502, 983, 984, 985, 986]],
        "id": "400",
        "properties": {
          "name": "Jordan"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[987]], [[988]], [[989]], [[990]], [[991]], [[992]], [[993]], [[994]], [[995]], [[996]], [[997]], [[998]], [[999]], [[1000]], [[1001]], [[1002]], [[1003]], [[1004]], [[1005]], [[1006]], [[1007]], [[1008]], [[1009]], [[1010]], [[1011]], [[1012]], [[1013]], [[1014]], [[1015]], [[1016]], [[1017]], [[1018]], [[1019]], [[1020]]],
        "id": "392",
        "properties": {
          "name": "Japan"
        }
      }, {
        "type": "Polygon",
        "arcs": [[1021]],
        "id": "388",
        "properties": {
          "name": "Jamaica"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-373, 1022, -475, 1023, 1024], [-37], [-512]], [[1025]], [[1026]], [[1027]], [[1028]], [[1029]], [[1030]], [[1031]]],
        "id": "380",
        "properties": {
          "name": "Italy"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-367, -987, 1032, -985, 1033, 1034, 1035, 1036, -942]],
        "id": "376",
        "properties": {
          "name": "Israel"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-1036, 1037, 1038]], [[-986, -1033]]],
        "id": "275",
        "properties": {
          "name": "Palestine"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1039]], [[-269, 1040]]],
        "id": "372",
        "properties": {
          "name": "Ireland"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-309, 1041, 1042, -953, -503, -983, -365]],
        "id": "368",
        "properties": {
          "name": "Iraq"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1043]], [[-301, 1044, -759, 1045, -1042, -308, 1046, 1047, 1048, 1049]]],
        "id": "364",
        "properties": {
          "name": "Iran"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1050]], [[1051]], [[1052]], [[1053]], [[1054]], [[1055]], [[1056]], [[1057]], [[1058]], [[1059]], [[1060]], [[1061]], [[1062]], [[1063]], [[1064]], [[1065]], [[1066]], [[1067]], [[1068]], [[1069]], [[1070]], [[1071]], [[1072]], [[1073]], [[1074]], [[1075]], [[1076]], [[-907, 1077]], [[1078]], [[1079]], [[1080]], [[-330, 1081, -333, 1082]], [[1083]], [[1084]], [[1085]], [[-721, 1086]], [[1087]], [[1088]], [[1089]], [[1090]], [[1091]], [[1092]], [[1093]], [[1094]], [[1095]], [[1096]], [[1097]], [[1098]], [[1099]], [[1100]], [[1101]], [[1102]], [[1103]], [[1104]], [[1105]], [[1106]], [[1107]], [[1108]], [[1109]], [[1110]], [[1111]], [[1112]], [[1113]], [[1114]], [[1115]], [[1116]], [[1117]], [[1118]], [[1119]], [[1120]], [[1121]], [[1122]], [[1123]], [[1124]], [[1125]], [[1126]], [[1127]], [[1128]], [[1129]], [[1130]], [[1131]], [[1132]], [[1133]], [[1134]], [[1135]], [[1136]], [[1137]], [[1138]], [[1139]], [[1140]], [[1141]], [[1142]], [[1143]], [[1144]], [[1145]], [[1146]], [[1147]], [[1148]], [[1149]], [[1150]], [[1151]], [[1152]], [[-918, 1153]], [[1154]], [[1155]], [[1156]], [[1157]], [[1158]], [[1159]], [[1160]], [[1161]], [[1162]], [[1163]], [[1164]], [[1165]], [[1166]], [[1167]], [[1168]], [[1169]], [[1170]], [[1171]], [[1172]], [[1173]], [[1174]], [[1175]], [[1176]], [[1177]], [[1178]], [[1179]], [[1180]], [[1181]], [[1182]], [[1183]]],
        "id": "360",
        "properties": {
          "name": "Indonesia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-757, 1184, 1185, -850, 1186, 1187, 1188, 1189, 1190, 1191]], [[1192]], [[1193]], [[1194]], [[1195]], [[1196]], [[1197]], [[1198]], [[1199]], [[1200]], [[1201]], [[1202]], [[1203]], [[1204]]],
        "id": "356",
        "properties": {
          "name": "India"
        }
      }, {
        "type": "Polygon",
        "arcs": [[1205]],
        "id": "352",
        "properties": {
          "name": "Iceland"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-288, -643, -490, 1206, -477, 1207, -469]],
        "id": "348",
        "properties": {
          "name": "Hungary"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-817, 1208, 1209, 1210, 1211]], [[1212]], [[1213]]],
        "id": "340",
        "properties": {
          "name": "Honduras"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1214, 1215]], [[1216]], [[1217]]],
        "id": "332",
        "properties": {
          "name": "Haiti"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-33, 1218, -388, 1219]],
        "id": "328",
        "properties": {
          "name": "Guyana"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-494, 1220, 1221]], [[1222]], [[1223]], [[1224]], [[1225]], [[1226]], [[1227]]],
        "id": "624",
        "properties": {
          "name": "Guinea-Bissau"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-481, 1228, -1221, -493, -903, 1229, -939]],
        "id": "324",
        "properties": {
          "name": "Guinea"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-876, 1230, 1231, -1211, 1232, 1233]],
        "id": "320",
        "properties": {
          "name": "Guatemala"
        }
      }, {
        "type": "Polygon",
        "arcs": [[1234]],
        "id": "308",
        "properties": {
          "name": "Grenada"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1235]], [[1236]], [[1237]], [[1238]], [[1239]], [[1240]], [[1241]], [[1242]], [[1243]], [[1244]], [[1245]], [[1246]], [[1247]], [[1248]], [[1249]], [[1250]], [[1251]], [[1252]], [[1253]], [[1254]], [[1255]], [[1256]], [[1257]], [[1258]], [[1259]], [[1260]], [[1261]], [[1262]], [[1263]], [[1264]], [[1265]], [[1266]], [[1267]], [[1268]], [[1269]], [[1270]], [[1271]], [[1272]], [[1273]], [[-313, 1274, 1275, -924, 1276]]],
        "id": "300",
        "properties": {
          "name": "Greece"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-327, 1277, 1278, 1279, 1280, 1281]],
        "id": "288",
        "properties": {
          "name": "Ghana"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-375, 1282, -927, 1283, -835, 1284, 1285, 1286, -656, 1287, 1288]], [[1289]], [[-658, 1290]], [[1291]], [[1292]], [[1293]]],
        "id": "276",
        "properties": {
          "name": "Germany"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-305, 1294, -547, 1295, 1296]],
        "id": "268",
        "properties": {
          "name": "Georgia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-496, 1297]],
        "id": "270",
        "properties": {
          "name": "Gambia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[1298, 1299, 1300, 1301]],
        "id": "266",
        "properties": {
          "name": "Gabon"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1302]], [[-374, -1025, 1303, -873, 1304, -411, 1305, -409, 1306, 1307, -928, -1283]], [[1308]], [[1309]], [[1310]], [[1311]], [[1312]], [[1313]], [[1314]], [[-386, 1315, 1316]]],
        "id": "250",
        "properties": {
          "name": "France"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1317]], [[1318]]],
        "id": "666",
        "properties": {
          "name": "St. Pierre and Miquelon"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1319]], [[1320]]],
        "id": "876",
        "properties": {
          "name": "Wallis and Futuna Is."
        }
      }, {
        "type": "Polygon",
        "arcs": [[1321, 1322]],
        "id": "663",
        "properties": {
          "name": "St-Martin"
        }
      }, {
        "type": "Polygon",
        "arcs": [[1323]],
        "id": "652",
        "properties": {
          "name": "St-Barthélemy"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1324]], [[1325]], [[1326]], [[1327]], [[1328]], [[1329]], [[1330]], [[1331]], [[1332]], [[1333]], [[1334]], [[1335]], [[1336]], [[1337]], [[1338]], [[1339]], [[1340]], [[1341]], [[1342]], [[1343]], [[1344]]],
        "id": "258",
        "properties": {
          "name": "Fr. Polynesia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1345]], [[1346]], [[1347]], [[1348]], [[1349]], [[1350]]],
        "id": "540",
        "properties": {
          "name": "New Caledonia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1351]], [[1352]], [[1353]]],
        "id": "260",
        "properties": {
          "name": "Fr. S. Antarctic Lands"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1354]], [[1355]], [[1356]]],
        "id": "248",
        "properties": {
          "name": "Åland"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-379, -766, -553, 1357]], [[1358]], [[1359]], [[1360]], [[1361]], [[1362]], [[1363]], [[1364]]],
        "id": "246",
        "properties": {
          "name": "Finland"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1365]], [[1366]], [[1367]], [[1368]], [[1369]], [[1370]], [[1371]], [[1372]], [[1373]], [[1374]], [[1375]], [[1376]], [[1377]], [[1378]], [[1379]], [[1380]], [[1381]], [[1382]], [[1383]], [[1384]]],
        "id": "242",
        "properties": {
          "name": "Fiji"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-393, -401, 1385, 1386, -445, -442, -976]],
        "id": "231",
        "properties": {
          "name": "Ethiopia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-945, 1387, -551]], [[1388]], [[1389]], [[1390]]],
        "id": "233",
        "properties": {
          "name": "Estonia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-400, 1391, 1392, -1386]], [[1393]], [[1394]]],
        "id": "232",
        "properties": {
          "name": "Eritrea"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1395]], [[-1301, 1396, 1397]]],
        "id": "226",
        "properties": {
          "name": "Eq. Guinea"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-1210, 1398, -1233]],
        "id": "222",
        "properties": {
          "name": "El Salvador"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-398, -936, 1399, -1038, -1035, 1400]],
        "id": "818",
        "properties": {
          "name": "Egypt"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-714, 1401, 1402]], [[1403]], [[1404]], [[1405]], [[1406]], [[1407]], [[1408]], [[1409]], [[1410]]],
        "id": "218",
        "properties": {
          "name": "Ecuador"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-1215, 1411]],
        "id": "214",
        "properties": {
          "name": "Dominican Rep."
        }
      }, {
        "type": "Polygon",
        "arcs": [[1412]],
        "id": "212",
        "properties": {
          "name": "Dominica"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-446, -1387, -1393, 1413]],
        "id": "262",
        "properties": {
          "name": "Djibouti"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1414]], [[1415]], [[1416]], [[1417]], [[1418]], [[1419]], [[1420]], [[1421]], [[1422]], [[1423]], [[1424]], [[1425]], [[1426]], [[1427]], [[1428]], [[1429]], [[1430]]],
        "id": "304",
        "properties": {
          "name": "Greenland"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1431]], [[1432]], [[1433]], [[1434]], [[1435]]],
        "id": "234",
        "properties": {
          "name": "Faeroe Is."
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1436]], [[-1286, 1437]], [[1438]], [[1439]], [[1440]], [[1441]], [[1442]], [[1443]], [[1444]], [[1445]], [[1446]], [[1447]]],
        "id": "208",
        "properties": {
          "name": "Denmark"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-471, 1448, -1288, -655]],
        "id": "203",
        "properties": {
          "name": "Czechia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[1449, 1450]],
        "properties": {
          "name": "N. Cyprus"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-1450, 1451]],
        "id": "196",
        "properties": {
          "name": "Cyprus"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1452]], [[1453]], [[1454]], [[1455]], [[1456]], [[1457]], [[1458]]],
        "id": "192",
        "properties": {
          "name": "Cuba"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-473, -1207, -489, 1459, 1460]], [[1461]], [[1462]], [[1463]], [[1464]], [[1465]], [[1466]], [[1467]], [[1468]], [[1469]], [[1470]], [[1471]], [[-869, 1472, 1473]]],
        "id": "191",
        "properties": {
          "name": "Croatia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-1279, 1474]], [[-902, 1475, -1281, 1476, -940, -1230]]],
        "id": "384",
        "properties": {
          "name": "Côte d'Ivoire"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-748, 1477, -815, 1478]],
        "id": "188",
        "properties": {
          "name": "Costa Rica"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-7, 1479, 1480, 1481, 1482, 1483, -390, -296, -522, 1484, -351]],
        "id": "180",
        "properties": {
          "name": "Dem. Rep. Congo"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-1299, 1485, 1486, -1483, 1487, 1488]],
        "id": "178",
        "properties": {
          "name": "Congo"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1489]], [[1490]], [[1491]]],
        "id": "174",
        "properties": {
          "name": "Comoros"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-35, 1492, -715, -1403, 1493, -746, 1494]], [[1495]]],
        "id": "170",
        "properties": {
          "name": "Colombia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1496]], [[1497]], [[1498]], [[1499]], [[1500]], [[1501]], [[1502]], [[1503]], [[1504]], [[1505]], [[1506]], [[-22, -949, 1507, -1189, 1508, -1187, -851, -1186, 1509, -761, 1510, -360, -951, -982, -543, -871, -541, -799, 1511, 1512, 1513, 1514, 1515]], [[1516]]],
        "id": "156",
        "properties": {
          "name": "China"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-1515, 1517]],
        "id": "446",
        "properties": {
          "name": "Macao"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-1513, 1518]], [[1519]], [[1520]]],
        "id": "344",
        "properties": {
          "name": "Hong Kong"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1521]], [[1522]], [[-712, 1523, 1524, 1525]], [[1526, 1527]], [[1528]], [[1529]], [[1530]], [[1531]], [[1532]], [[1533]], [[1534]], [[1535]], [[1536]], [[1537]], [[1538]], [[1539]], [[1540]], [[1541]], [[1542]], [[1543]], [[1544]], [[1545]], [[1546]], [[1547]], [[1548]], [[1549]], [[1550]], [[1551]], [[1552]], [[1553]], [[1554]]],
        "id": "152",
        "properties": {
          "name": "Chile"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-396, 1555, 1556, -803, -813, -937]],
        "id": "148",
        "properties": {
          "name": "Chad"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-391, -1484, -1487, 1557, -1556, -395]],
        "id": "140",
        "properties": {
          "name": "Central African Rep."
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1558]], [[1559]], [[1560]], [[1561]], [[1562]], [[1563]], [[1564]], [[1565]]],
        "id": "132",
        "properties": {
          "name": "Cabo Verde"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1566]], [[1567]], [[1568]], [[-106, 1569, -169, 1570]], [[1571]], [[1572]], [[1573]], [[1574]], [[1575]], [[1576]], [[1577]], [[1578]], [[1579]], [[1580]], [[1581]], [[1582]], [[1583]], [[1584]], [[1585]], [[1586]], [[1587]], [[1588]], [[1589]], [[-165, 1590]], [[1591]], [[1592]], [[1593]], [[1594]], [[1595]], [[1596]], [[1597]], [[1598]], [[1599]], [[1600]], [[1601]], [[1602]], [[1603]], [[1604]], [[1605]], [[1606]], [[1607]], [[1608]], [[1609]], [[1610]], [[1611]], [[1612]], [[1613]], [[1614]], [[-104, 1615]], [[1616]], [[1617]], [[1618]], [[1619]], [[1620]], [[1621]], [[1622]], [[1623]], [[1624]], [[1625]], [[1626]], [[1627]], [[1628]], [[1629]], [[1630]], [[1631]], [[1632]], [[1633]], [[1634]], [[1635]], [[1636]], [[1637]], [[1638]], [[1639]], [[1640]], [[1641]], [[1642]], [[1643]], [[1644]], [[1645]], [[1646]], [[1647]], [[1648]], [[1649]], [[1650]], [[1651]], [[1652]], [[1653]], [[1654]], [[1655]], [[1656]], [[1657]], [[1658]], [[1659]], [[1660]], [[1661]], [[1662]], [[1663]], [[1664]], [[1665]], [[1666]], [[1667]], [[1668]], [[1669]], [[1670]], [[1671]], [[1672]], [[1673]], [[1674]], [[1675]], [[1676]], [[1677]], [[1678]], [[1679]], [[1680]], [[1681]], [[1682]], [[1683]], [[1684]], [[1685]], [[1686]], [[1687]], [[1688]], [[1689]], [[1690]], [[1691]], [[1692]], [[1693]], [[1694]], [[1695]], [[1696]], [[1697]], [[1698]], [[1699]], [[1700]], [[1701]], [[1702]], [[1703]], [[1704]], [[1705]], [[1706]], [[1707]]],
        "id": "124",
        "properties": {
          "name": "Canada"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-804, -1557, -1558, -1486, -1302, -1398, 1708]],
        "id": "120",
        "properties": {
          "name": "Cameroon"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1709]], [[1710]], [[-20, 1711, -338, -947]]],
        "id": "116",
        "properties": {
          "name": "Cambodia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-342, 1712, 1713, -1190, -1508, -948]], [[1714]], [[1715]], [[1716]], [[1717]], [[1718]], [[1719]], [[1720]], [[1721]], [[1722]], [[1723]], [[1724]], [[1725]], [[1726]], [[1727]], [[1728]], [[1729]], [[1730]], [[1731]]],
        "id": "104",
        "properties": {
          "name": "Myanmar"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-352, -1485, -521]],
        "id": "108",
        "properties": {
          "name": "Burundi"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-328, -1282, -1476, -901, -809, 1732]],
        "id": "854",
        "properties": {
          "name": "Burkina Faso"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-314, -1277, -923, -484, -642, 1733]],
        "id": "100",
        "properties": {
          "name": "Bulgaria"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-910, 1734]], [[-909, 1735]]],
        "id": "096",
        "properties": {
          "name": "Brunei"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-34, -1220, -387, -1317, 1736, -62, 1737, -716, 1738, -710, -1493]], [[1739]], [[1740]], [[1741]], [[1742]], [[1743]], [[1744]], [[1745]], [[1746]], [[1747]], [[1748]], [[1749]], [[1750]], [[1751]], [[1752]], [[1753]], [[1754]]],
        "id": "076",
        "properties": {
          "name": "Brazil"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-2, -438, -853]],
        "id": "072",
        "properties": {
          "name": "Botswana"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-870, -1474, 1755, -1460, -488]],
        "id": "070",
        "properties": {
          "name": "Bosnia and Herz."
        }
      }, {
        "type": "Polygon",
        "arcs": [[-711, -1739, -718, 1756, -1524]],
        "id": "068",
        "properties": {
          "name": "Bolivia"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-1188, -1509]],
        "id": "064",
        "properties": {
          "name": "Bhutan"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-325, -1733, -808, -806, 1757]],
        "id": "204",
        "properties": {
          "name": "Benin"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-875, 1758, -1231]], [[1759]], [[1760]]],
        "id": "084",
        "properties": {
          "name": "Belize"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-833, -1284, -929, -1308, 1761, -836]],
        "id": "056",
        "properties": {
          "name": "Belgium"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-291, -661, -933, -946, -549]],
        "id": "112",
        "properties": {
          "name": "Belarus"
        }
      }, {
        "type": "Polygon",
        "arcs": [[1762]],
        "id": "052",
        "properties": {
          "name": "Barbados"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-1191, -1714, 1763]], [[1764]], [[1765]], [[1766]], [[1767]], [[1768]], [[1769]]],
        "id": "050",
        "properties": {
          "name": "Bangladesh"
        }
      }, {
        "type": "Polygon",
        "arcs": [[1770]],
        "id": "048",
        "properties": {
          "name": "Bahrain"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1771]], [[1772]], [[1773]], [[1774]], [[1775]], [[1776]], [[1777]], [[1778]], [[1779]], [[1780]], [[1781]], [[1782]], [[1783]], [[1784]], [[1785]]],
        "id": "044",
        "properties": {
          "name": "Bahamas"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-307, 1786, -1047]], [[-1049, 1787, -1296, -546, 1788], [1789]], [[1790]]],
        "id": "031",
        "properties": {
          "name": "Azerbaijan"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-370, -1289, -1449, -470, -1208, -476, -1023, -372, -934]],
        "id": "040",
        "properties": {
          "name": "Austria"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1791]], [[1792]], [[1793]], [[1794]], [[1795]], [[1796]], [[1797]], [[1798]], [[1799]], [[1800]], [[1801]], [[1802]], [[1803]], [[1804]], [[1805]], [[1806]], [[1807]], [[1808]], [[1809]], [[1810]], [[1811]], [[1812]], [[1813]], [[1814]], [[1815]], [[1816]], [[1817]], [[1818]], [[1819]], [[1820]], [[1821]], [[1822]], [[1823]], [[1824]], [[1825]], [[1826]], [[1827]], [[1828]], [[1829]], [[1830]], [[1831]], [[1832]]],
        "id": "036",
        "properties": {
          "name": "Australia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1833]], [[1834]], [[1835]]],
        "properties": {
          "name": "Indian Ocean Ter."
        }
      }, {
        "type": "Polygon",
        "arcs": [[1836]],
        "id": "334",
        "properties": {
          "name": "Heard I. and McDonald Is."
        }
      }, {
        "type": "Polygon",
        "arcs": [[1837]],
        "id": "574",
        "properties": {
          "name": "Norfolk Island"
        }
      }, {
        "type": "Polygon",
        "arcs": [[1838]],
        "id": "036",
        "properties": {
          "name": "Ashmore and Cartier Is."
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-306, -1297, -1788, -1048, -1787], [-1791]], [[-1790]]],
        "id": "051",
        "properties": {
          "name": "Armenia"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-61, 1839, -1525, -1757, -717, -1738]], [[-1527, 1840]], [[1841]], [[1842]]],
        "id": "032",
        "properties": {
          "name": "Argentina"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1843]], [[1844]]],
        "id": "028",
        "properties": {
          "name": "Antigua and Barb."
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-1482, 1845, -1488]], [[-6, -855, 1846, -1480]]],
        "id": "024",
        "properties": {
          "name": "Angola"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-410, -1306]],
        "id": "020",
        "properties": {
          "name": "Andorra"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-316, -938, -811, -900, -896, -863, -860, 1847]],
        "id": "012",
        "properties": {
          "name": "Algeria"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-867, -955, -925, -1276, 1848]],
        "id": "008",
        "properties": {
          "name": "Albania"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-54, -361, -1511, -760, -1045, -300]],
        "id": "004",
        "properties": {
          "name": "Afghanistan"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-756, -1510, -1185]],
        "properties": {
          "name": "Siachen Glacier"
        }
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1849]], [[1850]], [[1851], [1852]], [[1853]], [[1854]], [[1855]], [[1856]], [[1857]], [[1858]], [[1859]], [[1860]], [[1861]], [[1862]], [[1863]], [[1864]], [[1865]], [[1866]], [[1867]], [[1868]], [[1869]], [[1870]], [[1871]], [[1872]], [[1873]], [[1874]], [[1875]], [[1876]], [[1877]], [[1878]], [[1879]], [[1880]], [[1881]], [[1882]], [[1883]], [[1884]], [[1885]], [[1886]], [[1887]], [[1888]], [[1889]], [[1890]], [[1891]], [[1892]], [[1893]], [[1894]], [[1895]], [[1896]], [[1897]], [[1898]], [[1899]], [[1900]], [[1901]], [[1902]], [[1903]], [[1904]], [[1905]], [[1906]], [[1907]], [[1908]], [[1909]], [[1910]], [[1911]], [[1912]], [[1913]], [[1914]], [[1915]], [[1916]], [[1917]], [[1918]], [[1919]], [[1920]], [[1921]], [[1922]], [[1923]], [[1924]], [[1925]], [[1926]], [[1927]], [[1928]], [[1929]], [[1930]], [[1931]], [[1932]], [[1933]], [[1934]], [[1935]], [[1936]], [[1937]], [[1938]], [[1939]], [[1940]], [[1941]], [[1942]], [[1943]], [[1944]], [[1945]], [[1946]], [[1947]], [[1948]], [[1949]], [[1950]], [[1951]], [[1952]], [[1953]], [[1954]], [[1955]], [[1956]], [[1957]]],
        "id": "010",
        "properties": {
          "name": "Antarctica"
        }
      }, {
        "type": "Polygon",
        "arcs": [[-1322, 1958]],
        "id": "534",
        "properties": {
          "name": "Sint Maarten"
        }
      }]
    },
    "land": {
      "type": "GeometryCollection",
      "geometries": [{
        "type": "MultiPolygon",
        "arcs": [[[853, 1846, 1480, 1845, 1488, 1299, 1396, 1708, 804, 1757, 325, 1277, 1474, 1279, 1476, 940, 479, 1228, 1221, 494, 1297, 496, 894, 864, 861, 1847, 316, 934, 1399, 1038, 1036, 942, 368, 310, 1294, 547, 281, 639, 283, 640, 1733, 311, 1274, 1848, 867, 1472, 1755, 1460, 473, 1023, 1303, 871, 1304, 411, 646, 413, 1306, 1761, 836, 833, 1284, 1437, 1286, 656, 1290, 658, 637, 929, 634, 930, 943, 1387, 551, 1357, 379, 764, 554, 799, 422, 797, 1511, 1518, 1513, 1517, 1515, 18, 1711, 338, 905, 340, 1712, 1763, 1191, 757, 1045, 1042, 953, 504, 644, 506, 274, 763, 271, 762, 10, 500, 983, 1033, 1400, 398, 1391, 1413, 446, 443, 976, 354, 856, 435], [980, 544, 1788, 1049, 301]], [[13]], [[14]], [[15]], [[16]], [[17]], [[22]], [[23]], [[24]], [[25]], [[26]], [[27]], [[28]], [[29]], [[30]], [[31]], [[388, 1315, 1736, 59, 1839, 1525, 712, 1401, 1493, 746, 1477, 815, 1208, 1398, 1233, 876, 167, 1570, 102, 1615, 104, 1569, 1590, 165, 873, 1758, 1231, 1211, 813, 1478, 748, 1494, 35, 1218]], [[37]], [[38]], [[39]], [[40]], [[41]], [[42]], [[43]], [[44]], [[45]], [[46]], [[47]], [[48]], [[49]], [[50]], [[62]], [[63]], [[64]], [[65]], [[66]], [[67]], [[68]], [[69]], [[70]], [[71]], [[72]], [[73]], [[74]], [[75]], [[76]], [[77]], [[78]], [[79]], [[80]], [[81]], [[82]], [[83]], [[84]], [[85]], [[86]], [[87]], [[88]], [[89]], [[90]], [[91]], [[92]], [[93]], [[94]], [[95]], [[96]], [[97]], [[98]], [[99]], [[100]], [[101]], [[106]], [[107]], [[108]], [[109]], [[110]], [[111]], [[112]], [[113]], [[114]], [[115]], [[116]], [[117]], [[118]], [[119]], [[120]], [[121]], [[122]], [[123]], [[124]], [[125]], [[126]], [[127]], [[128]], [[129]], [[130]], [[131]], [[132]], [[133]], [[134]], [[135]], [[136]], [[137]], [[138]], [[139]], [[140]], [[141]], [[142]], [[143]], [[144]], [[145]], [[146]], [[147]], [[148]], [[149]], [[150]], [[151]], [[152]], [[153]], [[154]], [[155]], [[156]], [[157]], [[158]], [[159]], [[160]], [[161]], [[162]], [[163]], [[169]], [[170]], [[171]], [[172]], [[173]], [[174]], [[175]], [[176]], [[177]], [[178]], [[179]], [[180]], [[181]], [[182]], [[183]], [[184]], [[185]], [[186]], [[187]], [[188]], [[189]], [[190]], [[191]], [[192]], [[193]], [[194]], [[195]], [[196]], [[197]], [[198]], [[199]], [[200]], [[201]], [[202]], [[203]], [[204]], [[205]], [[206]], [[207]], [[208]], [[209]], [[210]], [[211]], [[212]], [[213]], [[214]], [[215]], [[216]], [[217]], [[218]], [[219]], [[220]], [[221]], [[222]], [[223]], [[224]], [[225]], [[226]], [[227]], [[228]], [[229]], [[230]], [[231]], [[232]], [[233]], [[234]], [[235]], [[236]], [[237]], [[238]], [[239]], [[240]], [[241]], [[242]], [[243]], [[244]], [[245]], [[246]], [[247]], [[248]], [[249]], [[250]], [[251]], [[252]], [[253]], [[254]], [[255]], [[256]], [[257]], [[258]], [[259]], [[260]], [[261]], [[262]], [[263]], [[264]], [[265]], [[266]], [[267]], [[269, 1040]], [[270]], [[277]], [[278]], [[279]], [[280]], [[292]], [[298]], [[303]], [[317]], [[318]], [[319]], [[320]], [[321]], [[322]], [[323]], [[328]], [[1082, 330, 1081, 331]], [[333]], [[334]], [[335]], [[342]], [[343]], [[344]], [[345]], [[346]], [[347]], [[348]], [[349]], [[357]], [[362]], [[363]], [[375]], [[376]], [[380]], [[381]], [[382]], [[401]], [[402]], [[403]], [[404]], [[405]], [[406]], [[407]], [[414]], [[415]], [[416]], [[417]], [[418]], [[419]], [[420]], [[423]], [[424]], [[425]], [[426]], [[427]], [[428]], [[429]], [[430]], [[431]], [[432]], [[439]], [[447]], [[448]], [[449]], [[450]], [[451]], [[452]], [[453]], [[454]], [[455]], [[456]], [[457]], [[458]], [[459]], [[460]], [[461]], [[462]], [[463]], [[464]], [[465]], [[466]], [[467]], [[477]], [[481]], [[482]], [[498]], [[499]], [[508]], [[509]], [[510]], [[512]], [[513]], [[514]], [[515]], [[516]], [[517]], [[518]], [[519]], [[522]], [[523]], [[524]], [[525]], [[526]], [[527]], [[528]], [[529]], [[530]], [[531]], [[532]], [[533]], [[534]], [[535]], [[536]], [[537]], [[538]], [[555]], [[556]], [[557]], [[558]], [[559]], [[560]], [[561]], [[562]], [[563]], [[564]], [[565]], [[566]], [[567]], [[568]], [[569]], [[570]], [[571]], [[572]], [[573]], [[574]], [[575]], [[576]], [[577]], [[578]], [[579]], [[580]], [[581]], [[582]], [[583]], [[584]], [[585]], [[586]], [[587]], [[588]], [[589]], [[590]], [[591]], [[592]], [[593]], [[594]], [[595]], [[596]], [[597]], [[598]], [[599]], [[600]], [[601]], [[602]], [[603]], [[604]], [[605]], [[606]], [[607]], [[608]], [[609]], [[610]], [[611]], [[612]], [[613]], [[614]], [[615]], [[616]], [[617]], [[618]], [[619]], [[620]], [[621]], [[622]], [[623]], [[624]], [[625]], [[626]], [[627]], [[628]], [[629]], [[630]], [[631]], [[632]], [[633]], [[645]], [[647]], [[648]], [[649]], [[650]], [[651]], [[652]], [[653]], [[661]], [[662]], [[663]], [[664]], [[665]], [[666]], [[667]], [[668]], [[669]], [[670]], [[671]], [[672]], [[673]], [[674]], [[675]], [[676]], [[677]], [[678]], [[679]], [[680]], [[681]], [[682]], [[683]], [[684]], [[685]], [[686]], [[687]], [[688]], [[689]], [[690]], [[691]], [[692]], [[693]], [[694]], [[695]], [[696]], [[697]], [[698]], [[699]], [[700]], [[701]], [[702]], [[703]], [[704]], [[705]], [[706]], [[707]], [[708]], [[718]], [[719]], [[721, 1086]], [[722]], [[723]], [[724]], [[725]], [[726]], [[727]], [[728]], [[729]], [[730]], [[731]], [[732]], [[733]], [[734]], [[735]], [[736]], [[737]], [[738]], [[739]], [[740]], [[741]], [[742]], [[743]], [[744]], [[749]], [[750]], [[751]], [[752]], [[753]], [[754]], [[761]], [[766]], [[767]], [[768]], [[769]], [[770]], [[771]], [[772]], [[773]], [[774]], [[775]], [[776]], [[777]], [[778]], [[779]], [[780]], [[781]], [[782]], [[783]], [[784]], [[785]], [[786]], [[787]], [[788]], [[789]], [[790]], [[791]], [[792]], [[793]], [[794]], [[795]], [[796]], [[800]], [[801]], [[817]], [[818]], [[819]], [[820]], [[821]], [[822]], [[823]], [[824]], [[825]], [[826]], [[827]], [[828]], [[829]], [[830]], [[831]], [[837]], [[838]], [[839]], [[840]], [[841]], [[842]], [[843]], [[844]], [[845]], [[846]], [[847]], [[848]], [[851]], [[877]], [[878]], [[879]], [[880]], [[881]], [[882]], [[883]], [[884]], [[885]], [[886]], [[887]], [[888]], [[889]], [[890]], [[891]], [[892]], [[893]], [[897]], [[898]], [[903]], [[904]], [[907, 1735, 1734, 910, 1077]], [[911]], [[912]], [[913]], [[914]], [[915]], [[916]], [[918, 1153]], [[919]], [[920]], [[921]], [[951]], [[955]], [[956]], [[957]], [[958]], [[959]], [[960]], [[961]], [[962]], [[963]], [[964]], [[965]], [[966]], [[967]], [[968]], [[969]], [[970]], [[971]], [[972]], [[973]], [[974]], [[977]], [[978]], [[979]], [[987]], [[988]], [[989]], [[990]], [[991]], [[992]], [[993]], [[994]], [[995]], [[996]], [[997]], [[998]], [[999]], [[1000]], [[1001]], [[1002]], [[1003]], [[1004]], [[1005]], [[1006]], [[1007]], [[1008]], [[1009]], [[1010]], [[1011]], [[1012]], [[1013]], [[1014]], [[1015]], [[1016]], [[1017]], [[1018]], [[1019]], [[1020]], [[1021]], [[1025]], [[1026]], [[1027]], [[1028]], [[1029]], [[1030]], [[1031]], [[1039]], [[1043]], [[1050]], [[1051]], [[1052]], [[1053]], [[1054]], [[1055]], [[1056]], [[1057]], [[1058]], [[1059]], [[1060]], [[1061]], [[1062]], [[1063]], [[1064]], [[1065]], [[1066]], [[1067]], [[1068]], [[1069]], [[1070]], [[1071]], [[1072]], [[1073]], [[1074]], [[1075]], [[1076]], [[1078]], [[1079]], [[1080]], [[1083]], [[1084]], [[1085]], [[1087]], [[1088]], [[1089]], [[1090]], [[1091]], [[1092]], [[1093]], [[1094]], [[1095]], [[1096]], [[1097]], [[1098]], [[1099]], [[1100]], [[1101]], [[1102]], [[1103]], [[1104]], [[1105]], [[1106]], [[1107]], [[1108]], [[1109]], [[1110]], [[1111]], [[1112]], [[1113]], [[1114]], [[1115]], [[1116]], [[1117]], [[1118]], [[1119]], [[1120]], [[1121]], [[1122]], [[1123]], [[1124]], [[1125]], [[1126]], [[1127]], [[1128]], [[1129]], [[1130]], [[1131]], [[1132]], [[1133]], [[1134]], [[1135]], [[1136]], [[1137]], [[1138]], [[1139]], [[1140]], [[1141]], [[1142]], [[1143]], [[1144]], [[1145]], [[1146]], [[1147]], [[1148]], [[1149]], [[1150]], [[1151]], [[1152]], [[1154]], [[1155]], [[1156]], [[1157]], [[1158]], [[1159]], [[1160]], [[1161]], [[1162]], [[1163]], [[1164]], [[1165]], [[1166]], [[1167]], [[1168]], [[1169]], [[1170]], [[1171]], [[1172]], [[1173]], [[1174]], [[1175]], [[1176]], [[1177]], [[1178]], [[1179]], [[1180]], [[1181]], [[1182]], [[1183]], [[1192]], [[1193]], [[1194]], [[1195]], [[1196]], [[1197]], [[1198]], [[1199]], [[1200]], [[1201]], [[1202]], [[1203]], [[1204]], [[1205]], [[1212]], [[1213]], [[1215, 1411]], [[1216]], [[1217]], [[1222]], [[1223]], [[1224]], [[1225]], [[1226]], [[1227]], [[1234]], [[1235]], [[1236]], [[1237]], [[1238]], [[1239]], [[1240]], [[1241]], [[1242]], [[1243]], [[1244]], [[1245]], [[1246]], [[1247]], [[1248]], [[1249]], [[1250]], [[1251]], [[1252]], [[1253]], [[1254]], [[1255]], [[1256]], [[1257]], [[1258]], [[1259]], [[1260]], [[1261]], [[1262]], [[1263]], [[1264]], [[1265]], [[1266]], [[1267]], [[1268]], [[1269]], [[1270]], [[1271]], [[1272]], [[1273]], [[1289]], [[1291]], [[1292]], [[1293]], [[1302]], [[1308]], [[1309]], [[1310]], [[1311]], [[1312]], [[1313]], [[1314]], [[1317]], [[1318]], [[1319]], [[1320]], [[1322, 1958]], [[1323]], [[1324]], [[1325]], [[1326]], [[1327]], [[1328]], [[1329]], [[1330]], [[1331]], [[1332]], [[1333]], [[1334]], [[1335]], [[1336]], [[1337]], [[1338]], [[1339]], [[1340]], [[1341]], [[1342]], [[1343]], [[1344]], [[1345]], [[1346]], [[1347]], [[1348]], [[1349]], [[1350]], [[1351]], [[1352]], [[1353]], [[1354]], [[1355]], [[1356]], [[1358]], [[1359]], [[1360]], [[1361]], [[1362]], [[1363]], [[1364]], [[1365]], [[1366]], [[1367]], [[1368]], [[1369]], [[1370]], [[1371]], [[1372]], [[1373]], [[1374]], [[1375]], [[1376]], [[1377]], [[1378]], [[1379]], [[1380]], [[1381]], [[1382]], [[1383]], [[1384]], [[1388]], [[1389]], [[1390]], [[1393]], [[1394]], [[1395]], [[1403]], [[1404]], [[1405]], [[1406]], [[1407]], [[1408]], [[1409]], [[1410]], [[1412]], [[1414]], [[1415]], [[1416]], [[1417]], [[1418]], [[1419]], [[1420]], [[1421]], [[1422]], [[1423]], [[1424]], [[1425]], [[1426]], [[1427]], [[1428]], [[1429]], [[1430]], [[1431]], [[1432]], [[1433]], [[1434]], [[1435]], [[1436]], [[1438]], [[1439]], [[1440]], [[1441]], [[1442]], [[1443]], [[1444]], [[1445]], [[1446]], [[1447]], [[1450, 1451]], [[1452]], [[1453]], [[1454]], [[1455]], [[1456]], [[1457]], [[1458]], [[1461]], [[1462]], [[1463]], [[1464]], [[1465]], [[1466]], [[1467]], [[1468]], [[1469]], [[1470]], [[1471]], [[1489]], [[1490]], [[1491]], [[1495]], [[1496]], [[1497]], [[1498]], [[1499]], [[1500]], [[1501]], [[1502]], [[1503]], [[1504]], [[1505]], [[1506]], [[1516]], [[1519]], [[1520]], [[1521]], [[1522]], [[1527, 1840]], [[1528]], [[1529]], [[1530]], [[1531]], [[1532]], [[1533]], [[1534]], [[1535]], [[1536]], [[1537]], [[1538]], [[1539]], [[1540]], [[1541]], [[1542]], [[1543]], [[1544]], [[1545]], [[1546]], [[1547]], [[1548]], [[1549]], [[1550]], [[1551]], [[1552]], [[1553]], [[1554]], [[1558]], [[1559]], [[1560]], [[1561]], [[1562]], [[1563]], [[1564]], [[1565]], [[1566]], [[1567]], [[1568]], [[1571]], [[1572]], [[1573]], [[1574]], [[1575]], [[1576]], [[1577]], [[1578]], [[1579]], [[1580]], [[1581]], [[1582]], [[1583]], [[1584]], [[1585]], [[1586]], [[1587]], [[1588]], [[1589]], [[1591]], [[1592]], [[1593]], [[1594]], [[1595]], [[1596]], [[1597]], [[1598]], [[1599]], [[1600]], [[1601]], [[1602]], [[1603]], [[1604]], [[1605]], [[1606]], [[1607]], [[1608]], [[1609]], [[1610]], [[1611]], [[1612]], [[1613]], [[1614]], [[1616]], [[1617]], [[1618]], [[1619]], [[1620]], [[1621]], [[1622]], [[1623]], [[1624]], [[1625]], [[1626]], [[1627]], [[1628]], [[1629]], [[1630]], [[1631]], [[1632]], [[1633]], [[1634]], [[1635]], [[1636]], [[1637]], [[1638]], [[1639]], [[1640]], [[1641]], [[1642]], [[1643]], [[1644]], [[1645]], [[1646]], [[1647]], [[1648]], [[1649]], [[1650]], [[1651]], [[1652]], [[1653]], [[1654]], [[1655]], [[1656]], [[1657]], [[1658]], [[1659]], [[1660]], [[1661]], [[1662]], [[1663]], [[1664]], [[1665]], [[1666]], [[1667]], [[1668]], [[1669]], [[1670]], [[1671]], [[1672]], [[1673]], [[1674]], [[1675]], [[1676]], [[1677]], [[1678]], [[1679]], [[1680]], [[1681]], [[1682]], [[1683]], [[1684]], [[1685]], [[1686]], [[1687]], [[1688]], [[1689]], [[1690]], [[1691]], [[1692]], [[1693]], [[1694]], [[1695]], [[1696]], [[1697]], [[1698]], [[1699]], [[1700]], [[1701]], [[1702]], [[1703]], [[1704]], [[1705]], [[1706]], [[1707]], [[1709]], [[1710]], [[1714]], [[1715]], [[1716]], [[1717]], [[1718]], [[1719]], [[1720]], [[1721]], [[1722]], [[1723]], [[1724]], [[1725]], [[1726]], [[1727]], [[1728]], [[1729]], [[1730]], [[1731]], [[1739]], [[1740]], [[1741]], [[1742]], [[1743]], [[1744]], [[1745]], [[1746]], [[1747]], [[1748]], [[1749]], [[1750]], [[1751]], [[1752]], [[1753]], [[1754]], [[1759]], [[1760]], [[1762]], [[1764]], [[1765]], [[1766]], [[1767]], [[1768]], [[1769]], [[1770]], [[1771]], [[1772]], [[1773]], [[1774]], [[1775]], [[1776]], [[1777]], [[1778]], [[1779]], [[1780]], [[1781]], [[1782]], [[1783]], [[1784]], [[1785]], [[1791]], [[1792]], [[1793]], [[1794]], [[1795]], [[1796]], [[1797]], [[1798]], [[1799]], [[1800]], [[1801]], [[1802]], [[1803]], [[1804]], [[1805]], [[1806]], [[1807]], [[1808]], [[1809]], [[1810]], [[1811]], [[1812]], [[1813]], [[1814]], [[1815]], [[1816]], [[1817]], [[1818]], [[1819]], [[1820]], [[1821]], [[1822]], [[1823]], [[1824]], [[1825]], [[1826]], [[1827]], [[1828]], [[1829]], [[1830]], [[1831]], [[1832]], [[1833]], [[1834]], [[1835]], [[1836]], [[1837]], [[1838]], [[1841]], [[1842]], [[1843]], [[1844]], [[1849]], [[1850]], [[1852], [1851]], [[1853]], [[1854]], [[1855]], [[1856]], [[1857]], [[1858]], [[1859]], [[1860]], [[1861]], [[1862]], [[1863]], [[1864]], [[1865]], [[1866]], [[1867]], [[1868]], [[1869]], [[1870]], [[1871]], [[1872]], [[1873]], [[1874]], [[1875]], [[1876]], [[1877]], [[1878]], [[1879]], [[1880]], [[1881]], [[1882]], [[1883]], [[1884]], [[1885]], [[1886]], [[1887]], [[1888]], [[1889]], [[1890]], [[1891]], [[1892]], [[1893]], [[1894]], [[1895]], [[1896]], [[1897]], [[1898]], [[1899]], [[1900]], [[1901]], [[1902]], [[1903]], [[1904]], [[1905]], [[1906]], [[1907]], [[1908]], [[1909]], [[1910]], [[1911]], [[1912]], [[1913]], [[1914]], [[1915]], [[1916]], [[1917]], [[1918]], [[1919]], [[1920]], [[1921]], [[1922]], [[1923]], [[1924]], [[1925]], [[1926]], [[1927]], [[1928]], [[1929]], [[1930]], [[1931]], [[1932]], [[1933]], [[1934]], [[1935]], [[1936]], [[1937]], [[1938]], [[1939]], [[1940]], [[1941]], [[1942]], [[1943]], [[1944]], [[1945]], [[1946]], [[1947]], [[1948]], [[1949]], [[1950]], [[1951]], [[1952]], [[1953]], [[1954]], [[1955]], [[1956]], [[1957]]]
      }]
    }
  },
  "arcs": [[[58690, 38938], [-25, 33], [-34, 22], [-44, 9], [-57, -4], [-69, -18], [-75, 22], [-80, 62], [-67, 22], [-79, -27], [-4, -1]], [[58156, 39058], [-13, 21], [-22, 45], [-36, 8], [-10, 11], [-8, 16], [-6, 22], [-2, 23], [6, 75], [-3, 8], [-10, 9], [-19, 9], [-48, 33], [-60, 33], [-97, 35], [-38, 10], [-9, 11], [-11, 27], [-19, 85], [-17, 56], [-42, 87], [-7, 27], [2, 69], [4, 55], [4, 47], [-2, 45], [-1, 54], [2, 37], [-6, 16], [-15, 11], [-43, 5], [-53, -2], [-1, 56], [-5, 86], [-10, 50], [-12, 26], [-24, 27], [-49, 37], [-66, 56], [-57, 83], [-64, 103], [-21, 18], [-24, 97], [-36, 166], [2, 55], [-5, 27], [-36, 82], [-7, 42], [-7, 43], [-56, 120], [-19, 52], [-15, 67], [-14, 53], [-13, 22], [-16, 36], [-11, 42], [-5, 31], [4, 41], [6, 29]], [[57016, 41593], [53, -30], [30, -2], [23, 14], [28, -19], [34, -54], [37, -11], [39, 34], [54, -10], [68, -54], [56, -11], [67, 48], [60, 132], [56, 125], [55, 144], [34, 116], [48, 95], [65, 73], [65, 61], [100, 76], [21, 62], [6, 68], [0, 94], [5, 61], [11, 28], [16, 22], [22, 28], [66, 72], [55, 46], [68, 30], [73, 0], [71, 0], [41, 1]], [[58443, 42832], [0, -91], [3, -102], [8, -10], [54, -2], [86, -8], [82, -7], [53, -74], [18, -15], [55, -20], [70, -124], [84, -11], [58, -39], [51, -42], [29, -51], [19, -12], [26, -4], [13, -4], [-3, -37], [-17, -62], [2, -89], [24, -123], [3, -107], [-8, -189], [1, -183], [2, -65], [4, -43], [5, -24], [-1, -27], [-14, -77], [-11, -81], [-1, -32], [-4, -23], [-8, -20], [-37, -37], [-6, -23], [0, -42], [4, -35], [14, -13], [17, -20], [6, -26], [0, -28], [-5, -51], [-15, -85], [15, -98], [17, -63], [22, -73], [10, -45], [-1, -33], [-3, -31], [-34, -134], [-25, -83], [-30, -89], [-40, -56], [-10, -27], [-4, -31], [1, -67], [-1, -69], [-34, -108], [21, -92], [-5, -9], [-12, -13], [-49, -104], [-49, -105], [-36, -77], [-42, -88], [-46, -98], [-39, -83], [-40, -60]], [[57016, 41593], [-47, 92], [-25, 38], [-19, 14], [-55, 15], [-128, 21], [-13, -5], [-53, -18], [-66, -23], [-56, -22], [-60, -24]], [[56494, 41681], [-55, 96], [-63, 108], [-65, 122], [-49, 95], [-24, 55], [-43, 72], [-31, 35], [-12, 18], [-30, 193], [-17, 177], [0, 133], [0, 185], [0, 185], [0, 185], [0, 184], [0, 185], [0, 185], [0, 185], [0, 185], [0, 90], [64, 0], [72, 0], [76, 0], [83, 0], [82, 0], [83, 0], [58, 0], [15, 1], [18, 6], [1, 18], [-24, 91], [2, 32], [6, 62], [10, 53], [13, 70], [1, 41], [-10, 134], [1, 75], [3, 78], [3, 74], [-4, 51], [4, 28], [8, 40], [4, 45], [5, 20], [-1, 18], [-5, 33], [-4, 76], [-6, 105], [-6, 75]], [[56657, 45580], [10, -4], [21, -7], [10, -37], [6, -41], [14, -2], [37, -24], [13, -34], [8, -72], [-5, -37], [-12, -30], [12, -26], [25, -18], [14, 6], [42, 49], [16, 9], [22, 9], [20, 13], [55, 22], [30, 10], [17, 18], [12, 0], [9, -14], [-8, -51], [-3, -46], [11, -86], [8, -40], [18, -29], [13, -15], [14, -31], [30, 6], [65, -44], [20, -20], [28, -21], [19, -7], [68, -15], [25, -11], [46, -14], [37, -2], [27, 6], [18, 13], [11, 14], [5, 11], [8, 43], [14, 93], [5, 27], [14, 13], [18, 9], [10, -15], [12, -103], [51, -93], [18, -78], [13, -66], [11, -19], [19, -22], [32, -9], [28, -2], [58, -48], [47, -38], [34, -27], [15, -21], [11, -34], [6, -27], [10, -68], [11, -54], [18, -11], [16, -4], [16, -37], [12, -32], [24, -80], [17, -54], [6, -54], [20, -35], [27, -15], [25, -2], [14, 16], [36, 27], [28, 32], [20, 11], [12, -7], [9, -22], [5, -43], [1, -24], [20, -22], [14, 9], [6, 26], [0, 13], [0, 117], [0, 101], [0, 95], [0, 116], [0, 101], [0, 83], [0, 87], [-13, -5], [-16, -20], [-37, -2], [-14, -15], [-4, -23], [2, -29], [1, -39], [-5, -19], [-16, -7], [-24, 15], [-42, 20], [-35, 12], [-25, 53], [-35, 79], [-22, 40], [-54, 82], [-9, 17], [-17, 38], [-14, 66], [-7, 43], [-6, 33], [-8, 48], [13, 74], [19, 141], [13, 102], [7, 75], [27, 77], [2, 68], [-11, 88], [3, 49], [1, 123], [2, 104], [0, 50], [-7, 88], [-18, 98], [-39, 135], [0, 29], [24, 32], [36, 56], [18, 33], [22, 47], [10, 24], [21, 61], [13, 49], [5, 63], [-10, 61], [20, 12], [68, 21], [74, 23], [79, 25], [79, 25], [77, 25], [69, 22], [48, 15]], [[58541, 47123], [8, -42], [14, -69], [18, -51], [21, -44], [18, -27], [12, -8], [76, 3], [27, -27], [24, -35], [6, -53], [16, -33], [17, -26], [7, -3], [12, 6], [21, 1], [19, -12], [9, -11], [1, -45], [5, -20], [26, -7], [26, -4], [26, -30], [27, -5], [32, -13], [15, -32], [33, -34], [41, -29], [30, -34], [16, -15]], [[59144, 46424], [1, -16], [7, -29], [8, -20], [1, -31], [4, -28], [12, -7], [9, -2], [9, 20], [12, 0], [13, -13], [5, -33], [11, -44], [16, -30], [12, -29], [-4, -53], [-7, -49], [22, -47], [30, -46], [8, -20], [2, -67], [5, -23], [20, -56], [10, -37], [-1, -22], [-54, -111], [-17, -11], [-16, -6], [-15, -23], [-8, -23], [3, -13], [6, -38], [12, -60], [12, -42], [-10, -52], [-21, -89], [-10, -8], [-2, -68], [7, -24], [10, -20], [4, -46], [1, -63], [-1, -50], [-14, -130], [25, -112], [8, -13], [34, 0], [5, -10], [-8, -32], [-14, -33], [-9, -17], [-43, -38], [-62, -43], [-13, -41], [-8, -59], [7, -35], [8, -20], [-3, -52], [-5, -54], [2, -43], [-3, -38], [-8, -19], [-11, -57], [-13, -58], [-11, -26], [-15, -28], [-24, -23], [0, -11], [28, -27], [7, -18], [2, -13], [-6, -12], [-5, -17], [13, -18], [15, -15], [15, -38], [13, -54], [4, -18], [3, -8], [5, -1], [9, 8], [17, 30], [12, 10], [15, -42]], [[59222, 43770], [-60, -41], [-31, -21], [-89, -62], [-78, -54], [-20, -10], [-41, -27], [-20, -16], [-70, -47], [-29, -23], [-24, -23], [-58, -35], [-55, -33], [-60, -34], [-67, -38], [-38, -27], [-25, -24], [-60, -47], [-3, -12], [1, -32], [8, -67], [15, -61], [12, -35], [8, -90], [5, -79]], [[64745, 61433], [-140, -103], [-37, -45], [-33, -57], [-25, -70], [-18, -124], [13, -113], [-1, -60], [-36, -40], [-34, -29], [-37, -44], [-23, -11], [-19, -35], [-21, -25], [-78, -63], [-86, -50], [-135, -59], [-53, -64], [-47, -44], [-73, -13], [-99, -61], [-55, -48], [-69, -80], [-15, -25], [-12, -58], [-21, -51], [-42, -83], [-31, -42], [-20, -2], [-41, -23], [-47, -5], [-80, 29], [-21, -20], [-17, -33], [-61, -56], [-63, -114], [-46, -30], [-74, -36], [-52, -47], [-35, -19], [-44, -10], [-83, 5], [-79, -17], [-73, -32], [-34, -60], [-39, -96], [-64, -40], [-15, -34], [-20, -71], [-41, -18], [-38, -12], [-38, 31], [-72, -85], [-27, -15], [-41, -3], [-30, -18], [-21, 5], [-26, 34], [-56, 40], [-41, -26], [-3, 80], [-68, 247], [14, 215], [0, 30], [-13, 96], [-40, 87], [1, 111], [-14, 80], [-10, 81], [3, 22], [1, 20], [-21, 125], [-7, 26], [-2, 26], [6, 20], [0, 24], [-11, 38], [-11, 74], [-55, 57], [11, 54], [11, -19], [14, -16], [3, 35], [0, 26], [-23, 163], [34, 218], [-11, 195]], [[61888, 61273], [52, 79], [13, 24], [8, 21], [12, 45], [17, 14], [6, 47], [-1, 24], [-11, 20], [-8, 55], [3, 69], [3, 29], [5, 53], [18, 20], [5, 16], [-14, 33], [1, 20], [31, 56], [12, 17], [20, 18], [16, -1], [18, -9], [16, -16], [15, -29], [17, -32], [25, -13], [17, 4], [15, -15], [11, 8], [14, 17], [21, -1], [20, 19], [55, 9], [53, -6], [56, 16], [56, -1], [55, -2], [13, -2], [12, -10], [47, -50], [36, -10], [72, -13], [77, -15], [66, -13], [57, 12], [47, 10], [12, -2], [14, -31], [29, -76], [26, -73], [47, -3], [30, 27], [33, 38], [20, 30], [23, 117], [15, 77], [34, 85], [29, 72], [39, 95], [21, 52], [42, 104], [39, 40], [77, 78], [76, 77], [49, 49], [42, 23], [70, 20], [83, 23], [82, 23], [88, 24], [98, 28], [67, 18], [86, 24], [71, 20], [63, 18], [66, 18]], [[64438, 62785], [12, -57], [12, -58], [12, -58], [13, -57], [12, -58], [12, -57], [13, -58], [12, -57], [12, -58], [13, -57], [12, -58], [12, -57], [12, -58], [13, -57], [12, -58], [12, -58], [12, -56], [20, -18], [12, -54], [17, -75], [17, -76], [17, -76], [16, -76]], [[61830, 60658], [-9, -13], [-2, 23], [5, 50], [9, 14], [7, -37], [-4, -20], [-6, -17]], [[61876, 59737], [-18, -18], [12, 46], [13, 9], [4, -2], [-11, -35]], [[61885, 59891], [-4, -13], [-5, 3], [-17, 31], [19, 34], [10, -32], [-3, -23]], [[64934, 59122], [17, -7], [26, 20], [74, 3], [90, -65], [-17, -16], [-10, -24], [-39, -21], [-40, -49], [-114, -24], [-33, 13], [-28, 48], [-51, 62], [20, 40], [5, 18], [7, 17], [29, 30], [29, -4], [35, -41]], [[78906, 57828], [5, -29], [-2, -66], [-11, -66], [4, -29], [-9, -18], [-18, 123], [-24, 53], [-5, 21], [14, -2], [24, 34], [12, 1], [10, -22]], [[79992, 64232], [-13, -5], [-33, -1], [-28, -53], [-20, -22], [-30, -18], [-33, -30], [-9, -52], [-1, -38], [-5, -42], [-53, -61], [-15, 6], [-10, 23], [-15, -5], [-11, -11], [-12, 1], [-14, -13], [-18, 4], [-17, 19], [-10, 5], [-12, 1], [-2, -23], [17, -89], [5, -41], [-56, -120], [6, -78], [-15, -59], [-34, -48], [-64, -123], [-29, -3], [-22, -28], [-47, -202], [-1, -70], [-7, -50], [2, -49], [-21, -96], [-22, -41], [-4, -52], [30, -108], [4, -19], [17, -58], [9, -41], [14, -41], [49, -107], [22, -33], [26, -23], [48, -96], [24, -62], [-11, -41], [6, -89], [-35, 26], [5, -11], [40, -48], [61, -170], [53, -84], [54, -96], [17, -91], [48, -60], [54, -87], [-2, -19], [14, -24], [37, -46], [22, -49], [8, -46], [13, -7], [16, 11], [15, 4], [10, -3], [17, -51], [22, -46], [11, -41], [9, 5], [7, -6], [2, -35], [4, -23], [30, -67], [14, -63], [37, -103], [26, -58], [20, -33], [21, -28], [22, -114], [11, -103], [23, -114], [18, -50], [0, -95], [14, -97], [15, -65], [5, -67], [4, -33], [6, -25], [16, -114], [-4, -52], [-11, 51], [1, -152], [10, -80], [-5, -99], [11, -35], [19, -111], [13, -40], [-1, -137], [7, -69], [-18, 41], [-13, 47], [-17, -25], [-15, -36], [24, -147], [-28, 14], [3, -197], [11, -46], [1, -22], [-3, -27], [-8, 29], [-1, 30], [-5, -6], [1, -16], [-10, -35], [-2, -43], [9, -36], [2, -28], [-7, -35], [-11, -37], [-26, -5], [-6, -71], [-9, -76], [-46, -12], [-33, -67], [-42, -25], [-37, -67], [-40, -61], [-27, -8], [-22, -13], [-26, -102], [-44, -12], [-78, -83], [-26, -40], [-24, -16], [-34, -35], [-7, 13], [-12, 30], [-29, 15], [-15, 33], [-4, 43], [-4, 17], [-6, -24], [-5, -102], [-5, -23], [-13, -10], [-25, 29], [-23, 59], [-34, -41], [10, -5], [16, 3], [12, -10], [10, -39], [-1, -22], [-5, -25], [-32, -4], [-42, 9], [-7, -3], [38, -39], [35, -22], [16, -24], [0, -20], [-20, -32], [-15, -40], [-1, -25], [0, -27], [-17, -24], [-11, 5], [-30, 41], [-86, 163], [13, -46], [90, -185], [15, -61], [3, -43], [-10, -21], [-15, -26], [-29, -2], [-49, 69], [-77, 165], [-26, 22], [78, -188], [13, -46], [13, -53], [-4, -31], [-7, -30], [-185, -174], [-28, -76], [-22, -93], [-36, -51], [-21, -48], [-62, -26], [-34, 8], [35, 86], [-22, 32], [-1, 221], [9, 242], [16, 121], [23, 30], [30, 19], [0, 25], [-3, 30], [-15, 41], [-18, 19], [-25, 8], [-20, 51], [-15, -2], [-24, -17], [-14, 22], [-5, 34], [-22, 42], [-24, 41]], [[79007, 57840], [11, 6], [13, 24], [14, 30], [35, 4], [35, -1], [9, 8], [14, 32], [23, 41], [18, 23], [4, 19], [-7, 43], [-4, 45], [7, 14], [31, -8], [35, -21], [8, -9], [20, 55], [6, 6], [13, 0], [34, 10], [34, 15], [16, -3], [15, -37], [12, -36], [6, -2], [17, 15], [15, -19], [30, -32], [18, -1], [-9, 73], [10, 52], [-2, 14], [-17, 24], [-57, 96], [-10, 29], [1, 45], [-2, 66], [-5, 41], [1, 24], [3, 20], [11, 8], [10, 2], [8, 17], [14, 44], [27, -4], [38, -25], [28, -15], [17, 3], [3, 6], [0, 23], [2, 100], [-1, 21], [23, 10], [37, 2], [19, 6], [18, 42], [46, 15], [34, 56], [30, 59], [14, 15], [19, 10], [14, -1], [18, -34], [14, 20], [17, 40], [9, 39], [5, 62], [-4, 96], [-8, 74], [-9, 57], [-2, 56], [20, 112], [17, 122], [-4, 49], [-18, 76], [-18, 93], [-20, 102], [-8, 15], [-5, 29], [-4, 33], [9, 104], [1, 36], [23, 47], [12, 55], [12, 60], [-4, 31]], [[79866, 60313], [-2, 65], [3, 31], [-5, 26], [-7, 37], [4, 24], [17, 20], [9, 35], [12, 42], [6, 37], [-9, 32], [-16, 47], [-29, 43], [-33, 54], [-17, 34], [-13, 34], [-12, 40], [-6, 31], [6, 21], [48, 48], [8, 17], [5, 27], [-3, 26], [-13, 14], [-15, 10], [-22, 30], [-41, 82], [-19, 19], [-20, 24], [-10, 25], [-12, 68], [-5, 6], [-11, -20], [-15, -22], [-12, 4], [-11, 19], [-5, 26], [-12, 36], [-14, 29], [-3, 98], [-2, 32], [-7, 45], [-10, 16], [-11, 12], [-26, 81], [-17, 42], [-74, 114], [-9, 19], [-19, 47], [-35, 66], [-24, 54], [-18, 56], [-8, 48], [-3, 38], [-19, 54], [-17, 44], [-16, 15], [-18, 6], [-17, 26], [-31, 59], [-13, 39], [-8, 26], [0, 26], [7, 44], [9, 26], [1, 19], [-9, 16], [-34, 29], [-77, 43], [-29, 33], [-26, 42], [-20, 29], [-94, 122], [-28, 20], [-25, 22], [-7, 21], [1, 20], [10, 15], [27, 32], [10, 35], [-4, 47], [-10, 48], [5, 16], [9, 2], [17, 2], [37, 2], [80, -43], [11, 5], [44, 78], [16, 47], [4, 39], [8, 25], [23, 41], [0, 37], [-11, 50], [-11, 19], [-10, 8], [-32, -6], [-6, 11], [-4, 37], [-2, 23], [-10, 26], [-34, 23], [-29, 6], [-7, 10], [11, 25], [20, 25], [15, 15], [12, 26], [2, 27], [-15, 24], [-19, 26], [-31, 50], [-43, 54], [-26, 18], [-13, -2], [-48, -46], [-25, -30], [-21, -54], [-22, -11], [-23, 23], [-25, 25], [-70, 35], [-30, 29], [-61, 179], [-9, 37], [6, 41], [4, 59], [6, 38], [11, 37], [3, 32], [-3, 32], [-9, 18], [-11, 5], [-9, 8], [-8, 41], [-5, -5], [-7, -51], [-9, -18], [-12, -9], [-10, 8], [-5, 20], [-3, 35], [-6, 46], [-8, 30], [-26, 31], [-12, 40], [-40, 87], [-33, 61], [-15, 55]], [[78368, 64734], [13, 20], [17, 30], [19, 46], [20, 58], [8, 35], [6, 15], [12, 10], [13, -6], [23, -23], [34, -30], [30, -35], [12, -36], [17, -34], [13, -10], [7, 2], [19, 26], [17, 26], [1, 29], [15, 26], [20, 43], [10, 30], [7, 3], [8, -9], [32, -90], [6, -6], [9, 14], [13, 70], [14, 28], [4, -7], [77, -134], [8, 2], [8, 6], [6, 20], [6, 46], [11, 50], [25, 27], [19, 6], [7, -24], [17, -32], [20, -5], [43, 58], [15, 9], [15, -1], [15, 2], [15, 22], [15, 29], [5, 58], [4, 51], [10, 21], [13, 14], [24, 19], [53, 50], [14, 24], [10, 13], [21, -21], [25, -42], [15, -31], [10, -34], [5, -29], [40, -24], [25, -35], [17, -27], [17, 1], [16, 7], [11, 22], [19, 0], [22, -3], [10, -8], [18, -50], [8, -7], [17, 4], [31, 17], [25, 9], [23, -20], [43, -55], [-12, -39], [-9, -42], [-19, -30], [-15, -7], [-8, -42], [-4, -61], [4, -31], [11, -10], [12, -20], [5, -27], [2, -61], [-1, -68], [2, -23], [9, 4], [9, 9], [18, -11], [23, -18], [14, -18], [12, 3], [10, -18], [4, -34], [12, -23], [32, -45], [26, -3], [22, -59], [23, 19], [10, -25], [47, 9], [33, 24], [12, -6], [30, -49], [18, -30]], [[79615, 56844], [-8, -1], [-6, 12], [26, 37], [-3, -25], [1, -12], [-10, -11]], [[79768, 57832], [-23, -35], [-2, 29], [20, 19], [7, 15], [6, 0], [-8, -28]], [[79684, 63833], [-3, -11], [-14, 27], [-10, 12], [8, 37], [16, -40], [3, -25]], [[79889, 64064], [-40, -72], [-15, 1], [13, 82], [7, 19], [24, -28], [11, -2]], [[79866, 63897], [-15, -15], [-19, 2], [22, 28], [12, 35], [9, 12], [-1, -30], [-8, -32]], [[79730, 63794], [-11, -3], [-22, 47], [11, 25], [26, -18], [5, -11], [0, -10], [-6, -22], [-3, -8]], [[33105, 57107], [-33, -19], [0, 15], [9, 27], [17, 7], [7, 10], [11, 6], [6, -1], [7, -8], [-16, -15], [-8, -22]], [[32264, 58254], [9, -75], [-3, -14], [-25, -51], [-21, -3], [-17, 1], [-13, 10], [-17, 33], [-16, -10], [-40, 12], [-11, 11], [15, 41], [28, 16], [10, 4], [8, -25], [20, -22], [23, -2], [6, 38], [32, 57], [12, -21]], [[31885, 58125], [-15, -13], [-27, 13], [-14, 18], [9, 21], [22, 0], [21, -25], [4, -14]], [[33056, 56951], [-17, -12], [-3, 58], [5, 15], [30, 47], [8, 8], [6, -9], [-2, -13], [14, -21], [-3, -26], [-16, -29], [-22, -18]], [[33328, 56767], [52, -140], [1, -15], [-6, -18], [-32, -33], [-7, -17], [-12, -62], [-40, -35], [-28, -42], [-19, -38], [-10, -15], [-37, -9], [-12, -23], [-14, -72], [-11, -29], [-20, -35], [0, -22], [27, -78], [5, -24], [-9, -37], [1, -27], [14, -31], [17, -7], [16, 13], [20, -1], [13, -9], [6, -9], [1, -24], [-9, -51], [-12, -34], [-53, -50], [-23, -30], [-13, -22], [-29, 12], [-15, -1], [-11, -17], [-7, -14], [-19, -4], [-27, -8], [-11, -10], [-9, -25], [-7, -36], [6, -43], [8, -39], [0, -35], [6, -99], [-8, -23], [-18, -26], [-22, -46], [-24, -63], [4, -19], [58, -134], [59, -136], [59, -136]], [[33127, 54839], [8, -6], [11, -16], [11, -47], [8, -50], [0, -26], [-6, -33], [-15, -38], [-17, -30], [-25, -26], [-21, -25], [-16, -64], [-11, -23], [-9, -9], [-18, -9], [-30, 2], [-20, 6], [-24, -49], [-31, -18], [-21, -65], [-74, -53], [-72, -40], [-20, -17], [-72, 34], [-17, -10], [-20, -32], [-18, -24], [-15, -1], [-13, -13], [-8, -45], [-7, -154], [-26, -45], [-31, 0], [-21, 53], [-25, 40], [-44, 96], [-12, 12], [-12, 0], [-41, -28], [-19, 12], [-16, 15], [-26, -5], [-46, -1], [-30, -1], [-14, 26], [-14, 53], [-9, 19], [-11, 16], [-17, 8], [-75, -1], [-14, 0], [-11, 11], [-14, 45], [-16, 22], [-18, 1], [-8, -25], [32, -83], [9, -44], [28, -65], [81, -137], [15, -43], [-1, -55], [-1, -85], [3, -80], [21, -115], [29, -118], [8, -74], [-5, -55], [-6, -30], [1, -13], [6, -12], [28, -17], [59, -10], [35, 0], [55, -13], [4, -41], [-6, -68], [-10, -39], [-9, -11], [-30, -9], [-31, -42], [-45, -41], [-26, -5], [-10, -8], [-9, -13], [-8, -15], [-9, -77], [-13, -88], [-25, -51], [-28, -43], [-28, -5], [-22, 3], [-11, -12], [-16, -35], [-23, -44], [-18, -23], [-24, 2], [-26, -22], [-32, -35], [-22, -29], [-18, -50], [-26, -52], [-27, -36], [-13, -45], [-18, -57], [-23, -2], [-2, 34], [11, 55], [-12, 48], [-22, 26], [-10, 7], [-10, -3], [-26, -23], [-32, -43], [-20, -31], [-17, -14], [-37, -13], [-30, -6], [-13, 9], [-23, 31], [-53, 98], [-71, 133]], [[31423, 52547], [-5, 39], [3, 39], [-13, 58], [-8, 61], [-6, 21], [-2, 45], [-16, 83], [-12, 67], [-12, 35], [5, 29], [-5, 29], [-9, 24], [-14, 76], [5, 33], [-4, 33], [-12, 23], [-16, 24], [-22, 51], [-27, 48], [-13, 20], [-9, 7], [-8, 46], [-6, 14], [-14, 4], [-27, 19], [-26, -23], [-1, 35], [8, 22], [89, 170], [44, 78], [5, 11], [4, 18], [3, 24], [-10, 28], [-42, 131], [-15, 24], [-14, 21], [-16, 55], [-20, 128], [-14, 64], [-4, 49], [1, 56], [-6, 43], [-11, 30], [0, 91], [11, 153], [3, 116], [-6, 80], [11, 60], [26, 42], [14, 64], [3, 86], [16, 72], [28, 56], [10, 55], [-9, 54], [-3, 35], [-24, 35], [-44, 25], [-37, 3], [-22, -28], [-57, -25], [-91, -24], [-74, 0], [-56, 24], [-42, -8], [-29, -40], [-20, -9], [-12, 22], [-13, 6], [-20, -14], [-3, 7], [-43, 107], [-40, 100], [-46, 118], [-53, 137], [-10, 9], [-16, -1], [-22, -2], [-33, 14], [-23, 20], [-19, 19], [-33, 25], [-23, 4], [-20, -7], [-56, -48], [-32, -5], [-25, -1], [-67, 24], [-45, 4], [-53, -16], [-22, -9], [-32, 25], [-22, 37], [-20, 88], [-14, 69], [-25, 14], [-27, 12], [-13, 23], [-8, 40], [-2, 51], [2, 84], [3, 29], [4, 90], [15, 47], [9, 23], [-1, 38], [-8, 77], [-7, 55], [-30, 62], [-39, 79], [-17, 128], [-20, 150], [-15, 15], [-15, -8], [-15, 8], [-14, 60], [-13, 11], [-22, -21], [-16, -16], [-40, -15], [-8, 15], [3, 19], [17, 54], [20, 70], [23, 64], [21, 66], [16, 70], [11, 138], [7, 96], [20, 170], [36, 136], [14, 62], [33, 82], [15, 44], [20, 35], [55, 47], [65, 234], [15, 37], [67, 35], [51, 27], [37, 28], [13, 16], [10, 7]], [[30189, 58676], [-9, -28], [-18, -34], [-20, -21], [-106, -53], [-11, -11], [-13, -22], [0, -50], [2, -39], [32, -129], [12, -32], [41, -70], [-9, -10], [-16, -1], [12, -92], [25, -63], [1, -39], [-19, -123], [-36, -74], [-25, -86], [-20, -34], [-44, -168], [34, -101], [4, -50], [29, -73], [19, -23], [12, -30], [-6, -49], [12, -67], [15, -35], [18, -14], [23, 0], [67, 44], [15, 20], [10, 36], [34, 73], [2, 93], [7, 113], [-8, 73], [-35, 104], [-15, 75], [-35, 69], [-21, 118], [-9, 37], [-6, 51], [-8, 91], [23, 32], [-2, 74], [57, 21], [123, 120], [77, 31], [87, 64], [20, 32], [17, 52], [14, 7], [45, -50], [22, 17], [9, 39], [-12, 75], [-26, 0], [-78, -27], [-8, 32], [0, 29], [-18, 89], [11, 68], [12, 55], [22, 22], [33, 24], [25, -37], [15, -35], [8, -33], [6, -92], [13, -93], [14, -64], [23, -49], [17, 4], [12, 8], [81, 11], [50, -33], [63, -17], [59, -71], [60, -85], [15, -63], [6, -59], [14, -40], [-14, -41], [7, -69], [18, -69], [26, -44], [74, -12], [81, 30], [125, 27], [40, 23], [206, 12], [39, -33], [4, -33], [0, -26], [67, -124], [54, -16], [46, -40], [48, -22], [52, -30], [30, 4], [22, 11], [26, 2], [184, 207], [98, -6], [15, 14], [13, 18], [-36, 32], [-82, 12], [-25, -21], [-14, 53], [27, -2], [91, 18], [105, -11], [85, 38], [43, 6], [24, -8], [68, 25], [128, -29], [101, 24], [-12, -34], [-33, -21], [-53, -7], [-41, -50], [-87, 9], [-61, -18], [19, -14], [0, -51], [9, -11], [8, 0], [21, -38], [6, -25], [7, -53], [-10, -56], [-12, -26], [25, 9], [14, 26], [-2, 27], [2, 31], [14, -10], [9, -14], [32, -148], [22, -78], [6, 3], [5, 3], [7, 15], [10, 36], [9, -23], [5, -9], [5, -3], [-5, 34], [6, 42], [-2, 15], [10, 3], [12, -5], [17, -12], [30, -49], [20, -51], [1, -28], [8, -16], [12, -16], [7, -26], [1, 41], [-8, 30], [-2, 34], [40, 1], [10, 45], [21, -27], [56, -123], [21, -21], [62, -24], [38, -59], [23, -53], [-14, -56], [-36, -28], [-14, -35], [-9, -34], [0, -35], [-11, -40], [-1, -14], [-7, -56], [-15, -68], [-19, -72], [-104, -2], [26, -29], [23, -22], [39, -57], [30, 45], [44, 3], [48, 49], [18, 8], [88, -26], [22, 36], [17, 11], [48, -7], [42, -39]], [[53455, 75978], [-3, -1], [0, 2], [0, 3], [3, 0], [0, -4]], [[96317, 43302], [18, -191], [21, 1], [11, 10], [12, 45], [5, 70], [11, 10], [14, -8], [-6, -22], [4, -56], [10, -31], [7, -6], [14, -146], [6, -31], [-1, -25], [-29, -54], [-44, 1], [-30, -33], [-19, 3], [0, 37], [-17, 29], [-19, 63], [5, 112], [-33, 208], [-1, 52], [12, 68], [11, 3], [15, -56], [23, -53]], [[96503, 42571], [12, -13], [7, 0], [4, -28], [40, -56], [11, 2], [9, -31], [17, -15], [5, -31], [12, -32], [-21, -38], [-41, 10], [-24, -44], [-21, 11], [-4, 23], [3, 8], [-13, 58], [-5, 90], [-9, 52], [-9, 23], [-20, -20], [-8, -3], [-18, 43], [9, 87], [4, 25], [15, 5], [23, -23], [22, -103]], [[96790, 42177], [8, -8], [-4, -24], [-39, 27], [-30, -10], [-9, 1], [-9, 22], [-7, 44], [3, 30], [13, 22], [5, 3], [10, -26], [8, -18], [9, -8], [19, -43], [23, -12]], [[96748, 42432], [-32, -6], [-44, 18], [-18, 25], [-8, 25], [15, 19], [23, 9], [27, 57], [10, -22], [10, -64], [11, -20], [6, -19], [0, -22]], [[96790, 41738], [27, -82], [11, -7], [-17, -59], [-34, -5], [-41, 15], [15, 20], [-8, 23], [-13, 5], [-14, -11], [-6, 4], [9, 38], [23, 53], [6, 4], [6, 1], [6, -5], [30, 6]], [[96641, 42951], [-19, -26], [-34, 2], [-13, 15], [42, 80], [49, 17], [-25, -88]], [[96725, 42643], [-5, -1], [-4, 27], [-16, 141], [10, 126], [7, -27], [23, -221], [-3, -36], [-12, -9]], [[96718, 43013], [-5, -36], [-11, 41], [-7, 175], [3, 16], [6, 1], [14, -121], [0, -76]], [[96449, 42785], [-5, -15], [-30, 37], [7, 36], [32, -12], [-4, -46]], [[96550, 43628], [-11, -29], [-32, 9], [-7, 8], [2, 48], [8, 17], [19, 15], [25, -24], [-4, -44]], [[96524, 43832], [-4, -6], [-7, 4], [-16, 70], [4, 23], [21, 22], [18, -38], [2, -22], [0, -18], [-3, -16], [-13, -6], [-2, -13]], [[97192, 40214], [-9, -31], [-15, 0], [-20, 22], [4, 29], [22, 5], [6, -2], [12, -23]], [[97080, 40587], [-15, -63], [-25, 15], [-24, 45], [-12, 40], [8, 75], [12, 14], [13, -5], [6, -74], [37, -47]], [[97036, 40932], [-12, -27], [-12, 3], [-72, 64], [3, 27], [-3, 67], [8, 37], [20, 15], [15, -8], [10, -54], [22, -22], [-16, -18], [27, -41], [10, -43]], [[69707, 76179], [9, 11], [16, 10], [26, -20], [23, -25], [5, -12], [-1, -13], [-55, -49], [-33, -23], [-15, -4], [-4, -7], [-11, -55], [-21, -10], [-27, -18], [-19, -25], [-30, -61], [-76, -89], [-1, -18], [7, -15], [24, -10], [33, -27], [18, -21], [48, 27], [12, -6], [13, -28], [13, -80], [22, -21], [28, -17], [18, -5], [23, -20], [32, -7], [21, 7], [26, -17], [4, 7], [3, 119], [22, -20], [13, 1], [11, 14], [6, 20], [4, 39], [-5, 39], [10, 18], [7, 4], [6, -5], [3, -10], [1, -35], [16, -15], [10, -9], [9, -30], [9, -29], [6, -67], [22, -4], [26, -13], [17, 13], [14, -8], [5, -32], [-1, -29], [2, -24], [7, -7], [23, 15], [19, 2], [18, -14], [22, -21], [32, -57], [10, -8], [48, -4], [10, -12], [17, 0], [17, 11], [40, -19], [1, -10], [-7, -14], [-94, -78], [-7, -24], [-19, -31], [-21, -17], [-10, -1], [-46, 31], [-5, -7], [-4, -13], [0, -14], [10, -32], [-5, -21], [-8, -15], [-29, 13], [-6, 9], [0, 9], [-11, 0], [-17, -9], [-33, -57], [-12, -29], [-4, -18], [-15, -10], [-16, -4], [-20, -27], [-22, -20], [-7, 15], [-5, 17], [-6, 5], [-13, -4], [-17, -1], [-17, 19], [-23, 20], [-20, 6], [-58, -9], [-29, -9], [-9, -9]], [[69710, 75022], [-16, -3], [-69, -19], [-14, 7], [-10, 31], [-9, 33], [-18, 12], [-20, 9], [-7, 13], [-1, 16], [3, 16], [1, 8], [46, 63], [42, 57], [4, 4], [3, 11], [7, 20], [0, 10], [-31, 23], [-1, 10], [6, 11], [0, 14], [-22, 41], [-38, 65], [-11, 6], [-8, -4], [-15, -62], [-7, -16], [-43, -41], [-37, -29], [-64, -50], [-17, -15], [-12, 2], [-11, 10], [-37, 51], [-23, 17], [-16, -17], [-13, -25], [1, -51], [-15, -27], [-15, -13], [27, -137], [-2, -18], [-21, -5], [15, -52], [-13, -6], [-32, 12], [-44, 8], [-84, -23], [-6, -9], [-2, -11], [5, -11], [40, -1], [40, 6], [11, -10], [1, -17], [-4, -11], [-13, -2], [-29, -10], [-4, -11], [-1, -10], [10, -31], [11, -19], [2, -11], [-5, -10], [-6, -4], [-9, 15], [-6, -3], [-2, -13], [-3, -15], [-7, -11], [-13, 6], [-13, -5], [-8, -55], [-7, -62], [-22, -42], [-12, -15], [-18, -4], [-27, 5], [-16, 6], [-46, 9], [-47, 17], [-53, 16], [-49, -37], [-14, -22], [-9, -21], [-9, -10], [-21, -129], [2, -14], [12, -12], [60, -26], [9, -11], [5, -13], [2, -58], [5, -8], [21, -7], [30, 0], [23, 6], [24, -5], [16, -13], [8, -20], [4, -21], [-28, -127], [3, -47], [8, -66], [16, -52], [30, -51], [23, -33], [5, -15], [1, -24], [-4, -31], [-13, -48], [-16, -42], [-17, -18], [-24, -54], [-22, -66], [-41, -86], [-13, -49], [-5, -139], [-11, -42]], [[68821, 73255], [-1, 16], [-15, 16], [-26, -3], [-17, 8], [-8, 18], [-21, -5], [-34, -28], [-34, 14], [-35, 58], [-67, 21], [-85, -13]], [[68478, 73357], [-4, 63], [1, 81], [4, 108], [28, 84], [0, 16], [-6, 15], [-9, 14], [-51, 23], [-15, 13], [-20, 26], [-25, 28], [-22, 19], [-34, 26], [-32, 14], [-19, -11], [-17, -14], [-16, 0], [-16, 7], [-59, 64], [-90, 110], [-71, 76], [-45, 37], [-10, 12], [-25, 34], [-62, 93], [-41, -14], [-58, 61], [-53, 59], [-11, 15], [-60, 109], [-60, 71], [-65, 77], [-42, 48], [-71, 82], [-34, 49], [-12, 18], [-12, 35], [-18, 170], [-22, 78], [-30, 43], [-26, 82], [-22, 121], [-17, 79], [-14, 36], [-29, 40], [-43, 44], [-41, 21], [-15, -1], [-7, -5], [-9, -8], [-16, -33], [-24, -3], [-17, 1], [-17, 12], [-52, 10], [-18, 11], [-31, -1], [-67, -17], [-17, 3], [-70, 73], [-31, 29], [-6, 16], [0, 28], [10, 40], [9, 28], [-4, 30], [-13, 32], [0, 34], [9, 19], [19, -6], [7, 12], [-3, 18], [-10, 13], [-13, 29], [-40, 27], [-6, 11], [2, 12], [7, 14], [1, 28], [1, 37], [5, 19], [2, 15], [-6, 12], [-14, 14], [-21, 34], [-27, 4], [-86, -1], [-27, 13], [-22, 19], [-21, 73], [-11, 17], [-11, 7], [-24, 2], [-29, 7], [-15, 13], [-41, 66], [-39, 59], [-16, -56], [-15, -11], [-34, 5], [-26, 10], [-15, -13], [-15, -22], [2, -15], [12, -15], [24, -28], [36, -70], [16, -38], [2, -13], [-3, -10], [-5, -5], [-7, 0], [-9, 1], [-6, 11], [-2, 20], [-12, 30], [-12, 17], [-14, 11], [-19, 8], [-25, 14], [-13, 1], [-12, -17], [-11, -22], [-6, -49], [-19, -60], [-11, -24], [-36, -14], [-84, -5], [-26, -19], [-17, -22], [-32, -74], [-22, -24], [-19, -33], [5, -108], [10, -126], [16, -35], [10, -11], [2, -12], [-7, -11], [-8, -14], [-13, -25], [-15, 1], [-29, 6], [-24, 7], [-82, 7], [-66, 6], [-73, 7]], [[65549, 75646], [0, 132], [0, 132], [0, 132], [-1, 133], [0, 132], [0, 132], [0, 132], [0, 133], [0, 132], [0, 132], [0, 132], [0, 132], [0, 133], [0, 132], [0, 132], [0, 132], [35, 17], [44, 20], [42, 20], [49, 24], [57, 27], [48, 22], [57, 27], [44, 21], [41, 20], [53, 23], [82, 36], [45, 19], [46, 21], [44, 19], [30, 7], [31, -27], [39, -38], [38, -38], [38, -38], [39, -38], [38, -38], [39, -38], [38, -38], [38, -38], [39, -37], [38, -38], [38, -38], [39, -38], [38, -38], [38, -38], [39, -38], [38, -38], [36, -35], [16, -26], [9, -58], [17, -46], [31, -49], [32, -51], [39, -68], [27, -46], [28, -48], [45, -78], [29, -49], [23, -2], [46, 12], [61, 15], [49, 13], [59, 15], [56, 14], [44, 11], [66, -9], [65, -8], [47, -6], [46, -6], [54, -7], [30, -4], [35, -4], [15, 11], [30, 25], [28, 22], [30, 24], [26, 12], [27, -38], [22, -43], [24, -46], [28, -44], [27, -27], [36, -35], [20, -61], [28, -81], [18, -53], [19, -55], [27, 22], [29, 23], [27, 21], [-4, -68], [-3, -61], [-4, -93], [-4, -77], [-9, -91], [-1, -69], [0, -61], [-1, -48], [51, -2], [38, -2], [47, -2], [5, -61], [6, -85], [10, -77], [8, -65], [12, -84], [6, -45], [12, -53], [11, -12], [18, -9], [62, 6], [52, 6], [41, 4], [43, 4], [58, 6], [19, -13], [17, 9], [19, 9], [16, -38], [8, -19], [11, -21], [15, -18], [-7, -40], [-9, -57], [-3, -30], [18, -32], [14, -18], [36, -38], [34, -21], [23, -6], [21, 8], [8, 21], [-2, 30], [-10, 31], [1, 37], [6, 27], [22, 49], [21, 46], [32, 47], [37, 47], [16, 34], [6, 59], [25, 34], [26, 20], [33, 18], [9, 29], [46, 50], [27, 25], [35, 15], [48, 32], [37, 39], [36, 72], [29, 47], [24, 29], [21, 1], [14, -23], [12, -2], [8, 11], [14, 30], [14, 35], [14, 15], [27, 8], [24, 23]], [[69625, 75424], [-1, 14], [-8, 23], [-13, 13], [-6, -5], [5, -19], [15, -28], [8, 2]], [[69779, 74822], [-14, -5], [-26, 1], [-14, 6], [9, 46], [0, 10], [-1, 1], [-7, 6], [-12, 19], [-3, 29], [4, 26], [8, 11], [5, -2], [16, -40], [14, -12], [27, -6], [-14, -40], [10, -42], [-2, -8]], [[69938, 74855], [-7, -24], [-13, 6], [-11, 16], [4, 13], [15, 7], [8, 7], [7, 1], [-3, -26]], [[35174, 32406], [-13, -21], [-15, -41], [-17, -97], [-58, -133], [-12, -76], [-62, -78], [-44, -89], [-29, 2], [-26, -38], [-149, -115], [-54, 22], [-39, -1], [-37, 51], [-84, 19], [-53, -21], [-71, -56], [-21, 1], [-15, 3], [-39, 23], [-21, 50], [-108, 57], [-88, 129], [-104, 2], [-79, -17], [-12, 18], [-8, 33], [-17, 48], [-68, 114], [-54, 113], [-10, 111], [7, 121], [16, 144], [-2, 44], [19, 26], [20, 5], [19, 37], [17, 56], [3, 43], [-13, 78], [-10, 110], [-10, 55]], [[33833, 33138], [21, 86], [1, 42], [-12, 37], [-4, 38], [6, 39], [-1, 37], [-8, 36], [6, 30], [20, 23], [15, 36], [10, 49], [5, 37], [0, 26], [-6, 24], [-12, 22], [5, 46], [24, 67], [15, 60], [7, 52], [0, 43], [-8, 32], [3, 22], [15, 11], [6, 34], [-2, 84], [-15, 70], [11, 55], [33, 64], [18, 52], [1, 39], [10, 22]], [[33997, 34453], [16, -42], [47, -11], [47, -2], [7, 11], [19, 69], [24, 20], [27, 5], [29, -3], [31, -46], [87, -150], [64, -104], [20, -50], [17, -36], [12, -35], [-5, -89], [1, -39], [3, -11], [14, -1], [22, 6], [18, 19], [15, 29], [14, 23], [11, 13], [4, 19], [7, 19], [6, 4], [13, -14], [30, -51], [23, -47], [6, -27], [9, -28], [9, -25], [7, -23], [23, -32], [23, -19], [15, 20], [39, -65], [85, -54], [16, -33], [15, -46], [30, -71], [41, -63], [34, -27], [32, -15], [18, -14], [12, -24], [20, -27], [12, -9], [4, -24], [13, -51], [13, -65], [14, -60], [31, -57], [36, -45], [36, -26], [21, -31], [9, -33], [-25, -48], [-27, -62], [-23, -48], [-25, -33], [-8, -23], [-5, -36], [0, -190], [-2, -70], [2, -19], [3, -13], [16, -18], [18, -16], [7, -3]], [[95272, 54910], [3, -27], [-18, 13], [-2, 10], [10, 10], [7, -6]], [[88372, 57315], [-21, -47], [-1, 16], [6, 28], [9, 32], [8, 19], [11, 6], [8, -27], [-9, -23], [-11, -4]], [[92123, 56074], [-2, -7], [-17, 3], [-2, 4], [1, 3], [8, 4], [1, 10], [-4, 2], [4, 6], [6, 1], [4, -7], [2, -9], [-1, -10]], [[92188, 56124], [-4, -3], [-3, 3], [1, 14], [2, 5], [4, 1], [8, -4], [1, -4], [-9, -12]], [[93975, 55768], [-16, -13], [-20, 5], [-6, 47], [-10, 13], [2, 23], [15, 19], [30, -15], [11, -34], [-7, -22], [1, -23]], [[97120, 55201], [-6, -17], [-6, 1], [6, 13], [4, 18], [6, 51], [14, 19], [10, 21], [-3, -22], [-15, -23], [-10, -61]], [[96896, 56053], [-4, -9], [-27, 5], [-12, 11], [1, 9], [22, -8], [20, -8]], [[97659, 55903], [11, -13], [20, 1], [19, -32], [-7, 2], [-10, 14], [-10, 6], [-12, -2], [-6, 5], [-5, 19]], [[97527, 55955], [35, -30], [46, 14], [-7, -9], [-17, -8], [-12, -8], [-8, 0], [-9, 3], [-29, 21], [-17, 27], [4, 9], [14, -19]], [[96357, 58267], [-7, -4], [-5, 4], [4, 8], [8, 1], [3, -2], [-3, -7]], [[90474, 62651], [-9, -22], [-7, 16], [-2, 31], [13, -3], [4, -6], [1, -16]], [[90475, 61255], [-6, -4], [-9, 2], [-6, 9], [-2, 15], [18, 1], [7, -12], [-2, -11]], [[90350, 59998], [-13, -27], [-10, 6], [-6, 9], [-2, 15], [22, 15], [10, -5], [-1, -13]], [[90493, 62257], [-14, -13], [17, 57], [5, 10], [8, -21], [-16, -33]], [[90486, 60560], [-1, -15], [-14, 4], [-4, 6], [8, 52], [20, 24], [10, 5], [-9, -25], [-2, -27], [-8, -24]], [[90461, 60466], [-12, -29], [-8, 45], [-1, 19], [10, 17], [7, -1], [4, -51]], [[31987, 62401], [-21, -5], [-28, 27], [22, 10], [15, -6], [12, -26]], [[32039, 62415], [-19, -15], [-12, 2], [-5, 6], [10, 18], [26, -11]], [[32009, 62093], [24, -26], [28, 0], [-30, -25], [-56, -3], [1, 41], [33, 13]], [[90205, 59480], [-12, -1], [-10, 20], [-3, 13], [-1, 66], [40, 57], [13, 55], [10, -5], [10, -9], [8, -16], [-44, -92], [-11, -88]], [[2576, 43576], [-12, -5], [-14, 27], [28, 21], [8, 11], [34, -6], [-20, -8], [-24, -40]], [[31630, 62468], [9, -12], [8, 2], [-6, 23], [6, 0], [53, -14], [34, -24], [35, -12], [3, -80], [-27, -32], [-18, -34], [-15, -41], [-38, -47], [-45, -15], [-31, -1], [-11, 1], [-11, 9], [-23, -8], [-29, 21], [-24, -5], [-48, 5], [-18, -19], [-18, -4], [-17, 4], [-14, 8], [-36, -1], [-15, 16], [6, 91], [1, 41], [-9, 35], [-10, 21], [-7, 25], [14, 17], [12, 24], [4, 37], [12, 9], [15, 4], [69, -17], [173, -10], [10, -3], [6, -14]], [[31826, 62272], [-22, -3], [-14, 4], [-5, 17], [27, 16], [30, -2], [18, -10], [2, -6], [-36, -16]], [[31146, 62246], [-2, -1], [-3, 1], [-1, 1], [-2, 6], [-8, 8], [-2, 8], [2, 9], [3, 3], [16, 1], [2, -1], [3, -6], [0, -4], [-1, -4], [-3, -10], [-1, -2], [-1, -3], [-1, -5], [-1, -1]], [[13126, 84403], [-3, -8], [-36, 1], [-12, 7], [-5, 24], [3, 23], [8, 18], [10, 34], [8, 56], [52, -63], [16, -28], [8, -35], [-18, -13], [-22, -6], [-9, -10]], [[13117, 84243], [-15, -2], [-16, 9], [-40, 47], [-1, 14], [6, 15], [22, 29], [10, 7], [54, -3], [17, -8], [4, -13], [0, -14], [-6, -13], [-1, -15], [3, -15], [-7, -15], [-30, -23]], [[12691, 85385], [-2, -15], [-38, 2], [-38, 21], [-19, 27], [4, 13], [35, 11], [34, -26], [24, -33]], [[9689, 86599], [-9, -14], [-24, 5], [-13, 9], [44, 37], [7, -8], [-5, -29]], [[9843, 86300], [-14, -3], [20, 38], [27, 41], [26, 27], [32, 11], [-3, -20], [-43, -35], [-45, -59]], [[8883, 86442], [-15, -17], [-55, 10], [12, 35], [42, 22], [46, -34], [-30, -16]], [[7772, 86613], [-13, -2], [17, 28], [13, 56], [17, -8], [3, -10], [-28, -57], [-9, -7]], [[5464, 83719], [-4, -45], [-38, 29], [-10, 14], [7, 11], [36, 2], [9, -11]], [[5733, 83509], [-9, -3], [-8, 6], [-10, 33], [-1, 13], [20, -10], [7, -24], [1, -15]], [[5690, 83612], [-1, -46], [-4, -7], [-8, 12], [-15, -13], [-9, 10], [4, 16], [-1, 12], [11, 1], [3, 23], [-2, 9], [6, 21], [8, 5], [8, -43]], [[3831, 82789], [-4, -1], [-7, 14], [-1, 13], [5, 9], [13, 22], [9, 8], [11, 4], [3, -6], [-10, -26], [-12, -17], [-7, -20]], [[1109, 81688], [-24, -12], [-31, 25], [3, 30], [34, -25], [18, -18]], [[3858, 89992], [-10, -3], [0, 9], [32, 23], [58, 29], [-2, -6], [-31, -23], [-47, -29]], [[2371, 88502], [5, -14], [29, 2], [40, -6], [45, -14], [45, 5], [56, 43], [33, 11], [34, 6], [37, -10], [35, -23], [14, -13], [11, -24], [7, -28], [11, -21], [67, -25], [42, -10], [10, -14], [9, -19], [36, -14], [37, 5], [20, -5], [63, -1], [77, -21], [-12, -56], [-25, -24], [-72, 7], [-71, -8], [-29, -28], [-25, -37], [-3, -35], [-14, -16], [-15, -7], [-12, 19], [-17, 60], [-11, 16], [-12, 11], [-35, 19], [-35, 12], [-21, 1], [-15, 21], [-8, 30], [-14, 15], [-28, 22], [-29, 17], [-89, 38], [-29, 5], [-30, -4], [-32, -17], [-31, -26], [-31, -19], [-33, -4], [-32, 11], [-29, 25], [-15, 18], [-8, 30], [1, 30], [4, 29], [16, 71], [27, 14], [51, -50]], [[3851, 86626], [26, -29], [13, -1], [43, 8], [16, -6], [15, -12], [9, -19], [2, -33], [-7, -30], [2, -41], [-1, -18], [22, -24], [8, -32], [3, -34], [-49, -12], [-49, -2], [-43, -23], [-9, -17], [7, -26], [-11, -6], [-11, 5], [-21, 24], [-22, 11], [-79, 18], [-100, 69], [-42, 14], [-44, 50], [-39, 64], [25, 10], [26, 5], [116, -9], [14, 46], [15, 11], [36, 13], [35, 25], [15, 0], [16, -10], [32, 15], [17, 3], [14, -7]], [[7528, 85151], [2, -31], [12, 3], [42, 33], [23, 10], [29, 1], [23, -15], [4, -11], [-2, -14], [-18, -27], [1, -18], [19, -33], [49, -18], [6, -10], [0, -12], [-34, -55], [-12, -12], [-9, -3], [-61, 9], [-55, 18], [-23, 3], [-8, -5], [-15, -17], [11, -5], [49, -4], [17, -25], [7, -18], [4, -20], [-10, -8], [-20, -6], [-25, 0], [-31, -22], [-17, -25], [-62, -7], [-47, -34], [-17, -17], [-6, -20], [-17, -15], [-41, -14], [24, -13], [4, -11], [1, -16], [-4, -13], [-31, -59], [-60, -48], [-15, 2], [-7, 6], [-5, 9], [-1, 9], [78, 98], [-3, 4], [-21, 4], [-34, 26], [-23, -17], [-5, 1], [6, 23], [15, 27], [-3, 8], [-8, 7], [-19, 4], [-31, 1], [-22, -6], [-15, -15], [-1, -6], [31, 2], [9, -7], [8, -14], [5, -16], [2, -17], [-7, -24], [-14, -30], [-22, 5], [-44, 67], [-20, 97], [-38, 75], [-2, 18], [11, 46], [38, 65], [42, 18], [29, 27], [28, 9], [18, -1], [24, -12], [10, -25], [-6, -12], [2, -6], [17, -15], [18, -52], [21, -47], [14, -19], [19, -12], [-19, 36], [-12, 44], [-5, 88], [-6, 23], [11, 6], [30, -3], [-1, 13], [-32, 29], [-19, 25], [-8, 19], [1, 17], [17, 25], [10, 7], [10, 3], [21, -5], [9, -8], [26, -56], [12, -17], [10, 0], [10, 9], [9, 18], [8, 12], [10, 3], [29, -8], [10, 3], [4, 14], [0, 25], [7, 9], [2, 18], [-16, 27], [18, 9], [61, -21], [25, -23], [-13, -42]], [[13882, 84036], [-14, -30], [-10, -32], [-7, -35], [-3, -37], [2, -40], [5, -35], [17, -65], [6, -39], [1, -27], [-38, -92], [-13, -45], [1, -19]], [[13829, 83540], [-27, -47], [-50, -64], [-23, -37]], [[13729, 83392], [-11, 12], [-65, 10], [-24, 82], [-12, 64], [-19, 55], [0, 13], [17, 37], [65, 31], [1, 12], [-24, 8], [-6, 13], [-7, 60], [2, 53], [-2, 35], [-10, 72], [-17, 43], [-41, 86], [-4, 21], [18, 27], [12, 25], [-71, -43], [-96, -46], [-42, -32], [-9, -13], [-3, -11], [8, -30], [-1, -10], [-9, -18], [-10, -51], [-21, -53], [-10, -11], [-38, 20], [-10, 17], [-19, 70], [5, 19], [13, 15], [19, 34], [24, 52], [45, 133], [29, 1], [52, 26], [-82, 13], [-12, 7], [-11, 18], [-9, 29], [-17, 33], [-31, 11], [-13, 12], [-21, 39], [-14, 18], [-7, 22], [-1, 26], [-6, 13], [-21, 5], [-12, 9], [-3, 67], [-42, 17], [-18, 15], [-28, 42], [-7, 21], [-3, 17], [7, 46], [-3, 9], [-25, -5], [-153, 72], [8, 95], [-28, 125], [-31, 51], [6, 19], [7, 11], [13, 0], [59, -37], [56, -44], [7, 7], [-89, 92], [-22, 28], [-5, 33], [-1, 18], [7, 10], [84, -9], [4, 7], [-84, 27], [-17, 0], [-18, -39], [-9, -9], [-18, 2], [-6, 6], [-22, 47], [-20, 33], [-38, 45], [-7, 33], [-2, 47], [5, 45], [31, 103], [13, 18], [3, 11], [-10, -1], [-9, -10], [-25, -48], [-27, -78], [-21, -27], [-14, 6], [-20, 32], [-43, 39], [-50, 10], [-31, 40], [-46, 111], [-6, 55], [-6, 14], [-25, 18], [-16, 26], [-24, 135], [-31, 93], [-8, 50], [3, 49], [-4, 5], [-11, -38], [-3, -20], [-20, -5], [19, -39], [5, -19], [-10, 1], [-19, -5], [33, -66], [14, -102], [21, -76], [14, -62], [7, -47], [9, -44], [25, -99], [3, -20], [-3, -16], [-8, -19], [-14, -7], [-45, 13], [-17, 25], [-24, 44], [-34, 21], [-84, -10], [-6, 3], [0, 37], [10, 65], [-8, 26], [-44, 96], [1, 19], [60, 44], [-29, 3], [-24, -17], [-9, 11], [-14, 62], [-9, 23], [-5, 4], [-2, -58], [10, -31], [1, -17], [-1, -25], [-7, -18], [-11, -11], [-11, -2], [-20, 12], [-23, 23], [-19, 11], [-8, 10], [-9, 25], [-15, 20], [-74, 24], [-44, 30], [-3, -8], [13, -31], [2, -19], [-11, -5], [-20, -30], [6, -4], [21, 10], [23, -1], [39, -19], [35, -23], [12, -13], [6, -20], [4, -7], [34, -23], [2, -12], [-22, -35], [45, 3], [27, -12], [34, -56], [11, -30], [2, -40], [-7, -11], [-14, -8], [-92, -13], [-34, -48], [-7, -1], [-25, 13], [-46, 38], [-58, 36], [-131, 108], [-3, 5], [-3, 20], [-9, 11], [-17, 9], [-25, 27], [-32, 45], [-19, 36], [-8, 25], [-18, 29], [-59, 61], [-31, 23], [-28, 13], [-24, 3], [-6, 8], [11, 13], [2, 8], [-53, 13], [-50, 28], [-127, 80], [-65, 50], [-39, 24], [-16, 13], [-7, 11], [9, 12], [26, 12], [17, 13], [27, 51], [2, 16], [-14, 37], [-7, 33], [0, 19], [4, 18], [4, 12], [11, 12], [9, 6], [10, -4], [32, -46], [4, -17], [-1, -63], [9, -73], [3, 5], [3, 24], [2, 47], [4, 22], [6, 22], [12, 12], [36, -7], [17, 4], [-71, 33], [-44, 62], [-8, 7], [-24, 3], [-26, -26], [-66, -82], [-19, -14], [-83, -46], [-57, -9], [-63, 7], [-54, 15], [-136, 72], [-21, 17], [31, 44], [2, 14], [-11, 45], [-9, 13], [-13, 8], [-4, -6], [0, -13], [3, -25], [-10, -13], [-23, -14], [-39, -15], [-120, 37], [-124, 30], [-110, 7], [-156, -25], [-83, -24], [-48, -2], [-47, 4], [-4, 17], [21, 10], [-1, 12], [-27, 39], [-40, 23], [-55, 8], [-32, 11], [-8, 14], [-19, 14], [-31, 13], [-13, 23], [10, 71], [11, 43], [10, 30], [27, 48], [-9, -3], [-39, -36], [-33, -37], [-32, -48], [-18, -22], [-24, -20], [-37, 5], [-50, 30], [-43, 15], [-36, 1], [-15, 5], [25, 27], [14, 22], [19, 34], [5, 17], [-132, 5], [-5, 19], [0, 13], [-4, 11], [-19, 8], [-27, -6], [-43, -22], [-19, 17], [7, 9], [14, 7], [28, 31], [-38, 16], [-20, 18], [-10, 16], [1, 55], [10, 35], [87, 34], [-27, 13], [-56, -5], [-37, -29], [-43, -41], [-30, -16], [-15, 11], [-20, 3], [-25, -3], [-16, -11], [-9, -18], [-10, -12], [-11, -6], [-8, 2], [-12, 18], [-25, 12], [-12, 14], [-7, -9], [-9, -27], [-9, -13], [-42, -14], [-23, 2], [-28, 34], [-4, 12], [10, 29], [61, 115], [-6, -1], [-20, -18], [-39, -46], [-18, -14], [-30, -1], [-14, 5], [-17, -4], [-20, -12], [-13, -14], [-6, -15], [4, -2], [30, 17], [17, 4], [5, -8], [-24, -52], [-14, -50], [-13, -12], [-22, 2], [-24, -5], [0, -14], [44, -39], [16, -6], [20, -14], [3, -14], [-7, -38], [-6, -15], [-9, -8], [-36, 1], [-12, -4], [-24, -24], [-12, -19], [4, -2], [21, 16], [31, 9], [39, 1], [30, 9], [20, 16], [19, -4], [18, -26], [6, -22], [-8, -19], [-15, -13], [-23, -9], [-15, -12], [-6, -16], [-3, -24], [-1, -32], [6, -58], [-5, -7], [-8, -5], [-13, 0], [-12, -14], [-27, -76], [-9, -9], [-12, 8], [-10, 0], [-9, -10], [-19, -8], [-30, -5], [-25, 2], [-45, 16], [-18, 12], [-15, 19], [-40, -20], [-11, 9], [-25, 53], [-5, -3], [-5, -58], [-8, -20], [-25, -41], [-13, -71], [-4, -3], [-5, 11], [-15, 63], [-8, 14], [-23, -36], [-2, -14], [6, -47], [-6, -7], [-45, 25], [-11, 2], [-3, -5], [15, -37], [-1, -13], [-65, -71], [-17, 3], [-10, 7], [-12, -1], [-41, -27], [-11, 1], [-15, 16], [-7, -1], [-4, -16], [-1, -32], [-15, -30], [-49, -49], [-13, -23], [-9, -31], [-8, -3], [-28, 20], [-33, 13], [-5, -6], [10, -19], [-2, -12], [-14, -4], [-18, 2], [-22, 7], [-31, -8], [-40, -25], [-33, 0], [-46, 41], [-12, 3], [-4, 12], [9, 33], [13, 25], [9, 12], [44, 32], [50, 12], [31, 19], [39, 40], [20, 30], [40, 77], [-3, 6], [-9, 4], [-88, -73], [-13, -7], [-17, 1], [-70, 28], [-14, 12], [-11, 35], [20, 80], [13, 39], [35, 60], [44, 64], [15, 41], [24, 110], [-2, 51], [-10, 61], [-1, 36], [10, 12], [102, 56], [49, 43], [94, 62], [25, 0], [19, -22], [22, -17], [25, -13], [32, 1], [39, 16], [62, -6], [128, -41], [27, -2], [1, 5], [-19, 29], [-89, 17], [-37, 16], [-104, 74], [-24, 28], [10, 14], [26, 11], [8, 10], [4, 19], [15, 25], [25, 32], [39, 31], [75, 46], [-29, 2], [-54, -8], [-19, -9], [-36, -33], [-14, -23], [-20, -46], [-8, -8], [-37, -7], [-101, -4], [-17, 23], [-9, 4], [-13, -4], [-92, -59], [-34, -30], [-23, -35], [-37, -25], [-49, -16], [-37, -20], [-39, -40], [-14, -30], [0, -14], [9, -45], [-10, -9], [-22, -3], [-36, -30], [-76, -89], [-10, -32], [0, -11], [12, -25], [-8, -17], [-22, -25], [-48, -41], [-31, -16], [-20, -1], [-20, 6], [-35, 26], [-28, 2], [-2, -4], [39, -28], [39, -36], [24, -30], [10, -24], [0, -25], [-9, -25], [-27, -44], [-27, -13], [-70, -13], [-22, -11], [-7, -8], [48, -18], [4, -10], [-6, -37], [-13, -12], [-40, -22], [-35, -6], [-6, 4], [7, 29], [-2, 7], [-13, 6], [-19, -11], [-47, -43], [-5, -7], [17, -11], [-4, -10], [-26, -30], [-10, -21], [-17, -20], [-76, -64], [5, -15], [-19, -56], [-11, -49], [13, -20], [64, -24], [31, -6], [37, -17], [66, -45], [22, -30], [3, -14], [-2, -15], [-8, -21], [-21, -38], [-50, -58], [-22, -16], [-34, -13], [-12, -10], [-43, -54], [-12, -30], [2, -26], [-9, -18], [-56, -35], [2, -6], [20, -3], [-7, -31], [-3, -43], [-10, -8], [-36, 1], [-44, -17], [-3, -5], [-1, -31], [-118, -23], [-25, -59], [-14, -18], [-45, -43], [-29, -18], [-32, -10], [-17, -15], [-1, -18], [-9, -17], [-28, -26], [-14, -34], [-10, -5], [-51, -8], [-11, -11], [-5, -46], [-9, -1], [-19, 11], [-24, -9], [-53, -51], [-12, -18], [1, -10], [8, -10], [13, -31], [-1, -20], [-20, -58], [-8, -9], [-25, -14], [-10, -32], [-23, 4], [-19, -6], [-12, -21], [-14, -12], [-14, -4], [-18, -16], [-22, -31], [-20, -19], [-18, -9], [-18, -2], [-18, 5], [-16, -4], [-14, -11], [-13, -18], [-11, -50], [-14, -22], [-9, -4], [-17, 4], [-27, 10], [-28, -4], [-44, -30], [-14, -23], [28, -5], [14, -7], [-1, -7], [-14, -6], [-25, 1], [-14, -6], [-19, -13], [-45, -14], [-17, -10], [-34, -58], [-4, -13], [4, -3], [19, 6], [23, -10], [11, -12], [8, -15], [7, -29], [4, -4], [-43, -49], [-12, -21], [-8, -8], [-5, 6], [-6, 55], [-3, 9], [-10, 1], [-10, -17], [-22, -65], [-23, -32], [-178, -83], [-26, -19], [-5, -35], [-7, -31], [-12, -24], [-14, -16], [-3, 11], [1, 86], [-3, 18], [-18, 11], [-8, -2], [-11, -5], [-18, -18], [-10, -5], [-14, 1], [-23, -18], [-55, -59], [-36, -15], [-10, -12], [-15, -32], [-10, -12], [-15, -1], [-20, 10], [-16, -7], [-12, -24], [-13, -9], [-35, 17], [-15, -11], [-20, -31], [-21, -20], [-22, -9], [-56, -11], [-23, 7], [-5, 9], [1, 38], [9, 28], [9, 13], [11, 12], [17, 1], [31, -8], [-4, 9], [-11, 11], [-29, 19], [-28, 10], [-16, -6], [-23, -15], [-15, -17], [-8, -19], [-10, -63], [-6, -17], [-67, -111], [-26, -34], [-25, 2], [-13, -13], [-17, -27], [-17, -13], [-14, 1], [-12, 5], [-8, 9], [1, 9], [11, 8], [-4, 22], [-19, 37], [-13, 19], [-24, 3], [-4, -17], [8, -84], [-1, -19], [-15, -24], [-41, -27], [-12, 2], [-37, 53], [-34, 11], [-2, -17], [7, -36], [-8, -32], [-25, -31], [-19, -15], [-13, 1], [-1, 21], [12, 42], [3, 35], [-6, 28], [1, 22], [7, 15], [45, 41], [20, 7], [10, -11], [13, -1], [15, 6], [10, 14], [4, 19], [20, 26], [35, 31], [40, 57], [46, 83], [53, 72], [62, 60], [66, 48], [134, 66], [10, -4], [-12, -21], [8, -14], [13, -1], [49, 10], [20, 14], [6, -13], [-7, -17], [-30, -17], [1, -14], [43, -67], [13, -10], [12, 1], [4, 9], [-3, 48], [14, 9], [30, 2], [19, -6], [9, -15], [17, -12], [25, -10], [15, 3], [6, 16], [-10, 19], [-48, 40], [-13, 18], [-3, 23], [7, 31], [14, 45], [24, 60], [21, 42], [42, 47], [29, 23], [72, 72], [140, 73], [34, 47], [47, 52], [20, 13], [0, -20], [6, -18], [32, -12], [20, -4], [10, 4], [2, 19], [-4, 34], [-1, 33], [2, 30], [4, 24], [21, 43], [31, 49], [43, 57], [27, 26], [25, 14], [24, 25], [42, 58], [14, 10], [30, 11], [11, -5], [7, -14], [8, -10], [30, -8], [21, 13], [-4, 7], [-16, 5], [-11, 8], [-10, 35], [-20, 21], [-5, 24], [4, 37], [17, 87], [3, 90], [16, 51], [31, 19], [69, 13], [-40, 23], [-16, 0], [-26, 11], [-10, 56], [0, 40], [18, 47], [64, 80], [71, 55], [-10, 4], [-8, 17], [32, 110], [32, 98], [-43, -84], [-50, -64], [-145, -74], [-99, -63], [-47, -14], [-31, 15], [-24, 60], [-14, 22], [-18, 39], [8, 50], [14, 35], [31, 6], [34, -17], [31, -1], [-39, 34], [-56, 30], [-26, -9], [-19, -49], [-26, -34], [-23, 12], [-14, 14], [10, -41], [-18, -63], [-6, -43], [25, -115], [-5, -45], [-45, -21], [-37, 37], [-76, 145], [-27, 41], [-60, 69], [-20, -10], [-25, -34], [-24, -9], [-65, 50], [-30, 37], [-28, 46], [-44, -25], [-38, -30], [-44, -48], [-30, 0], [-81, -41], [-9, -1], [-11, -22], [-11, -10], [-10, -43], [-109, -33], [-108, 19], [38, 23], [42, 19], [37, 44], [-16, 60], [-3, 30], [1, 38], [40, 54], [-42, 0], [-27, -19], [-25, 40], [-12, 79], [29, 47], [13, 36], [12, 50], [1, 43], [-23, 72], [-63, 153], [-29, 115], [-50, 60], [37, 100], [41, 91], [54, 40], [-4, 6], [-30, 0], [-19, -5], [-18, -30], [-18, -22], [-56, -116], [-37, -56], [-23, -16], [38, -22], [6, -19], [7, -41], [-10, -51], [-10, -28], [-45, 2], [-40, -41], [-95, -44], [-128, -26], [-63, 3], [-65, 52], [0, 30], [3, 26], [-94, 90], [-54, 89], [-38, 2], [-33, 23], [-39, 37], [3, 30], [6, 21], [-24, 15], [-31, -2], [-36, 11], [94, 114], [32, 77], [27, 11], [34, -12], [47, -30], [40, -14], [14, -14], [15, -27], [-16, -45], [-14, -31], [17, 8], [50, 49], [37, 43], [17, -4], [12, -8], [20, -44], [25, -45], [56, 43], [30, 53], [-25, 24], [-31, 13], [-79, 19], [20, 15], [50, -2], [19, 15], [-20, 20], [-25, 18], [-68, -60], [-124, 3], [-87, 35], [-87, -6], [-13, 7], [-17, 19], [49, 45], [34, 25], [2, 14], [-20, 2], [-38, -12], [-17, 21], [3, 36], [-6, -4], [-15, -19], [-21, 10], [-18, 16], [9, 17], [19, 24], [-8, 3], [-17, -5], [-16, -31], [3, -25], [0, -36], [-28, -7], [-24, 5], [-17, 36], [-17, 78], [-48, 20], [-12, 39], [30, 51], [-13, 26], [-32, 8], [-37, -25], [-17, 22], [-3, 25], [-1, 36], [10, 3], [9, -7], [74, 20], [7, 10], [-59, 30], [-16, 31], [24, 18], [44, 2], [61, 19], [-25, 33], [-6, 18], [-5, 31], [10, 51], [72, 117], [71, 98], [22, 22], [32, 12], [30, -9], [31, -21], [6, 9], [-11, 9], [-13, 40], [43, 15], [26, 45], [2, 13], [-28, -18], [-29, -31], [-7, 31], [-7, 71], [12, 68], [10, 30], [24, 29], [69, 11], [13, -6], [2, 14], [-41, 42], [17, 34], [15, 17], [84, 27], [45, -9], [58, -31], [33, -39], [-5, -20], [-8, -12], [-17, -13], [-7, -10], [3, -8], [25, 24], [40, 28], [23, -12], [17, -23], [20, 1], [63, 19], [32, 20], [39, 53], [51, 34], [73, 108], [21, 44], [25, 7], [23, -4], [15, -37], [23, -10], [130, 9], [67, 16], [46, 35], [48, 59], [28, 40], [13, 52], [-17, 66], [-18, 56], [-23, 127], [-64, 83], [-46, 25], [-30, -3], [22, 53], [61, -6], [40, 11], [33, 26], [10, 19], [16, 40], [-5, 42], [-9, 23], [-22, 26], [-27, 37], [-18, 12], [-16, -1], [-78, -74], [-46, -2], [-35, 14], [-30, -42], [-85, -37], [-45, -38], [-84, -93], [-21, -43], [-26, -2], [-19, 82], [-91, 79], [-28, -27], [15, -25], [21, -17], [34, -8], [-15, -23], [-11, -32], [-34, 30], [-61, 43], [-63, 22], [-164, -3], [-108, -44], [-10, 9], [-10, 4], [-18, -11], [-8, -17], [-11, -12], [-22, -4], [-45, 7], [-85, 27], [-194, 41], [-50, 24], [-44, 59], [1, 40], [19, 17], [-1, 58], [-38, 15], [-77, 82], [-28, 35], [6, 4], [14, -9], [26, -7], [64, 11], [22, 53], [48, 16], [44, -8], [-10, 15], [-11, 11], [-114, 27], [-16, -8], [-205, 48], [-162, 84], [-13, 16], [-15, 36], [22, 35], [22, 17], [1, -20], [3, -19], [93, 45], [48, 58], [92, 10], [22, 16], [28, 31], [41, 54], [58, 28], [39, 25], [51, 15], [44, -25], [13, -3], [80, -5], [26, 11], [11, 8], [8, 12], [-78, 45], [8, 25], [10, 18], [91, 52], [70, 17], [37, -1], [108, 68], [59, 19], [112, 13], [92, 3], [25, -24], [-49, 5], [-22, -4], [15, -9], [18, -17], [-5, -22], [-31, -66], [3, -53], [-20, -17], [-19, -24], [94, -76], [146, -5], [79, 14], [45, -23], [38, -5], [103, 12], [78, -16], [33, 6], [72, 113], [28, 18], [31, -20], [40, -16], [25, 12], [21, -29], [-10, 61], [-14, 23], [-118, 41], [-78, -20], [-25, 23], [8, 47], [-84, 115], [-35, 24], [-42, 1], [-21, 40], [-18, 51], [36, 21], [33, 10], [30, -17], [33, -67], [32, -10], [-9, -68], [39, -62], [89, -57], [70, 21], [50, -1], [30, -12], [74, -52], [37, -6], [116, 27], [1, 51], [-9, 37], [-28, 23], [-78, -5], [-62, 38], [-52, -10], [-96, -58], [-48, 23], [-30, 31], [-49, 31], [-6, 60], [41, 69], [30, 32], [-27, 24], [-68, 17], [-119, -18], [-5, 24], [0, 25], [-48, -49], [-50, 10], [-66, -5], [-148, 43], [-52, 54], [-22, 43], [-40, 119], [-50, 75], [-351, 252], [-159, 64], [-77, 70], [-48, 17], [-46, 8], [-59, 22], [40, 28], [27, 10], [-28, -30], [21, -7], [35, 17], [18, 20], [27, 85], [28, 129], [-7, 51], [194, -10], [129, 8], [43, 12], [163, 20], [43, 14], [78, 43], [92, 77], [80, 101], [12, 27], [5, -7], [7, 5], [9, 38], [10, 90], [39, 85], [168, 193], [77, 77], [26, 35], [27, 25], [19, -24], [9, -7], [5, -11], [-16, -6], [-26, -25], [-36, -16], [-9, -9], [22, 2], [63, 18], [36, 22], [179, 41], [97, 66], [3, 15], [144, 84], [20, -4], [23, -10], [-40, -55], [28, -14], [-25, -66], [52, -1], [12, -30], [3, 26], [-1, 37], [4, 37], [8, 25], [36, -11], [83, 27], [-100, 4], [-60, 59], [-33, 1], [111, 87], [102, 53], [23, -1], [11, -10], [2, -16], [-22, -10], [-21, -19], [10, -16], [15, -3], [48, 14], [22, 17], [105, -2], [30, 13], [8, 12], [134, 2], [25, 9], [85, 46], [78, 57], [36, 31], [61, 79], [53, 51], [87, 51], [21, -6], [-28, -10], [-20, -22], [27, -29], [183, -59], [46, -4], [18, -35], [-15, -34], [-47, -38], [-95, -39], [29, -15], [19, -35], [28, -4], [46, 13], [35, 21], [74, 70], [24, 39], [17, 9], [62, -9], [35, -20], [40, -35], [-15, -34], [-16, -20], [52, -26], [57, -6], [55, -21], [77, 44], [60, 9], [57, -2], [73, 24], [125, -32], [31, 8], [50, -5], [53, -20], [19, -21], [-57, -44], [-9, -46], [20, -19], [36, -4], [4, -27], [23, -6], [112, 2], [-9, -13], [-5, -15], [-35, -34], [200, -20], [27, 19], [41, 8], [88, 26], [33, -12], [39, -26], [36, -6], [34, 6], [78, 38], [91, 2], [37, -13], [39, 6], [118, -44], [44, -5], [58, -57], [30, -1], [34, 24], [29, -1], [29, -23], [47, -7], [22, -37], [24, -13], [178, -27], [88, 13], [129, -4], [62, -17], [65, 2], [107, -63], [56, -9], [11, -15], [161, -15], [56, 33], [98, 8], [88, 28], [50, 0], [59, -7], [22, 3], [16, 12], [142, -47], [79, -55], [35, -40], [166, -57], [48, -32], [33, -36], [19, -3], [14, 10], [58, -3], [22, -5]], [[10833, 91964], [0, -168], [0, -169], [0, -168], [0, -168], [0, -169], [0, -168], [0, -168], [0, -169], [0, -168], [0, -168], [0, -169], [0, -168], [0, -168], [0, -169], [0, -168], [0, -168], [0, -168], [0, -169], [0, -168], [0, -168], [0, -169], [0, -168], [0, -168], [0, -169], [0, -168], [0, -168], [0, -169], [0, -168], [0, -168], [0, -169], [0, -168], [0, -168], [66, -24], [66, -23], [20, 46], [71, -35], [62, -32], [40, 40], [43, 44], [58, 3], [65, 3], [43, 3], [0, -37], [-16, -62], [-14, -51], [40, -52], [48, -27], [46, -26], [20, -71], [50, -55], [37, -41], [36, -40], [52, -57], [37, -40], [48, -53], [29, -32], [13, -61], [17, -74], [-10, -44], [23, -7], [44, 49], [42, 30], [52, 38], [35, 25], [65, 1], [31, 74], [1, 103], [32, -2], [20, 14], [8, 31], [-20, 41], [62, 19], [45, 14], [65, 39], [63, 37], [30, -29], [29, -28], [59, -67], [4, -16], [-4, -32], [-6, -31], [35, -88], [11, -10], [29, -12], [35, -29], [15, -26], [50, -40], [9, -17], [4, -27], [9, -23], [9, -17], [9, -24], [22, -28], [41, -31], [29, -22], [40, -30], [41, -62], [36, -54], [40, -54], [-6, -42], [41, -66], [43, -84], [33, -74], [24, -41], [28, -60], [34, -74], [39, -83], [30, -54], [39, -75], [20, -45], [-13, -31], [-17, -38], [51, -18], [34, -12], [-8, -42], [-12, -56], [40, -22], [26, -15], [-5, -29], [15, -33], [2, -55], [48, 4], [21, 2], [29, -25], [38, -32], [38, -30], [32, -25], [42, -15], [53, -22], [25, -44], [48, -20], [18, -62], [55, -23], [33, 16], [11, -26], [9, -29], [3, -37], [-3, -36]], [[4590, 83513], [27, -95], [12, -18], [17, -10], [24, -11], [15, -14], [12, -21], [2, -10], [-76, 38], [-48, -56], [-15, -7], [-136, -3], [-27, -10], [-18, -18], [-31, -52], [-16, -19], [-16, -12], [-36, -14], [-42, 2], [-22, 7], [-12, 24], [-11, 48], [0, 14], [5, 23], [38, 31], [12, 17], [49, 109], [14, 15], [16, 4], [41, -8], [36, 32], [77, 48], [17, 6], [55, 1], [16, -8], [11, -13], [10, -20]], [[12971, 83838], [6, -16], [0, -11], [-40, -38], [-1, -8], [-9, -23], [-9, -9], [-15, -26], [-28, -27], [4, 83], [-28, 48], [28, 24], [19, -7], [31, -3], [30, 22], [12, -9]], [[13517, 83571], [28, -75], [2, -27], [-28, -9], [-21, 4], [-11, 8], [-3, 13], [7, 38], [-14, 22], [-16, 8], [-15, -14], [0, 38], [11, 27], [-7, 36], [0, 28], [4, 9], [15, -1], [30, -29], [18, -76]], [[13302, 84164], [-6, -96], [-11, 5], [-10, 1], [-22, -14], [-22, 6], [-11, 11], [-4, 12], [4, 28], [-12, 16], [-42, 6], [-16, 7], [-9, 30], [-2, 39], [7, 14], [21, 11], [16, 47], [10, 7], [35, 94], [17, -7], [31, -57], [39, -83], [-13, -77]], [[13617, 83806], [-10, -63], [-19, -65], [-29, -35], [-21, 8], [-15, 28], [-14, -1], [-15, 6], [-8, 23], [8, 30], [-7, 23], [-8, -20], [-13, -19], [-33, -24], [-23, -47], [-11, -30], [-13, 33], [-9, 78], [-1, 33], [24, 50], [31, 48], [6, 142], [99, 71], [9, -4], [32, -53], [35, -74], [8, -34], [1, -58], [-4, -46]], [[12954, 84679], [18, -18], [10, 19], [19, -1], [35, -17], [20, -25], [12, -29], [1, -17], [-3, -40], [2, -40], [-1, -20], [-5, -18], [-8, -13], [-8, -2], [-27, 36], [-31, 65], [-24, 20], [-1, -7], [7, -18], [19, -35], [3, -21], [14, -26], [6, -19], [3, -26], [0, -22], [-4, -19], [-6, -12], [-9, -6], [-47, 6], [-28, -13], [-33, 7], [-8, 11], [-5, 19], [-2, 46], [-9, 66], [2, 50], [-21, 46], [-18, 27], [-26, 25], [-18, 24], [5, 20], [27, 14], [44, -3], [95, -34]], [[13094, 83464], [6, -8], [7, 5], [12, 21], [20, -4], [14, -7], [9, -8], [-5, -30], [-4, -49], [-8, -17], [-8, -24], [-28, 14], [-23, 31], [-33, 53], [-19, 38], [-1, 16], [-12, 12], [-22, 66], [-13, 52], [-21, 6], [-26, 15], [-10, 29], [7, 25], [37, 12], [55, -64], [9, -28], [20, -32], [3, -44], [10, -18], [24, -62]], [[9335, 86664], [6, -16], [53, 4], [16, -3], [6, -7], [-7, -11], [-21, -14], [-60, -25], [-49, -33], [-6, 3], [-9, 36], [-9, 15], [-6, 20], [0, 7], [9, 14], [18, 20], [13, 8], [46, -18]], [[8962, 86297], [-31, -8], [-7, 17], [16, 42], [13, 24], [10, 6], [35, 48], [39, 35], [36, 51], [37, 72], [6, 27], [17, 3], [28, -18], [17, -25], [-8, -20], [-92, -103], [-8, -13], [-8, -35], [-8, -13], [-12, -5], [-9, -15], [-5, -25], [-11, -14], [-18, -1], [-12, -7], [-6, -12], [-19, -11]], [[8984, 86664], [0, -15], [-9, -14], [8, -27], [-14, -46], [-6, -29], [-8, -19], [-7, -7], [-8, 4], [-2, 11], [5, 16], [-18, -1], [-6, 40], [10, 13], [4, 17], [1, 12], [12, 51], [4, 3], [2, -12], [3, -3], [7, 5], [9, 22], [4, 3], [9, -24]], [[8908, 86881], [-35, -5], [-16, 7], [-3, 8], [7, 29], [0, 12], [17, 5], [21, -14], [6, -14], [3, -28]], [[7498, 84749], [-35, -19], [-7, 1], [-21, -38], [-17, -16], [-22, 30], [5, 46], [20, 30], [97, -10], [7, -9], [1, -7], [-8, -6], [-20, -2]], [[7643, 85532], [-9, -4], [-20, 18], [-13, 19], [9, 14], [39, 30], [19, 0], [8, -4], [3, -10], [-2, -13], [-8, -18], [-26, -32]], [[7433, 85166], [-8, -16], [-7, 4], [-16, 19], [-31, 28], [-15, 18], [-1, 8], [11, 9], [38, -22], [15, -20], [14, -28]], [[6787, 83998], [-11, -19], [-21, 2], [-12, 6], [-3, 16], [32, 48], [7, 6], [6, -2], [3, -20], [-1, -37]], [[7032, 84352], [-19, -14], [-6, 5], [-1, 11], [5, 18], [9, 18], [29, 34], [29, 23], [15, -2], [6, -14], [-19, -30], [-48, -49]], [[7164, 84397], [-13, -1], [-21, 15], [3, 18], [29, 22], [29, -3], [3, -12], [-2, -14], [-2, -8], [-9, -8], [-17, -9]], [[5365, 83706], [4, 0], [9, 4], [18, 33], [6, 1], [0, -10], [-8, -32], [14, -43], [13, -21], [-1, -7], [-34, -15], [-25, 11], [-14, -4], [-12, -15], [-9, 17], [-6, 79], [2, 14], [14, 27], [18, 13], [8, -4], [7, -11], [1, -11], [-5, -26]], [[4917, 83436], [-6, -2], [-20, 17], [-7, 14], [-5, 20], [39, 30], [8, 0], [8, -16], [1, -14], [-11, -37], [-7, -12]], [[4846, 83180], [-24, -13], [-26, 13], [-22, 25], [-2, 28], [49, -18], [10, -9], [15, -26]], [[5591, 83599], [-17, -13], [-5, -16], [-13, -7], [-11, -13], [-37, -59], [-16, -11], [18, 51], [3, 16], [0, 10], [-5, 38], [10, -1], [9, 8], [18, 34], [16, 3], [17, 40], [9, 3], [4, -6], [-7, -24], [16, -22], [-4, -22], [-5, -9]], [[3933, 82989], [-11, -10], [-8, -2], [-7, 6], [-28, -7], [-6, 4], [-13, 34], [-1, 18], [5, 14], [13, 13], [21, 11], [21, -2], [35, -32], [17, -18], [3, -12], [-12, -11], [-29, -6]], [[4011, 83027], [-12, -4], [-3, 6], [-2, 25], [-9, 40], [18, 15], [11, 3], [4, -6], [13, -30], [13, -8], [9, -6], [-16, -9], [-26, -26]], [[5300, 85585], [-20, -9], [-22, 5], [-17, 57], [13, 1], [28, 38], [60, 30], [15, 4], [-57, -126]], [[2016, 86668], [60, -38], [39, 4], [30, -31], [13, -26], [-46, 19], [-66, -2], [-90, 77], [-32, 18], [7, 43], [35, 22], [17, -58], [33, -28]], [[2733, 84783], [-29, -28], [-26, 10], [-7, 20], [-1, 9], [75, 22], [-12, -33]], [[2863, 82285], [-4, -24], [-4, -8], [-43, 12], [-29, -4], [-3, 14], [3, 12], [45, 18], [18, 1], [12, -10], [5, -11]], [[2574, 82131], [-18, -18], [-5, 7], [-3, 23], [10, 17], [30, 38], [21, -7], [6, -10], [0, -14], [-8, -19], [-10, -10], [-12, 0], [-11, -7]], [[2093, 81953], [-21, -8], [-22, 9], [10, 30], [11, 16], [21, 20], [24, -9], [19, -25], [-42, -33]], [[2846, 84466], [36, -11], [21, 7], [18, -6], [3, -13], [-31, -30], [-13, 2], [-37, 36], [3, 15]], [[1031, 81677], [-17, -34], [-13, 15], [-5, 47], [10, 12], [27, -34], [-2, -6]], [[1105, 81798], [-6, -17], [-28, 18], [-9, 15], [-2, 15], [8, 25], [22, 0], [12, -10], [12, -19], [4, -12], [-13, -15]], [[792, 81633], [-8, -7], [-15, -6], [-42, 6], [-26, -2], [-28, -4], [-22, -10], [-4, 14], [1, 12], [92, 32], [22, 16], [13, 21], [12, 39], [10, 12], [6, -1], [13, -15], [-5, -20], [-11, -18], [-4, -17], [-4, -52]], [[99603, 81748], [-17, -10], [-10, 25], [-1, 15], [10, 15], [17, -9], [10, -15], [-9, -21]], [[99847, 81435], [-49, 0], [-97, 94], [-50, 29], [-28, 33], [13, 7], [60, -23], [49, -51], [27, -33], [31, -28], [34, -12], [10, -16]], [[98255, 82004], [-18, -2], [-11, 20], [-60, 8], [6, 19], [26, 8], [39, 30], [33, -5], [-9, -28], [-6, -50]], [[12508, 84879], [24, -63], [17, -49], [15, -59], [26, -122], [12, -46], [3, -26], [3, -66], [-4, -14], [-7, -13], [-2, -19], [7, -50], [1, -77], [-7, -43], [-8, -7], [-19, 14], [-15, 24], [-12, 24], [-28, 77], [-9, 36], [0, 25], [4, 19], [9, 12], [17, 31], [-3, 5], [-12, -7], [-25, -4], [-22, 24], [-17, 13], [3, 45], [-4, 12], [-34, -13], [-13, 12], [-3, 17], [1, 25], [6, 21], [32, 55], [-3, 11], [-15, 2], [-21, 19], [-9, 61], [-22, 35], [-14, -3], [-29, -99], [-15, -22], [-42, -14], [9, 28], [4, 25], [-15, 74], [-1, 29], [10, 21], [30, 9], [15, 13], [13, 20], [3, 20], [23, 53], [10, 10], [29, 0], [60, -59], [18, -8], [26, -38]], [[12589, 85346], [70, -13], [52, 3], [47, -86], [29, -70], [17, -49], [10, -47], [13, -45], [-1, -7], [-28, 31], [-19, 62], [-10, 24], [-10, 11], [-10, 23], [-21, 59], [0, 17], [-9, 16], [-11, 6], [-12, -3], [-4, -5], [2, -41], [9, -46], [51, -99], [34, -57], [7, -18], [5, -52], [-15, -23], [18, -48], [-1, -9], [-4, -9], [-48, -21], [-45, -89], [-48, -52], [-23, -8], [-10, 9], [-11, 20], [-6, 26], [-1, 33], [12, 21], [24, 109], [0, 35], [-30, 50], [-18, 40], [-9, 57], [-17, 149], [-7, 48], [-11, 39], [-14, 32], [-10, 35], [-8, 38], [3, 15], [24, -20], [29, -55], [15, -36]], [[12297, 85393], [40, -56], [0, -13], [-8, -38], [-22, -11], [6, -15], [17, -12], [11, 10], [42, 54], [13, 11], [8, 1], [51, -16], [44, -26], [13, -20], [8, -36], [-12, -79], [-37, -13], [-17, 1], [-18, 12], [-30, -28], [25, -20], [75, -5], [23, -44], [6, -34], [-16, -62], [-43, 17], [-37, 36], [-77, 51], [-19, 3], [-12, -9], [-4, -31], [1, -68], [-20, -34], [-61, 15], [-24, 51], [-22, 80], [-84, 96], [-23, 19], [-30, 57], [12, 45], [4, 26], [16, 7], [23, 20], [14, 44], [21, -36], [28, -34], [1, 32], [13, 26], [28, -1], [13, 5], [18, 24], [26, 12], [16, -14]], [[12898, 84296], [53, -12], [48, 1], [17, -24], [10, -25], [7, -24], [1, -22], [-1, -15], [-6, -17], [2, -5], [94, -55], [44, -58], [18, -30], [10, -26], [19, -64], [39, -74], [21, -23], [11, -22], [-6, 0], [-28, 16], [-60, 50], [-5, -2], [-5, -27], [-9, -24], [-14, -17], [11, -5], [48, 11], [41, -49], [15, -8], [16, -35], [0, -14], [-9, -26], [-6, -10], [2, -7], [11, -4], [45, 7], [8, -12], [-7, -101], [6, -37], [0, -17], [-5, -22], [0, -19], [4, -19], [1, -18], [-12, -45], [-12, -8], [-19, 0], [-15, 13], [-22, 39], [-21, 60], [-8, 9], [-27, 9], [-5, 7], [-17, 1], [-13, 25], [2, 33], [-11, 33], [1, 15], [-12, 6], [-10, -9], [6, -33], [-6, -25], [-22, 11], [-36, 80], [-41, 65], [-17, 15], [5, 19], [20, 10], [17, -1], [3, 11], [-34, 63], [1, 18], [12, 31], [-15, 13], [-43, -9], [-15, 6], [-13, 26], [-7, 21], [-37, 4], [-14, -2], [-24, 33], [-12, 21], [5, 11], [22, 18], [13, -2], [25, -20], [10, 0], [25, 27], [4, 24], [18, 20], [-3, 21], [-10, 35], [-23, 10], [-46, -21], [-41, -32], [-16, 12], [-3, 20], [43, 55], [19, 30], [-4, 17], [-14, 23], [-1, 58], [9, 13]], [[12781, 84587], [18, -40], [26, 4], [14, -30], [11, -46], [-8, -29], [-11, 7], [-13, -17], [-8, -56], [4, -55], [-4, -56], [-15, -57], [-3, -38], [-6, -11], [-7, -4], [-8, 10], [-12, 8], [-15, -32], [-19, 0], [-15, 73], [13, 121], [31, 25], [-18, 32], [-39, 39], [3, 21], [-29, 62], [-2, 14], [5, 52], [27, 46], [37, 8], [25, -20], [14, -17], [4, -14]], [[7662, 85460], [10, -4], [10, 34], [8, 1], [33, -29], [20, 6], [13, -35], [12, -4], [10, 5], [7, -3], [-2, -38], [-24, -38], [-12, -9], [-15, 9], [-6, 4], [-10, 17], [-8, 21], [-5, 1], [-18, -25], [0, -13], [8, -19], [-1, -11], [-20, -6], [-20, 3], [-24, -16], [-5, 10], [-4, 29], [-7, -4], [-12, -35], [-12, -22], [-22, -18], [-5, -9], [-17, -1], [-24, -12], [-15, 2], [-90, 38], [-21, 14], [74, 87], [39, 34], [22, -2], [22, -11], [12, 2], [1, 39], [-21, 29], [1, 12], [46, 19], [18, -3], [19, -10], [18, -16], [17, -23]], [[3343, 82571], [-85, -61], [-28, -45], [-21, -44], [-16, -24], [-12, -4], [-14, -11], [-28, -31], [-12, -3], [-90, -71], [-6, -1], [4, 18], [28, 26], [18, 24], [20, 40], [11, 14], [4, 20], [1, 40], [5, 15], [20, 30], [14, 17], [18, 6], [38, -5], [16, 15], [4, 11], [-9, 11], [-2, 18], [2, 32], [11, 28], [19, 25], [27, 19], [33, 13], [24, 1], [44, -29], [7, -13], [-11, -29], [-6, -27], [-28, -25]], [[3718, 82891], [12, -27], [21, 17], [15, 24], [12, 31], [7, 12], [11, -16], [29, -22], [-25, -34], [-47, -51], [-16, -34], [-1, -15], [46, 12], [13, -2], [8, -12], [-13, -13], [-25, -13], [-21, -24], [-50, -42], [-19, -35], [-23, -14], [-30, -3], [-54, -23], [-32, -21], [-8, -12], [-11, -5], [-12, 1], [-13, -10], [-14, -19], [-12, -9], [-19, -2], [-11, -8], [-11, 0], [-31, 23], [-8, 14], [28, 27], [20, 9], [30, 4], [29, 25], [61, 34], [19, 18], [12, 63], [14, 11], [8, 25], [33, -1], [16, -28], [5, -4], [3, 3], [2, 22], [17, 16], [-10, 12], [-31, 15], [-23, 6], [-15, 0], [-13, 8], [-9, 17], [-5, 17], [1, 17], [8, 19], [14, 21], [17, 12], [36, 9], [32, 14], [17, 2], [13, -6], [3, -55]], [[1791, 81875], [54, -23], [68, 2], [25, -5], [0, -7], [-43, -10], [-15, 4], [-38, -13], [-26, -3], [-58, 13], [-46, -9], [-12, 3], [-14, 11], [-16, 18], [-1, 12], [15, 4], [40, -15], [4, 8], [34, 14], [29, -4]], [[1478, 81817], [-149, -24], [-22, 16], [22, 10], [27, 5], [56, 27], [69, 23], [54, 29], [47, 18], [13, 30], [-41, 16], [-8, 12], [19, 14], [16, 21], [39, 25], [34, -31], [8, -20], [-4, -25], [-7, -25], [-30, -13], [-4, -13], [16, -38], [-62, -33], [-93, -24]], [[946, 81720], [2, -20], [32, 3], [10, -10], [0, -38], [-5, -11], [-4, -2], [-12, 8], [-13, -19], [-59, -48], [-18, 27], [-35, -42], [24, 108], [28, 16], [11, 12], [-3, 32], [13, 52], [28, -2], [13, -22], [0, -14], [-12, -30]], [[589, 81595], [-6, -19], [-7, 0], [-37, 32], [-5, 11], [22, 15], [6, 11], [-3, 16], [-16, 21], [-30, 27], [-11, 20], [7, 12], [14, 7], [45, 2], [25, -34], [18, -12], [43, -8], [-22, -14], [-13, -13], [-15, -53], [-15, -21]], [[99923, 81742], [-23, -14], [-26, 7], [-15, 23], [2, 27], [34, 29], [43, -37], [-15, -35]], [[99281, 81729], [-24, -24], [-19, 24], [-3, 12], [36, 42], [28, 9], [11, 15], [12, 53], [20, 2], [10, -6], [-5, -25], [-16, -38], [0, -27], [-50, -37]], [[98002, 82380], [48, -19], [33, 9], [41, -30], [52, -53], [-12, -10], [-13, -5], [-12, 0], [-40, -8], [-22, 2], [-40, -36], [-45, 26], [-15, 51], [-35, 12], [-28, 18], [51, 40], [37, 3]], [[6783, 62794], [-12, -27], [-16, 2], [-55, 59], [-7, 32], [4, 148], [-21, 120], [-23, 91], [17, 47], [22, 37], [25, 69], [-21, 88], [6, 53], [11, 9], [59, -65], [117, -97], [31, -68], [6, -74], [21, -9], [11, -50], [30, -44], [11, -26], [-13, -40], [-56, -78], [-72, -34], [-62, -87], [-13, -56]], [[6329, 64063], [59, -15], [14, 6], [10, -12], [48, -8], [9, -5], [-10, -30], [-31, -27], [-45, 24], [-75, 8], [3, 23], [7, 16], [1, 29], [10, -9]], [[6531, 63901], [8, -11], [29, 16], [22, 5], [35, -38], [13, -26], [23, -27], [8, -21], [-6, -24], [-26, -40], [-36, -10], [-20, -17], [-28, 4], [-8, 7], [-3, 51], [-9, 55], [-17, -7], [-20, 19], [-21, 46], [-2, 27], [11, 44], [20, 5], [15, -24], [12, -34]], [[6167, 64202], [9, -3], [13, 4], [4, -46], [14, -25], [5, -15], [-15, -16], [-30, -7], [-14, 13], [-15, 29], [-15, -8], [-3, 23], [-3, 6], [-11, -6], [10, -30], [-27, -2], [-9, 4], [-7, 34], [-28, 64], [0, 25], [-10, 31], [42, 8], [28, 53], [16, 5], [31, -85], [0, -24], [6, -23], [9, -9]], [[5730, 64476], [-25, -32], [-14, 14], [-27, 5], [-10, 25], [-29, 22], [-11, 30], [17, 56], [41, 48], [63, -2], [14, -38], [1, -28], [-8, -31], [-4, -45], [-8, -24]], [[5505, 64424], [-5, -26], [-10, 4], [-2, 23], [6, 31], [16, 27], [18, 41], [14, -6], [-8, -27], [-1, -29], [-20, -16], [-8, -22]], [[6431, 63808], [-17, -16], [-18, 8], [-4, 39], [-17, 50], [30, 10], [17, -14], [9, -16], [11, -27], [-11, -34]], [[29247, 77766], [13, 0], [65, 1], [115, 0], [116, 0], [115, 0], [116, 1], [116, 0], [115, 0], [116, 1], [27, 111], [26, 51], [34, -17], [19, 2], [21, 26], [17, 17], [11, -3], [9, -24], [8, -17], [9, 5], [8, 23], [0, 32], [10, 22], [13, 4], [12, -1], [6, 11], [-1, 16], [-4, 25], [1, 30], [30, 53], [36, 36], [12, 18], [4, 37], [21, 38], [10, 22], [2, 19], [-5, 24], [1, 44], [7, 54], [8, 58], [19, 52], [32, 57], [8, 75], [8, 80], [38, 77], [43, 87], [24, 50], [44, 91], [31, 64], [16, 30], [17, 35], [26, -10], [27, -11], [-4, -51], [5, -37], [12, -21], [18, -15], [14, -5], [17, 0], [44, 29], [52, 19], [29, 17], [5, 17], [13, 6], [21, -5], [39, -41], [45, -62], [35, -49], [2, -85], [0, -89], [1, -95], [1, -68], [0, -92], [1, -74], [1, -96], [1, -52], [5, -15], [-3, -20], [-2, -10], [1, -8], [2, -10], [-1, -15], [-4, -12], [-3, -15], [0, -25], [5, -15], [8, -8], [7, 0], [8, -9], [12, -16], [17, -13], [18, -5], [12, 3], [15, -8], [6, -22], [-3, -20], [-9, -10], [-9, -7], [-2, -16], [5, -16], [7, -14], [7, -25], [-3, -22], [-7, -18], [-3, -19], [6, -16], [15, -22], [9, -21], [14, -11], [7, 8], [5, 11], [6, 8], [10, -5], [12, -6], [13, -7]], [[31354, 77862], [-2, -18], [8, -29], [6, -57], [-9, -26], [2, -34], [26, -10], [6, -10], [1, -13], [-57, -88], [-48, 13], [-26, -24], [-27, -6], [-12, -40], [-15, -8], [-20, 3], [-18, 11], [-13, -6], [-19, -70], [-16, 6], [-6, -26], [-8, -11], [-12, -9], [-10, 31], [-7, 30], [-9, 6], [-13, 8], [-13, 0], [-9, -5], [-11, -19], [-16, -16], [-12, 13], [-9, 23], [-8, -36], [-12, -38], [2, -44], [-5, -26], [-11, 7], [-11, 23], [-31, 18], [-25, -1], [5, 24], [24, 35], [-8, 7], [-11, -5], [-5, 5], [8, 32], [1, 35], [-10, -12], [-14, -37], [-31, -30], [1, -49], [-30, -102], [-1, -43], [-19, -34], [-25, -30], [-33, 9], [-25, -26], [-13, -29], [-11, -5], [-5, 38], [-5, 11], [-9, -55], [-9, -4], [-4, 40], [-4, 26], [-13, -23], [-9, -59], [-9, 5], [-2, 22], [-7, 7], [-2, -25], [3, -36], [-5, -19], [-8, 10], [-9, 17], [-15, -13], [-14, -5], [0, 17], [3, 22], [-27, -12], [-32, -39], [-26, -55], [9, -9], [10, -17], [-44, -84], [-44, -76], [-34, -123], [-14, -15], [-11, -22], [-13, -75], [-14, -66], [8, -30], [5, -30], [13, -30], [11, -3], [11, 5], [9, -1], [5, -13], [-2, -15], [-13, -4], [-26, -26], [-22, -11], [-11, -32], [-16, -37], [-32, -58], [13, -18], [50, -20], [22, -21], [34, -109], [-8, -10], [-3, -20], [30, -28], [9, -78], [25, -27], [36, -16], [45, 24], [37, 32], [-1, 27], [-24, 61], [-5, 29], [-18, 19], [-6, -16], [-11, 21], [-2, 12], [11, 5], [12, -2], [14, -11], [36, -67], [10, -89], [3, -56], [-4, -19], [-11, 4], [-20, -4], [-96, -29], [-21, -25], [-49, -28], [-3, 14], [3, 28], [-3, 59], [-10, 3], [-75, -96], [-30, -6], [-24, -28], [-6, 16], [-4, 71], [15, 61], [-8, -1], [-26, -36], [-11, 22], [-5, 24], [-8, 14], [-9, 5], [7, -53], [-17, -40], [-5, -104], [-22, -43], [-68, -27], [-45, 6], [-40, -9], [-53, -20], [-29, 12], [-30, -21], [-103, -6], [-21, 11], [-28, -39], [-44, -24], [-111, -88], [-25, -33], [-29, -50], [-21, -27], [-16, -9], [-10, -22], [-11, -15], [10, 50], [12, 43], [10, 82], [-3, 66], [-12, 28], [-12, 18], [14, -66], [2, -80], [-5, -47], [-27, -91], [-12, -21], [-13, -19], [-10, -8], [-10, -15], [-11, -23], [-10, -45], [6, -42], [53, -15], [15, 13], [7, -30], [4, -42], [-4, -45], [-9, -45], [-7, -57], [-5, -86], [-9, -78], [-1, 24], [5, 94], [-9, -10], [-6, -22], [-16, -121], [-22, -65], [-21, -45], [-21, 7], [5, -36], [-6, -18], [-5, -39], [-13, -26], [-12, 3], [-17, -18], [-6, -13], [-1, -26], [-11, -23], [-42, -119], [-35, -35], [-9, 5], [10, 56], [6, 57], [-22, 24], [-21, 13], [-23, -1], [-27, 44], [-34, 32], [-47, 86], [1, 24], [-1, 41], [14, 63], [14, 45], [19, 23], [56, 23], [14, 36], [8, 30], [-28, -52], [-41, -17], [-22, -19], [-18, -29], [-10, -37], [-24, -44], [2, -29], [4, -21], [-2, -44], [15, -43], [30, -70], [5, -109], [23, -72], [35, -85], [27, -24], [1, -32], [-12, -52], [-17, -24], [22, 5], [10, -12], [10, -43], [0, -44], [-4, -25], [-6, -10], [0, 25], [-5, 9], [-7, -11], [-5, -13], [-2, -49], [-5, -25], [-18, -7], [-19, -66], [-17, -37], [-67, -249], [2, -42], [-12, -14], [-19, -11], [-19, -25], [-12, -27], [-12, -74], [-22, -84], [-14, 35], [-4, 30], [7, 77], [24, 128], [26, 79], [21, 37], [16, 76], [-21, 12], [-32, -1], [6, 35], [9, 31], [-16, 31], [-10, 4], [-10, 12], [12, 26], [5, 27], [-3, 34], [5, 25], [-9, -4], [-13, -27], [-8, -10], [-5, 23], [-6, -5], [-4, -16], [-9, -9], [-18, 22], [-26, 25], [-15, 43], [-8, 34], [8, 61], [18, 10], [24, -9], [31, 0], [-4, 13], [-11, -2], [-33, 49], [-11, 30], [-18, 8], [-8, -29], [-9, -7], [11, 62], [15, 3], [22, 17], [-6, 36], [-14, 16], [-25, -20], [0, 26], [5, 32], [19, 0], [16, -10], [14, 52], [1, 24], [-24, -34], [-5, 73], [23, 72], [22, 31], [27, -1], [28, 5], [-17, 13], [-18, 7], [13, 28], [12, 5], [11, 24], [-27, -3], [3, 46], [-13, -9], [-16, -5], [-6, -19], [1, -33], [-4, -21], [-13, -18], [-20, -13], [-2, 23], [-7, 11], [-3, -50], [-5, -17], [-15, 47], [-5, -10], [1, -13], [-4, -23], [-13, -12], [1, -29], [-5, -16], [-42, 25], [-1, -8], [24, -56], [17, -18], [2, -30], [-15, -25], [-20, 21], [-4, -1], [11, -37], [7, -33], [-7, -27], [1, -33], [-1, -30], [-5, -26], [10, -121], [12, -33], [12, -32], [6, -29], [-12, -5], [-20, 25], [-17, 18], [-21, 59], [-4, 24], [-5, 19], [3, -43], [7, -48], [65, -107], [12, -42], [9, -32], [-2, -31], [-17, 22], [-15, 28], [-38, 32], [-49, 19], [-28, 74], [1, -31], [-7, -26], [-16, 32], [-11, 27], [-4, 29], [-20, -2], [-22, -25], [-22, 6], [-2, 50], [5, 27], [24, 62], [23, 33], [10, 41], [-4, 64], [-4, -65], [-13, -33], [-20, -24], [-27, -44], [-6, -41], [-8, -77], [11, -25], [11, -7], [34, 17], [18, -8], [39, -91], [72, -37], [27, -23], [22, -48], [32, -27], [25, -40], [1, -27], [-9, -30], [-3, -42], [-11, -27], [-26, -3], [-15, 7], [-84, 147], [-10, 14], [-31, 77], [-36, 41], [-11, -1], [52, -76], [21, -53], [37, -75], [26, -32], [20, -50], [18, -23], [50, -33], [-18, -24], [28, -20], [4, -37], [-3, -42], [-38, 16], [-1, -31], [3, -18], [-16, -15], [-24, 20], [-61, 113], [1, -15], [5, -18], [35, -72], [31, -44], [27, -20], [21, -36], [7, -22], [5, -34], [-15, -22], [-18, -13], [-17, 23], [-12, 24], [-27, 40], [-8, 46], [-20, -3], [-84, 58], [-68, 7], [7, -12], [8, -8], [54, -14], [22, -26], [44, -24], [26, -6], [11, -73], [35, -49], [5, -37], [25, -4], [43, 36], [28, -13], [40, -10], [9, -30], [7, -55], [14, -63], [37, -246], [55, -202], [7, -34], [-13, 30], [-41, 134], [-23, 96], [-23, 170], [-7, 38], [-8, 16], [-5, -13], [-2, -21], [4, -17], [-9, -56], [4, -26], [14, -26], [17, -67], [13, -89], [-18, 36], [-19, 19], [-29, 15], [-25, 26], [1, -37], [-2, -40], [-20, 12], [-14, 13], [12, -42], [-26, 13], [-17, -3], [-11, -38], [-15, -23], [-23, -7], [-33, 34], [-11, 42], [-4, 47], [-2, -55], [6, -58], [-2, -43], [32, -9], [30, 8], [40, -2], [26, 8], [16, 14], [38, -12], [3, -53], [-4, -52], [-3, -56], [11, 0], [12, 18], [6, 100], [35, 37], [12, -3], [11, -32], [4, -32], [4, -45], [-9, -68], [-53, -80], [-38, -74], [-20, -15], [-28, 8], [-32, 19], [-15, 4], [-12, -6], [-8, 22], [-4, 42], [-13, 14], [-9, -2], [-7, -44], [-29, -13], [-41, 19], [-42, 37], [18, -40], [105, -74], [12, -14], [11, -20], [-15, -32], [-11, -36], [-2, -28], [-4, -18], [-42, -48], [-23, 9], [-58, 86], [27, -75], [21, -31], [43, -17], [80, 28], [26, -31], [-22, -54], [-21, -37], [-28, -5], [-25, -10], [-7, -26], [-18, -2], [-27, -1], [-43, -2], [-23, 6], [-33, -54], [-12, -7], [-18, 10], [-7, 43], [-8, 21], [0, -80], [3, -22], [6, -16], [-38, -43], [-37, -54], [-13, -15], [-15, -27], [-30, -78], [-8, -57], [-11, -64], [-1, 29], [2, 48], [-8, 55], [-5, -101], [-12, -47], [-109, 3], [-47, -25], [-74, -86], [-22, -38], [-60, -145], [-16, -94], [-12, 40], [3, 29], [0, 24], [-15, -51], [15, -76], [-13, -28], [-40, -54], [-22, -8], [-25, -16], [-8, -52], [-33, -49], [-19, -22], [-36, 13], [11, -46], [-13, -36], [-23, -27], [-28, -18], [-16, 2], [-13, -9], [-11, -23], [-26, -21], [-28, 12], [-30, 7], [-18, -12], [29, -21], [16, -31], [-3, -41], [-8, -15], [-18, -22], [-8, 3], [-5, 20], [-6, 40], [-9, -9], [-1, -18], [-8, -7], [-25, 64], [1, -49], [9, -37], [9, -19], [8, -12], [3, -17], [-18, -42], [-9, -10], [-16, -7], [-10, -26], [3, -22], [-14, -49], [-34, -30], [-10, 1], [-9, -9], [5, -22], [9, -16], [-1, -14], [-9, -20], [-17, -6], [-10, -23], [3, -21], [6, -12], [-1, -21], [-21, -20], [-4, -21], [10, -6], [7, 6], [6, -4], [-12, -34], [-11, -21], [-10, -37], [-24, -11], [1, -12], [13, -11], [12, -28], [-22, -53], [-13, 4], [-8, 12], [-5, -42], [2, -22], [-5, -46], [-8, -55], [-6, -22], [1, -42], [4, -41], [13, -52], [20, -214], [13, -74], [24, -200], [41, -194], [57, -235], [93, -284], [11, -40], [-12, -35], [-4, -35], [-1, -54], [3, -52], [11, -64], [22, -98], [-12, 20], [-31, 140], [-4, 82], [5, 117], [-7, -3], [-6, -38], [-3, -44], [-8, -18], [-11, 68], [1, 31], [11, 36], [-3, 13], [-18, 18], [-4, 29], [2, 29], [-10, 15], [-8, -1], [5, -70], [9, -43], [11, -104], [17, -63], [10, -52], [118, -561], [28, -72], [10, -51], [11, -107], [2, -138], [-19, -252], [-5, -171], [-2, 5], [-2, 18], [-5, 2], [-16, -78], [-23, -71], [-8, -110], [-10, -56], [-33, -58], [-20, 1], [-50, -43], [-35, 11], [-42, -25], [-27, 3], [-16, 52], [3, 23], [6, 24], [11, 5], [36, -54], [7, 23], [-11, 27], [-21, 15], [-16, 17], [-31, 125], [-33, 85], [-6, 57], [-56, 35], [-41, 53], [-27, 94], [-15, 166], [-18, 19], [-8, 13], [18, 62], [19, 51], [-15, -13], [-11, -19], [-14, -45], [-10, -7], [-9, 7], [-11, 87], [3, 108], [15, 40], [-23, 2], [-23, -16], [3, -36], [-3, -20], [-18, 6], [-13, 12], [-17, 38], [-25, 71], [-49, 197], [-10, 27], [-17, 29], [8, 9], [14, 6], [32, 88], [25, 54], [9, 37], [-2, 16], [-11, 23], [-14, -20], [-7, 5], [-16, 47], [-16, 13], [-11, -10], [12, -38], [10, -14], [-4, -56], [-4, -18], [-10, -16], [-15, 9], [-7, -14], [-9, 15], [-9, 24], [-10, 40], [26, 225], [24, 144], [3, 163], [2, 24], [-2, 44], [-33, 94], [-145, 231], [-112, 273], [-97, 103], [-74, -23], [-12, -21], [-6, -26], [5, -31], [-7, -13], [-20, 2], [-26, -7], [-70, -72], [-25, 3], [-22, -19], [-17, -14], [-43, -8], [-37, -15], [-16, 8], [-10, 42], [0, 43], [8, -33], [13, -26], [6, 10], [2, 23], [-13, 45], [-41, 58], [-48, 84], [14, -3], [4, 18], [-15, 24], [7, 27], [10, 29], [-20, -4], [-18, -21], [-1, -24], [-3, -20], [-10, 3], [-18, 24], [-89, 68], [-77, 39], [59, 17], [32, -14], [-3, 21], [-8, 13], [-26, 17], [-32, -7], [-21, 8], [-21, -16], [-22, -25], [-21, -12], [-80, -18], [-65, -19], [11, 20], [11, 13], [38, 20], [6, 41], [-9, 39], [-10, -9], [-11, -31], [-13, 22], [-14, 0], [-4, -49], [-19, -33], [-8, -33], [-54, -26], [-7, 9], [16, 31], [-1, 18], [-19, -15], [-30, -60], [-106, -19], [5, 13], [23, 3], [32, 19], [-7, 32], [-12, 34], [-11, 4], [-8, 21], [1, 64], [-7, 38], [-18, 39], [-6, -8], [-12, -66], [-11, -87], [-5, -28], [-32, -2], [-28, 6], [-95, -11], [-35, 30], [-15, 6], [-9, -1], [-41, -27], [-48, -21], [-11, 7], [-16, 1], [-34, -71], [-40, -33], [-102, 60], [-25, 47], [-22, 10], [-28, 6], [-29, -58], [-23, -79], [36, -44], [30, -21], [50, 18], [28, 38], [23, -1], [11, 8], [10, 20], [19, -16], [1, -16], [-14, -22], [-17, -19], [-11, -22], [20, -45], [31, -15], [12, 7], [7, 50], [19, 32], [26, -7], [-3, -20], [3, -19], [12, -33], [-1, -47], [2, -11], [-28, -20], [-21, -8], [-17, -27], [9, -15], [-17, -14], [-11, 6], [-6, -6], [-2, -16], [-9, -16], [13, -46], [26, -30], [19, -38], [74, -50], [18, 1], [18, -50], [14, -18], [14, -8], [-1, -35], [-25, -25], [-7, -31], [-6, -17], [-11, 22], [-11, 15], [-26, -47], [-13, -10], [6, 51], [-10, 20], [-15, 52], [-21, 31], [-16, 11], [-12, 20], [-14, 8], [-13, -2], [-21, 12], [-1, 27], [-6, 20], [-16, 25], [-78, 45], [-1, -19], [6, -14], [11, -9], [13, -19], [0, -54], [-6, -23], [-2, -33], [-5, -34], [-10, -26], [-21, -18], [-10, 15], [-15, 72], [-22, 23], [-34, 2], [-23, -16], [-25, -70], [-21, -11], [-70, 36], [-80, 55], [2, 18], [13, 6], [24, -7], [-1, 19], [-25, 61], [-4, 28], [3, 34], [-8, -1], [-15, -28], [-51, 24], [-14, 28], [-30, 81], [-42, 3], [-19, 49], [-35, -20], [-17, -23], [-15, -35], [6, -19], [15, -29], [-7, -14], [-49, -21], [-114, 24], [-34, 21], [-44, 46], [-62, 37], [-30, 6], [-29, -7], [-86, -4], [-19, -10], [-17, -16], [-11, 18], [-5, 31], [10, 5], [11, 19], [10, 36], [1, 22], [-7, 15], [-13, 1], [-29, -95], [16, -53], [-1, -19], [-58, -11], [-132, -107], [-51, -58], [2, 19], [62, 75], [-21, 12], [-36, -19], [-13, 7], [15, 62], [-4, 55], [-26, 1], [-16, -43], [-11, 1], [-14, 19], [-11, -6], [8, -98], [16, -41], [13, -52], [-36, -64], [-34, -53], [-3, -51], [-34, -66], [-32, -38], [-74, -88], [-22, -19], [-33, -42], [-47, -30], [-44, -49], [-15, -8], [28, 42], [34, 41], [-29, -6], [-44, 19], [-28, 1], [0, -15], [-21, -21], [-21, 31], [-9, 21], [-5, 18], [-9, 4], [-9, -8], [32, -127], [14, -5], [15, -13], [-19, -29], [-20, -23], [-32, -15], [-27, 47], [-6, -59], [-3, -58], [-9, -14], [-15, -22], [-7, 16], [-4, 23], [-9, -20], [-14, -15], [-22, -3], [-17, -8], [0, -24], [4, -24], [30, 19], [-11, -62], [-27, -62], [-23, -14], [-34, 9], [-8, -6], [-8, -13], [40, -96], [-25, -145], [-17, -52], [-11, -7], [-12, -2], [-44, 47], [-24, 36], [21, -98], [58, -29], [3, -37], [-1, -31], [-11, -38], [-11, -49], [8, -35], [9, -85], [8, -39], [8, -119], [10, -51], [52, -189], [18, -2], [2, -20], [-1, -40]], [[23015, 66797], [-38, -11], [-16, -18], [-3, -15], [-2, -8], [-5, 1], [-18, 11], [-41, 53], [-59, 34], [-78, 13], [-54, 27], [-28, 41], [-30, 24], [-32, 8], [-26, 22], [-20, 37], [-30, 23], [-39, 10], [-26, 28], [-18, 68], [0, 1], [-16, 112], [-20, 71], [-39, 88], [-4, 11], [0, 15], [4, 51], [-4, 36], [-12, 30], [-3, 32], [7, 33], [0, 40], [-6, 46], [-25, 51], [-44, 54], [-37, 79], [-31, 104], [-31, 72], [-30, 40], [-21, 49], [-11, 58], [-4, 34], [5, 9], [-19, 64], [-42, 120], [-24, 87], [-6, 55], [-27, 66], [-47, 76], [-25, 49], [-7, 35], [-73, 100], [-21, 62], [-17, 20], [-19, -2], [-10, 6], [-1, 14], [-6, 1], [-12, -13], [-39, -3], [-66, 8], [-48, 17], [-29, 27], [-21, -4], [-12, -34], [-25, -21], [-38, -10], [-33, -62], [-28, -116], [-12, -74], [3, -33], [-7, -24], [-18, -15], [-19, -33], [-18, -52], [-22, -25], [-25, 1], [-46, 40], [-67, 79], [-52, 48], [-38, 19], [-34, 36], [-29, 54], [-27, 36], [-24, 18], [-29, 60], [-33, 102], [-16, 78], [0, 83], [-43, 181], [-23, 78], [-17, 36], [-33, 43], [-49, 50], [-67, 100], [-83, 150], [-58, 90], [-35, 30], [-30, 54], [-25, 78], [-25, 49], [-2, 2], [-3, 1], [-61, 1], [-61, 1], [-61, 0], [-61, 1], [-61, 1], [-61, 0], [-61, 1], [-61, 1], [0, -65], [0, -65], [-1, -65], [0, -64], [-98, -1], [-98, 0], [-98, -1], [-98, 0], [-99, 0], [-98, -1], [-98, 0], [-98, 0], [-132, 85], [-132, 85], [-131, 85], [-132, 86], [-132, 85], [-132, 85], [-131, 85], [-132, 86], [13, 32], [18, 87], [-32, -6], [-79, -13], [-80, -12], [-79, -12], [-80, -13], [-79, -12], [-80, -12], [-79, -13], [-80, -12]], [[17464, 70583], [0, 4], [-2, 63], [-13, 22], [-17, -14], [-7, 82], [4, 39], [-2, 38], [-16, 92], [-41, 113], [-89, 140], [-46, 47], [-35, 59], [-23, 16], [-28, 5], [-9, -27], [-32, 18], [5, 66], [-32, 92], [-25, 10], [-65, -6], [-87, 50], [-25, 30], [-9, 54], [-41, 47], [-53, 46], [-30, -11], [-39, 7], [-55, 33], [-33, 4], [-63, -9], [-23, 7], [-22, 41], [-24, 21], [5, 51], [-3, 47], [4, 36], [-11, 79], [9, 73], [-8, 26], [-13, 21], [-42, 30], [-7, 37], [7, 52], [-11, 35], [-35, 32], [-32, 73], [-40, 39], [-17, 67], [-25, 42], [-8, 36], [-56, 131], [-59, 102], [-9, 58], [-2, 81], [23, 49], [12, 43], [-1, 39], [-4, 29], [-20, 51], [-79, 30], [-64, 124], [-4, 96], [-25, 98], [0, 63], [-4, 69], [19, 15], [17, -6], [-1, -27], [5, -49], [20, -37], [19, -16], [18, -36], [13, -11], [13, -3], [-7, 23], [-8, 15], [-9, 48], [-18, 61], [-20, 33], [-11, 61], [-9, 15], [-5, 22], [20, 27], [27, 19], [36, 6], [103, -9], [21, 15], [19, -5], [13, 2], [-28, 16], [-16, -5], [-18, 3], [-37, -3], [-15, 7], [-16, 19], [-11, 2], [-34, -33], [-15, 4], [-36, 36], [-15, 5], [-25, -20], [-4, -90], [8, -66], [-15, -7], [-17, 27], [-27, 17], [-22, 25], [-32, 46], [-16, 17], [-18, -39], [-1, 18], [9, 45], [-3, 75], [28, -60], [-8, 42], [-22, 47], [-17, 16], [-20, 83], [-47, 50], [-38, 80], [-77, 134], [-5, 117], [-28, 148], [12, 85], [-1, 59], [-14, 91], [-15, 49], [-62, 135], [-60, 90], [-9, 69], [-4, 69], [13, 62], [12, 64], [8, 17], [3, -7], [-2, -13], [8, -5], [3, 29], [6, 15], [-9, 2], [1, 9], [5, 18], [18, 85], [-1, 107], [19, 131], [-1, 44], [-12, 93], [-13, 56], [-23, 40], [10, 58], [0, 55], [-40, 80], [-15, 104], [-3, 45], [4, 116], [-11, 50], [-27, 82], [12, 72], [12, 43], [30, 190], [7, 15], [13, 0], [22, 32], [-10, 8], [-16, -16], [14, 75], [15, 64], [10, 24], [5, 209], [9, 160], [14, 53], [-5, 55], [6, 74], [-4, 74], [31, 359], [-4, 43], [9, 59], [-9, 153], [4, 171], [-8, 22], [-4, 24], [8, 3], [14, -25], [66, 0], [42, 24], [16, -8], [17, -31], [23, -7], [28, 6], [-9, 8], [-13, 2], [-29, 29], [-17, 28], [-51, -1], [-11, 18], [-58, -18], [-17, 19], [-32, -13], [8, 54], [-2, 68], [2, 66], [8, -48], [19, -52], [10, 59], [6, 72], [-19, 29], [-32, 20], [-11, 68], [75, 58], [-40, 12], [-15, 26], [-20, 4], [-1, -20], [-6, -27], [-7, 35], [-2, 41], [-8, 70], [-31, 113], [-18, 147], [-23, 72], [-45, 69], [-12, 40], [-11, 103], [7, 77], [-9, 54], [22, -3], [56, -42], [71, -34], [21, -24], [34, -19], [189, -28], [13, 3], [24, 17], [11, -2], [27, -40], [14, -4], [18, 2], [14, 7], [23, 28], [3, -11], [-1, -25], [8, -36], [17, -47], [7, -29], [-34, -82], [-7, -2], [-1, 28], [-4, 5], [-64, -139], [-22, -66], [-2, -29], [0, -18], [9, -4], [21, 7], [30, 27], [1, 6], [-28, -10], [-13, 0], [1, 31], [4, 14], [18, 47], [19, 27], [28, 30], [16, 24], [11, 35], [30, 43], [6, 11], [-2, 35], [2, 7], [15, -5], [6, -60], [-4, -27], [-26, -32], [-3, -12], [5, -44], [-5, -4], [-10, 5], [-3, -3], [25, -48], [8, -38], [1, -33], [-7, -65], [-7, -10], [-12, 3], [-17, 21], [-3, -7], [-13, -50], [-5, 4], [-8, 60], [-4, 4], [-25, -27], [-11, -26], [-8, -41], [-11, -20], [31, -4], [28, 8], [23, -19], [8, -1], [21, 19], [6, 14], [17, 62], [9, 11], [13, 1], [12, 9], [19, 34], [0, 14], [-6, 77], [2, 43], [-4, 14], [-8, 14], [1, 14], [6, 23], [1, 21], [-6, 18], [3, 21], [17, 45], [3, 20], [22, 45], [-6, 18], [-15, 22], [-10, 19], [-10, 30], [-8, 10], [-2, -4], [11, -50], [-3, -3], [-27, 27], [-7, 16], [-3, 23], [2, 17], [15, 17], [18, 6], [-2, 15], [-22, 46], [-15, 21], [-11, 10], [-15, 3], [-7, 7], [-2, 11], [3, 15], [9, 4], [23, -6], [13, 11], [-1, 18], [-4, 10], [1, 66], [-9, 53], [-5, 9], [-5, 1], [-6, -7], [-14, -2], [-10, 18], [-10, 34], [-18, 80]], [[15892, 80064], [28, 0], [119, 0], [118, 0], [119, 0], [118, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [119, 0], [118, 0], [118, 0], [119, 0], [118, 0], [66, 0], [1, 121], [1, 96], [60, -11], [18, -18], [5, -8], [-1, -27], [5, -80], [10, -67], [26, -80], [0, -1], [2, -31], [8, -20], [15, -18], [58, -22], [99, -26], [57, -30], [13, -33], [27, -14], [40, 7], [28, 14], [23, 32], [34, 7], [28, -2], [29, -4], [15, -4], [45, -26], [29, -20], [41, -39], [23, -17], [11, -40], [13, -51], [18, 0], [14, 30], [35, 5], [47, -21], [41, -60], [58, -53], [36, -27], [36, 0], [47, 27], [49, 51], [35, 9], [21, -5], [12, -40], [15, -15], [38, 4], [80, -8], [63, 11], [15, -23], [13, -36], [25, -11], [35, 11], [63, -9], [26, -2], [51, 14], [24, 16], [34, 26], [46, 36], [79, 62], [65, 23], [61, -45], [48, -39], [18, -16], [49, -40], [70, -57], [79, -65], [80, -65], [69, -57], [49, -40], [19, -16], [54, -46], [54, -46], [54, -46], [53, -46], [54, -46], [54, -46], [54, -46], [54, -46], [14, -77], [13, -75], [31, -54], [29, -49], [17, 2], [17, 21], [11, 10], [18, 2], [40, 18], [12, -4], [7, -9], [0, -14], [-1, -11], [-6, -23], [9, -42], [2, -47], [6, -36], [16, -46], [15, -36], [18, -7], [41, 21], [26, 8], [15, -3], [25, -34], [13, -20], [3, -17], [-34, -102], [54, -51], [60, -55], [73, -66], [44, -41], [58, -58], [10, -82], [8, -70], [11, -96], [11, -99], [11, -99], [11, -104], [13, -115], [11, -102], [12, -111], [17, -145], [-15, -56], [-32, -121], [-28, -110], [-3, -32], [-20, -160], [-16, -66], [-27, -38], [-28, -38], [-34, -62], [-38, -31], [-19, -18], [-10, -28], [-11, -63], [2, -96], [31, -82], [45, -46], [49, -45], [70, 0], [63, 60], [66, 63], [59, 57], [71, 67], [64, 61], [69, 22], [96, 30], [121, 38], [59, 43], [76, 57], [87, 64], [76, 56], [38, 31], [27, 36], [7, 26], [-2, 15], [-7, 15], [-9, 11], [-9, 9], [-4, 12], [-1, 26], [-5, 14], [-5, 11], [2, 99], [-7, 31], [-24, 78], [47, 35], [43, 32], [35, 24], [73, 4], [67, -1], [94, 0], [78, -1], [92, 0], [53, -1], [71, 1], [34, 90], [31, 81], [34, 76], [60, 91], [17, 16], [10, 35], [36, 34], [40, 31], [16, 30], [7, 17], [109, 158], [62, 73], [50, 41], [39, 19], [26, -2], [15, 2]], [[29858, 75452], [-20, -37], [18, -4], [16, 11], [14, 22], [34, 30], [29, 13], [9, 3], [13, -21], [28, 17], [28, 9], [-121, -96], [-25, -11], [-36, -28], [-33, -21], [-24, -7], [-120, -71], [-10, -2], [-10, 7], [-99, -36], [-40, -5], [-37, -12], [27, 29], [1, 11], [-7, 9], [-14, -3], [-15, -30], [-24, -10], [-5, 33], [8, 26], [11, 24], [24, 38], [34, 24], [17, 21], [12, -18], [2, 25], [10, 14], [10, 8], [24, 0], [12, 4], [10, 8], [9, 2], [27, -12], [25, 4], [21, 15], [22, 5], [56, 4], [57, 11], [23, 21], [47, 56], [28, 16], [-43, -66], [-23, -30]], [[31059, 77380], [-16, -11], [-18, 4], [0, -30], [-2, -11], [-19, 16], [-8, 10], [1, 40], [17, 38], [14, 15], [17, -10], [13, -43], [1, -18]], [[29392, 75185], [-13, -2], [13, 55], [24, 25], [9, -5], [0, -19], [-3, -17], [-16, -26], [-14, -11]], [[30414, 75677], [-77, -28], [-12, 18], [19, 8], [24, 43], [16, 5], [25, -24], [5, -22]], [[30210, 75743], [-13, -15], [-16, 2], [8, 22], [3, 31], [8, 34], [4, 11], [9, 9], [-3, -94]], [[30561, 75613], [-21, -9], [-49, 21], [40, 18], [7, 6], [5, 27], [1, 13], [15, -57], [2, -19]], [[28990, 72497], [-4, -12], [-19, 64], [19, -21], [4, -17], [0, -14]], [[29015, 72142], [-37, -16], [-3, 6], [42, 32], [14, 116], [2, 53], [-7, 95], [1, 19], [6, -30], [7, -88], [-3, -67], [-12, -97], [-10, -23]], [[28949, 72113], [-50, -41], [-6, 3], [33, 29], [23, 9]], [[28749, 71798], [-7, -6], [25, 72], [50, 91], [14, 14], [-42, -78], [-40, -93]], [[27212, 67081], [-10, -15], [-20, 11], [-11, 20], [-5, 38], [17, -41], [7, -9], [22, -4]], [[27199, 67138], [-1, -34], [-14, 57], [-9, 62], [13, -20], [11, -65]], [[27671, 66325], [-55, -108], [6, 27], [22, 58], [7, 28], [14, 17], [14, 31], [1, 37], [20, 25], [6, 4], [-35, -119]], [[24502, 68836], [-11, -8], [-46, 50], [-3, 21], [23, 20], [14, -2], [22, -25], [8, -8], [3, -10], [-2, -16], [-8, -22]], [[23051, 67915], [-6, -1], [14, 47], [2, 19], [22, 59], [12, 9], [5, -25], [-23, -42], [-26, -66]], [[23121, 68060], [-10, -3], [12, 31], [21, 16], [45, 60], [18, 4], [10, 20], [4, 3], [-3, -25], [-36, -36], [-61, -70]], [[22957, 67568], [-9, -33], [3, 50], [22, 112], [46, 147], [20, 25], [-53, -162], [-29, -139]], [[23600, 68632], [-14, -6], [61, 89], [12, 29], [16, -1], [-27, -50], [-48, -61]], [[23008, 66911], [-4, -26], [-23, 125], [-37, 282], [-2, 161], [6, 56], [10, -228], [41, -289], [9, -81]], [[16581, 71442], [-14, -1], [-23, 6], [8, 13], [12, 10], [4, -7], [13, -21]], [[16823, 70977], [-13, -1], [-17, 5], [-8, 31], [13, 2], [13, -4], [10, -24], [2, -9]], [[17125, 70753], [-16, -6], [-18, 12], [-16, 56], [-17, 43], [9, 13], [14, -42], [35, -64], [9, -12]], [[16654, 71381], [-19, -8], [-15, 8], [-23, 55], [50, 7], [21, -24], [3, -7], [-17, -31]], [[16699, 71474], [57, -30], [30, 14], [6, -14], [-4, -12], [-69, -23], [-21, 16], [-2, 21], [-7, 21], [10, 7]], [[17125, 71074], [14, -42], [-20, 5], [-21, -3], [-6, 24], [-7, 32], [-4, 8], [-14, 3], [-1, 3], [-2, 15], [4, 8], [45, -36], [12, -17]], [[15894, 79880], [3, -13], [-11, -12], [-8, -2], [-12, 20], [-6, 2], [5, -30], [-2, -10], [-26, 18], [-5, 15], [8, 16], [16, 16], [6, 2], [32, -22]], [[15830, 79781], [7, -19], [-30, 12], [-13, 11], [-3, 11], [-5, 34], [2, 12], [13, 4], [25, -43], [4, -22]], [[15952, 79583], [13, -76], [6, 31], [38, -54], [0, -27], [-4, -9], [-8, -3], [-8, 8], [-6, 19], [-9, 10], [-18, 6], [-9, 21], [-4, 15], [0, 42], [-5, 14], [-10, 2], [-9, 11], [-14, 29], [-2, 8], [7, 24], [15, 41], [11, 19], [7, -2], [9, -13], [10, -22], [-2, -15], [-41, -31], [-2, -7], [21, -9], [7, -7], [7, -25]], [[30176, 75740], [-8, -11], [-3, 28], [6, 32], [5, 0], [3, -17], [-3, -32]], [[29407, 74700], [-32, -87], [-1, 17], [41, 108], [-8, -38]], [[29074, 73668], [-13, -10], [43, 116], [24, 96], [11, 34], [-10, -68], [-19, -62], [-36, -106]], [[28737, 71805], [-6, -1], [-11, 6], [-15, 12], [-4, 9], [15, -3], [21, -23]], [[27407, 66042], [-9, -12], [-4, 4], [0, 17], [-11, 39], [0, 10], [27, -38], [1, -10], [-4, -10]], [[27547, 66130], [-5, 0], [2, 9], [11, 16], [4, -6], [0, -9], [-12, -10]], [[27600, 66188], [-7, -3], [11, 25], [3, -2], [-7, -20]], [[27487, 66080], [-12, -13], [-13, 10], [14, 13], [43, 15], [-16, -18], [-16, -7]], [[27383, 69683], [-12, -140], [-5, 50], [-1, 48], [9, 28], [9, 14]], [[27342, 66013], [-18, -6], [15, 23], [5, 34], [8, -26], [0, -17], [-10, -8]], [[27726, 67556], [4, -42], [-25, 98], [-32, 154], [-17, 120], [12, -33], [11, -66], [47, -231]], [[27282, 65981], [-7, -1], [-1, 9], [12, 11], [9, -1], [-1, -12], [-12, -6]], [[25308, 68958], [-15, -30], [1, 12], [11, 30], [8, 11], [-5, -23]], [[25400, 69248], [-3, -6], [-25, 12], [-15, 11], [-2, 11], [41, -20], [4, -8]], [[25535, 69269], [-24, -12], [-36, 1], [-8, 4], [15, 8], [43, 11], [10, -12]], [[25215, 69172], [1, -27], [-13, 14], [-20, 1], [8, 9], [7, 9], [3, 10], [25, 33], [-7, -25], [-4, -24]], [[25325, 69013], [-7, -18], [7, 87], [-11, 74], [12, -32], [4, -39], [-5, -72]], [[26414, 68918], [-28, -21], [-30, 15], [19, 3], [13, -6], [35, 30], [18, 22], [21, 9], [-48, -52]], [[15874, 79034], [-3, -11], [-4, 1], [-8, 23], [-1, 16], [7, 12], [10, -34], [-1, -7]], [[16001, 79144], [-1, -13], [-10, -10], [-6, 2], [0, 16], [-3, 2], [-12, -18], [1, 36], [6, 39], [5, 1], [7, -26], [13, -29]], [[15973, 79259], [-2, -11], [-15, 13], [-5, 12], [1, 27], [3, 18], [3, 4], [9, -8], [3, -4], [3, -51]], [[15883, 79741], [-4, -6], [-15, 8], [-9, 13], [-3, 16], [6, 30], [7, 8], [5, -2], [2, -27], [13, -28], [-2, -12]], [[30938, 77301], [-11, -11], [-11, 3], [0, 29], [3, 9], [4, 5], [6, -8], [9, -27]], [[42704, 18182], [1, -33], [-43, 30], [-10, 14], [14, 19], [27, 0], [7, -11], [4, -19]], [[39693, 20699], [27, -28], [22, 19], [22, -2], [12, -10], [12, -3], [16, -1], [27, -47], [-11, -41], [29, 8], [26, -35], [12, 3], [5, 14], [17, 16], [11, -22], [14, -41], [18, -12], [15, -44], [12, -55], [11, -8], [19, -1], [20, 8], [-8, -48], [3, -42], [32, -30], [-19, -17], [-20, -24], [-41, -19], [-11, 8], [-35, 42], [-17, 50], [-37, 71], [-8, 21], [-9, 13], [-34, 9], [-30, 17], [-24, 36], [-8, 22], [-10, 15], [-33, -1], [-21, 17], [-21, 23], [-94, 67], [-37, -7], [-17, 19], [0, 33], [20, 20], [-82, 8], [-29, 12], [20, 7], [114, 1], [43, 6], [3, -15], [38, -29], [36, -3]], [[70136, 47593], [-6, -23], [-12, -10], [-5, 58], [-17, 41], [7, 0], [15, -21], [6, -56], [5, 17], [-1, 17], [3, 16], [-2, 18], [-9, 28], [3, 5], [13, -23], [2, -19], [-2, -48]], [[48418, 42627], [-25, -3], [2, 27], [19, 29], [13, -4], [0, -33], [-9, -16]], [[46009, 47249], [-9, -1], [-3, 5], [-2, 14], [5, 22], [4, 13], [7, -2], [8, -15], [8, -13], [-4, -12], [-14, -11]], [[14364, 37789], [-3, -9], [-6, 8], [-6, 16], [-2, 18], [6, 10], [7, -6], [4, -18], [0, -19]], [[32499, 62339], [-44, -29], [2, 17], [35, 40], [13, -3], [-6, -25]], [[33652, 22309], [43, -33], [53, 11], [22, -9], [13, -28], [-7, -26], [-17, 4], [-15, -7], [3, -35], [10, -14], [56, -38], [10, -2], [-1, 15], [-10, 26], [-4, 28], [9, 24], [14, 7], [64, 11], [15, -11], [32, -66], [-30, -9], [-12, -28], [26, -12], [20, -19], [-11, -28], [-2, -14], [-46, -19], [-40, -13], [-19, -33], [-33, -24], [-96, -41], [11, -34], [1, -16], [-4, -44], [-133, 52], [-18, -5], [36, -90], [-26, -16], [-26, 10], [-24, -7], [-15, -65], [-38, 42], [-32, 58], [-1, 33], [32, 62], [-10, 26], [73, 83], [13, 25], [23, 14], [23, 5], [10, 11], [-1, 20], [-10, 35], [1, 57], [58, 77], [-8, 49], [18, 1]], [[33253, 22199], [41, -11], [37, 40], [25, 13], [21, -9], [15, -24], [21, 4], [61, 25], [8, -9], [21, 29], [19, -13], [14, -25], [-7, -30], [-17, -19], [-10, -26], [-13, -21], [-21, -19], [-16, -31], [-40, -73], [-57, -94], [-19, -8], [-40, -6], [-17, 7], [-14, -2], [-12, -51], [-18, -38], [-9, -8], [-19, -4], [-8, -5], [-7, -14], [-50, 3], [-35, 24], [-41, 52], [55, 64], [48, -3], [39, 43], [32, 21], [13, 22], [14, 17], [0, 22], [-11, 10], [-14, -1], [-14, -10], [-34, -12], [-23, 25], [15, 10], [17, -1], [52, 24], [10, 10], [-16, 33], [-31, 21], [-26, 34], [-4, 13], [1, 20], [-14, 41], [15, 2], [19, -26], [44, -36]], [[33050, 22012], [20, -8], [20, 3], [-11, -59], [-9, -28], [-24, 2], [-23, 39], [-8, 20], [26, 15], [9, 16]], [[33767, 21882], [1, -50], [-22, 16], [-8, 24], [12, 17], [11, -1], [6, -6]], [[33302, 22237], [-38, 0], [-8, 19], [1, 47], [28, 4], [29, -20], [-2, -20], [-10, -30]], [[33421, 21755], [-18, -11], [-5, 5], [-5, 22], [-1, 28], [-2, 12], [12, -4], [20, -22], [-1, -30]], [[27397, 62988], [9, -11], [11, 7], [4, 12], [42, -9], [7, -24], [-33, -1], [-14, -15], [-8, -3], [-28, 4], [-4, 55], [8, 6], [6, -21]], [[27783, 63195], [-2, -3], [-9, 2], [-21, -23], [-8, 1], [2, 9], [4, 7], [5, 6], [5, 2], [14, 5], [7, 1], [4, -6], [-1, -1]], [[27827, 63197], [-13, -8], [-10, 3], [22, 24], [6, 8], [5, 4], [5, 0], [7, -5], [0, -3], [-22, -23]], [[32019, 70445], [-25, -20], [-7, 2], [-5, 7], [26, 19], [21, 46], [7, -3], [-17, -51]], [[32112, 62479], [-7, -4], [-5, 1], [-1, 8], [5, 23], [28, 2], [-20, -30]], [[32057, 62443], [-22, -2], [-6, 7], [12, 18], [23, 2], [6, -4], [-13, -21]], [[32142, 62638], [4, -19], [-3, 0], [-15, 13], [-13, 1], [-5, 4], [-2, 7], [24, 1], [10, -7]], [[30094, 64380], [-1, -8], [-16, 23], [-30, 0], [-5, 30], [12, 5], [38, -11], [9, -26], [-7, -13]], [[30033, 64424], [-5, -7], [-16, 20], [-2, 16], [-6, 1], [-10, 14], [3, 19], [22, 1], [9, -52], [5, -12]], [[29907, 64430], [32, -32], [19, 5], [2, -7], [-11, -7], [-2, -6], [-31, -9], [-9, 2], [-2, 22], [2, 32]], [[32736, 61486], [-1, -34], [-19, 10], [-1, 30], [9, 31], [5, 3], [7, -40]], [[49439, 80202], [2, -29], [-12, -7], [-10, 10], [-21, 0], [-20, -6], [5, 52], [38, -7], [18, -13]], [[49302, 80353], [-10, -38], [-26, 13], [-2, 10], [29, 22], [6, 0], [3, -7]], [[48774, 83055], [-56, -73], [-23, 13], [-19, -6], [-6, 2], [11, 26], [13, 61], [24, 24], [29, 64], [23, 17], [9, -2], [5, -6], [11, -71], [-16, -26], [-5, -23]], [[49258, 81579], [-20, -24], [-66, -24], [-28, -25], [-50, -56], [-9, -5], [-75, 14], [-56, 72], [-35, 30], [-15, 4], [-15, -9], [-33, -9], [-33, 1], [17, 34], [23, 19], [-51, 13], [-15, 10], [-16, 23], [-40, 4], [-19, -6], [-33, -31], [-51, -33], [-62, 46], [-12, 20], [0, 39], [-9, 31], [-17, 10], [22, 40], [26, 27], [58, 27], [89, 62], [49, 27], [46, 46], [19, 28], [14, 39], [13, 47], [20, 39], [-19, 9], [-9, 29], [3, 29], [8, 26], [-7, 33], [-14, 34], [1, 26], [3, 29], [-35, -2], [-36, -9], [-32, -20], [-31, -27], [-27, -5], [0, 22], [12, 27], [31, 38], [34, 32], [12, 25], [9, 28], [17, 23], [44, 43], [83, 48], [13, 3], [33, -6], [32, 7], [28, 18], [29, 4], [63, -51], [-19, 78], [28, 18], [41, -70], [15, -7], [32, 10], [-13, 12], [-14, 1], [-19, 10], [-15, 23], [-27, 71], [2, 42], [17, 44], [20, 41], [-16, 8], [-14, 15], [-3, 41], [5, 35], [35, 32], [10, 48], [5, 53], [-6, 24], [-35, -4], [-17, -10], [-15, -16], [-16, 1], [-43, 59], [-25, 44], [-44, 93], [-6, 56], [35, 120], [55, 77], [64, 27], [-12, 5], [-98, 1], [-33, -10], [-30, -31], [-17, -10], [-17, -3], [-17, -16], [-15, -22], [-17, -14], [-33, 4], [-16, -5], [-11, 13], [-9, 21], [-13, 5], [-14, -6], [-29, -28], [-30, -17], [-36, 18], [-48, 33], [-9, -12], [-11, -31], [-6, -47], [-33, 41], [-29, 56], [-10, 34], [0, 39], [15, 16], [17, -14], [25, 93], [50, 121], [18, 35], [12, 46], [-2, 31], [-11, 25], [-46, 58], [0, 48], [5, 53], [13, 32], [5, 6], [62, -1], [-24, 17], [-48, 48], [1, 17], [11, 45], [-5, -5], [-10, -20], [-20, -50], [-12, -12], [-34, -12], [-6, -24], [-6, -7], [-17, -2], [-5, -23], [-4, -2], [-5, 25], [0, 41], [7, 38], [13, 29], [49, 67], [-24, -21], [-55, -62], [-28, -40], [-7, -14], [-3, -12], [0, -13], [13, -72], [-4, -33], [-47, -219], [-9, -22], [-8, -11], [-8, -3], [-23, 4], [-11, 17], [0, 18], [5, 28], [19, 104], [9, 29], [13, 27], [27, 47], [0, 3], [-19, -9], [-8, 3], [-5, 9], [3, 139], [15, 46], [6, 67], [13, 57], [15, 42], [12, 53], [17, 24], [5, 36], [19, 39], [15, 41], [-8, -4], [-96, -106], [-25, -20], [-33, 5], [-26, 12], [-20, 26], [-9, 48], [-24, 1], [-21, 9], [0, 6], [27, 27], [44, 9], [41, 42], [-37, 29], [3, 9], [32, 24], [40, 82], [9, 75], [-20, 35], [-7, 23], [-38, 26], [-7, 33], [5, 18], [12, 18], [19, 14], [30, 14], [-27, 14], [-10, 17], [-8, 24], [0, 15], [14, 63], [8, 26], [16, 33], [72, -2], [8, 15], [8, 1], [37, -14], [-6, 15], [-60, 79], [-5, 15], [17, 42], [1, 19], [-2, 21], [5, 15], [19, 8], [58, -1], [14, 7], [-6, 21], [-14, 27], [-2, 22], [3, 20], [1, 41], [2, 17], [14, 27], [11, 8], [15, 5], [32, -9], [12, -11], [14, -26], [10, 3], [40, 27], [12, 4], [16, -32], [68, 26], [91, 11], [55, 17], [58, 6], [54, 19], [57, -9], [2, -11], [-3, -15], [-14, -42], [2, -47], [-3, -15], [-7, -17], [-21, -33], [-55, -47], [-101, -108], [-60, -54], [-8, -26], [-4, -36], [35, -7], [14, -12], [-8, -18], [-53, -63], [-16, -58], [41, 2], [33, 11], [67, 36], [62, 27], [30, 1], [59, -21], [13, -1], [25, 10], [25, 1], [170, -6], [47, 12], [32, -15], [26, -37], [25, -68], [-1, -11], [-15, -31], [-28, -39], [-24, -54], [-7, -29], [-4, -32], [-8, -29], [-47, -138], [-47, -76], [-20, -55], [-26, -43], [-24, -27], [-26, -18], [-76, -20], [-21, -13], [-25, -24], [-27, -12], [31, 2], [31, 13], [56, 5], [65, -46], [-6, -37], [-26, -30], [-59, -5], [-55, -65], [-25, -20], [-26, -10], [-33, 3], [-60, 17], [-26, 18], [24, -29], [26, -16], [156, -37], [9, 4], [49, 39], [66, 0], [126, -71], [36, -55], [52, -78], [28, -31], [21, -28], [12, -41], [25, -138], [27, -134], [37, -146], [16, -40], [22, -28], [110, -66], [24, -21], [43, -63], [41, -67], [38, -51], [41, -41], [-20, -22], [-14, -34], [11, -46], [16, -44], [33, -71], [30, -77], [-11, 12], [-11, 6], [-16, -1], [-15, 3], [-28, 24], [-27, 30], [-53, -12], [-29, 5], [-26, 0], [49, -17], [53, -2], [117, -129], [40, -76], [23, -101], [-16, -46], [-25, -29], [-23, -34], [-22, -38], [65, -56], [14, 2], [15, 8], [13, 19], [24, 46], [12, 16], [40, 6], [34, -3], [34, -10], [30, 3], [60, -20], [30, -18], [77, -80], [16, -44], [8, -57], [1, -63], [-13, -58], [-15, -52], [-9, -67], [-6, -25], [-9, -18], [-41, -54], [-27, -21], [-11, 9], [-12, -1], [-1, -13], [12, -27], [1, -33], [-24, -24], [-25, -10], [-40, 13], [-57, -45], [41, -23], [8, -25], [-10, -43], [-25, -20], [-29, -8], [-29, -2], [-24, -11], [-23, -20], [29, 11], [20, -10], [13, -36], [11, -11], [57, -15], [34, 0], [68, 9], [32, -1], [12, -6], [0, -30], [-5, -75], [-9, -15], [-89, -62], [-19, -44], [-5, -26], [-52, 4], [-24, -27], [-43, -19], [-32, -20], [-32, -25], [-27, -7], [-113, 30], [-69, -3], [-93, -26], [-24, 5], [-35, 24], [-37, 17], [-42, 7], [-37, 23], [23, -44], [-51, -42], [-23, -8], [-24, 1], [-50, -12], [-46, 6], [7, -30], [12, -26], [-9, -11], [-11, -3], [-87, 20], [-13, -4], [-10, -18], [-32, 9], [-31, 31], [-33, 21], [-34, 10], [-28, -4], [-112, -48], [-23, -49], [-11, -69], [-16, -61], [-27, -47], [-31, -7], [-30, 33], [-56, 36], [-20, 25], [-6, 1], [-6, -9], [-22, -11], [-23, 0], [-35, -10], [-62, -29], [-25, -20], [-53, -55], [-11, -15], [-19, -55], [-30, -10], [-27, 35], [-31, 13], [-32, -13], [-20, -18], [-9, 15], [-1, 31], [24, 38], [64, 28], [55, 74], [28, 45], [10, 25], [14, 16], [17, 6], [9, 28], [77, 112], [7, 25], [4, 46], [6, 44], [63, 29], [30, 93], [8, 7], [88, 17], [65, -1], [65, -18], [33, -2], [33, 7], [26, 25], [45, 90], [25, 40], [29, 36], [27, 41], [44, 76], [-30, -26], [-36, -42]], [[48834, 82558], [11, -11], [30, 2], [-10, -24], [-32, -27], [-22, -26], [-26, -22], [-13, 25], [-15, -1], [-22, 49], [-4, 72], [29, 19], [41, -1], [33, -55]], [[49291, 85962], [-31, -1], [16, 34], [19, 9], [36, -4], [-6, -15], [-34, -23]], [[49710, 86701], [-7, -7], [-27, 59], [20, 67], [24, -2], [4, -18], [-2, -16], [-13, -2], [-1, -5], [4, -31], [0, -36], [-2, -9]], [[49636, 86714], [6, -40], [14, 10], [22, -39], [11, 0], [18, 16], [-4, -36], [-18, -101], [-6, -17], [-3, -31], [-4, -6], [-6, -61], [-12, -21], [-11, -48], [-4, -5], [-16, 19], [16, 74], [6, 43], [-4, 22], [-9, 20], [-24, 1], [-20, -9], [-4, 12], [-1, 16], [-5, 5], [-27, -1], [-7, 4], [-6, 15], [-1, 12], [25, 9], [22, -4], [34, 24], [-21, 78], [-28, 7], [-6, 8], [5, 13], [15, 7], [24, 40], [14, 6], [17, -1], [-2, -41]], [[49784, 86873], [0, -7], [-14, -49], [0, -18], [-23, 2], [-4, 5], [-4, 28], [3, 30], [3, 8], [7, 3], [7, -6], [12, 15], [6, 0], [7, -11]], [[49120, 85710], [-16, -7], [-15, 0], [-25, 33], [-9, 25], [2, 16], [10, 5], [24, -8], [12, -28], [1, -18], [3, -7], [15, -7], [-2, -4]], [[49186, 85680], [-3, -2], [-10, 11], [-17, 38], [27, 7], [12, -5], [-5, -16], [-4, -33]], [[49150, 85846], [-3, -14], [21, 0], [30, -12], [19, -2], [15, -15], [-8, -28], [-10, -8], [-10, -1], [-36, 28], [-48, -12], [-10, 4], [-6, 7], [-2, 10], [0, 20], [-3, 6], [-17, -19], [-8, 2], [-4, 9], [-2, 19], [2, 26], [10, 38], [17, 8], [26, -5], [29, -21], [9, -13], [0, -11], [-11, -16]], [[49241, 85936], [-24, -14], [-10, 12], [-2, 37], [-29, 16], [-14, 10], [-10, 18], [2, 6], [19, 8], [32, -34], [13, -28], [23, -8], [3, -4], [-3, -19]], [[48164, 84438], [-16, -4], [-1, 9], [28, 39], [17, 6], [6, -4], [-12, -22], [-22, -24]], [[48581, 83783], [-35, 0], [-12, 5], [-15, 14], [-17, 79], [6, 28], [7, 13], [7, 11], [19, 5], [18, -15], [7, -14], [15, -54], [3, -46], [-3, -26]], [[48395, 84299], [-111, -32], [-38, 3], [-4, 16], [8, 10], [31, 10], [13, 77], [-47, 36], [-3, 10], [4, 17], [5, 7], [29, 18], [12, 4], [10, -2], [21, -21], [23, -43], [30, -7], [21, -19], [-4, -84]], [[48297, 84061], [10, -74], [10, -46], [0, -16], [-9, -22], [-45, -29], [-15, 0], [0, 7], [10, 30], [-9, 33], [4, 26], [-4, 4], [-9, -3], [-33, -41], [-11, -4], [-1, 8], [8, 34], [1, 22], [5, 14], [9, 13], [11, 10], [8, 1], [9, -10], [27, 28], [24, 15]], [[48341, 83994], [-6, -6], [-14, 1], [-5, 10], [-3, 14], [0, 26], [8, 19], [36, 28], [-16, 10], [-1, 7], [10, 24], [39, 36], [10, 7], [10, -1], [-20, -65], [-48, -110]], [[48278, 85462], [-36, -100], [-13, -3], [-13, -25], [-37, -28], [33, 0], [9, -10], [0, -19], [-6, -12], [-43, -46], [-29, -18], [-31, -48], [-16, 0], [-16, -31], [-13, -13], [-7, 0], [-9, 6], [-19, 30], [35, 30], [4, 16], [24, 18], [-2, 5], [-39, 24], [-15, 17], [2, 8], [18, 19], [-9, 2], [-6, 10], [-10, 4], [-4, 10], [-1, 24], [2, 26], [12, 11], [4, 12], [5, 3], [17, -6], [18, -20], [20, 8], [24, -4], [1, 5], [-18, 49], [3, 10], [10, 12], [55, 35], [68, 60], [17, 9], [5, -8], [7, -31], [-1, -41]], [[48255, 84656], [-8, -7], [-10, 1], [-11, 10], [-13, 27], [30, 19], [13, -11], [4, -13], [0, -14], [-5, -12]], [[48293, 84968], [-1, -26], [-5, -30], [7, -32], [1, -22], [12, -8], [7, -10], [52, -12], [49, 4], [9, -10], [1, -15], [-8, -16], [-27, -30], [-33, -48], [-10, -10], [-11, -1], [-7, 5], [-6, 86], [-35, -11], [-29, 1], [-16, 10], [-11, 20], [-22, 52], [-65, 21], [-18, 28], [-6, 18], [3, 9], [13, 21], [17, -7], [11, 4], [6, 10], [0, 8], [-9, 18], [0, 6], [66, 23], [5, 37], [15, 3], [16, -12], [23, -38], [6, -46]], [[47998, 85070], [31, -32], [-25, -54], [-38, 0], [-54, 39], [0, 8], [4, 12], [8, 10], [9, 2], [13, -7], [19, 11], [15, -4], [18, 15]], [[47986, 84743], [-12, -3], [-15, 3], [-10, 9], [-9, 35], [-2, 22], [4, 40], [-1, 47], [32, 2], [8, -7], [5, -142], [0, -6]], [[47939, 84657], [-24, -8], [-9, 4], [-2, 8], [6, 20], [19, 7], [13, -11], [2, -10], [-5, -10]], [[48272, 83000], [-23, 3], [-17, -10], [-11, -9], [-10, 1], [-30, -3], [-29, 0], [-4, 15], [5, 46], [-6, 12], [-27, 6], [-10, 11], [-16, 31], [-3, 15], [-2, 20], [-16, 26], [-20, 19], [-12, 1], [-23, -31], [-19, -31], [7, -15], [6, -20], [-11, -15], [-31, -34], [-5, -13], [-9, -7], [-15, 10], [-37, -2], [-17, 5], [-20, 25], [-49, 17], [-9, 39], [-9, 7], [-56, 68], [-7, 23], [7, 13], [21, 21], [70, 34], [11, 13], [2, 12], [-21, 14], [-18, 15], [-6, 10], [-1, 9], [11, 11], [21, 1], [16, -5], [13, 10], [24, 10], [15, 13], [14, 33], [14, 30], [1, 16], [13, 57], [6, 14], [44, 37]], [[47994, 83578], [11, -21], [22, -5], [20, 19], [23, 59], [16, 3], [18, -4], [35, 7], [62, 27], [28, 1], [39, -14], [29, 0], [26, -42], [14, -66], [32, -66], [43, -57], [1, -34], [-15, -19], [-32, -23], [1, -25], [20, 13], [18, 5], [44, -5], [15, -26], [10, -37], [6, -31], [-4, -34], [-11, 11], [-12, 30], [-13, 14], [-16, 7], [7, -41], [-3, -56], [7, -5], [21, -1], [-14, -56], [-28, -16], [-33, -6], [-8, -20], [-6, -26], [-17, -38], [-22, -22], [-28, 4], [-28, 18]], [[49704, 81042], [-24, -20], [-7, -23], [-6, -9], [-15, -6], [-15, -1], [-58, 47], [-14, -2], [13, 22], [37, 17], [20, 23], [47, -22], [22, -26]], [[65638, 66618], [18, -46], [2, -318], [5, -22]], [[65663, 66232], [-10, -4], [-11, -24], [-13, -37], [-17, -19], [-14, -22], [-14, -27], [-11, -6], [-16, 34], [-10, 35], [2, 8], [8, 2], [3, 18], [-5, 27], [-10, 9], [-13, 1], [-13, -11], [-13, -24], [-8, -24], [-1, -50], [4, -57], [-1, -27], [-7, -34], [-2, -50], [5, -39], [4, -23], [1, -19], [-13, -62], [11, -11], [36, -5], [11, -41], [7, -29], [-2, -17], [-26, -13], [-31, -14], [-23, 4], [-42, -18], [-22, -29], [7, -19], [7, -13], [4, -39], [-7, -54], [-11, -53], [-15, -66], [-17, -75], [-23, -114], [-19, -90], [-2, -64], [0, -42], [-2, -84]], [[65329, 64921], [-19, -46], [-4, -2], [-22, 6], [-7, 2], [-21, 5], [-33, 8], [-42, 11], [-51, 13], [-56, 14], [-59, 15], [-62, 16], [-62, 16], [-60, 15], [-56, 14], [-50, 13], [-43, 10], [-32, 9], [-21, 5], [-8, 2], [-23, 6], [-13, 31], [-15, 38], [-15, 37], [-15, 38], [-16, 38], [-15, 38], [-15, 37], [-16, 38], [-15, 38], [-15, 38], [-15, 37], [-16, 38], [-15, 38], [-15, 37], [-16, 38], [-15, 38], [-15, 38], [-10, 25], [-6, 28], [-1, 75], [0, 16]], [[64324, 65832], [10, 30], [5, -21], [12, -29], [19, 7], [9, -5], [7, -103], [14, -37], [18, -15], [59, -8], [36, 14], [73, 67], [38, 25], [105, -5], [84, -28], [131, -16], [26, 4], [70, 54], [44, 48], [26, 14], [17, 46], [11, 60], [10, 39], [13, 19], [12, 33], [9, 55], [25, 54], [97, 133], [57, 113], [5, 36], [32, 55], [24, 59], [117, 171], [23, 70], [14, 79], [1, 6]], [[65577, 66856], [10, 3], [14, -12], [2, -59], [-5, -56], [-1, -59], [-2, -32], [11, -26], [18, -11], [8, 1], [6, 13]], [[65633, 66379], [2, 25], [-3, 13], [-12, 2], [-5, -22], [-2, -31], [9, -2], [11, 15]], [[64814, 65816], [-21, -3], [-18, 22], [39, 29], [11, 13], [11, 27], [9, -23], [-10, -36], [-7, -16], [-14, -13]], [[64615, 65834], [-5, -4], [-4, 31], [0, 9], [13, 15], [7, -26], [-11, -25]], [[64979, 65770], [0, -20], [-28, 6], [-7, -10], [-24, 5], [-22, 14], [15, 24], [40, 28], [17, -26], [9, -21]], [[65129, 65923], [-3, -12], [-8, 1], [-19, 11], [-7, 16], [13, 19], [5, 1], [8, -20], [11, -16]], [[60614, 78969], [-10, -6], [-97, 9], [-18, -3], [-61, -10], [-56, -91], [-34, 1], [-48, -24], [-32, -29], [-38, -64], [-29, 28], [-36, 0], [-36, -18], [-42, -42], [-24, -8], [-47, 12], [-55, -24], [-118, -140], [-40, -102], [-15, -20], [-20, -25], [-21, -13], [-11, 1], [56, 73], [17, 27], [3, 20], [1, 33], [-17, 40], [-47, -100], [-26, -14], [-33, -30], [-2, -67], [4, -50], [14, -63], [26, -83]], [[59722, 78187], [-15, -3], [-41, 36], [-2, 58], [-29, 49], [-46, 0], [-20, -6], [-27, 55], [-36, 23], [-27, -7], [-28, 10], [-61, 58], [-41, 7], [-1, -42], [-17, -29]], [[59331, 78396], [-26, -10], [-20, -13], [-46, 40], [-17, 29], [-72, -30], [-40, 4], [-89, -28], [-41, 27], [-82, 76], [-30, 15], [-27, -3], [-14, 24], [18, 13], [20, 1], [21, 9], [6, 13], [-1, 25], [-43, 19], [-39, 5], [-25, 22], [-19, 26], [44, 0], [45, -19], [71, -7], [64, -20], [16, 25], [37, 42], [7, 14], [-62, -29], [-63, 18], [-23, 26], [-20, 39], [-8, 43], [5, 41], [-6, 73], [-21, 65], [-8, 36], [-22, 32], [22, -73], [8, -48], [13, -44], [-3, -118], [-8, -41], [-26, -11], [-34, 6], [-35, 13], [9, 65], [-18, -22], [-27, -64], [-23, -9], [-50, 7], [-95, -42], [-7, -45], [-14, -62], [-14, -36], [-4, -21], [-40, -93], [-5, -9], [-76, -128], [-10, -10], [-49, -30], [-30, -26], [-22, -12], [-38, 13], [-15, -19], [-8, -23], [0, -47], [19, -34], [16, -114], [-6, -48]], [[58251, 77914], [-15, 31], [-23, 33], [-46, 28], [-50, -10], [-54, -47], [-37, -18], [-20, 12], [-12, 0], [-4, -14], [1, -11], [6, -9], [-1, -6], [-7, -4], [-86, 34], [-38, 31], [-29, 60]], [[57836, 78024], [15, 19], [12, 8], [45, 5], [8, 6], [1, 14], [3, 18], [-1, 26], [-5, 28], [19, 40], [30, 34], [17, 33], [2, 49], [31, 24], [27, 41], [7, 45], [10, 28], [-18, 64], [-3, 43], [-1, 36], [8, 19], [26, 23], [27, 17], [11, -2], [4, -11], [1, -72], [5, -2], [9, 9], [14, 43], [9, -12], [15, -5], [11, 11], [7, -1], [9, -11], [18, -16], [17, -5], [14, 10], [11, 19], [13, -7], [24, -50], [11, 6], [55, 10], [9, 14], [6, 12], [-57, 67], [3, 49], [2, 57], [-7, 34], [-11, 27], [-44, 31], [-34, 32], [-7, 15], [-1, 18], [-2, 30], [-13, 25], [-1, 21], [8, 33], [3, 35], [-3, 14], [-8, 12], [-15, 1], [-21, 20], [-13, 28], [-37, 39], [-12, 7], [-7, 19], [-3, 24], [8, 29], [10, 45], [7, 42], [0, 25], [-5, 62], [-19, 47], [-9, 6], [-16, -13], [-17, -11], [-14, 10], [-16, 26], [-26, 71], [-48, 15], [-19, 3], [-19, -34], [-6, 10], [-5, 22], [-10, 9], [-13, -10], [-4, 9], [6, 30], [-16, 15], [-37, -1], [-19, 11], [-3, 23], [-11, 14], [-21, 7], [-20, 19], [-20, 29], [-29, 19], [-39, 9], [-3, 3], [-4, 5], [-25, -20], [-15, -16], [-19, 10], [-30, -36], [-61, -2], [-30, 3], [-15, 8], [-57, -53], [-6, -20]], [[57394, 79642], [-13, -7], [-36, -10], [-38, -15], [-8, -52], [-12, -29], [-20, -41], [-71, -14], [-61, -21], [-62, -12], [-82, -51], [-27, -44], [-26, -13], [-24, -3], [-15, 25], [-52, 66], [-20, 32], [-26, 9], [-29, -5], [-28, -16], [-29, -3], [-32, 23], [-4, -3], [-12, -3], [-82, 27], [-7, 5], [-4, 1], [-11, 2], [-61, -3], [-57, 54], [-18, 2], [-13, -22], [-10, -25], [-40, -24], [-10, -10]], [[56354, 79462], [-6, 7], [-2, 22], [3, 18], [-6, 18], [-15, 20], [-4, 8], [-19, -1], [-5, -2], [-2, 0], [-26, 18], [-17, 41], [-27, 22], [-20, 7], [-9, 17], [-6, 24], [-7, 18], [-1, 1], [-4, 27], [-6, 3], [-1, 1], [-27, -5]], [[56147, 79726], [3, 94], [43, 67], [10, 35], [16, 74], [12, 34], [14, 29], [11, 27], [4, 24]], [[56260, 80110], [12, 3], [33, -22], [30, -11], [9, 11], [3, 14], [-1, 10], [-24, 32], [-15, 20], [-1, 12], [5, 28], [3, 31], [-3, 34], [-17, 75], [-3, 32], [16, 39], [51, 92], [17, 34], [23, 42], [64, 100], [40, 59], [27, 32], [40, 56], [17, 29], [73, 19], [8, 27], [14, 29], [10, 13], [1, 50], [-13, 61], [-11, 21], [-8, 15], [5, 14], [8, 4], [10, 2], [12, 14], [-2, 16], [-31, 39], [-13, 30], [-21, 77], [-42, 80], [-13, 26], [-2, 25], [6, 24], [-6, 31], [-15, 40]], [[56556, 81519], [3, 4], [-2, 49], [11, 11], [17, 7], [23, -3], [20, -7], [25, -23], [7, 4], [41, 42], [43, 64], [12, 36], [11, 17], [37, 9], [32, 4], [20, -1], [51, 6], [30, 7], [25, 11], [56, 5], [87, -8], [57, 0], [39, -6], [95, -34], [35, -6], [17, -18], [31, -7], [57, -18], [50, -9], [34, 4], [19, -5], [35, -80], [8, -9], [14, -2], [29, 7], [41, -3], [25, -17], [-4, -47], [7, -7], [11, 2], [14, 27], [11, 28], [8, 9], [42, -19], [19, 3], [18, 21], [11, 4], [30, -15], [37, -11], [30, -1], [19, -11], [13, -50], [12, -10], [11, -3], [18, 44], [15, 18], [22, 12], [14, 6], [10, 15], [13, 16], [11, 1], [10, -6], [10, -21], [16, -48], [19, -49], [13, -17], [34, 15], [24, 15], [42, 3], [56, 10], [43, 14], [27, -2], [17, -16], [25, -29], [6, -43], [33, -30], [26, -5], [9, 31], [15, 21], [-5, 30], [-3, 37], [-11, 35], [-8, 37], [14, 53], [15, 47], [8, 25], [25, 47], [25, 33], [37, 54], [28, 18], [24, -8], [14, -8], [36, 32], [63, 2], [53, -4]], [[58823, 81855], [5, -1], [26, -17], [27, -14], [19, -1], [22, 4], [27, 18], [18, 18], [22, 91], [8, 13], [12, 7], [20, 1], [39, -17], [44, -15], [26, 2], [69, 49], [39, 7], [46, -11], [44, -1], [34, 7], [24, -17], [28, -37], [26, -55], [27, -101], [79, -115], [2, -22], [-7, -15], [-39, -14], [-33, -7], [-1, -20], [9, -21], [15, -32], [2, -40], [-1, -37], [7, -32], [12, -14], [2, -16], [-15, -20], [-4, -12], [6, -7], [71, -4], [35, -20], [27, -17], [13, -2], [30, 11], [34, 8], [20, 1], [8, -13], [7, -35], [12, -34], [11, -10], [19, 1], [12, -1], [7, -13], [-8, -20], [2, -21], [9, -27], [10, -60], [10, -18], [6, -23], [0, -27], [-8, -23], [-6, -18], [6, -41], [21, -46], [16, -11], [13, -41], [23, -13], [34, 34], [26, 18], [33, -10], [30, -6], [20, -24], [15, -32], [17, -18], [18, 9], [36, -9], [17, -26], [16, -15], [22, 21], [17, 27], [64, 27], [40, 7], [11, 5], [23, 20], [24, 13], [23, -4], [21, -40], [23, -28], [6, -45], [28, -61], [68, -83], [27, -26], [18, 5], [10, 7], [4, 8], [4, 41], [9, 15], [14, 1], [53, -51], [28, -6], [27, -1], [36, -39], [39, -35], [30, -3], [25, 13], [16, 8], [11, -13], [9, -29], [16, -23], [18, -7], [26, -1], [46, -45], [43, -45], [26, -3], [23, 14], [20, 3], [14, -11], [4, -20], [-10, -26], [0, -38], [19, -36], [0, -36], [-5, -32], [-11, -29], [-26, -41], [-24, -38], [-36, -16], [-21, -16], [6, -28], [13, -26], [31, -21], [34, -15], [5, -17], [-6, -9], [-22, -7], [-31, 8], [-10, -15], [-15, -25], [-9, -44], [-7, -41], [33, -11], [20, -17], [6, -34], [7, -37], [2, -34], [-11, -16], [-1, -17], [5, -9], [15, -3], [11, -8], [1, -18], [-21, -40], [-20, -76], [-11, -41], [1, -44], [-12, -25], [-21, -2], [-75, -4], [-64, 2], [-28, 6], [-44, 4], [-22, -11], [-28, -70], [-22, -28], [-36, -25], [-40, -7], [-22, -30], [-8, -45], [-1, -41], [-3, -20], [-9, -18], [-3, -13], [2, -14], [9, -5], [11, -6], [0, -10], [-4, -13], [-13, -14], [-5, -22], [1, -23], [2, -25]], [[58892, 78458], [38, -29], [-39, 8], [-86, 27], [-38, 25], [-10, 28], [-5, 38], [21, -40], [15, -18], [104, -39]], [[59417, 51265], [-30, 0], [-50, 0], [-49, 0], [-49, 0], [-50, 0], [-49, 0], [-50, 0], [-49, 0], [-49, 0], [-50, 0], [-49, 0], [-50, 0], [-49, 0], [-49, 0], [-50, 0], [-49, 0], [-49, 0], [-30, 0], [-5, 2], [-4, 3], [-19, -8], [-19, -25], [-21, -11], [-22, 5], [-3, -3]], [[58474, 51228], [-11, 1], [-16, 1], [-14, -6], [-11, -23], [-12, -37], [-20, -44], [-16, -38], [-13, -28], [-31, -45], [-17, -13], [-8, 2], [-5, 8], [-10, 58], [-6, 9], [-60, -29], [-9, -1]], [[58215, 51043], [1, 18], [-4, 136], [-1, 83], [8, 52], [4, 60], [1, 52], [11, 90], [-4, 54], [14, 189], [4, 31], [5, 91], [9, 28], [8, 11], [10, 56], [20, 90], [14, 46], [-3, 101], [2, 68], [3, 16], [29, 25], [38, 63], [15, 75], [23, 47], [43, 31], [1, 0], [129, 256], [60, 138], [26, 70], [1, 26], [5, 33], [-11, 26], [-12, 24], [-4, 21], [-11, 11], [-16, 0], [-10, 15], [-11, 31], [-12, 20], [-37, -2], [-28, 32], [0, 43], [12, 85], [21, 98], [1, 26], [-3, 23], [-5, 20], [-10, 20], [-9, 23], [7, 70], [14, 69], [11, 34], [11, 38], [-4, 32], [-15, 15]], [[58566, 53853], [8, 31], [17, 52], [33, 52], [29, 35], [19, 0], [38, -27], [34, -33], [19, -2], [22, 14], [47, 58], [11, -18], [14, -36], [15, -58], [30, -27], [14, -18], [10, -6], [6, 5], [11, 46], [13, 25], [26, 32], [55, 25], [39, 7], [17, 6], [28, 15], [44, 47], [44, -61], [47, -12], [46, 1], [14, 18], [8, 14], [48, 100], [65, 136]], [[59437, 54274], [44, -191], [14, -11], [-2, -17], [-3, -16], [28, -46], [35, -24], [12, -23], [2, -26], [-12, -112], [2, -31], [11, -112], [21, -25], [19, -113], [37, -47], [5, -14], [9, -55], [11, -59], [9, -14], [5, -4], [11, -63], [-6, -36], [9, -108], [14, -96], [3, -116], [1, -51], [-1, -31], [-3, -44], [-7, -25], [-12, -25], [-13, -39], [-11, -41], [-7, -21], [5, -62], [-1, -16], [-3, -8], [-17, -10], [-22, -17], [-13, -16], [-18, -32], [-15, -34], [-20, -101], [-33, -78], [-5, -26], [-31, -47], [-14, -57], [-9, -71], [-12, -51], [-26, -69], [-6, -110], [1, -220], [-7, -249], [1, -99]], [[64752, 74195], [-3, -27], [-15, 81], [-7, 89], [9, 26], [11, -2], [-10, -32], [15, -135]], [[68478, 73357], [-14, -2], [-34, 13], [-67, 27], [-58, 54], [-38, 35], [-6, -5], [-16, -24], [-12, -30], [-9, -57], [-15, -67], [-70, -3], [-59, -5], [-39, -26], [-37, -35], [-10, -42], [-8, -54], [-22, -124], [-20, -113], [-10, -73], [-15, -50], [-42, -66], [-49, -44], [-25, -21], [-12, -26], [-2, -25], [-9, -7], [-20, 4], [-21, -4], [-46, -26], [-50, -31], [-60, -32], [-34, 0], [-14, -7], [-6, -16], [6, -29], [6, -23], [5, -28], [-14, -24], [-9, -40], [-8, -70], [-21, -21], [-34, -35], [-38, -45], [-9, -9], [-22, -13], [-21, 4], [-20, 7], [-21, -12], [-22, -35], [-10, 11], [-5, 35], [-11, 23], [-35, 52], [-29, 36], [-13, 3], [-27, -10], [-33, -7], [-28, 8], [-21, 15], [-34, 50], [-12, 28], [-9, 20], [-23, -5]], [[67017, 72361], [-7, 23], [-1, 26], [7, 33], [-2, 61], [-13, 43], [-15, 20], [2, 13], [7, 30], [8, 27], [0, 53], [-11, 57], [-4, 82], [3, 81], [-14, 40], [-114, 0], [-102, -3], [-6, 9], [-39, 102], [-33, 77], [-31, 45], [-73, 56], [-35, 23], [-29, 43], [-25, 46], [-6, 64], [-5, 21], [-7, 17], [-8, 8], [-9, -2], [-84, 74], [-34, 20], [-32, -16], [-14, -3], [-28, 21], [-32, -28], [-13, -2], [-19, 7], [-16, 10], [-42, 68], [-36, 27], [-26, 18], [-49, 25], [-53, 14], [-27, 11], [-19, 15], [-5, 9], [0, 25], [-1, 32], [-7, 24], [-13, 28], [-19, 22], [-31, -4], [-48, 2], [-37, 21], [-29, 4], [-35, -4], [-29, 0], [-20, -16], [-12, -18], [-8, -55], [-7, -9], [-12, -4], [-16, 3], [-33, 0], [-58, 10], [-73, 2], [-55, -28], [-43, -40], [-42, -45], [-49, -72], [-14, -32], [-29, -127], [-12, -18], [-17, -15], [-17, -2], [-33, -19], [-44, -31], [-30, -13], [-77, 7]], [[64976, 73354], [-5, 40], [-14, 148], [-7, 148], [1, 69], [8, 138], [-1, 69], [-3, 63], [3, 61], [6, 69], [4, 71], [-5, 49], [-15, 39], [-25, 49], [-4, 29], [-2, 33], [-24, 3], [-22, 34], [-17, 18], [-39, 20], [-19, 1], [-18, -14], [-13, -30], [-9, 47], [0, 49], [31, 102], [19, -30], [24, -12], [30, -2], [29, 8], [-6, 35], [-13, 20], [-17, 15], [-6, 46], [2, 48], [8, 45], [-9, 18], [-14, 11], [-32, -1], [-42, 12], [-42, 5], [-10, -53], [23, -70], [-19, 34], [-19, 46], [-26, 81], [-16, 96], [-3, 103], [14, 85], [18, 80], [11, 102], [15, 101], [15, -45], [17, -40], [24, -38], [13, -9], [39, -15], [25, 6], [27, 22], [26, -7], [22, -42], [20, -46], [29, -10], [61, 33], [29, 8], [25, -15], [13, -3], [13, 2], [-11, 42], [-5, 40], [15, 21], [48, -23], [31, 16], [8, 8], [7, 10], [3, 35], [-1, 36], [-4, 33], [-9, 29], [-22, 42], [-86, 98], [-28, 39], [-24, 50], [-16, 72], [-12, 74], [-11, 55], [-30, 129], [-12, 15], [-14, 7], [-36, 4], [-36, -10], [-58, -22], [-34, 7], [-15, -13], [-39, -55], [-18, -46], [-25, -106], [19, -34], [0, -22], [-15, -157], [9, -76], [-3, -6], [-7, 18], [-22, 78], [-38, 94], [-32, 145]], [[64581, 75910], [56, 94], [49, 67], [39, 40], [12, 10], [54, 34], [70, 30], [51, 22], [67, 19], [22, 4], [32, -1], [26, -18], [16, -14], [56, -57], [57, -59], [49, -65], [13, -26], [8, -32], [6, -31], [41, -99], [17, -45], [24, -59], [20, -29], [19, -35], [13, -29], [14, -14], [17, -6], [37, 10], [44, 18], [27, 8], [12, -1]], [[57213, 74963], [-64, -18], [-19, 17], [20, 35], [37, 22], [12, 2], [16, -34], [-2, -24]], [[61530, 75758], [18, -11], [35, -15], [22, -18], [12, -5], [28, 37], [43, -1], [37, -5], [19, -6], [23, -12], [29, -9], [11, 18], [17, 51], [6, 7], [5, 5], [21, 4], [20, -4], [9, -9], [9, -41], [24, -15], [42, -66], [25, -26], [6, -11], [-8, -13], [3, -17], [15, -21], [20, -8], [23, 3], [12, -8], [8, -12], [2, -17], [0, -11]], [[62066, 75522], [4, -25], [18, -34], [20, -21], [11, -23], [18, -77], [8, -43], [-3, -42], [-13, -42], [-27, -53], [7, -22], [6, -29], [-2, -22], [19, -67], [9, -42], [-7, -10], [-5, -13], [35, -32], [41, -28], [18, -5], [48, 13], [31, 2], [31, -25], [44, -63], [48, -81], [10, -25]], [[62435, 74713], [4, -11], [10, -19]], [[62449, 74683], [-10, 0], [-16, 18], [-38, 50], [-20, -22], [-17, -37], [-18, -141], [-15, -15], [-27, 1], [-32, 4], [-22, -7], [-6, -9], [3, -15], [7, -23], [4, -29], [2, -24], [11, -22], [16, -21], [1, -21], [-3, -30], [-3, -22], [-4, -13], [7, -35], [17, -41], [11, -15], [-4, -78], [6, -35], [5, -48], [-2, -79], [3, -19], [5, -7], [16, -3], [15, -7], [6, -13], [-1, -10], [-19, -36], [-2, -26], [-6, -37], [-6, -21], [-17, -41], [-11, -41], [-5, -34], [4, -16], [31, -5], [17, -24], [45, -49], [8, -20], [-12, -30], [0, -12], [6, -16], [3, -28], [-1, -31], [0, -41], [8, -7], [31, -38], [22, -39], [1, -12], [-11, -30], [3, -35], [-1, -8]], [[62434, 73238], [-9, 13], [-17, 5], [-18, 1], [-11, -10], [-20, -27], [-26, -30], [-21, -28], [-12, -19], [-10, 3], [-8, 17], [-4, 23], [1, 87], [-4, 27], [-10, 19], [-12, 11], [-13, 6], [-15, 1], [-20, -26], [-29, -26], [-44, 2], [-30, 5], [-15, 5], [-58, 40], [-12, 1], [-22, 17], [-25, 13], [-44, -25], [-19, 6], [-26, 21], [-9, -6], [-29, -64], [-50, -70], [-27, -11]], [[61766, 73219], [-13, 69], [-12, 27], [-6, 4], [-13, 8], [-9, -5], [-30, -47], [-48, -29], [-40, -17], [-64, -22], [-48, -10], [-21, -1], [-45, 9], [-40, 14], [-40, -1], [-30, -6], [-71, -51], [-121, -105], [-92, -51], [-51, -21], [-40, -11], [-69, -1], [-56, 8], [-39, -1], [-22, 13], [-30, 42], [-38, 43], [-16, 9], [-22, 9], [-32, 4], [-79, -61], [-25, -17], [-27, -13], [-54, -37], [-25, -21], [-30, 2], [-39, 6], [-33, -2], [-23, 29], [-12, 32], [-46, 20], [-33, 5], [-8, -14], [-9, -44], [-14, -112], [-2, -29], [29, -111], [-2, -17], [-20, -6], [-24, -2], [-16, -10], [-12, -18], [-8, -97], [-27, -18], [-14, -20], [-13, -60], [-7, -1], [-45, 45], [-20, 4]], [[59970, 72532], [17, 47], [-19, 93], [-21, 86], [20, 56], [41, 67], [44, 79], [0, 48], [-3, 37], [-12, 25], [-24, 34], [-40, -36], [-29, -40], [-18, -8], [-21, -23], [-10, -41], [-24, -32], [-40, -13], [-60, 35], [-65, 52], [-37, 42], [-30, 10], [-28, -18], [-84, -104], [-77, -152], [-19, -26], [-72, -65], [-48, -22], [-22, 5], [-95, -29], [-48, -4], [-37, -34], [-72, 37], [-44, 48], [-26, 48], [-42, 105], [-31, 49], [-67, 45], [-119, 108], [-31, 12], [-80, 16], [-85, 10], [-18, -40], [-6, -156], [-15, -43], [-6, -81], [-10, -24], [-17, -15], [-25, 26], [-18, 11], [-41, -33], [-82, -47], [-28, -7], [-94, 59], [-35, 38], [-22, 42], [-8, 71], [-14, 40], [-2, 28], [-5, 31], [-19, 13], [-21, -24], [-22, 1], [-27, 15], [-65, 59], [-50, 5], [-30, -73], [-24, -23], [-25, -7], [-2, 21], [20, 47], [-78, -9], [-41, -35], [-32, 5], [-24, 16], [3, 20], [25, 7], [21, 16], [84, 13], [20, 13], [21, 51], [40, 44], [5, 19], [-31, 0], [-129, -13], [-89, 7], [-10, -21], [-14, -4], [-3, 60], [14, 27], [19, -3], [46, 24], [-4, 49], [-33, 34], [-7, 19], [-24, 5], [-20, 23], [-4, 59], [-15, 65], [-23, 31], [3, 17], [41, 22], [8, 90], [-6, 56], [-20, 4], [-60, 44], [-18, -4], [-20, 48], [-35, 34], [-17, -12], [-11, -16], [-16, 7], [-26, 30], [-27, 17], [-12, 20], [15, 53], [20, -1], [4, 42], [-16, 70], [2, 36], [17, 9], [20, -6], [21, -42], [6, -41], [-4, -39], [13, -38], [9, -10], [6, 41], [9, 7], [12, -17], [25, -9], [66, 24], [12, 21], [-48, -2], [-17, 19], [-20, 44], [-11, 40], [-3, 19], [-6, 29], [7, 15], [33, 23], [29, 64], [-12, 18], [-14, 9], [-15, -6], [-14, 22], [-2, 30], [12, 25], [1, 34], [-38, 83], [-10, 18], [8, 28], [29, 45], [27, 57], [-4, 19], [-20, 7], [-95, -24], [-37, -21], [-66, -10], [-5, 31], [2, 28], [15, 50], [-2, 125], [9, 67], [37, 20], [45, 100], [73, 117], [76, -3], [30, 33], [45, 2], [9, -24], [5, -22], [40, -33], [70, 5], [17, 13], [16, 18], [-32, 57], [10, 17], [29, 2], [32, -14], [2, -13], [-9, -18], [-10, -32], [10, -6], [90, 19], [95, -15], [30, 8], [75, 0], [13, 19], [-22, 25], [-22, 9], [-15, 12], [-15, 18], [47, 55], [27, 11], [126, 34], [94, 17], [1, 13], [-14, 0], [-121, 28], [-29, 22], [-40, 52], [-9, 15], [-10, 25], [6, 55], [7, 43], [15, 25], [48, 4], [166, -44], [119, 27], [129, -65], [123, 13], [26, 29], [31, 93], [174, 156], [61, 80], [66, 45], [112, 49], [94, 65], [27, 7], [225, -31], [155, -4], [71, 62], [42, -21], [-4, -22], [-8, -19], [3, -38], [24, -55], [24, -38], [73, -55], [100, 46], [16, -5], [21, -13], [35, -147], [28, -52], [35, -36], [29, -7], [21, 37], [17, 15], [36, 6], [60, -50], [21, -53], [101, -40], [93, -20], [40, -45], [131, -44], [49, 7], [82, 46], [159, 51], [106, -71], [29, -9], [25, 6], [35, -20], [38, 11], [117, 84], [37, 48], [39, 12], [34, 29], [92, 93], [27, 54]], [[57781, 76018], [-7, -65], [17, -73], [41, -100], [41, -51], [167, -126], [31, -11], [-7, -51], [-10, -46], [-11, -30], [-49, -20], [-135, 56], [-34, 6], [-24, -12], [-45, -40], [-49, 13], [-69, -23], [-19, -77], [-48, -88], [-79, -71], [-56, -38], [-84, -136], [-39, -80], [-16, -15], [-19, -13], [6, 39], [10, 35], [-2, 26], [0, 38], [28, 44], [26, 31], [76, 58], [20, 47], [-60, -1], [-60, -11], [-38, 7], [-33, -4], [-11, 42], [-8, 25]], [[57232, 75303], [9, 7], [11, 6], [19, 44], [18, 33], [25, 41], [6, 24], [0, 23], [-6, 16], [-1, 19], [-1, 27], [2, 55], [57, 60], [18, 6], [6, 28], [-4, 63], [-8, 51], [-10, 4], [-14, 15], [-9, 17], [-14, 19], [-25, 12]], [[57311, 75873], [-1, 16], [3, 16], [9, 17], [42, 14], [5, 12], [5, 29], [9, 29], [10, 10], [17, -1], [34, 7], [23, 9], [24, 21], [12, 18], [50, 11], [14, 9], [14, -8], [19, -31], [31, -45], [17, -15], [13, 6], [22, 17], [22, 0], [17, -3], [9, 14], [13, 3], [37, -10]], [[53195, 70957], [0, -16], [-10, -109], [-2, -39], [-2, -67], [0, -80], [22, -68], [1, -30], [-9, -34], [-41, -39], [-52, -51], [-46, -49], [-49, -53], [-15, -34], [-25, -26], [-21, -27], [-3, -25], [-15, -48], [-19, -38], [-47, -18], [-8, -12], [-22, -57], [-10, -23], [-13, -47], [16, -123], [20, -126], [4, -52], [-1, -44], [-11, -47], [-25, -68], [-18, -49], [-35, -89], [-11, -22], [-24, -26], [-47, -35], [-33, -30]], [[52644, 69256], [-17, 136], [-15, 116], [-12, 95], [-21, 169], [-17, 143], [-18, 143], [-16, 129], [-16, 130], [-7, 19], [-49, 62], [-45, 57], [-46, 64], [-51, 70], [-8, 88], [-26, 133], [-27, 74], [-10, 19], [-55, 48], [-32, 35], [-9, 20], [-6, 55], [-23, 107], [-26, 97], [-9, 66], [-1, 83], [5, 60], [11, 26], [54, 74], [25, 90], [31, 34], [26, 25], [22, 30], [19, 47], [15, 51], [2, 54], [7, 87], [9, 61], [23, 68], [-9, 55], [-12, 60], [3, 103], [-3, 42], [-10, 37], [-10, 48], [0, 39], [10, 104], [7, 80], [12, 103], [-5, 29], [-8, 21], [-26, 23], [-1, 14], [7, 15], [38, 50], [21, 74], [17, 16], [27, 26], [-1, 29], [-6, 31]], [[52382, 73120], [68, 35], [66, 91], [23, 22], [152, 84], [19, -6], [22, -12], [-6, -31], [-9, -25], [13, -44], [18, 27], [-4, 18], [-1, 23], [31, 2], [28, -3], [30, -26], [-2, -100], [40, -97], [-11, -48], [33, -29], [29, 35], [15, 51], [54, 29], [52, 74], [28, 8], [6, -61], [14, -54], [-19, -18], [-25, -57], [-47, -144], [-43, -42], [-33, -56], [-10, -39], [-3, -46], [8, -82], [23, -84], [28, -51], [26, -15], [61, -80], [-1, -47], [9, -57], [3, -68], [21, -55], [-45, -119], [-25, -86], [-49, -118], [-43, -77], [-93, -115], [-23, -38], [-15, -39], [-7, -41], [3, -49], [30, -119], [41, -70], [41, -38], [72, 16], [-2, -46], [5, -55], [29, 3], [20, 8], [16, 54], [36, -37], [18, -111], [30, -35], [3, -13], [-10, -9], [-9, -13], [9, -9], [29, -14], [17, 9], [29, -24]], [[53132, 71862], [-43, -41], [9, 36], [28, 43], [7, -10], [-1, -28]], [[53043, 71268], [-7, -3], [-13, -16], [-8, -1], [-20, 17], [-7, 0], [-10, 12], [3, 68], [3, 19], [49, 2], [27, -40], [4, -10], [1, -12], [-12, -22], [-10, -14]], [[33123, 58282], [-15, -6], [2, 23], [26, 40], [41, 26], [10, 1], [-6, -35], [-58, -49]], [[33052, 57680], [-45, -32], [-118, -8], [-48, 12], [-37, -9], [67, 70], [8, 30], [29, 6], [9, 9], [9, 155], [-4, 38], [-5, 20], [-12, 15], [-26, 20], [-5, 11], [17, 17], [35, 9], [26, 19], [55, 4], [26, 16], [45, 5], [-22, -71], [-10, -27], [4, -65], [-5, -43], [6, -55], [13, -37], [-9, -35], [-1, -54], [-2, -20]], [[1344, 39648], [4, 0], [4, 17], [15, 7], [-1, -19], [-21, -59], [-12, 23], [-37, 38], [-8, 29], [13, 23], [-2, -18], [6, -8], [21, -4], [19, -15], [-12, -6], [11, -8]], [[1680, 41106], [-11, -34], [-5, 0], [-12, 20], [-5, 13], [19, 40], [10, 3], [12, -13], [0, -12], [-8, -17]], [[1413, 39573], [-2, -87], [-13, 40], [-2, 18], [14, 27], [3, 2]], [[50250, 58175], [-8, -62], [-14, -76], [-10, -25], [-6, -186], [4, -16], [4, -4], [46, -64], [60, -82], [43, -59], [4, -19], [0, -123], [1, -105], [9, -60], [1, -59], [11, -44], [40, -85], [9, -50], [1, -161], [1, -122], [5, -166], [0, -139], [0, -175], [0, -205], [0, -215], [-26, -2], [14, -67], [2, -60], [4, -20], [-7, -29], [6, -45], [11, -16], [29, -90], [9, -75], [-46, -26], [3, -19]], [[50450, 55424], [-86, -41], [-35, -33]], [[50329, 55350], [0, 32], [-13, 6], [-15, 11], [-10, 17], [-13, 38], [-5, 29], [-20, 5], [-25, 33], [-24, 39], [-8, 38], [2, 17], [-3, 18], [-9, 7], [-21, 86], [-13, 35], [-7, 28], [3, 22], [-3, 29], [4, 23], [11, 14], [4, 17], [1, 37], [7, 74], [4, 74], [-12, 20], [-15, 6], [-8, 21], [-3, 34], [0, 30], [30, 104], [-6, 241], [4, 37], [13, 25], [12, 29], [-1, 29], [-19, 72], [-37, 55], [-19, 45], [-10, 40], [-2, 21], [22, 32], [10, 21], [2, 25], [-10, 46], [2, 81], [9, 61], [8, 79], [0, 24], [-22, 47], [-12, 6], [-9, -3], [-23, -31], [-8, -4], [-5, 10], [-3, 12], [8, 18], [-3, 24], [7, 20], [14, 9], [5, 10], [-20, 10], [-2, 13], [1, 14], [6, 2], [6, -1], [3, 10], [3, 67], [3, 23], [2, 47], [3, 179], [5, 19], [0, 13], [-13, 9], [-32, 48], [-19, 37], [-17, 38], [-14, 25], [-27, 38], [-7, 25], [-2, 24], [9, 49], [13, 52], [6, 75], [-4, 20], [-18, 35]], [[49980, 58246], [64, -27], [90, -45], [2, -8], [0, -13], [16, 0], [26, 16], [72, 6]], [[84901, 47154], [-19, -99], [-20, 21], [22, 55], [10, 17], [7, 6]], [[84740, 46363], [-9, 75], [-10, 33], [-8, 18], [-3, 23], [0, 23], [5, 11], [34, 3], [14, 38], [0, 47], [-7, 15], [-7, 7], [-35, -35], [-10, 7], [-6, 12], [2, 51]], [[84700, 46691], [29, 48], [25, 88], [17, 34], [40, 33], [16, 9], [118, 48], [28, 3], [74, -1], [100, 10], [24, 7], [32, 21], [31, 26], [16, 21], [18, 14], [25, -18], [44, -14], [11, -13], [11, -17], [-50, -92], [-56, -76], [-34, -23], [-35, -15], [-27, -29], [-23, -46], [-29, -26], [-32, -9], [-28, -14], [-26, -27], [-35, -46], [-14, -5], [-15, 1], [-29, -17], [-91, -67], [-55, -73], [-40, -63]], [[84454, 46462], [45, 49], [68, 38]], [[84567, 46549], [-2, -28], [-7, -44], [-10, -20], [-16, -37], [-10, -8], [-41, 8], [-5, -5], [-7, 3], [-11, 24], [-4, 20]], [[78501, 58569], [-5, -60], [-15, 24], [3, 31], [7, 13], [10, -8]], [[78451, 58749], [1, -14], [-14, 10], [-5, -5], [-17, 4], [-8, 80], [2, 19], [11, -6], [17, -40], [8, -27], [5, -21]], [[77335, 56395], [-3, -43], [-11, 1], [-12, -27], [-5, -4], [-10, 86], [11, 121], [6, 18], [8, -32], [23, -15], [-10, -69], [3, -36]], [[77811, 63546], [-2, -34], [7, -7], [9, 15], [13, 39], [13, 22], [14, 5], [16, -27], [16, -57], [17, -33], [7, -3], [6, -26], [1, -26], [-8, -53], [-13, -62], [-20, -76], [7, -64], [26, -53], [31, -31], [33, 9], [17, 15], [14, 25], [14, 12], [16, 3], [53, -18], [16, -18], [2, -35], [-6, -92], [8, -67], [15, -70], [1, -65], [-18, -106], [-15, -101], [-17, -48], [-12, -32], [-4, -21], [1, -20], [12, -30], [12, -39], [3, -38], [-1, -46], [-9, -62], [-31, -137], [-26, -122], [14, -25], [24, -18], [17, -18], [17, 12], [37, 72], [32, 54], [39, 54], [2, 5], [35, 40], [15, 36], [9, 47], [12, 18], [16, -11], [20, 20], [24, 51], [19, 24], [13, -4], [23, -32], [33, -59], [30, -36], [26, -11], [13, -22], [-1, -33], [6, -21], [12, -9], [5, 4], [-1, 16], [12, 23], [25, 31], [25, 18], [26, 5], [17, 25], [11, 63], [16, 48], [14, 22], [17, 11], [5, 15], [-9, 20], [1, 19], [10, 21], [22, 8], [34, -3], [39, -20], [45, -38], [30, -13], [14, 14], [28, -59], [41, -131], [35, -100], [29, -67], [31, -52], [32, -36], [24, -49], [21, -93], [-16, -128], [-4, -111], [2, -137], [19, -104], [36, -73], [21, -59], [6, -44], [28, -39], [51, -32], [21, -29], [-9, -26], [0, -30], [7, -35], [17, -28], [28, -23], [17, -24], [5, -25], [-1, -40], [-6, -57], [-12, -43], [-17, -30], [-2, -24], [-4, -36], [0, -74], [12, -50], [4, -63], [-7, -51], [-6, -105], [-1, -41], [-6, -34], [-15, -34], [-22, -32], [-27, -28], [-17, -12]], [[79217, 60107], [-4, -6], [-12, -32], [-15, -31], [-11, 0], [-8, 16], [-6, 20], [-4, 44], [-25, 22], [-28, 14], [-56, -22], [-46, -12], [-51, 15], [-48, -19], [-20, -3], [-23, 3], [-22, 0], [-22, 7], [-39, 27], [-15, -2], [-32, -23], [-33, -15], [-31, -11], [-47, -46], [-34, -67], [-10, -47], [-17, -48], [-23, -75], [-30, -72], [-21, -33], [6, -19], [-6, -24], [-32, -10], [-26, -4], [-5, -12], [3, -145], [9, -55], [17, -66], [11, -36], [8, -108], [2, -91], [36, -58], [21, -44], [14, -38], [-5, -25], [-8, -74], [8, -95], [51, -206], [4, -15]], [[78592, 58586], [-6, -2], [-8, 40], [-26, 67], [-8, 71], [-30, 79], [-16, 31], [-6, -26], [-9, -28], [-30, 40], [-25, 43], [-23, 81], [-3, -19], [-6, -17], [-26, 64], [-28, 51], [-25, 19], [-15, 17], [-15, 27], [-31, 28], [-78, -40], [-98, 31], [-38, -30], [-16, 19], [-9, 35], [9, 59], [2, 125], [12, 88], [-6, 67], [6, 31], [4, 43], [-15, 17], [-70, 34], [-15, 27], [-18, -31], [-84, -17], [-31, -26], [-29, -49], [-8, -64], [17, -41], [11, -73], [-30, -158], [-5, -46], [12, -194], [-5, -106], [-16, -71], [-26, -63], [-11, -109], [-20, -50], [-28, -114], [-18, -143], [-13, -66], [-8, -122], [-56, -184], [-13, -104], [-20, -40], [7, -31], [1, -52], [-7, -139], [-2, -115], [8, -62], [27, -122], [-6, -36], [-3, -50], [22, -23], [17, -7], [91, 58], [31, -15], [12, -54], [8, -47], [15, -254], [8, -48], [19, -45], [20, -47], [7, 8], [1, 18], [1, 20], [19, -48], [14, -90], [48, -476], [14, -61], [11, -63], [-29, 31], [-8, 105], [-8, 45], [-11, 6], [-16, 0], [-1, 18], [12, 35], [-2, 41], [-17, 34], [-27, -27], [1, -74], [12, -57], [46, -127], [15, -53], [18, -15], [27, 8], [32, -54], [25, -50], [63, -77], [38, 8], [41, 19], [27, -5], [27, -20], [32, -64], [52, -161], [84, -134]], [[78361, 55438], [-9, -33], [-4, -50], [-33, -68], [-5, -39], [-13, -50], [-23, -26], [-19, -5], [-12, 4], [-8, 10], [-13, 47], [-7, 14], [-6, 4], [-42, -33], [-41, -35], [-7, -33], [-11, -37], [-12, -15], [-10, -3], [-9, 22], [-15, 28], [-12, 27], [3, 43], [23, 64], [3, 44], [-3, 77], [-6, 44], [-7, 1], [-11, 7], [-32, -7], [-16, 50], [-7, 54], [-10, 20], [-11, 12], [-24, -19], [-18, 11], [-61, 48], [-23, 76], [-13, 2], [-11, -8], [-4, -18], [-7, -88], [-5, -27]], [[77810, 55553], [-69, 178], [-48, 73], [6, 132], [-14, 26], [-18, 2], [-14, 37], [12, 79], [-19, -15], [-26, 3], [-21, 21], [-16, 109], [-11, 33], [-22, 58], [-29, 0], [-10, 27], [2, 70], [-21, 43], [-28, 36], [-23, 20], [-24, 114], [-19, 28], [-16, 22], [-22, -15], [-7, -41], [-15, -39], [-16, 5], [-16, 22], [-18, 114], [-4, 69], [5, 129], [23, 116], [13, 185], [20, 117], [13, 39], [20, 159], [39, 204]], [[77417, 57713], [4, 43], [8, 49], [6, 46], [2, 73], [-5, 38], [0, 22], [8, 27], [28, 46], [38, 76], [46, 107], [47, 163], [23, 95], [10, 34], [10, 10], [16, 33], [11, 36], [1, 18], [-26, 178], [-16, 58], [-9, 68], [-4, 50], [-6, 45], [3, 43], [-9, 26], [-21, 34], [-22, 50], [-13, 82], [0, 46], [-13, 40], [-5, 42], [8, 40], [11, 34], [-1, 152], [-4, 46], [-6, 81], [-14, 61], [-20, 72], [-22, 59], [-59, 107], [-42, 71], [-21, 66], [-26, 74], [-19, 54], [-24, 68], [-12, 93], [-7, 99], [4, 33], [11, 21], [15, 18], [12, 4], [34, 45], [24, -4], [5, 10], [2, 21], [-3, 90], [2, 120], [4, 98], [5, 64], [63, 75], [13, 33], [6, 35], [0, 31], [-5, 24], [-9, 14], [-41, -65], [-8, 15], [-19, 106], [-8, 32], [-11, 39], [-13, 54], [-2, 94], [-9, 46], [-50, 99], [-23, 53], [-31, 77], [-37, 92], [-38, 86], [-18, 54], [-6, 12], [-2, 21], [11, 59], [-5, 59], [-19, 78], [-8, 49], [2, 19], [-9, 7], [-21, -4], [-20, 36], [-20, 78], [-1, 14], [6, -1], [24, -13], [9, 2], [17, 18], [26, 19], [16, 6], [5, 9], [2, 19], [-13, 179], [2, 37], [25, 77], [-3, 78], [7, 112], [27, 77], [21, 35], [7, 55], [9, 12], [17, -5], [36, -41], [15, -2], [22, 1], [23, 3], [11, 4], [74, 40], [16, 5], [16, -5], [11, 2], [12, 18], [8, 33], [9, 103], [5, 19], [10, 15], [16, 10], [18, -1], [24, -20], [15, -1], [17, 8], [15, 15], [9, 18], [5, 22], [-4, 41], [-11, 53], [3, 6], [20, -11], [30, -13], [22, 3], [15, 9], [14, 25], [19, 23], [17, -5], [14, -21], [33, -36]], [[77798, 57428], [-3, -9], [-11, 18], [-8, 21], [-4, 26], [17, -1], [8, -25], [1, -30]], [[77797, 57365], [1, -33], [-6, -39], [-25, -23], [-9, 31], [2, 49], [4, 12], [25, -3], [8, 6]], [[77683, 55599], [-5, -3], [-10, 47], [13, 67], [13, -82], [-11, -29]], [[77386, 56413], [-3, -10], [-14, 110], [20, -29], [-3, -71]], [[77307, 57057], [-16, -7], [2, 32], [4, 20], [8, 5], [3, -34], [-1, -16]], [[77521, 56216], [7, -70], [-10, 15], [-8, 30], [0, 44], [2, 7], [9, -26]], [[60971, 48286], [21, -123], [-3, -23], [-15, -14], [-8, -1], [-9, 20], [-7, 41], [-11, -10], [-19, 50], [-20, 2], [-17, 59], [7, 51], [-4, 88], [21, 45], [12, 76], [13, -52], [3, -80], [18, -95], [15, -29], [3, -5]], [[61073, 49017], [2, -30], [-5, -27], [1, -87], [-1, -58], [-16, -80], [-13, -28], [-12, 8], [-9, 13], [-8, 22], [15, 147], [-7, 107], [30, -10], [23, 23]], [[58541, 47123], [-8, 51], [-19, 77], [-26, 109], [-20, 89], [-22, 96], [-9, 70], [-17, 78], [-28, 96], [-14, 37], [-16, 33], [-40, 65], [-45, 64], [-25, 43], [-33, 128], [-14, 47], [-9, 81], [-8, 85], [3, 34], [30, 109], [3, 31], [-4, 42], [-14, 87], [-11, 56], [-8, 49], [-15, 81], [-22, 111], [-5, 49], [0, 36], [12, 96], [10, 99], [0, 28]], [[58167, 49280], [87, -4], [15, 22], [49, 63], [56, 128], [11, 54], [22, 82], [23, 40], [8, 29], [6, 44], [7, 37], [29, 56], [28, 42], [-2, 18], [-4, 12], [5, 11], [15, 22], [30, 20], [6, 43], [0, 48], [-5, 28], [1, 31], [-5, 17], [-19, 5], [-29, 24], [-25, 10], [-17, 14], [-6, 11], [-2, 29], [4, 32], [3, 9], [6, 34], [-11, 20], [-2, 10], [5, 16], [25, 108], [6, 15]], [[58487, 50460], [11, 2], [17, 13], [16, 6], [14, -5], [9, 6], [9, 14], [7, 42], [6, 70], [-3, 57], [-13, 44], [-3, 68], [6, 90], [-5, 75], [-14, 60], [-14, 36], [-22, 17], [-34, 92], [-11, 44], [2, 28], [9, 9]], [[59417, 51265], [21, 0], [20, -21], [22, -26], [60, -69], [59, -68], [59, -69], [59, -68], [59, -69], [60, -68], [59, -69], [59, -69], [59, -68], [59, -69], [60, -68], [59, -69], [59, -68], [59, -69], [60, -68], [59, -69], [28, -33], [4, -14], [5, -62], [3, -39], [-1, -35], [-16, -58], [-5, -31], [0, -21], [4, -8], [13, -3], [12, -14], [4, -11], [9, -44], [11, -22], [25, -37], [42, -64], [43, -64], [43, -63], [42, -64], [43, -64], [43, -63], [42, -64], [43, -64], [21, -31], [8, -8]], [[60894, 49140], [-5, -49], [-22, -117], [-1, -49], [-9, -58], [-8, -38], [-22, -165], [-19, -62], [-25, -145], [-5, -111], [15, -78], [5, -72], [30, -72], [23, -25], [17, -33], [28, -74], [17, -75], [51, -37], [20, -83], [-7, -58], [-24, -48], [-22, -77], [-18, -102], [-1, -155], [13, 23], [27, -38], [3, -114], [-28, -134], [-8, -62], [-2, -53], [21, -160], [30, -81], [-2, -26], [-8, -21], [53, -144], [-5, -125], [20, -97], [9, -84], [13, -65], [2, -44], [-16, -50], [39, -12], [22, -41], [11, -39], [28, 2], [15, -26], [22, -22], [47, -65], [13, -33], [5, -19], [3, -12]], [[61239, 45815], [-32, -50], [-50, -79], [-50, -77], [-47, -52], [-34, -25], [-37, -13], [-34, -33], [-33, -50], [-42, -26], [-51, 0], [-53, -36], [-53, -67], [-31, -39], [-50, 59], [-38, 19], [-44, -2], [-27, -8], [-10, -12], [-8, -36], [-7, -59], [-29, -57], [-51, -55], [-47, -20], [-43, 14], [-29, 22], [-15, 32], [-23, 15], [-29, -3], [-28, -22], [-27, -43], [-44, -18], [-59, 5], [-31, 21], [-5, 35], [-26, 42], [-47, 47], [-35, 1], [-23, -45], [-20, -29], [-19, -12], [-16, -1], [-15, 9], [-9, 3], [-66, 5], [-62, -2]], [[59710, 45173], [-2, 20], [-4, 46], [-13, 41], [-11, 24], [-14, 6], [-7, -1], [-6, 19], [-7, 41], [-11, 35], [-14, 29], [-8, 27], [-3, 25], [2, 27], [13, 67], [4, 47], [-1, 47], [-7, 49], [-15, 58], [2, 16], [-5, 40], [-1, 28], [3, 34], [-3, 45], [-13, 97], [0, 25], [-13, 47], [-41, 111], [-2, 14], [-65, 112], [-25, 24], [-10, -21], [-3, -19], [3, -36], [-2, -18], [-3, -8], [-15, 1], [-10, 4], [-24, 30], [-19, 8], [-47, -6], [-17, -7], [-13, 7], [-25, 51], [-29, 11], [-27, 3], [-43, 58], [-10, -3], [-5, -4]], [[61030, 47247], [-15, -7], [-6, 7], [-9, 24], [16, 21], [16, 39], [36, 59], [12, 38], [5, 8], [-3, -45], [-20, -99], [-18, -7], [-14, -38]], [[69710, 75022], [1, -11], [-4, -19], [-58, -32], [-26, -28], [-6, -49], [-7, -14], [-12, -11], [-11, -3], [-18, 57], [-20, 12], [-29, 20], [-56, 40], [-29, 17], [-56, -26], [-66, -35], [-10, -21], [-7, -23], [1, -17], [4, -23], [-3, -18], [-12, -6], [-19, 22], [-16, 12], [-8, -29], [-9, -53], [-4, -38], [14, -54], [5, -82], [26, 5], [20, 0], [37, 24], [19, 0], [29, -10], [52, -2], [40, 4], [10, -2], [9, 16], [11, -6], [10, -18], [41, 22], [30, 3], [19, -6], [11, -7], [19, -53], [15, -34], [19, -11], [57, 10], [17, 47], [14, 12], [24, 3], [19, 9], [16, 20], [21, 16], [18, 4], [9, -13], [4, -16], [-3, -21], [-1, -22], [12, -15], [35, -3], [17, -14], [1, -26], [-3, -41], [15, -17], [7, -1], [52, 43], [14, 1], [12, -24], [17, -29], [23, -30], [6, 4], [10, 34], [20, 36], [36, 12], [21, 11], [21, 5], [65, -14], [21, -2], [44, 3], [35, 7], [28, 22], [15, 17], [23, 10], [29, -1], [16, -5]], [[70453, 74567], [1, -30], [-4, -57], [-4, -40], [23, -72], [15, -34], [14, -25], [3, -19], [-3, -16], [-18, -15], [-7, -17], [-3, -18], [6, -21], [11, -68], [13, -53], [19, -26], [28, -17], [15, 4], [11, 40], [18, 30], [16, -2], [25, 1], [66, -34], [64, -52], [18, -29], [7, -32], [-18, -75], [1, -47], [4, -51], [15, -38], [13, -65], [3, -53], [6, -16], [4, -19], [-7, -49], [-5, -50], [6, -16], [20, -25], [31, -45], [6, -38], [-11, -24], [-20, -29], [-25, -25], [-8, -11]], [[70802, 73289], [-4, 6], [-12, 26], [-28, 41], [-20, 21], [-38, -7], [-22, 8], [-26, 13], [-25, -2], [-16, -24], [-10, -25], [-25, -8], [-35, -19], [-56, -30], [-26, 5], [-8, 13], [6, 17], [19, 22], [5, 26], [-4, 25], [-17, 7], [-7, 4], [-8, 5], [-34, 15], [-28, -6], [-47, -31], [-88, -81], [-38, -55], [-28, -82], [-83, -27], [-57, -47], [-59, -78], [-39, -41], [-19, -6], [-19, 7], [-19, 21], [-18, 65], [-16, 98], [-11, 64], [6, 84], [7, 94], [7, 96], [11, 111], [10, 40], [0, 26], [-8, 13], [-18, 0], [-27, -15], [-20, -3], [-11, 10], [1, 52], [14, 93], [-21, 79], [-57, 64], [-48, 22], [-40, -20], [-33, -50], [-27, -82], [-28, -68], [-29, -52], [-21, -25], [-7, -10], [-4, -22], [16, -69], [-1, -58], [-18, -48], [-19, -22], [-21, 2], [-16, 11], [-13, 20], [-33, 5], [-54, -9], [-37, -23], [-20, -39], [-6, -50], [8, -62], [-4, -48], [-17, -34], [-14, -19], [-10, -5], [-24, 29], [-36, 62], [-25, 34], [-14, 5], [-7, -3], [-8, -7], [-5, -8], [-4, -18], [-12, -7], [-16, 5], [-15, -5], [-9, -20], [-25, -23], [-44, -27], [-25, -28], [-4, -30], [-6, -14], [-14, 5], [-40, -41], [-30, 13], [-35, 53], [-19, 44], [-2, 18]], [[69639, 74783], [-25, -22], [-15, 3], [-11, 21], [-8, 20], [-2, 12], [4, -1], [19, -9], [27, -6], [10, -6], [1, -12]], [[83613, 64873], [-17, -68], [-14, -71], [-6, -68], [1, -69], [-4, -63], [-7, -62], [-27, 18], [-15, 44], [-3, 73], [-20, 88], [-7, 26], [-28, 49], [-26, 25], [-20, 36], [3, -3], [-15, 49], [-11, 52], [-23, 148], [-8, 36], [-10, 32], [-3, 33], [3, 36], [10, 53], [6, 54], [-5, 74], [2, 73], [8, 32], [130, 443], [36, 94], [22, 47], [18, 52], [17, 66], [22, 60], [15, 19], [75, 54], [23, 52], [19, 16], [21, -1], [14, -25], [12, -29], [13, -16], [33, -28], [15, -28], [6, -48], [-20, -45], [-10, -41], [-2, -45], [4, -61], [0, -61], [-25, -143], [-27, -90], [-7, -44], [-9, -111], [-16, -111], [-13, -140], [-22, -145], [-13, -61], [-16, -58], [-37, -109], [-42, -90]], [[82890, 65968], [12, -38], [-5, -24], [-38, 13], [-2, 23], [14, -4], [19, 30]], [[61766, 73219], [0, -8], [-3, -20], [-31, -57], [-43, -78], [-30, -49], [-52, -83], [-38, -18], [-65, -30], [-17, -29], [-17, -46], [-9, -64], [-3, -40], [-2, -75], [16, -77], [14, -75], [2, -49], [-1, -48], [-14, -52], [-16, -71], [-9, -80], [-4, -150], [0, -128], [-2, -21], [-26, -90], [-31, -106], [-15, -24], [-68, -32], [-74, -77], [-84, -87], [-75, -78], [-79, -83], [-83, -85], [-59, -61], [-78, -82]], [[60770, 71066], [-72, -78], [-72, -79], [-56, -60], [-83, -95], [-49, -56], [-73, -82], [-63, -72], [-75, -85], [-94, 25], [-30, 15], [-25, 40], [-18, 22], [-44, 22], [-29, 77], [-17, 27], [-30, 12]], [[59940, 70699], [4, 27], [16, 47], [15, 50], [-8, 28], [-3, 23], [-1, 29], [10, 27], [-5, 33], [-8, 33], [-6, 16], [0, 30], [4, 23], [5, 36]], [[59963, 71101], [13, 19], [3, 20], [11, 20], [16, 16], [3, 13], [-2, 7], [-15, 15], [-9, 25], [8, 38], [5, 11], [9, 18], [20, 28], [16, 4], [14, 0], [23, -2], [18, -5], [5, 7], [-1, 9], [-22, 23], [-1, 18], [5, 19], [16, 30], [19, 23], [9, 4], [22, 44], [14, 50], [-22, 122], [-14, 19], [-22, 17], [-13, 3], [-1, 8], [17, 30], [13, 27], [-14, 26], [-24, 12], [-9, -27], [-32, -2], [-48, 0]], [[59993, 71790], [-22, 129], [-3, 55], [1, 65], [15, 94], [-7, 43], [-1, 30], [-4, 40], [-38, 87], [21, 160], [15, 39]], [[52645, 79218], [8, -7], [20, -26], [-4, -43], [-23, -70]], [[52646, 79072], [-12, -56], [-1, -44], [2, -20], [4, 0], [22, -3]], [[52661, 78949], [11, 0], [34, -11], [28, -17], [6, -19], [3, -22], [33, -30], [38, -19], [13, 6], [47, 71], [19, -12], [11, -38], [-1, -19]], [[52903, 78839], [-13, -75], [-2, -41], [11, -26], [1, -21], [-3, -19], [-19, -2], [-25, 11], [-21, 32], [-17, -4], [-14, -8], [-7, -31], [-6, -36], [2, -21], [10, -15], [8, -34], [5, -43], [5, -20], [-5, -8], [-13, -6], [-11, 5], [-20, 52], [-9, 20], [-15, 3], [-27, -12], [-41, -29], [-17, 0], [-14, 6], [-13, 24], [-11, 47], [-4, 30], [-8, -1], [-26, 9], [-12, -12], [0, -48], [-3, -61], [-13, -38], [-37, -68], [-13, -29], [-6, -21], [-1, -18], [6, -32], [7, -30], [-6, -18], [-19, -9], [-14, 19], [-5, 32], [-30, 45], [13, 37], [-2, 10], [-49, 19], [-21, 28], [-30, 50], [-6, 21], [2, 69], [-2, 17], [-4, 8], [-14, 0], [-20, -24], [-19, -36], [-38, -41], [-4, -8], [13, -40], [-1, -15], [-30, -63], [-6, -21], [-39, -39], [-18, -15], [-54, 29], [-15, 4], [-25, -20], [-34, -18], [-55, -19], [-21, 14], [-9, 13]], [[51950, 78298], [-5, 19], [-14, 33], [-16, 20], [-11, 22], [-14, 24], [-9, 19], [12, 64], [-9, 22], [-5, 32], [3, 22], [-5, 5], [-50, 12], [-42, -4], [-29, -21], [-25, -35], [-3, -8], [2, -6], [12, -32], [-20, -35], [-32, -26], [-22, -3], [-10, 5], [0, 37], [18, 13], [17, 24], [5, 34], [2, 23], [-17, 29], [2, 17], [11, 34], [6, 29], [9, 25], [34, 42], [35, 41], [5, 45], [3, 54], [5, 13], [47, 32], [11, 13], [6, 18], [37, 60], [37, 60], [7, 20], [6, 12], [0, 10], [-4, 7], [-18, 5], [-6, 19], [19, 34], [24, 21], [23, 0], [9, -9], [-1, -11], [10, -12], [18, -4], [21, 4], [22, 13], [13, 30], [7, 23], [34, 26]], [[52115, 79258], [23, -13], [63, -4], [47, 7], [29, 18], [36, 0], [24, -10], [4, 1], [7, 3], [6, 9], [23, 7], [3, 8], [-1, 8], [-4, 4], [-28, -4], [-11, 6], [-2, 15], [9, 25], [20, 20], [18, 5], [12, -5], [31, -38], [7, -2], [5, 7], [6, 4], [11, -7], [11, -24], [2, -4], [69, 9], [15, 0], [47, -42], [48, -43]], [[55298, 85158], [-23, -14], [-13, -40], [-19, -7], [-17, -14], [-7, -128], [33, -49], [-18, -7], [-17, -14], [-11, -22], [-12, -47], [-45, -26], [-17, -19], [-25, -44], [-13, -63], [-25, -27], [-29, -6], [17, 52], [22, 42], [-21, 28], [-13, 46], [-16, 34], [13, 39], [-7, 63], [2, 62], [19, 32], [22, 25], [34, 59], [37, 42], [51, 19], [23, -17], [10, 38], [17, 9], [15, -9], [33, -37]], [[54591, 84268], [-15, -29], [-12, 2], [-9, 39], [-2, 99], [5, 49], [61, 178], [27, 14], [38, 109], [10, 48], [17, 44], [10, 39], [8, 15], [17, -7], [8, -7], [-18, -23], [2, -29], [-1, -13], [-48, -128], [-12, -83], [-17, -21], [-69, -296]], [[53163, 85850], [23, -73], [20, -10], [28, 19], [19, 53], [11, 81], [13, 76], [-15, 81], [-17, 72], [-1, 21], [43, 60], [13, 49], [14, 47], [16, 16], [23, 4], [27, 9], [34, 31], [30, 42], [24, 38], [8, 76], [0, 39], [10, 28], [10, 55], [-9, 55], [-31, 83], [-36, 117], [-5, 63], [16, 12], [32, 11], [60, 3], [6, 7], [6, 28], [13, 38], [15, 28], [10, 39], [4, 36], [-34, 54], [-45, 55], [-30, 18], [-54, 46], [-38, 39], [22, 148], [16, 109], [3, 27], [0, 41], [-52, 177], [2, 39], [5, 35], [-6, 61], [-3, 54], [9, 16], [21, 30], [-20, 47], [-2, 4], [-38, 117], [59, 115], [-11, 60], [36, 44], [64, 99], [36, 56], [7, 9], [29, 25], [54, 29], [60, 14], [27, 0], [103, -20], [80, -15], [12, 15], [17, 32], [22, 45], [1, 50], [-7, 73], [-12, 44], [-57, 29], [-62, 39], [76, 124], [53, 86], [66, 129], [21, 54], [15, 22], [19, 198], [13, 56], [11, 29], [0, 30], [-7, 50], [-19, 114], [104, 14], [34, 7], [32, 14], [61, 35], [31, 31], [-17, 106], [37, 36], [91, 125], [98, 119], [46, 46], [5, 22], [4, 35], [-21, 56], [-22, 35], [-43, 65], [19, 46], [31, 9], [42, 18], [32, 39], [4, 5], [55, 154], [107, 77], [43, 43], [67, -32], [97, -48], [44, 71], [14, 26], [15, 39], [-6, 67], [-3, 87], [5, 34], [39, 16], [21, 4], [108, -36], [28, 1], [51, -5], [57, -16], [120, -42], [50, -17], [28, -4], [24, 20], [51, 50], [-76, 37], [50, 38], [26, 38], [22, 46], [8, 55], [-3, 29], [-16, 20], [-46, 50], [105, 7], [36, 2]], [[55728, 91610], [76, -33], [3, -7], [0, -17], [3, -18], [74, -45], [21, -23], [45, -37], [12, -19], [42, -23], [30, -24], [35, -20], [41, -31], [55, -25], [46, -8], [117, -42], [20, -13], [33, -30], [35, -34], [23, -69], [38, -4], [10, -24], [33, -41], [46, -36], [-2, -12], [-36, -34], [-4, -45], [3, -58], [12, -47], [-2, -14], [-9, -16], [-10, -26], [-4, -22], [1, -11], [3, -6], [20, 0], [34, -5], [20, -10], [12, -55], [-4, -10], [-29, -25], [-9, -19], [-1, -29], [6, -31], [9, -36], [23, -37], [31, -40], [20, -32], [9, -23], [4, -16], [-14, -20], [-12, -40], [-3, -45], [-5, -30], [-27, -41], [-19, -14], [-5, -22], [-3, -36], [6, -44], [2, -29], [6, -22], [8, -14], [43, -25], [25, -50], [15, -41], [29, -106]], [[56709, 89749], [-73, -13], [-56, 26], [-27, -13], [-48, -1], [-55, -10], [-19, -21], [-14, -8], [-51, 29], [-48, 49], [-35, -37], [-23, -7], [-20, 33], [-18, 6], [-10, -12], [-8, -29], [-14, -24], [-3, -14], [-2, -60], [-4, -14], [-46, 8], [2, -16], [10, -8], [5, -10], [-17, -13], [-47, 2], [-4, -14], [13, -22], [-10, -19], [-10, -8], [-55, -12], [-32, 3], [-9, -12], [-3, -16], [6, -16], [14, -9], [5, -10], [-1, -21], [-12, -4], [-33, 38], [-10, -2], [7, -20], [19, -22], [11, -22], [10, -26], [-2, -21], [-41, -65], [-37, -41], [-27, -37], [-16, -39], [19, -20], [20, -29], [15, -55], [17, -49], [35, -46], [-7, -27], [-8, -21], [-58, -47], [-66, -70], [-71, -178], [-24, -24], [-62, -30], [-23, -30], [-46, -35], [-81, -29], [-37, -42], [-16, -43], [-19, -3], [-18, 17], [-24, 12], [-3, -28], [1, -21], [-39, 31], [-19, -28], [-14, -47], [-56, -63], [-61, 11], [-6, -11], [16, -8], [2, -10], [-11, -5], [-17, 0], [-25, -12], [-17, 1], [-8, -30], [-13, -37], [-34, -15], [-18, -3], [-9, -20], [53, -5], [-4, -17], [-1, -17], [-6, -19], [-60, -27], [-9, -21], [-12, -13], [-27, 0], [1, 13], [4, 13], [-39, -1], [-12, 31], [-8, -8], [4, -25], [11, -25], [11, -38], [-9, -24], [-10, -11], [7, -11], [21, -8], [9, -15], [-25, -13], [-32, -44], [-32, -1], [-20, -28], [-21, 0], [-17, 18], [-27, 15], [-9, -27], [-2, -20], [16, -53], [29, -41], [28, -18], [-20, -12], [-15, -26], [-17, -83], [-10, -33], [-10, -57], [6, -49], [6, -24], [13, -32], [-36, 4], [-39, 19], [6, -39], [-24, -47], [4, -40], [5, -27], [-7, -44], [11, -14], [6, -26], [-10, -20], [5, -17], [1, -59], [8, -92], [-3, -20], [21, -80], [-5, -29], [-3, -36], [31, -34], [27, 0], [27, 1], [10, -9], [11, -24], [8, -29], [23, 2], [36, 24], [23, 6], [16, -46], [42, -59], [24, -27], [42, -14], [43, -48], [-6, -58], [18, -20], [52, -22], [18, -31], [9, -27], [14, -21], [16, -66], [-6, -41], [-21, -14], [-49, -44], [-22, -32], [-17, -20], [-49, -44], [-18, -8], [-17, -22], [-16, -10], [-15, 6], [-55, -41], [4, -18], [42, -7], [22, 9], [17, 20], [18, 5], [16, -4], [18, 16], [14, 7], [14, -8], [16, -39], [-33, -20], [-23, -1], [-12, -64], [-14, -27], [-10, -13], [-52, -27], [-35, -35], [-40, -27], [-18, 6], [-26, -29], [-59, -33], [-31, -45], [-68, -40], [-34, -32], [-95, -2], [-89, 7], [-29, -16], [29, -4], [20, -16], [25, 7], [57, -8], [29, -8], [38, -54], [-28, -19], [-48, -14], [18, -76], [15, -51], [-20, -31], [-1, -140], [-27, -2], [-12, -58], [9, -30], [-1, -69], [6, -42], [13, -39], [-6, -41], [-43, -95], [1, -44], [8, -27], [6, -42], [-20, -81], [-14, -69], [-16, -57], [-37, -69], [-18, -51], [-43, -160], [-21, -32], [-26, -24], [-29, 22], [-27, 13], [-32, -2], [-51, -18], [-77, 12], [-74, -6], [-19, -16], [11, -58], [-28, -8], [-26, 17], [-24, -20], [-20, -22], [-39, -51], [-13, -32], [-3, -59], [20, -54], [18, -62], [-46, -76], [-26, -2], [-76, 20], [-135, -47], [-121, 38], [15, 40], [0, 30], [6, 45], [4, 47], [-1, 32], [-9, 33], [-29, 44], [-68, 147], [-19, 62], [-14, 26], [10, 1], [55, -33], [13, 4], [13, 13], [-16, 47], [-14, 22], [-10, 32], [33, 9], [23, -2], [17, 37], [-10, 58], [-25, 19], [-21, 7], [-40, 93], [-42, 48], [-75, 184], [-27, 127], [-26, -12], [-12, 55], [-9, 53], [-2, 38], [-40, 22], [-1, 27], [-8, 120], [-42, 16], [-28, 68], [-5, 128], [-28, 23], [-23, -7], [1, 32], [5, 30], [-13, 117], [-4, 108], [-11, 32], [-6, 38], [5, 33], [8, 19], [28, 5], [26, -29]], [[55321, 85208], [-5, -36], [-15, 3], [-13, 26], [27, 41], [40, -2], [14, -9], [-48, -23]], [[55115, 85846], [-12, -6], [-6, 2], [7, 27], [6, 11], [19, 11], [5, -2], [-19, -43]], [[55165, 86100], [-7, -19], [-7, 23], [3, 5], [4, 23], [14, 12], [21, -7], [0, -6], [-20, -19], [-8, -12]], [[58874, 36890], [6, -8], [25, -27], [2, -53], [-2, -60], [-5, -38], [2, -38], [8, -59], [8, -41], [2, -184]], [[58920, 36382], [-9, 9], [-16, 7], [-8, -3], [-8, -83], [-6, -122], [4, -77], [-60, -2], [-76, 8], [-54, 33], [-59, 73], [-35, 113], [-15, 71], [-21, 4], [-4, 12], [-2, 87], [1, 91], [4, 25], [39, 112], [25, 69], [15, 68], [33, 79], [36, 51], [13, 7], [9, -2], [62, -70], [65, -66], [14, 8], [7, 6]], [[34956, 54930], [-23, -41], [-25, -58], [-34, -100], [2, -32], [-8, -25], [-2, -45], [3, -51], [8, -33], [4, -62], [-6, -57], [2, -33], [7, -52], [6, -55], [-1, -23], [8, -18], [8, -18], [-3, -49], [27, -88], [16, -39], [23, -37], [9, -37], [13, -44], [8, -5], [4, -18], [-4, -34], [-1, -47], [-15, -55], [-35, -100], [-4, -24], [9, -83], [-5, -68], [-2, -33], [-17, -60], [-40, -145], [-23, -27], [-14, -42], [-9, 0], [-10, -4], [-4, -5]], [[34828, 53183], [-12, 0], [-10, 19], [-2, 22], [-5, 25], [-12, 8], [-24, -9], [-7, 6], [-14, 27], [-11, 30], [-3, 28], [-8, -3], [-18, -25], [-12, -6], [-9, 7], [-11, -2], [-28, -27], [-16, -7], [-11, -27], [-76, -13], [-20, -7], [-45, 48], [-12, 15], [-6, 3], [-5, -3], [-5, -11], [-8, -60], [-6, -16], [-12, -14], [-12, -24], [-2, -23], [18, -13], [15, -45], [16, -36], [13, -33], [-2, -36], [-2, -51], [-10, -18], [-15, -8], [-58, 25], [-44, 22], [-19, 5], [-8, 5]], [[34310, 52961], [-11, 19], [-11, 18], [-18, 6], [-22, 12], [-15, 45], [-17, 64], [-5, 29], [-13, 28], [-13, 40], [-3, 36], [-10, 32], [-5, 11], [-7, 45], [-2, 16], [-3, 2], [-5, 14], [-11, 47], [-2, 12], [-4, 4], [-12, 34], [-9, 11], [-4, 17], [1, 47], [-5, 23], [-2, 43], [0, 17], [-5, 20], [-8, 12], [-1, 32], [-2, 77], [-4, 14], [-34, -1], [-3, -8], [-15, -4], [-16, -1], [-15, 10], [-12, 14], [-3, 17], [2, 54], [-20, 41], [-31, 50], [-9, 64], [-12, 40], [-34, 84], [-7, 57], [0, 41], [13, 37], [17, 65], [6, 60], [6, 31], [8, 40], [8, 53], [-6, 32], [-10, 32], [-3, 23], [10, 35], [10, 24], [11, 4], [14, 15], [12, 21], [17, 5], [22, 2], [44, 0], [22, 9], [7, 17], [-1, 33], [12, 29], [11, 13], [5, 9], [1, 11], [-3, 10], [-5, 7], [-12, 2], [-11, 51], [7, 22], [10, 41], [2, 23], [15, 37]], [[34112, 55039], [4, -12], [11, 67], [2, 53], [8, 54], [14, 63], [24, 31], [140, -32], [64, -30], [82, -52], [12, -55], [0, 55], [-4, 56], [23, 40], [50, 14], [75, -19], [64, 23], [87, -3], [133, -45], [59, -31], [25, -28], [4, -50], [-2, -64], [-10, -62], [-21, -82]], [[58566, 53853], [-6, 25], [-6, 23], [-11, 29], [-16, 12], [-14, -6], [-17, -6], [-8, 17], [-1, 40], [-5, 37], [-8, 28], [-24, 28], [-63, 56], [-48, 113], [-25, 52], [-17, 34], [-25, 89], [-29, 61], [-35, 28], [-23, -14], [-23, -65], [-45, -61], [-20, -3], [-26, 34], [-33, 23], [-59, 11], [-24, -29], [-32, -47], [-27, -28], [-17, -4], [-15, 12], [-18, 6], [-15, 1], [-32, 42], [-16, 32], [-11, 30], [-18, 21], [-21, 17], [-15, 27], [-7, 34], [-12, 43], [-15, 39], [-48, 70], [-15, 41], [-10, 41]], [[57611, 54786], [-19, 44], [-21, 60], [-7, 87], [-1, 70], [-4, 32], [-9, 33], [-11, 27], [-16, 31], [-40, 45], [-40, 52], [-20, 31], [-36, 11], [-23, 30], [-18, 65], [-8, 53], [-18, 41], [-8, 29], [-5, 34], [15, 104], [-21, 37], [-32, 47], [-23, 52], [-14, 48], [-41, 63], [-90, 95], [-51, 60], [-29, 54], [-24, 53], [-3, 22], [16, 53], [3, 43], [-13, 48], [-54, 91], [-43, 99], [-32, 31], [-78, 28], [-23, 11], [-23, 19], [-23, 45], [-8, 53], [11, 84], [-7, 26], [-13, 7]], [[56707, 56834], [4, 18], [14, 41], [24, 27], [65, 42], [3, 16], [2, 53], [5, 26], [22, 73], [3, 29], [1, 63], [3, 29], [7, 21], [17, 37], [6, 22], [3, 48], [-2, 94], [9, 38], [41, 86], [11, 38], [3, 34], [0, 35], [2, 35], [12, 33], [11, 11], [30, 10], [20, -7], [143, 59], [16, -8], [8, -35], [-1, -55], [3, -27], [7, -19], [23, -27], [15, -44], [9, -16], [23, -31], [106, -253], [30, -24], [29, 9], [57, 52], [29, 14], [202, -15], [22, 8], [1, -2], [31, -127], [15, -29], [221, -1], [-4, 36], [2, 40], [26, 52], [13, 26], [6, 9], [34, 38], [33, 25], [64, 29], [24, 46], [13, 42], [0, 82], [9, 14], [15, 19], [74, 74], [13, 16], [131, -172], [73, -136], [5, -7], [3, -2], [4, 4], [4, 7], [5, 4], [3, 2], [32, 1], [59, 7], [20, 16], [119, 243], [31, 78], [8, 16], [17, 55], [18, 95], [4, 11], [131, 227], [4, 18], [1, 15], [-19, 76], [-5, 39], [0, 60], [3, 93], [-1, 59], [0, 7], [-2, 9], [-1, 3], [-73, 168], [185, 2], [0, 14], [0, 7], [0, 7], [-4, 20], [-2, 26], [0, 8], [0, 7], [1, 14], [0, 7], [0, 4], [0, 3], [0, 3], [1, 3], [132, -4], [-1, -47], [-16, -112], [0, -66], [-4, -77], [-1, -6], [-3, -16], [-4, -10], [-3, -9], [-1, -3], [-2, -6], [0, -8], [28, -427], [-1, -11], [-1, -7], [-8, -27], [-1, -9], [-1, -6], [3, -5], [61, -46], [3, -3], [3, -4], [22, -55], [120, -202], [4, -10], [12, -64], [2, -10], [0, -15], [0, -12], [-3, -38], [1, -17], [2, -12], [2, -13], [0, -4], [-1, -3], [0, -6], [-18, -74], [-6, -52], [-2, -44], [1, -25], [2, -17], [1, -4], [1, -2], [1, -2], [1, -1], [51, 0], [1, 0]], [[59466, 57293], [-1, -24], [2, -116], [2, -102], [3, -167], [0, -43], [-2, -55], [-6, -21], [-15, -31], [-18, -28], [-47, -7], [-39, 1], [-27, 6], [-38, 3], [-36, -6], [-13, -24], [-19, -83], [-28, -122], [-14, -51], [-4, -30], [4, -18], [19, -26], [40, -36], [46, -21], [34, -9], [24, -10], [18, -12], [66, -93], [21, -43], [12, -38], [2, -41], [10, -41], [38, -81], [21, -47], [57, -61], [22, -68], [21, -33], [20, -36], [11, -53], [25, -154], [16, -81], [17, -66], [7, -108], [13, -48], [14, -58], [23, -53], [25, -41], [4, -11]], [[59796, 55006], [-51, -104], [-57, -116], [-66, -135], [-73, -147], [-56, -116], [-56, -114]], [[56707, 56834], [-28, 15], [-35, 11], [-67, 13], [-27, 19], [-12, 29], [4, 73], [-7, 16], [-11, 13], [-7, 32], [1, 38], [36, 85], [7, 45], [6, 158], [4, 55], [-3, 65], [-28, 119], [-25, 83], [-40, 123], [-16, 41], [-81, 169], [-9, 25], [-20, 72]], [[56349, 58133], [10, 63], [12, 94], [1, 43], [-5, 45], [-21, 33], [-18, 4], [-8, 17], [-16, 25], [-15, 19], [-14, 37], [-10, 52], [7, 184], [-5, 25], [-20, 7], [-5, 13], [1, 36], [-12, 105], [-12, 87], [7, 48], [-18, 66], [-33, 28], [-31, -9], [-33, -13], [-20, 4], [-14, 12], [-10, 24], [-5, 28], [5, 43], [18, 79], [23, 64], [46, 59], [13, 31], [7, 35], [1, 40], [-3, 42], [-5, 38], [-14, 51], [-13, 60], [0, 40], [6, 29], [13, 35], [24, 39], [6, 8], [16, 21], [13, 15], [34, 42], [8, 19], [-3, 24], [-8, 20], [-14, 27], [-2, 33], [-4, 57], [-7, 37], [-5, 26], [9, 20], [14, 28], [18, 17], [28, 15], [11, 19], [3, 38], [-1, 37], [10, 27], [14, 57], [10, 27], [18, 30], [19, 38], [8, 43], [2, 43], [-10, 127], [21, 54], [27, 44], [38, -3], [60, 9], [40, 19], [29, -1], [66, -24], [5, 6], [2, 5], [3, 34], [0, 85], [0, 257], [0, 257], [0, 257], [0, 257], [0, 257], [0, 257], [0, 256], [0, 257]], [[56661, 63073], [0, 72], [0, 72], [0, 72], [0, 72], [68, 0], [69, 0], [68, 0], [69, 0], [1, 1], [0, 1], [1, 1], [1, 1], [0, 287], [0, 287], [0, 287], [0, 287]], [[56938, 64513], [107, 0], [106, 0], [106, 0], [106, 0], [106, 0], [106, 0], [106, 0], [106, 0], [106, 0], [107, 0], [106, 0], [106, 0], [106, 0], [106, 0], [106, -1], [106, 0], [33, 0], [14, 5], [27, 107], [12, 8], [17, -6], [7, -25], [-6, -37], [-9, -51], [52, 0], [91, 0], [91, 0], [92, 0], [91, 0], [91, 0], [91, 0], [91, 0], [91, 0], [91, 0], [92, 0], [91, 0], [91, 0], [91, 0], [91, 0], [91, 0], [91, 1]], [[60241, 64514], [4, -132], [12, -105], [43, -150], [36, -81], [13, -44], [1, -21], [-1, -19], [-11, 22], [-19, 15], [-3, -70], [5, -50], [4, -94], [15, -101], [-11, -93], [2, -158], [19, -190], [-4, -120], [32, -283], [30, -156], [17, -39], [19, -20], [36, -14], [53, -79], [43, -85], [15, -44], [20, -48], [14, 9], [9, 12], [13, -39], [67, -84], [10, -39]], [[60724, 62214], [-24, -38], [-28, -66], [-7, -26], [-3, -16], [-3, -20], [-8, -19], [-16, -27], [-6, -12], [-4, -18], [-9, -12], [-11, -1], [-9, -8], [-14, -12], [-20, 6], [-21, -12], [-8, -14], [-16, -13], [-17, -3], [-5, -4], [-16, -22], [-19, -30], [-23, -19], [-8, -6], [-10, -21], [-16, -103], [-12, -27], [-19, -3], [-26, 0], [-22, -9], [-30, 12], [-14, -2], [-4, -22], [-6, -89], [1, -38], [-12, -45], [-13, -56], [5, -95], [2, -94], [-24, -142], [-4, -32], [-24, -113], [-13, -41], [-31, -210], [-13, -65], [-26, -68], [6, -110], [6, -118], [6, -110], [9, -166]], [[60145, 60055], [-22, -155], [1, -84], [-16, -124], [-12, -58], [-11, -34], [-10, -35], [-17, -78], [-14, -102], [-7, -105], [0, -61], [-3, -28], [-5, -17], [-33, -12], [-46, -12], [-25, -14], [-17, -22], [-21, -49], [-40, -137], [-22, -83], [-33, -115], [-39, -81], [-8, -39], [-7, -73], [-14, -116], [-13, -83], [2, -66], [-12, -115], [2, -56], [-14, -31], [-18, -30], [-13, -7], [-27, 34], [-20, 34], [-8, 9], [-18, -21], [-21, -32], [-25, -75], [-19, -75], [11, -159], [-1, -35], [-5, -38], [-30, -119], [-7, -37], [-11, -72], [-11, -124], [0, -30]], [[72213, 57390], [-17, -6], [-14, 38], [-3, 17], [3, 11], [4, 6], [5, -2], [6, -36], [16, -28]], [[72187, 57056], [8, -43], [-23, 29], [-15, 25], [-6, 20], [32, -22], [4, -9]], [[72217, 57495], [26, -3], [29, 2], [20, -8], [34, -89], [93, -159], [51, -162], [4, -35], [7, -30], [12, -9], [11, -14], [50, -156], [6, -31], [-1, -34], [3, -25], [14, -13], [16, -6], [11, -24], [14, -124], [0, -39], [3, -17], [64, -193], [4, -24], [-1, -18], [2, -15], [12, -34], [20, -92], [9, -21], [12, -81], [1, -154], [-4, -69], [-12, -84], [-14, -81], [-16, -59], [-21, -50], [-71, -106], [-21, -22], [-93, -66], [-68, -63], [-64, -17], [-63, 34], [-48, 83], [-24, 122], [-17, 127], [-25, 141], [-18, 435], [-9, 122], [-15, 155], [2, 67], [10, 64], [0, -141], [9, -17], [7, 18], [7, 146], [5, 62], [25, 161], [1, 29], [-5, 61], [1, 30], [38, 113], [9, 66], [5, 67], [-2, 73], [-7, 72], [31, -23], [17, -25], [17, -17], [14, 9], [16, 0], [-11, 39], [-36, 36], [-59, 22], [-18, 29], [-7, 25], [3, 29], [5, 11]], [[50442, 74119], [-6, -7], [-18, 7], [-28, 0], [-1, 23], [4, 16], [5, 17], [17, -33], [27, -6], [0, -17]], [[50873, 74763], [27, -19], [28, 17], [15, -5], [15, -9], [3, -37], [-13, -41], [-18, -41], [-16, -45], [-13, -52], [-25, -31], [-23, -18], [-48, 38], [-28, 10], [-8, 14], [-7, 58], [-12, 18], [-19, 8], [-16, -14], [-21, -31], [-12, 31], [-17, 5], [-7, 19], [0, 23], [115, 139], [33, 31], [71, 36], [11, -5], [-9, -22], [0, -9], [9, -10], [-2, -17], [-9, -14], [-4, -27]], [[51192, 74793], [-5, -7], [-85, 67], [-28, 7], [-7, 10], [1, 35], [2, 15], [57, 7], [46, -24], [25, -67], [2, -11], [-8, -32]], [[50401, 74261], [-10, -35], [-42, 12], [-10, 15], [9, 40], [13, 5], [0, 28], [13, 29], [60, 23], [14, -20], [3, -28], [-36, -61], [-14, -8]], [[49501, 76847], [1, -20], [10, -28], [12, -10], [24, -14], [18, -2], [25, -7], [17, -16], [1, -24], [-5, -28], [-10, -25], [-6, -20], [6, -11], [9, -9], [9, -2], [7, 3], [5, 15], [9, 19], [5, 2], [0, -10], [4, -13], [31, -23], [67, -41], [26, -1], [22, -5], [6, -17], [43, -64], [10, 2], [19, -1], [23, 5], [16, 12], [11, -2], [12, -13], [14, -10], [19, -21], [16, -26], [11, -9], [67, 18], [15, -16], [16, 0], [18, 4], [39, -8], [32, 2], [3, 7], [3, 57], [5, 21], [7, 5], [19, -4], [68, -34], [28, -21], [27, -17], [24, -2], [15, -11], [22, -55]], [[50396, 76379], [-3, -27], [1, -10], [3, -19], [-1, -21], [6, -14], [10, -2], [14, 5], [14, 8], [26, 23], [7, 4]], [[50473, 76326], [43, -27], [19, -17], [7, -20], [9, -19], [13, -3], [18, 19], [29, 20], [48, -18], [54, -26], [23, -3], [1, 13], [4, 18], [9, 8], [13, 3], [19, 9], [21, 16], [21, 6], [23, -11], [28, -10], [17, 0]], [[50892, 76284], [7, -36], [14, -14], [5, -31], [-24, -17], [-15, -2], [-4, -54], [6, -16], [14, -14], [4, -16], [3, -80], [-28, -48], [-40, -54], [-193, -173], [-46, -84], [-17, -19], [-143, -53], [-101, -57], [-48, -20], [-60, -98], [-28, -40], [23, -11], [26, -47], [-9, -21], [-38, -32], [-17, -10], [-9, 5], [-9, -4], [-64, -170], [-58, -123], [-32, -53], [-32, -79], [-70, -206], [-1, -59], [35, -204], [19, -54], [28, -45], [53, -38], [12, -38], [-18, -36], [-52, -64], [-91, -86], [-39, -68], [-8, -66], [-27, -30], [-10, -92], [-16, -61], [-4, -20], [-17, -47], [-2, -33], [28, -47], [-14, -20], [-14, -9], [-32, -5], [-108, -6], [-87, -100], [-44, -89], [-39, -165], [-48, -98], [-21, -18], [-33, 43], [-41, 7], [-40, -15], [-20, -33], [-33, -19], [-32, 16], [-68, 9], [-31, -2], [-48, -27], [-41, 18], [-69, 9], [-150, -21], [-18, -11], [-19, -41], [-48, -70], [-72, -3], [-66, -45], [-16, -29], [-28, -79], [-9, -58], [-5, -1], [-7, 14], [-11, -4], [-5, -45], [-25, -20], [-20, -7], [-51, 36], [-42, 54], [-22, 3], [-36, 84], [-16, 54], [-11, 57], [2, 22], [-3, 19], [-32, 23], [-8, 53], [24, 68], [19, 30], [12, 8], [-29, -3], [-21, -44], [-27, 71], [-109, 138], [7, 31], [-1, 18], [-18, -37], [-13, -10], [-56, 6], [-64, -17]], [[47942, 73259], [-17, 144], [-8, 55], [-2, 35], [17, 82], [18, 34], [24, 69], [30, 58], [31, 13], [14, 9], [11, 44], [7, 38], [-5, 4], [-36, -8], [-66, 159], [2, 26], [8, 38], [6, 47], [1, 38], [17, 32], [26, 32], [22, 46], [11, 46], [3, 41], [-13, 29], [-36, 16], [-37, 117], [-8, 73], [-8, 8], [-23, 33], [-22, 62], [-3, 10], [23, 11], [93, 1], [20, 13], [3, 5], [17, 49], [18, 80], [4, 49], [-6, 20], [-31, 49], [-1, 15], [5, 23], [18, 25], [25, 28], [14, 25], [-3, 19], [-8, 20], [-1, 18], [5, 23], [1, 79], [4, 20], [-5, 71], [-6, 58], [-20, 75], [4, 17], [9, 14], [29, 26], [24, 62], [35, 51], [45, 41], [31, 46], [13, 35], [9, 10], [-3, 16], [-6, 24], [-18, 23], [-23, 13], [-26, 0], [-16, 4], [-4, 19], [1, 49], [-1, 49], [-5, 22], [-12, 17], [-24, -5], [-20, 14], [-16, 3], [-9, -10], [-45, 3], [-19, 8], [-14, 9], [-8, -5], [-5, -10], [-1, -15], [-3, -19], [-17, -18], [-37, -18], [-30, 2], [-28, 12], [-9, 10], [-13, 8], [-57, -10], [-7, 7], [-19, -18], [-29, -22], [-16, -1], [-6, 4], [-2, 10], [-12, 34], [3, 18], [23, 53], [-2, 12], [-10, 17], [-8, 25], [-3, 12], [-15, 2], [-15, -13], [-60, -26], [-14, -9], [-26, -26], [-27, -39]], [[47561, 76002], [-20, -8], [-8, 12], [-2, 91], [32, 60], [22, 37], [-10, 7], [-24, -1], [1, 29], [12, 13], [11, 31], [-13, 14], [-10, 20], [0, 53], [3, 22], [-3, 23], [-49, -32], [-13, 5], [0, 40], [27, 60], [3, 18], [-32, 9], [-24, 30], [-14, 26], [-16, 38], [0, 34], [16, 79], [23, 24], [20, 14], [42, 55], [57, -10], [36, 11], [32, 28], [19, 7], [29, 24], [-1, 33], [-10, 25], [9, 23], [33, 29], [37, 37], [42, 7], [43, 34], [29, -22], [25, 7], [29, -25], [38, -58], [56, -24], [45, 19], [78, 3], [40, -7], [70, 14], [40, -5], [64, 29], [51, -36], [97, -17], [58, -30], [162, -49], [59, -1], [82, 28], [35, 21], [32, -13], [47, 24], [23, -4], [29, -35], [104, -46], [27, 39], [20, 9], [74, -24], [75, -49], [39, -3], [57, 13], [46, 32], [9, 4]], [[45462, 68190], [-23, -131], [-22, -52], [-13, -17], [-32, -14], [-38, 82], [-19, 83], [-11, 26], [17, 21], [25, -3], [54, 17], [11, 7], [55, 84], [55, 10], [1, -27], [-60, -86]], [[46190, 68497], [-19, -38], [-21, 13], [10, 83], [9, 25], [39, 36], [32, 15], [9, 38], [11, 15], [11, -23], [-9, -26], [-6, -84], [-22, -26], [-44, -28]], [[46056, 68069], [-38, -65], [-38, 15], [-6, 11], [38, 16], [34, 50], [22, 110], [35, 121], [7, 52], [13, 20], [19, 2], [8, -4], [9, -27], [0, -61], [-10, -102], [-18, -89], [-75, -49]], [[45722, 68057], [-2, -45], [6, -44], [-1, -69], [-13, -36], [-35, -37], [-26, 6], [-15, 15], [-27, 60], [-1, 61], [25, 41], [10, 51], [64, -9], [6, 9], [4, 3], [5, -6]], [[45226, 67984], [-11, -5], [-14, 15], [-14, 45], [10, 34], [8, 16], [13, -3], [23, -25], [8, -25], [0, -16], [-23, -36]], [[45031, 67862], [-27, -94], [-34, 35], [-8, 12], [-7, 19], [33, 4], [33, 47], [10, -23]], [[45046, 68256], [-7, -5], [-7, 46], [-33, 111], [20, 50], [37, 1], [15, -34], [5, -36], [-7, -21], [2, -42], [-4, -27], [-21, -43]], [[85175, 73606], [9, 11], [0, 16], [0, 51], [25, 36], [34, 73], [17, 40], [20, 38], [22, 25], [22, 11], [35, 5], [66, -4], [13, 4], [46, 4], [11, -7], [33, -4], [38, 5], [18, 11], [18, 18], [15, 33], [15, 62], [17, 48], [10, 9]], [[85659, 74091], [68, -258], [64, -166], [56, -121], [79, -232], [23, -124], [2, -77], [13, -106], [-11, -60], [3, -96], [-5, -49], [-9, -36], [-1, -70], [3, -37], [1, -49], [6, -19], [9, -7], [14, 18], [18, 7], [-3, -59], [-22, -150], [-18, -109], [-25, -95], [-32, -87], [-38, -34], [-27, -13], [-51, -4], [-43, 15], [-36, -11], [-15, -18], [-11, -31], [8, -48], [-1, -36], [-16, 3], [-31, 21], [-34, 2], [-16, 11], [-16, 51], [-17, -2], [-29, -31], [-44, -6], [-15, -17], [-5, -21], [6, -26], [22, -35], [-7, -36], [-23, -18], [-19, 44], [-12, 43], [-13, 2], [-20, -12], [-4, -46], [10, -32], [15, -36], [-22, -42], [-5, -30], [-16, -21], [-42, 47], [6, 34], [18, 33], [3, 34], [-6, 20], [-61, -86], [-37, -96], [-19, 7], [-9, 25], [-11, 10], [-40, -63], [-8, -49], [-14, -2], [-7, 21], [0, 45], [-7, 37], [-41, 56], [-19, 48], [10, 27], [34, -15], [28, 2], [-6, 23], [-9, 11], [19, 12], [15, 27], [-13, 7], [-19, -15], [-16, 7], [-6, 63], [-20, 65], [-10, 63], [19, 36], [10, 56], [18, 81], [9, 27], [25, 19], [9, 21], [-14, 11], [-22, 9], [1, 24], [15, 12], [16, 26], [32, 32], [10, 59], [-9, 15], [-20, 14], [5, 30], [8, 23], [-3, 14], [-24, 38], [-16, 36], [5, 40], [-4, 60], [2, 51], [-1, 28], [-11, 62], [-5, 63], [-16, -10], [-12, -15], [-44, 22], [-14, 1], [-5, 47], [15, 57], [38, 50], [21, 6], [16, 22], [26, 7], [30, -34], [27, -7], [15, -59], [9, -12], [2, 22], [22, 25], [5, 19], [-4, 11], [-25, 10], [-23, 73], [-3, 32], [-9, 20], [13, 59], [-26, 67], [-13, 21], [2, 59], [-14, 39], [-8, 21], [-4, 36], [4, 16], [12, 6], [3, 15]], [[85761, 71888], [-27, -36], [-35, 48], [-8, 26], [26, 39], [23, 44], [15, 3], [6, -124]], [[85573, 71892], [-3, -56], [-20, -3], [-11, 36], [-13, -17], [-6, -1], [-10, 45], [-2, 36], [23, 26], [14, -16], [20, -8], [8, -42]], [[85064, 71641], [-18, -9], [-10, 20], [-7, 6], [4, 26], [29, 51], [6, 17], [27, -10], [10, -27], [-13, -42], [-28, -32]], [[85144, 73580], [-2, -76], [-15, 4], [-10, 7], [-5, 15], [-10, 71], [11, 29], [23, -23], [8, -27]], [[85208, 71626], [5, -27], [-22, 5], [-12, 26], [1, 23], [14, 3], [14, -30]], [[85499, 71782], [-3, -18], [-14, 27], [14, 30], [3, -39]], [[85115, 72864], [-4, -38], [-18, 25], [-5, 82], [19, -24], [8, -45]], [[85047, 71849], [-4, -14], [-12, 4], [-12, 40], [-5, 31], [-13, 18], [20, 27], [25, -49], [1, -57]], [[86365, 73432], [-13, -18], [-15, 18], [-2, 18], [8, 15], [18, 10], [9, -14], [-5, -29]], [[85090, 70981], [-13, -13], [-11, 8], [-3, 6], [-14, 33], [-4, 17], [10, 32], [38, 53], [99, 51], [18, 2], [39, -21], [9, -42], [-7, -35], [-9, -24], [-46, -40], [-35, -19], [-71, -8]], [[58690, 38938], [2, -30], [2, -14], [13, -80], [20, -119], [13, -111], [18, -151], [0, -84], [4, -33], [16, -41], [20, -70], [7, -39], [7, -30], [21, -56], [16, -85], [14, -113], [12, -54], [4, -27], [5, -49], [0, -102], [0, -118], [0, -133], [1, -109], [-2, -55], [1, -157], [-18, -82], [2, -64], [6, -42]], [[58920, 36382], [24, 4], [42, -17], [35, 2], [31, 2], [52, 3], [30, 0]], [[59134, 36376], [-10, -133], [-40, -208], [-13, -95], [-34, -341], [-44, -172], [-25, -71], [-72, -126], [-20, -25], [-18, -17], [-31, -14], [-123, -254], [-46, -123], [-41, -178], [-40, -98], [-60, -210], [-53, -161], [-51, -147], [-88, -203], [-39, -59], [-27, -26], [-70, -118], [-99, -189], [-75, -168], [-113, -190], [-65, -84], [-99, -164], [-27, -24], [-111, -152], [-79, -93], [-129, -107], [-51, -30], [-122, 28], [-51, -15], [-43, -65], [-4, -93], [-18, -14], [-27, 4], [-85, 39], [-46, -7], [-27, -50], [-22, -63], [-64, -3], [-115, 65], [-135, 40], [-31, 4], [-65, -48], [-23, -7], [-95, 10], [-53, 31], [-51, 0], [-38, -26], [-47, -8], [-127, -175], [-66, 0], [-56, -21], [-28, 1], [-53, 24], [-19, -1], [-30, -11], [-30, -31], [-68, -13], [-26, -27], [-115, -159], [-26, 6], [-22, 11], [-59, 1], [-68, 86], [-26, -6], [7, 26], [2, 45], [-14, 32], [-10, 14], [-26, -3], [-14, 39], [-41, 3], [-14, -9], [-20, -2], [-1, 39], [1, 24], [-1, 38], [-5, 46], [-16, 15], [-12, 6], [-28, -3], [-20, -5], [-10, -14], [-10, -33], [0, -103], [-15, 29], [-16, 62], [-5, 66], [6, 78], [31, 29], [-3, 53], [-6, 45], [-35, 117], [-13, 54], [-29, 36], [-23, 87], [-23, 32], [-9, 61], [-22, 49], [-8, 77], [12, 44], [20, 24], [20, -38], [24, 15], [35, 56], [21, 85], [1, 135], [-5, 85], [-28, 219], [-13, 50], [-63, 157], [-72, 210], [-92, 330], [-44, 199], [-66, 401], [-59, 227], [-72, 212], [-9, 14]], [[54568, 35358], [11, 26], [39, 49], [17, 13], [10, -6], [9, 13], [9, 33], [2, 31], [4, 44], [9, 27], [9, 52], [16, 34], [34, 22], [26, -30], [11, -29], [5, -38], [11, -18], [18, 1], [13, -24], [8, -48], [-2, -35], [-10, -22], [1, -28], [14, -35], [5, -34], [9, -45], [47, -25], [23, -15], [39, -5], [38, -20], [35, -34], [58, -9], [80, 18], [66, -8], [52, -34], [38, -6], [24, 21], [10, 31], [-3, 41], [11, 25], [26, 11], [21, 31], [16, 50], [37, 40], [57, 32], [29, -1], [0, 81], [0, 256], [0, 256], [0, 257], [0, 256], [0, 256], [0, 256], [0, 256], [0, 242]], [[55550, 37570], [13, -17], [88, -128], [24, -68], [11, -43], [38, -155], [28, -140], [23, -105], [2, -48], [3, -47], [4, -23], [-3, -25], [-16, -57], [-16, -44], [-20, -60], [-2, -79], [6, -93], [12, -46], [16, -15], [36, 23], [23, -7], [32, -18], [107, 11], [13, -6], [40, -6], [14, 7], [12, 20], [14, 56], [12, 18], [23, 9], [27, 15], [22, 33], [35, 110], [70, 98], [22, 23], [14, 26], [11, 36], [25, 123], [19, 103], [6, 48], [17, 79], [20, 50], [19, 27], [10, 7], [26, 13], [32, 13], [34, -14], [37, -31], [42, -51], [42, -64], [20, -32], [21, -15], [37, -5], [25, 1], [38, -63], [19, -4], [44, -19], [53, -20], [34, 2], [36, 34], [26, 2], [33, -3], [37, 10], [27, 14], [21, 30], [18, 33], [21, 97], [12, 78], [19, 89], [23, 122], [8, 85], [8, 23], [33, 26], [28, 18], [74, 33], [15, 18], [14, 40], [32, 68], [40, 57], [21, 32], [37, 275], [5, 34], [27, 73], [17, 31], [11, 0], [15, 20], [20, 37], [24, 24], [28, 9], [18, 25], [8, 41], [14, 20], [21, -1], [11, 13], [3, 28], [12, 24], [22, 19], [11, 23], [1, 27], [26, 66], [51, 103], [47, 58], [45, 12], [42, 21], [40, 32], [30, 49], [19, 67], [32, 38], [65, 11]], [[57982, 34503], [45, 36], [21, 23], [15, 18], [19, 28], [7, 68], [5, 58], [15, 28], [15, 19], [13, 30], [15, 72], [10, 70], [2, 29], [-6, 30], [-10, 31], [-9, 43], [-12, 6], [-23, 24], [-33, 48], [-29, 42], [-27, 61], [-11, 9], [-26, 42], [-12, 23], [-8, 28], [-7, 10], [-12, -8], [-31, -12], [-66, -49], [-41, -46], [-35, -53], [-36, -21], [-26, -18], [-21, -61], [-20, -58], [-17, -51], [-10, -24], [-9, -15], [-10, -33], [-18, -55], [-18, -37], [-24, -20], [-31, -26], [-11, -15], [-1, -22], [11, -52], [11, -49], [17, -59], [13, -42], [20, -52], [12, -31], [-1, -51], [4, -18], [6, -21], [6, -6], [6, -7], [17, -15], [4, -10], [12, -17], [11, -32], [22, -44], [24, -33], [41, -14], [32, -10], [11, 6], [11, 27], [9, 34], [3, 43], [10, 23], [39, 111], [21, 41], [13, 2], [17, 8], [21, 4], [16, -4], [4, 2], [25, 14]], [[60515, 24801], [-12, -11], [-56, 10], [-6, 22], [17, 34], [9, 14], [29, -7], [24, -28], [4, -9], [-9, -25]], [[61536, 50866], [2, 47], [-5, 24], [-26, 71], [-49, 132], [-38, 99], [-38, 102], [0, 82], [0, 243], [-1, 485], [-1, 486], [-1, 485], [0, 243], [-1, 99], [4, 16], [44, 89], [57, 118], [76, 224], [41, 122], [34, 101]], [[61634, 54134], [9, 31], [30, 61], [56, 37], [36, 6], [121, 46], [18, 19], [11, 21], [10, 48], [23, 68], [31, 47], [58, 61], [56, 52], [13, 8], [68, 33], [17, 11], [28, 11], [10, 1], [95, -12], [74, -9], [77, -9], [8, 7], [53, 121], [85, 192], [54, 123], [84, 189], [64, 137], [72, 151], [69, 139], [83, 166], [52, 105], [82, 162], [77, 155], [69, 137]], [[63327, 56449], [41, 130], [40, 127], [44, 136], [52, 165], [49, 154], [40, 126], [0, 65], [0, 140], [0, 96], [0, 265], [0, 161], [0, 155], [0, 159]], [[63593, 58328], [35, 7], [90, 41], [71, 63], [130, 45], [99, 114], [17, 55], [30, 70], [43, 23], [111, -82], [18, -6], [-7, -50], [-3, -50], [-23, -88], [-15, -98], [11, -149], [5, -242], [-3, -35], [-7, -34], [-3, -28], [-12, -9], [-5, -16], [9, -6], [34, 26], [0, 29], [2, 14], [28, -32], [21, -13], [5, -31], [-1, -20], [-32, 9], [-17, 16], [-48, -26], [-29, -29], [-9, -47], [-7, -190], [-11, -123], [-3, -162], [-38, -108], [-14, -76], [-57, -152], [-31, -130], [-9, -64], [-51, -178], [-70, -137], [-25, -174], [-25, -110], [-28, -99], [-62, -177], [-31, -122], [-40, -213], [-12, -135], [-111, -391], [-115, -312], [-72, -263], [-129, -305], [-176, -393], [-230, -467], [-62, -95], [-252, -288], [-163, -241], [-83, -164], [-88, -143], [-69, -136], [-210, -460], [-22, -43], [-20, -41], [-27, -77], [-18, -31], [-50, -131], [-31, -69], [-36, -67], [-14, -47], [-11, -55], [-12, -31], [-31, -130], [-28, -86], [-28, -67]], [[63327, 56449], [-95, 0], [-92, 0], [-91, 0], [-16, 17], [-77, 53], [-97, 67], [-120, 84], [-85, 59], [-92, 62], [-92, 63], [-73, 50], [-90, 61], [-79, 54], [-11, 13], [-44, 82], [-57, 107], [-11, 2], [-27, 23], [-25, 58], [-25, 74], [-23, 93], [-11, 63], [-31, 26], [-15, 50], [-28, 74], [-20, 36], [-7, 31], [-9, 65], [-17, 70], [-15, 44], [-4, 19], [1, 12], [29, 95], [13, 34], [15, 33], [12, 33], [4, 23]], [[61922, 58179], [35, 112], [31, 99], [24, 77]], [[62012, 58467], [54, -88], [53, -180], [62, -144], [85, -135], [33, -45], [30, -24], [155, 4], [109, 122], [100, 89], [33, 18], [58, -24], [64, -7], [57, -27], [29, 7], [114, 103], [71, 101], [48, 42], [20, 1], [66, -36], [85, 15], [117, 87], [37, 18], [28, 1], [64, -39], [9, 2]], [[94357, 46942], [-13, -8], [-20, 21], [-9, 19], [4, 30], [12, 12], [13, -20], [1, -21], [12, -33]], [[96368, 45123], [-24, -9], [-10, 2], [-16, 50], [12, 11], [18, -4], [5, -29], [15, -21]], [[96147, 45646], [-22, -10], [-7, 3], [-17, -6], [-18, -41], [-13, 6], [-10, -2], [-8, 34], [0, 17], [13, -3], [6, 33], [14, 17], [32, 7], [28, -10], [10, -8], [-9, -30], [1, -7]], [[94604, 45047], [-20, -20], [-17, 10], [-14, 15], [-11, 44], [-23, 28], [-34, 11], [-14, 19], [-3, 10], [-24, 8], [-6, 24], [2, 25], [3, 13], [22, -12], [103, -117], [25, -36], [11, -22]], [[94873, 46298], [4, -62], [-2, -21], [-21, 45], [-10, -16], [-9, 22], [1, 46], [1, 50], [-4, 38], [-11, 55], [12, -9], [39, -148]], [[94218, 46587], [-4, -1], [-13, 7], [-16, 2], [-9, 20], [11, 29], [15, 18], [6, -4], [7, -12], [14, -5], [2, -37], [-13, -17]], [[94490, 46661], [16, -8], [8, 1], [18, -31], [25, -46], [-10, -23], [-20, 12], [-7, -5], [-2, 3], [-4, 23], [-22, 23], [-19, 2], [-3, 27], [20, 22]], [[93822, 47095], [18, -47], [20, -105], [-4, -36], [-14, -3], [-4, -22], [-20, 51], [-26, 14], [-19, 31], [-6, 62], [-2, 39], [-15, 7], [-42, -10], [-14, -34], [-19, 11], [-4, 30], [3, 29], [26, 29], [5, 38], [26, 64], [15, 11], [31, -23], [3, -92], [11, -30], [31, -14]], [[93944, 46761], [-6, -2], [-7, 23], [15, 62], [8, -50], [4, -19], [-14, -14]], [[93918, 46840], [-27, -45], [-20, 15], [-17, 39], [6, 47], [3, 13], [8, 2], [8, 10], [9, 21], [29, -17], [8, -11], [-18, -29], [6, -9], [4, -14], [1, -22]], [[93718, 46823], [0, -8], [-15, 16], [-34, 78], [6, 26], [31, 50], [10, 7], [8, -31], [-7, -46], [-10, -12], [-5, -43], [16, -37]], [[93523, 47279], [-5, -8], [-9, 31], [-7, 10], [0, 34], [-28, 57], [-2, 39], [16, 38], [22, -22], [22, -48], [25, -16], [-5, -32], [-23, -57], [-6, -26]], [[93500, 47136], [-3, -15], [-15, 71], [1, 36], [3, 23], [5, 7], [12, -79], [-3, -43]], [[93658, 47172], [-6, -9], [-30, 4], [-23, 59], [0, 44], [18, 40], [22, 8], [12, -16], [11, -34], [4, -43], [-3, -38], [-5, -15]], [[93288, 47754], [-28, -13], [-17, 18], [7, 44], [10, 23], [35, -41], [-7, -31]], [[93789, 46797], [0, -20], [-16, 6], [-36, 31], [-1, 14], [20, 5], [15, -4], [12, -18], [6, -14]], [[94374, 46501], [61, -92], [27, 8], [80, -2], [47, -66], [28, -30], [16, -59], [19, -14], [12, -30], [7, -55], [-5, -9], [-24, -20], [-18, -9], [-47, 20], [-44, 42], [-89, 5], [-41, 12], [-14, 17], [-13, 21], [-21, 51], [-17, 61], [-2, 35], [-2, 68], [5, 24], [17, 25], [18, -3]], [[94410, 46927], [0, -14], [-37, 48], [-28, 59], [-81, 64], [-17, 33], [-15, 4], [-41, 54], [-41, 36], [-25, 47], [-6, 19], [-15, 11], [-25, 51], [-25, 34], [-9, 62], [-24, 43], [-6, 19], [77, -35], [36, -68], [30, -38], [11, -28], [27, -38], [25, -4], [24, -38], [23, -10], [18, -20], [114, -172], [-14, -46], [15, -33], [9, -40]], [[93745, 47620], [9, -20], [-21, -35], [-29, 19], [-6, 19], [0, 11], [-20, -7], [-40, 17], [-54, 82], [-58, 156], [-56, 86], [-11, 26], [-1, 45], [8, 17], [34, -19], [45, -71], [74, -73], [20, -38], [12, -90], [13, -27], [40, -69], [21, -16], [11, -3], [9, -10]], [[94652, 47053], [69, -171], [-3, -31], [-9, -19], [-3, -58], [8, -22], [19, -10], [32, -62], [13, -75], [1, -23], [14, -34], [0, -72], [30, -100], [3, -48], [-3, -22], [-12, 13], [-37, 113], [-41, 49], [-5, 21], [-42, 66], [-28, 111], [-30, 198], [14, 47], [-34, 96], [1, 25], [15, -6], [10, 2], [5, 11], [13, 1]], [[94920, 45859], [35, -34], [20, 6], [30, -23], [23, 13], [15, -30], [36, -118], [0, -38], [24, -27], [-20, -5], [-28, 14], [-22, -10], [-22, 23], [-38, 12], [-33, 27], [-69, 87], [0, 43], [-11, 21], [-3, 54], [-25, 17], [-29, 3], [-2, 26], [5, 45], [21, -1], [26, -19], [50, -65], [12, -12], [5, -9]], [[56147, 79726], [-6, -7], [-95, -32], [-13, 5], [-13, 18], [-7, 14], [-5, 9], [-8, 26], [-11, 19], [-16, 15], [-15, 17], [-19, 1], [-52, -25], [-36, -2], [-23, 8], [-32, 15], [-62, 2], [-43, -13], [-4, -18], [-39, -115], [-57, -43], [-50, -43], [-14, -9], [-25, 14], [-28, 25], [-23, 14], [-17, -6], [-19, -29], [-8, -30], [-56, -22], [-98, -12], [-34, -29], [-11, -36], [-1, -26], [9, -23], [-11, -27], [-4, -11], [-69, -6], [-92, -8], [-55, 2], [-52, 2], [-35, 23], [-43, 45], [-45, 59], [-5, 2], [-6, 6], [-29, 4], [-7, -3]], [[54763, 79496], [-17, 19], [-5, 25], [-27, 66], [-30, 109], [0, 32], [11, 35], [11, 28], [1, 21], [2, 6]], [[54709, 79837], [9, 45], [21, 60], [20, 35], [15, 11], [30, -10], [52, -9], [39, 8], [37, 27], [20, 23], [18, 25], [5, 16], [8, 7], [31, 14], [9, 17], [4, 31], [3, 35], [6, 26], [8, 19], [57, 45], [5, 16], [9, 16], [17, 17], [16, 25], [17, 15], [22, -1], [21, 3], [16, 9], [7, 1]], [[55231, 80363], [29, -8], [5, -28], [3, -30], [51, 2], [28, 64], [14, 8], [24, 22], [15, 20], [10, -13], [16, -41], [16, -33], [9, -13], [1, -10], [10, -6], [18, -4], [12, -10], [4, -31], [0, -28], [-6, -20], [-3, -18], [13, -7], [19, 7], [13, 10], [39, -23], [14, 51], [15, 27], [21, 12], [18, 16], [17, 11], [11, 0], [5, 4], [15, -1], [16, -5], [23, 6], [31, -13], [20, -23], [19, -8], [22, 1], [15, 13], [22, 45], [16, 0], [24, 7], [35, -1], [80, -9], [21, -18], [49, -22], [22, -25], [9, -31], [5, -21], [51, -32], [75, -42], [18, -5]], [[54587, 78628], [-24, 14], [-30, 6], [-5, -7], [-12, -8], [-6, -14], [4, -55], [-7, -9], [-34, 5], [-11, -6], [-18, -38], [-19, -16], [-23, -11], [-18, -14], [-22, -12], [-19, -7], [-8, -17], [-4, -18], [1, -18], [19, -35], [3, -37], [-2, -46], [-5, -24], [-7, -16], [-48, -21], [-49, -38], [-1, -8], [22, -34], [1, -8], [-18, -19], [-2, -19], [2, -22], [10, -22], [3, -21], [-27, -14], [-36, 5], [-43, 28], [-16, -4], [-14, -15], [-15, 7], [-17, 17], [-23, 36], [-12, 23], [-4, 23], [-7, 4], [-9, -7], [-8, -29], [-22, -51], [-16, -14], [-24, 3], [-34, -1], [-21, -5], [-26, 19], [-6, -4], [0, -12], [-10, -19], [-15, -12], [-74, 28], [-10, 23]], [[53771, 78062], [17, 11], [23, 30]], [[53811, 78103], [15, -4], [19, 7], [9, 12], [-13, 38], [-30, 47], [-16, 17], [-22, 12], [-4, 13], [12, 73], [-4, 11], [-25, -4], [-6, 8], [-2, 13], [2, 17], [17, 29], [19, 25], [5, 14], [-1, 11], [-24, 12], [-15, 11], [-11, 4], [-8, -6], [-6, 7], [-6, 21], [6, 32], [21, 30], [24, 26], [21, 20], [11, 8], [6, 33]], [[53805, 78640], [12, -3], [25, -2], [27, -8], [25, -9], [22, -12], [47, -12], [42, -7], [13, -7], [10, 1], [13, -10], [8, 7], [5, 13], [23, 16], [22, 21], [14, 26], [9, 21], [14, 14], [16, 5], [14, 7], [60, 10], [62, -8], [30, 14], [24, 26], [35, 7], [2, 0], [53, -19], [4, 11], [2, 5], [-1, 55], [17, 25], [16, 11]], [[54470, 78838], [53, -4], [7, -17], [2, -26], [5, -35], [9, -10], [5, -14], [-1, -24], [10, -18], [24, -49], [3, -13]], [[78880, 52610], [-42, -38], [-47, 34], [15, 57], [32, 13], [25, -18], [14, -13], [10, -16], [-7, -19]], [[47143, 56730], [-1, -17], [-8, -83], [-12, -71], [-8, -17], [-36, -19], [-15, -31], [-13, -101], [-8, -79], [-12, -13], [-52, -114], [-34, -43], [-24, -38], [-22, -48], [-28, -47], [-31, -80], [-21, -82], [-15, -26]], [[46803, 55821], [-11, 23], [-52, 82], [-54, 55], [-116, 91], [-39, 25], [2, 33], [13, 59], [-22, 69], [9, 51], [-9, 0], [-16, -31], [-36, 9], [-23, 44], [-19, 15], [-9, 22], [-12, 115], [-9, 52], [-17, 32], [-36, 8], [-15, 69], [-19, 54], [3, 34], [16, -2], [13, -24], [20, -10], [25, 58], [23, 32], [5, 28], [-3, 15], [-14, -24], [-37, 6], [-9, -21], [-17, -7], [-13, 69], [1, 40], [5, 45], [38, 7], [3, 14], [-26, 10], [-33, 52], [-6, 35]], [[46307, 57055], [16, 12], [16, -5], [13, -8], [15, 13], [14, 20], [8, 25], [11, 67], [35, 22], [21, 41], [20, 64], [9, 45], [8, 22], [6, 19], [3, 22], [9, 19], [10, 47], [6, 44], [20, 20], [42, 19], [38, -32], [61, 27], [3, 41], [56, 1], [66, 0], [55, 1], [19, -11], [7, -30], [18, -47], [19, -33], [23, -72], [28, -84], [29, -75], [19, -41], [2, -14], [-1, -17], [-10, -38], [-8, -42], [1, -15], [6, -8], [31, -13], [2, -46], [1, -64], [14, -60], [15, -44], [-1, -16], [-35, -75], [-13, -74], [-7, -21], [-3, -17], [7, -8], [9, 5], [14, -6], [13, -2], [17, 27], [28, 68], [10, 8], [21, -6]], [[46520, 56126], [-4, -15], [-18, 37], [-96, 56], [27, 29], [66, 9], [20, -17], [9, -15], [3, -27], [-7, -57]], [[65427, 49139], [1, -53], [-13, 18], [-4, 34], [-18, 26], [-9, 24], [20, 29], [23, -78]], [[56306, 77325], [-10, -10], [-11, -15], [-7, -26], [-1, -42], [-36, -33], [-14, -7], [-6, -21], [-9, -62], [1, -47], [5, -23], [2, -20], [12, -23], [10, -37], [7, -48], [16, -37], [39, -37], [20, -21], [14, -31], [11, -27], [33, -38], [-3, -26], [-7, -26], [-7, -12], [-16, -33], [-16, -19], [-26, -59], [-41, -3], [-10, -5], [-16, -16], [-7, -29], [7, -23], [-1, -24], [-7, -46], [10, -50], [14, -23], [2, -13], [-2, -23], [-22, -47], [-6, -17], [-22, -9]], [[56206, 76217], [-7, 4], [-11, 17], [-11, 4], [-26, -19], [-26, -11], [-21, 9], [-20, 1], [-14, -8], [-11, -3], [-21, -21], [-33, -14], [-16, 3]], [[55989, 76179], [-6, 19], [-6, 27], [3, 13], [22, 21], [3, 21], [31, 99], [6, 32], [0, 11], [-8, 7], [-17, 0], [-76, 40], [4, 46], [-22, 25], [-24, 22], [-4, 25], [-27, 50], [-19, 28], [-25, 14], [-22, 21], [-12, 12], [-6, 23], [0, 14], [-7, 14], [-10, -2], [-17, -18], [-22, -16], [-4, -12], [8, -28], [6, -17], [-3, -17], [-7, -21], [-41, -47], [-5, -16], [8, -26], [-5, -13], [-34, -17]], [[55651, 76513], [1, 14], [-3, 23], [-19, 25], [-28, 19], [-63, 65], [-23, 9], [-22, 7], [-30, 32], [-16, 5], [-18, 22], [-38, 76], [-32, 41], [-22, 20], [-6, 21], [-2, 20], [1, 7]], [[55331, 76919], [17, 30], [13, 4], [16, 1], [11, -15], [15, -3], [8, 19], [4, 27], [-2, 35], [-35, 82], [-29, 57], [-4, 12], [7, 11], [10, 5], [11, -4], [29, -4], [28, 5], [9, 14], [0, 18], [-10, 18], [-32, 46], [-26, 41], [-29, 32], [-23, 12], [-6, 16], [-3, 18], [3, 31], [1, 40], [5, 25], [20, 47], [19, 51], [12, 48], [6, 45], [-2, 13], [-10, 9], [-21, 10], [-29, -9], [-25, -16], [-10, -1]], [[55279, 77689], [-3, 20], [4, 9], [8, -1], [6, -4], [7, 9], [4, 27], [-10, 94], [18, 9], [1, 13], [1, 12], [19, -16], [27, 0], [24, 3], [4, 9], [-1, 14], [-5, 10], [-8, 9], [-6, 13], [-16, 5], [-50, 34], [-24, 36], [0, 39], [7, 21], [9, 7], [-2, 7], [-29, 18], [-10, 24], [9, 32], [-15, 64], [-15, 40], [15, 17], [2, 24], [1, 14]], [[55251, 78301], [6, 0], [25, 16], [8, 13], [6, 16], [5, 4], [17, -17], [17, -2], [19, 11], [15, 15], [17, 12], [8, 8], [10, 14], [21, 39], [23, 8], [30, -10], [34, -4], [25, 9], [63, -11], [13, -9], [9, -10]], [[55622, 78403], [17, -34], [16, -43], [22, -20], [26, -24], [13, -17], [20, -52], [16, -25], [5, 1], [5, 7], [4, 5], [4, -5], [0, -16], [1, -34], [-3, -38], [5, -35], [0, -11], [-3, -10], [0, -9], [6, -9], [21, -23], [20, -36], [22, -26], [22, -16], [13, -1], [22, -29], [43, -21], [14, -7], [9, -12], [7, -14], [0, -14], [-6, -7], [-10, -20], [-3, -25], [-7, -6], [-7, 0], [-5, -8], [1, -10], [6, -10], [9, -9], [17, -9], [17, -14], [0, -10], [-4, -11], [-21, -5], [-16, -2], [-8, -4], [1, -21], [45, -21], [21, -20], [10, -26], [29, -17], [47, -8], [33, -27], [18, -45], [30, 11], [42, 67], [41, 17], [40, -32], [22, -26], [4, -20], [-10, -9], [-22, 4], [-19, -13], [-14, -29], [-2, -31], [10, -33], [14, -23], [19, -13], [9, -17], [2, -22], [4, -6]], [[46588, 60373], [26, -93], [-5, -44], [-6, -65], [15, -47], [17, -31], [12, -28], [14, -39], [2, -77], [-2, -56], [9, -26], [7, -32], [-1, -26], [-5, -24], [-17, -31], [-3, -58], [27, -71], [17, -38], [0, -22], [5, -24], [13, -28], [8, 7], [8, 23], [4, 15], [24, -7], [11, -7], [14, -46], [6, -30], [4, -39], [15, -48], [14, -34], [2, -21], [13, -28], [-8, -64], [1, -32], [-8, -85], [-2, -41], [0, -15], [19, -30], [-2, -43]], [[46836, 58988], [-19, 8], [-32, 5], [-65, -23], [-23, 9], [-43, -3], [-30, -12], [-39, -28], [-30, 7], [-16, 22], [-21, -1], [-24, 11], [-26, 22], [-23, 10], [-26, 40], [-11, 7], [-9, -11], [-7, -13], [-7, -8], [-14, 7], [-5, 27], [5, 26], [1, 19], [-7, 11], [-15, 4], [-25, -1], [-40, 9], [-9, 5], [-90, 6]], [[46186, 59143], [-93, 1], [-79, 1], [-100, 1], [-70, 0], [-66, 1], [-50, -53], [-55, -56], [-73, -31], [-85, 12], [-27, -9], [-28, -25], [-21, -18], [-29, -11], [-37, 9], [-16, -6]], [[45357, 58959], [-9, 26], [-11, 42], [7, 31], [23, 20], [34, 26], [19, -14], [10, 0], [2, 16], [-3, 9], [-26, 22], [-14, 30], [-11, -17], [-10, -37], [-8, -10], [-12, -11], [-6, 25], [-3, 24], [5, 19], [-2, 104], [3, 55], [-2, 49]], [[45343, 59368], [16, 32], [16, 20], [60, 2], [57, 1], [54, -1], [55, -1], [6, 97], [17, 8], [26, 10], [49, 12], [54, 11], [12, 19], [9, 33], [6, 28], [11, 13], [15, -10], [20, -15], [21, -24], [23, -21], [16, -14], [38, -34], [65, -48], [53, -19], [65, 35], [46, 22], [6, 42], [-7, 41], [-35, 37], [-47, -4], [-15, -10], [-22, -13], [-13, -4], [-22, 8], [-28, 33], [-18, 32], [-25, 15], [-29, 16], [-47, 66], [-25, 12], [-23, 4], [-45, -13], [-44, -36], [-23, -81], [-43, 1], [-93, 3], [-86, 2], [-70, -6]], [[45399, 59669], [-7, 59], [-17, 47], [-27, 40], [-6, 37], [9, 33], [26, 26], [6, 19], [-13, -2], [-21, -18], [-14, 0], [-1, 51], [-23, 66], [-26, 112], [-30, 46], [-24, 91], [-26, 35], [-24, 16], [-20, -3], [-7, -42], [-25, 60], [34, 21], [73, 75], [85, 215], [76, 253], [9, 60]], [[45406, 60966], [10, 46], [6, 103], [11, 62], [10, 12], [13, 47], [15, 83], [18, 46], [19, 9], [16, -4], [11, -17], [31, -10], [53, -4], [41, 12], [29, 29], [38, 14], [47, 1], [25, 12], [3, 24], [6, 7], [10, -10], [9, 4], [8, 17], [9, 1], [9, -14], [39, -5], [70, 6], [65, -44], [60, -93], [31, -62], [1, -31], [10, -31], [18, -31], [16, -6], [15, 20], [12, -3], [8, -24], [17, -5], [19, 15], [14, -5], [2, -14], [3, -8], [9, -3], [13, -19], [17, -49], [14, -69], [11, -88], [14, -48], [18, -8], [10, -18], [2, -22], [5, -14], [9, -8], [15, 5], [18, -30], [19, -65], [3, -29], [-3, -16], [1, -11], [12, -11], [12, -21], [10, -32], [21, -29], [32, -24], [23, -37], [15, -50], [29, -41], [6, -5]], [[60250, 66464], [-7, 0], [-20, 39], [-11, 29], [-12, 19], [-53, 39], [-8, 25], [9, 25], [5, -25], [10, -14], [44, -36], [49, -76], [9, -7], [-15, -18]], [[61663, 61471], [21, -3], [-9, 19], [-2, 9], [10, 26], [30, -55], [-1, -64], [-2, -15], [-8, 14], [-6, 13], [-2, 15], [-8, 16], [-30, -10], [-18, 17], [-27, 55], [-7, 39], [11, 8], [12, 19], [7, 31], [-7, 32], [16, -5], [9, -33], [1, -75], [3, -16], [-5, -17], [12, -20]], [[61888, 61273], [-3, 46], [-16, 68], [-1, 49], [-8, 48], [-14, 37], [-26, 38], [-3, 53], [-19, 52], [-25, 42], [-15, 77], [-10, 103], [-67, 135], [-84, 124], [-26, 71], [-42, 143], [-21, 113], [-56, 130], [-2, 50], [-9, 61], [-13, 68], [-7, 54], [-57, 235], [-18, 37], [-16, 53], [-4, 40], [-5, 22], [-39, 39], [-38, 99], [-111, 157], [-55, 15], [-43, 56], [-32, 74], [-34, 126], [-60, 136], [-50, 194], [16, 71], [-1, 49], [-16, 84], [-17, 64], [-12, 61], [10, 88], [3, 98], [10, 52], [7, 57], [-9, 115], [-17, 61], [2, 41], [-19, 20], [-16, 45], [16, -1], [-29, 62], [-11, 34], [-11, 84], [-14, 64], [-45, 146], [-22, 89], [-49, 114], [-53, 85], [-33, 38], [-16, 35], [-28, 2], [-30, 50], [-21, 1], [-26, 8], [-31, 97], [-26, 90], [-44, 118], [11, 31], [13, 50], [-6, 65], [-7, 44], [-19, 81], [-64, 202], [-17, 29], [-27, 34], [-16, 88], [-8, 78], [-44, 38], [-74, 282], [-44, 99], [-17, 66], [-50, 109], [-24, 109], [-51, 100], [-44, 173], [-67, 174], [-29, 30], [-69, 12], [-30, 13], [-27, -38], [-2, 48], [19, 67], [26, 140], [6, 123], [42, 364]], [[59708, 68751], [59, -18], [49, -16], [71, -23], [74, -23], [43, -14], [14, 6], [60, 89], [54, 81], [32, 98], [31, 96], [14, 20], [48, 17], [76, 29], [75, 28], [5, 9], [18, 77], [22, 97], [5, 10], [5, 10], [54, 55], [32, 33], [-46, 97], [-44, 92], [-49, 103], [-41, 80], [-63, 120], [-40, 79], [71, 37], [77, 40], [78, 41], [94, 49], [73, 38], [110, 57], [53, 28], [10, 7], [41, 68]], [[60873, 70348], [62, -19], [93, -29], [90, -27], [95, -32], [31, -27], [91, -96], [60, -63], [69, -74], [87, -91], [59, -63], [77, -81], [59, -92], [76, -117], [82, -128], [68, -100], [94, -137], [93, -135], [90, -133], [73, -106], [91, -134], [8, -5], [92, -15], [125, -21], [125, -20], [113, -19], [49, 19]], [[62925, 68603], [53, -12], [72, -17], [43, -11], [82, -21], [25, -88], [9, -61], [8, -60], [24, -54], [56, 1], [49, 1], [61, 2], [49, 1]], [[63456, 68284], [15, -54], [7, -54], [29, -128], [41, -100], [9, -36], [7, -55], [-7, -21], [-3, -23], [30, -55], [51, -46], [19, -12], [22, -21], [-17, -31], [30, -74], [34, -74], [37, -17], [50, -113], [74, -73], [46, -96], [-4, -2], [-14, 10], [-16, 13], [-5, -12], [0, -40], [5, -47], [23, -41], [21, -29], [8, -56], [-17, -120], [-5, 1], [-11, 10], [-12, 2], [-6, -7], [14, -86], [13, -66], [17, -52], [14, -77], [11, -32], [49, -82], [14, -68], [14, -127], [30, -70], [17, -55], [22, -46]], [[64112, 66122], [14, -63], [20, -49], [11, -12], [15, -5], [20, 0], [23, 12], [25, 12]], [[64240, 66017], [20, -24], [20, 3], [2, -23], [-13, -31], [-17, -78], [24, -13], [22, -6], [17, -13], [9, 0]], [[65329, 64921], [20, -65], [17, -54], [23, -75], [25, -79], [24, -75], [17, -57], [-9, -58], [-10, -64], [-10, -63], [-11, -64], [-10, -64], [-10, -64], [-10, -64], [-10, -63], [-11, -64], [-10, -64], [-10, -64], [-10, -63], [-10, -64], [-10, -64], [-11, -64], [-10, -63], [-10, -64], [-12, -77], [-30, -20], [-47, -33], [-48, -33], [-48, -33], [-48, -34], [-48, -33], [-47, -33], [-48, -33], [-48, -33], [-48, -33], [-48, -33], [-47, -33], [-48, -33], [-48, -33], [-48, -33], [-47, -33], [-48, -33], [-39, -27]], [[60165, 66654], [-3, -8], [-12, 21], [1, 44], [10, 25], [-1, -34], [5, -35], [0, -13]], [[52062, 52746], [-11, -15], [-12, 12], [-3, 23], [16, 44], [7, 11], [6, -9], [4, -12], [1, -18], [-8, -36]], [[51849, 51912], [-28, -42], [-10, 11], [-7, 29], [-8, 64], [3, 30], [13, 35], [28, 34], [17, 3], [17, -46], [0, -47], [-25, -71]], [[53468, 77131], [-17, -4], [-8, 24], [12, 27], [18, 4], [3, -21], [-8, -30]], [[2130, 44086], [31, -54], [12, -72], [-13, -69], [-30, 17], [-42, -15], [-15, 5], [-34, 85], [-23, 38], [-10, 35], [30, -4], [44, 24], [50, 10]], [[2374, 43751], [-76, 0], [-38, 26], [-13, 0], [-33, 55], [-5, 28], [17, 19], [36, 10], [70, -41], [11, -37], [16, -4], [13, -16], [3, -26], [-1, -14]], [[33007, 59422], [-8, -9], [-21, 39], [3, 45], [12, 25], [12, 14], [12, 2], [4, -38], [-3, -52], [-11, -26]], [[32992, 59328], [-4, -6], [2, 0], [-2, -5], [-1, 5], [-3, 2], [-2, 1], [-4, 0], [0, 5], [4, -3], [7, 3], [0, 4], [-2, 4], [-1, 3], [2, 5], [8, 10], [3, 5], [1, -2], [0, -2], [0, -2], [1, -2], [-4, -8], [-5, -17]], [[32962, 59156], [-2, -1], [-3, 2], [1, 2], [3, 1], [1, 4], [0, 5], [0, 6], [2, 3], [2, 1], [1, -2], [1, -6], [-2, -4], [-1, -3], [-1, -5], [-2, -3]], [[33084, 59805], [-15, -61], [-31, 38], [-3, 48], [3, 29], [18, 54], [15, 36], [10, 12], [6, -47], [-3, -109]], [[32630, 61705], [-14, -12], [-12, 17], [3, 40], [11, 1], [11, -18], [1, -28]], [[32602, 61773], [-7, -8], [-13, 35], [-20, 10], [-18, 21], [0, 4], [0, 11], [4, 12], [9, 9], [22, -28], [11, -36], [10, -17], [2, -13]], [[58487, 50460], [-7, 3], [-13, 11], [-21, 36], [-38, -20], [-10, 1], [-14, -18], [-12, -21], [-7, -1], [-7, 3], [-33, 42], [-12, -1], [-5, -120], [-5, -67], [-7, -30], [-23, -29], [-24, -16], [-13, 1], [-52, -9], [-21, 0], [-11, 10], [-15, 68], [-27, 30], [-27, 14], [-10, -4], [-10, -35], [-4, -32]], [[58059, 50276], [-26, 22], [-7, 27], [-1, 46], [-10, 62], [6, 27], [10, 17], [21, 33], [33, 46], [7, 22], [4, 37], [-2, 84], [-3, 72], [4, 26], [15, 55], [19, 57], [24, 59], [14, 6], [18, 23], [19, 34], [11, 12]], [[90522, 76877], [4, -3], [5, 0], [5, 1], [2, -6], [1, -11], [-3, -1], [-7, -2], [-4, -1], [-2, 8], [-1, 6], [-4, 4], [0, 4], [4, 1]], [[90654, 76972], [-7, -3], [-12, 3], [-4, 3], [2, 5], [8, 8], [6, -3], [5, -2], [2, -11]], [[90567, 76848], [-3, -1], [-2, 7], [6, 8], [11, 9], [4, -5], [-4, -7], [-5, -4], [-7, -7]], [[88104, 83582], [-34, -100], [-24, -1], [-18, 21], [-39, -8], [-14, 5], [23, 31], [55, 48], [23, -1], [22, 10], [6, -5]], [[91830, 85840], [-22, -7], [-11, 16], [-1, 11], [34, 25], [21, 36], [13, -22], [4, -15], [-38, -44]], [[83405, 93945], [-70, -26], [-60, 0], [-42, 46], [33, 18], [57, 7], [31, -6], [44, -29], [7, -10]], [[84594, 94383], [-17, -1], [-32, 15], [-8, 21], [0, 10], [26, 8], [33, -5], [25, -19], [4, -7], [-31, -22]], [[79519, 96892], [-33, -4], [-36, 12], [10, 26], [81, 4], [30, 39], [51, -2], [14, -11], [8, -13], [-1, -17], [-11, 0], [-48, -2], [-9, -9], [-56, -23]], [[79837, 96337], [-32, 0], [-9, 27], [27, 33], [34, 0], [29, -10], [10, -5], [10, -12], [4, -18], [-73, -15]], [[77107, 95967], [-15, -9], [-29, 4], [-24, 22], [-9, 35], [20, 9], [57, -61]], [[76903, 95736], [-15, -6], [-13, 4], [-4, 7], [1, 29], [25, 38], [1, 12], [12, 6], [31, -7], [15, -16], [2, -7], [-21, -38], [-34, -22]], [[77815, 97703], [-61, -7], [7, 40], [4, 11], [31, 6], [20, -10], [44, -7], [-45, -33]], [[71320, 94150], [-26, -4], [-118, 22], [-43, 27], [16, 18], [31, 0], [140, -63]], [[72974, 94522], [-27, -20], [-37, 11], [-27, 13], [-14, 19], [14, 10], [40, 7], [24, -7], [21, -22], [6, -11]], [[73543, 94734], [-13, -34], [-78, 17], [-11, 14], [42, 21], [38, 12], [54, 2], [-32, -32]], [[74070, 95035], [23, -11], [73, 17], [14, -6], [20, -24], [-31, -45], [-23, -18], [-66, 10], [-83, 1], [-37, 25], [20, 26], [48, 16], [28, 15], [14, -6]], [[66475, 98677], [-60, -7], [-105, 12], [-30, 14], [7, 13], [68, 18], [54, 4], [57, -19], [26, -23], [-17, -12]], [[86301, 76210], [-8, 15], [-2, 26], [-9, 25], [-18, 34], [-7, 35]], [[86257, 76345], [16, 18], [-3, 32], [-15, 30], [-23, 6], [-5, 8], [1, 16], [8, 16], [11, 14], [24, 19], [40, 14], [22, 12], [19, 3], [20, -6], [18, 18], [17, 11], [4, 31], [1, 47], [6, 14], [8, 20], [11, 26], [10, 67], [8, 46], [5, 23], [1, 32], [-5, 20], [-10, 13], [-7, 8], [-1, 36], [1, 48], [-3, 31], [11, 172], [12, 39], [-36, 229], [-11, 73], [-7, 37], [-16, 54], [-10, 27], [4, 26], [14, 25], [14, 12], [40, 6], [12, 9], [49, 28], [11, 17], [26, 40], [10, 31], [11, 40], [24, 21], [15, 36], [16, 13], [16, -31], [19, -17], [25, -11], [31, -13], [51, -25], [51, -21], [33, -17], [16, -7], [32, -12], [14, -8], [13, -10], [21, 26], [28, 33], [-5, 51], [5, 58], [20, 100], [23, 29], [12, 5], [12, 11], [23, 19], [8, 26], [-5, 31], [8, 31], [2, 30], [8, 39], [11, 11], [15, 13], [12, 20], [10, 31], [7, 35], [-3, 41], [14, 26], [23, 22], [8, 14], [4, 35], [1, 16], [6, 18], [-4, 36], [-6, 40], [26, 66], [18, 57], [4, 84], [2, 13], [7, 40], [4, 16], [14, 52], [19, 34], [-4, 38], [-7, 37], [1, 25], [16, 29], [10, 15], [8, 21], [14, 9], [12, 5], [28, 5], [16, 22], [15, 22], [28, 58], [9, 35], [6, 17], [-15, 50], [-13, 42], [-16, 58], [-7, 27], [11, 35], [11, 22], [6, 19], [3, 33], [-4, 25], [-28, 39], [-30, 19], [-34, 8], [-11, 2], [-24, -7], [-101, -50], [-48, -38], [-27, -43], [-29, -21], [-47, 3], [-43, 2], [-35, -24], [-40, -49], [-29, -22], [-18, 4], [-19, -33], [-21, -70], [-24, -31], [-27, 9], [-64, -7], [-101, -22], [-63, 1], [-26, 24], [-40, 3], [-55, -18], [-33, -3], [-12, 10], [-8, 29], [-4, 48], [-19, 50], [-32, 51], [-6, 63], [21, 73], [5, 50], [-12, 27], [-4, 24], [-25, 31], [-17, 52], [-12, 16], [3, 45], [15, 54], [-18, 50], [-55, 3], [-44, 15], [-44, 46], [-68, 131], [-34, 46], [-22, 5], [-16, 21], [-10, 37], [-16, 1], [-16, 0], [-9, -16], [-11, -5], [-18, 15], [-17, 1], [-18, -11], [-15, 7], [-13, 26], [-23, 17], [-33, 9], [-13, 17], [5, 28], [-6, 20], [-18, 13], [-49, -3], [-80, -20], [-66, 5], [-52, 31], [-29, 28], [-5, 26], [-15, 25], [-24, 24], [-14, 42], [-2, 58], [5, 56], [22, 79], [-54, 51], [-16, 30], [3, 25], [-2, 20], [-10, 15], [1, 23], [10, 32], [0, 41], [-11, 50], [-30, 70], [-49, 90], [-27, 66], [-4, 42], [-6, 33], [-10, 18], [-5, 31], [4, 34], [-6, 22], [-7, 21], [1, 33], [-9, 22], [-18, 13], [-6, 25], [4, 53], [-13, 46], [-40, 83], [-12, 61], [-3, 54], [-17, 27], [-1, 24], [-2, 42], [-11, 11], [-6, 15], [5, 17], [-8, 22], [-21, 26], [-9, 22], [-3, 21], [-10, 15], [-31, 16], [-8, 21], [2, 19], [6, 17], [4, 11], [-1, 14], [-2, 13], [-13, 17], [-17, 19], [-19, 41], [-25, 11], [-15, 0], [-14, 23], [5, 14], [-1, 28], [-12, 22], [-15, 9], [-14, -6], [-34, 21], [-55, 47], [-42, 22], [-29, -4], [-18, -14], [-6, -25], [-20, 3], [-48, 44], [-48, 11], [-27, 24], [-21, 40], [-20, 17], [-19, -7], [-44, 27], [-70, 61], [-37, 20], [-14, -11], [-7, 0], [-12, 2], [-18, 0], [-32, 15], [-43, -7], [-55, -27], [-59, -17], [-64, -6], [-37, 3], [-12, 13], [-69, -19], [-96, -40], [-94, -38], [-117, -19], [-78, -64], [-78, -118], [-57, -74], [-34, -30], [-14, -40], [6, -49], [29, -17], [53, 14], [44, -7], [38, -28], [12, -42], [-14, -56], [4, -56], [22, -54], [2, -63], [-19, -71], [-48, -72], [-76, -72], [-47, -71], [-28, -102], [-42, -90], [-16, -50], [-3, -41], [-17, -45], [-31, -48], [-17, -48], [-3, -49], [-15, -44], [-29, -39], [-17, -42], [-7, -45], [-11, -29], [-15, -16], [8, -15], [30, -15], [13, -43], [-6, -71], [-18, -51], [-31, -31], [-47, -20], [-62, -9], [-85, -68], [-73, -88], [-87, -103], [-17, 0], [-32, 13], [-61, 42], [-65, 9], [-62, 40], [-37, 25], [-57, 50]], [[82411, 80543], [-14, 31], [-22, 25], [-56, 33], [-37, 18], [-23, 1], [-58, -34], [-36, -27], [-22, -14], [-36, 3], [-44, 6], [-18, 9], [-25, 21], [-49, 64], [-26, 45], [-35, 26], [-38, 29], [-19, 7], [-33, -2], [-47, 8], [-25, 10], [-21, -9], [-42, -31], [-52, -59], [-41, -23], [-44, -32], [-36, -37], [-35, -39], [-43, -44], [-20, -61], [-10, -44], [-40, -27], [-30, -26], [-30, -9], [-56, 14], [-33, -10], [-83, -52], [-40, -5], [-28, -7], [-27, -3], [-45, -13], [-17, -9], [-23, -10], [-26, 7], [-37, -29], [-104, -80], [-33, -13], [-22, -3], [-28, 28], [-28, 19], [-30, -2], [-34, -26], [-57, 20], [-68, 19], [-61, 18], [-21, 15], [-60, 22], [-88, 1], [-52, 0], [-33, -8], [-26, 11], [-32, 32], [-54, 74], [-32, 21], [-17, 19], [-7, 30], [-12, 4], [-8, 21], [0, 29], [-1, 62], [4, 44], [-9, 13], [-36, 7], [-43, 14], [-79, 2], [-32, 1], [-25, 25], [-28, 31], [-28, 64], [-24, 29], [-40, 37], [-38, 10], [-57, -7], [-42, -7], [-37, 16], [-24, 20], [-34, 22], [-51, 5], [-42, 16], [-44, 18], [-32, -7], [-22, -18], [-26, -23], [-33, -4], [-81, -24], [-24, -14], [-36, -6], [-32, -18], [-26, -35], [-22, -26], [-28, -9], [-33, 2], [-29, 8], [-15, 3], [-22, -13], [-25, -9], [-38, 15], [-21, 13], [-32, 8], [-20, 37], [-20, 15], [-34, 6], [-50, 18], [-26, 20], [-23, 11], [-38, 43], [-21, 37], [-17, 6], [-20, 5], [-13, 23], [-1, 29], [5, 18], [3, 30], [-11, 29], [-11, 13], [-6, 22], [3, 42], [-4, 42], [-4, 44], [-12, 32], [-3, 63], [5, 26], [-1, 30], [-12, 23], [-37, 17], [-44, 22], [-70, 27], [-29, 2], [-23, -11], [-22, 13], [-22, 22], [-39, 23], [-50, 30], [-54, 33], [-48, 29], [-19, 8], [-66, 2], [-54, 4], [-32, 11], [-37, 41], [-19, 26], [-30, 12], [-22, 4], [-35, 13], [-64, 44], [-23, 21], [-16, 0], [-21, 38], [-18, 9], [-13, -27], [-13, -65], [-11, -30], [-34, -60], [-80, -48], [-13, -25], [-8, -23], [-11, -32], [-4, -42], [-10, -12], [-23, -1], [-18, -19], [-14, -42], [-11, -17], [-7, -39], [1, -17], [-2, -19], [-2, -30], [-21, -66], [-3, -38], [8, -24], [18, -33], [9, -18], [3, -22], [0, -28], [11, -38], [8, -33], [13, -24], [19, -20], [21, -7], [16, -13], [4, -27], [-5, -37], [-7, -69], [-14, -43], [-8, -28], [-14, -42], [-5, -17], [-27, -36], [-19, -10], [-23, -29], [-19, -2], [-18, 1], [-19, -7], [-18, -13], [-13, -39], [-34, -40], [-16, -19], [-42, -6], [-20, 18], [-11, 25], [-14, 14], [-17, 31], [-76, 16], [-20, -7], [-12, -12], [-15, 9], [-11, 15], [-11, -5], [-23, -8], [-19, 2], [-23, 31], [-33, 16], [-13, 10], [-13, 0], [-8, -15], [-15, -8], [-10, 18], [-13, 13], [-18, 0], [-22, -27], [-39, -13], [-13, -19], [-22, 3], [-16, 15], [-15, 1], [-46, 0], [-15, -5], [-19, 15], [-8, 27], [-23, 21], [-33, 2], [-26, -3], [-12, -8], [-17, -3], [-14, 37], [-19, 26], [-10, 19], [-16, 8], [-13, 24], [-2, 47], [-8, 59], [-9, 61], [-10, 26], [-49, 9], [-23, -2], [-54, 5], [-38, 4], [-10, 1], [-34, 7], [-32, 6], [-32, 4], [-14, -5], [-33, -2], [-26, 29], [-11, 34], [-2, 19], [-6, 19], [-23, 6], [-22, -6], [-11, -39], [-16, -16], [-15, 3], [-13, 21], [-26, 23], [-17, 22], [-20, 35], [-16, -8], [-5, -22], [-3, -21], [-21, -43], [-24, -5], [-41, 3], [-43, -2], [-27, -16], [-20, -29], [-10, -23], [-21, -8], [-21, -23], [-9, -31], [-20, 1], [-11, -4], [-19, -6], [-48, -17], [-11, -4], [-29, -30], [-22, -23], [-21, -10], [-13, -27], [-17, -21], [-38, -6], [-42, -26], [-15, -9], [-24, -20], [-34, -8], [-14, -6], [-13, -14], [-8, -49], [-28, -17], [-37, -3], [-28, -26], [-2, -46], [9, -42], [-4, -19], [-21, -11], [-29, -22], [-22, -28], [-26, -1], [-16, 10], [-11, -18], [-7, -37], [-19, -18], [-28, -16], [-11, 6], [-7, 14], [-12, 18], [-10, -7], [-1, -26], [-8, -19], [-24, -2], [-18, 11], [-13, 12], [-25, -2], [-26, -5], [-16, 6], [-15, -6], [-41, -12], [-16, -41], [0, -48], [-5, -24], [-24, -21], [-12, -19], [-14, -13], [-33, -1], [-1, 0]], [[74392, 80162], [-14, 2], [-26, -11], [-26, -8], [-17, -6], [-11, -18], [-16, -8], [-26, 5]], [[74256, 80118], [-8, 35], [-17, 40], [-24, 14], [-21, 8], [-20, 19], [-13, 20], [-39, 95], [-27, 41], [-25, 3], [-3, 27], [14, 27], [18, 22], [0, 31], [-15, 16], [-18, -5], [-25, -35], [-29, -40], [-35, -29], [-14, -24], [-17, -27], [-24, 4], [-18, -2], [-15, -2], [-11, 29], [-15, 4], [-106, 28], [-35, 11], [-23, -14], [-16, 9], [-6, 28], [-21, 50], [-16, 41], [-21, 41], [-8, 33], [7, 34], [-3, 30], [-18, 15], [-23, 2], [-65, 64], [-30, 9], [-27, 12], [-22, 0], [-18, 28], [-17, 86], [-6, 48], [-21, 49], [-27, 41], [-16, 57], [-23, 25], [-40, 39], [-38, 28], [-62, 34], [-23, 0], [-32, -3], [-18, -16], [-21, -37], [-28, -2], [-44, 0], [-11, -14], [-7, -25], [-23, -31], [-33, -25], [-46, 8], [-32, -13], [-32, -5], [-45, 32], [-51, -1], [-33, -15], [-46, 1], [-10, 18], [6, 30], [-4, 27], [-8, 22], [-6, 27], [-19, 6], [-54, -11], [-15, 12], [2, 27], [9, 33], [8, 43], [-3, 26], [-28, -4], [-17, 3], [-9, 30], [-16, 23], [-18, 1], [-21, 5], [-24, -9], [-12, -30], [-16, -5], [-16, -8], [-12, -11], [-7, -27], [3, -25], [5, -55], [-8, -29], [-22, -16], [-20, 3], [-14, -7], [-26, -31], [-12, -11], [-3, -19], [-2, -28], [-22, 10], [-35, 104], [-40, 118], [-45, 125], [-24, 67], [-89, 216], [-43, 103], [-76, 178], [-68, 162], [-77, 168], [-46, 95], [-48, 101], [-17, 27], [-26, 36], [-65, 69], [-94, 99], [-87, 87], [-68, 69], [-17, 30], [-8, 17], [-7, 18], [-10, 34], [0, 22], [64, -4], [14, 22], [24, 80], [13, 69], [-22, -3], [-40, -28], [-21, -21], [-12, -9], [-64, -14], [-35, -31], [-72, -52], [-52, -30], [-10, -5], [-61, -10], [-11, -12], [-1, -27], [-5, -30], [-43, -44], [-47, -38], [-17, -5], [-29, 9], [-14, -5], [-43, -41], [-64, -62], [-6, -25], [0, -30], [-7, -27], [-14, -10], [-21, 24], [-19, 28], [-39, 20], [-58, 5], [-36, -10], [-24, -16], [-48, -61], [-18, -13], [-10, 4], [-2, 30], [-10, 21], [-12, 32], [6, 63], [26, 60], [43, 33], [35, 35], [10, 38], [-1, 27], [-13, 12], [-13, 2], [-8, -13], [-23, -26], [-35, -21], [-29, -4], [-13, 1], [-31, 13], [-57, 73], [-48, 10], [-33, 6], [-11, -7], [-5, -18], [3, -20], [7, -19], [-4, -16], [-15, -11], [-24, -20], [-11, 13], [-6, 51], [1, 40], [-16, 34], [-17, 52], [-23, 31], [-22, -10], [-11, -44], [-17, -15], [-33, 9], [-58, -25], [-95, -11], [-68, 31], [-11, 28], [28, 59], [2, 53], [0, 48], [7, 35], [-16, 66], [-38, 136], [-22, 102], [-34, 77], [-14, 25], [-70, -13], [-19, -17], [-13, -23], [-22, -17], [-31, -12], [-26, 8], [-29, 13], [-31, 27], [-36, 36], [-69, 28], [-68, 9], [-75, 10], [-38, -18], [-36, -29], [-52, -59], [-24, -6], [-38, -5], [-27, -15], [6, -26], [5, -36], [-10, -29], [-15, -15], [-22, -10], [-37, -3], [-31, -6], [-38, -41], [-58, -10], [-63, -15], [-44, -23], [-96, -29], [-55, -13], [-93, -28], [-74, -5], [-11, 20], [-58, -43], [-64, 3], [-11, -18], [-16, -16], [-17, -8], [-22, -20], [-13, -43], [-9, -45], [-20, -13], [-25, 16], [-19, 16], [-33, -16], [-44, -10], [-35, 6], [-18, 13], [-73, -21], [-37, -26], [-8, -13], [-9, -8], [-43, -17], [-35, 5], [-6, -1], [-33, -13], [-47, -22], [-33, -7], [-29, 0], [-18, -18], [-14, -20], [-123, -21], [-12, -14], [-25, -18], [-127, -6], [-11, -13], [-4, -15], [-16, -4], [-92, 28], [-74, 31], [-28, -17], [-24, -32], [-9, -47], [0, -40], [0, -34], [-11, -25], [-24, -31], [-2, -20], [33, -23], [42, -18], [24, 8], [21, 13], [17, -4], [13, -15], [4, -18], [-2, -13], [-8, -9], [-27, -17], [-25, 6], [-23, -12], [-12, -22], [-6, -40], [10, -29], [31, -7], [35, -21], [39, -9], [23, 3], [30, -31], [69, -38], [18, -29], [1, -30], [-13, -23], [-18, -13], [-23, 7], [-47, 8], [-52, 5], [-37, 10], [-54, -4], [-44, -9], [-11, -23], [-18, -42], [-14, -23], [-25, -44], [-8, -39], [13, -61], [44, -101], [4, -33], [-16, -33], [-30, -27], [-44, -48], [-47, -2], [-21, -12], [-53, -58], [-47, -28], [-10, -25], [11, -25], [59, -32], [30, -35], [8, -40], [13, -30], [46, -20], [95, -46], [6, -5], [6, -21], [97, -29], [13, -16], [40, -52], [8, -54], [-20, -54], [-13, -84], [-21, -75], [-45, -49], [-79, -46], [-85, -18], [-36, 3], [-23, 6], [-38, 14], [-28, 38], [-21, 37], [-15, 9], [-15, -6], [-13, -23], [-19, -63], [-21, -62], [-17, -22], [-63, -30], [-7, 11], [7, 41], [-8, 13], [-12, 9], [-78, 16], [-30, 11], [-22, 5], [-28, 10], [-19, 25], [-42, 76], [-32, 59], [-53, 53], [-47, 11], [-4, -6], [-36, -2], [-57, 13], [-3, -1], [-18, -25], [-13, -38], [-18, -32], [-26, -17], [-32, -4], [-37, 34], [-37, 51], [-46, 17], [-45, -11], [-17, -8], [-47, -30], [-15, 14], [-21, 9], [-46, -48], [-50, -53], [-11, -39], [-15, -37], [-34, -34], [-36, -30], [-31, -11], [-40, 11], [-51, 37], [-46, 45], [-50, 72], [-41, 42], [-39, 32], [-23, 8], [-19, -12], [-8, -26], [5, -20], [12, -18], [9, -57], [3, -69], [-4, -40], [-11, -23], [-11, -9], [-11, 3], [-13, 25], [-7, 52], [-7, 61], [-34, 77], [-30, 47], [-14, 26], [-27, 43], [-24, 26], [-50, 31], [-24, 22], [-43, 85], [-24, 26], [-31, 21], [-25, 7], [-5, -5], [-53, -12], [-37, 1], [-23, 16], [-24, 2], [-2, 0], [-26, -10], [-5, 0], [-13, 1], [-20, 17], [-21, 48], [-25, 50], [-31, 16], [-59, -21], [-65, -68], [-46, -41], [-37, -1], [-22, -6], [-14, 2], [-12, 13], [-3, 25], [-6, 31], [-30, 30], [-40, 20], [-38, 22], [-24, 6], [-11, -32], [-31, -49], [-35, -48], [-45, -79], [-13, -27], [-17, -19], [-40, -20], [-48, -33], [-30, -38], [-43, -17], [-47, -10], [-21, -33], [-12, -53], [-16, -48], [-73, -72], [-40, -47], [-30, -25], [-20, 3], [-22, 7], [-9, -4], [12, -36], [9, -113], [14, -72], [10, -41], [9, -33], [7, -50], [-9, -29], [-14, -20], [-45, -31], [-46, -26], [-27, 17], [-31, 42], [-12, 22], [-33, 71], [-59, 109], [-40, 55], [-30, 21], [-26, -7], [-21, -25], [-15, -23], [-13, -26], [-9, -32], [1, -45], [-1, -47], [-13, -33], [-33, -36], [-38, -49], [-29, -90], [-18, -112], [-6, -78], [14, -37], [28, -29], [18, -30], [4, -29], [-5, -30], [-15, -35], [-30, -39], [-42, -95], [-26, -133], [15, -93], [53, -51], [42, -23], [17, -30], [15, -60], [-2, -62], [-5, -42], [10, -41], [20, -48], [25, -30], [27, 16], [26, 20], [33, -8], [93, -16], [48, -9], [16, -21], [30, -69], [38, -77], [39, -78], [14, -34], [31, -93], [33, -84], [35, -104], [-2, -28], [-19, -11], [-30, 2], [-23, 16], [-13, 12], [-11, 4], [-13, -5], [-11, -13], [-5, -20], [2, -28], [9, -26], [12, -16], [7, -6], [46, -34], [51, -38], [63, -54], [13, -7]], [[63675, 78534], [4, -26], [-34, -5], [-4, -31], [-8, -23], [-75, -51], [-19, 0], [-16, -8], [1, -33], [4, -30], [13, -32], [-6, -14], [-11, -5], [-14, 10], [-14, 17], [-14, 4], [-14, -4], [-64, -91], [-27, -23], [-30, -9], [-61, -34], [-19, 2], [-17, 12], [-15, -17], [-4, -42], [-17, 29], [-18, 23], [-8, 7], [-4, -4], [17, -45], [1, -41], [-4, -23], [-7, -21], [-10, -12], [-11, -7], [-6, -73], [-12, -44], [-15, -40], [-21, -72], [-16, -31], [-13, -37], [-9, -51], [-12, 12], [-10, 22], [-6, -29], [-7, -25], [-32, -37], [-24, -36], [-11, -55], [-2, -33], [3, -30], [9, -17], [46, -20], [29, -25], [28, -47], [30, -40], [21, -51], [15, -64], [19, -123], [9, -129], [28, 161], [24, 29], [-6, -46], [-16, -69], [-17, -101], [-5, -74], [6, -64], [0, -30], [-13, -106], [7, -20], [11, -19], [29, -36], [21, -54], [5, -75], [12, -20], [14, -18], [72, -150], [41, -100], [21, -58], [22, -73], [12, -17], [14, -11], [27, -34]], [[63492, 75947], [-15, -38], [-25, -67], [-11, -35], [-25, -33], [-44, -35], [-24, -15], [-25, -72], [-29, -69], [-19, -8], [-56, 11], [-19, 6], [-57, 31], [-16, 19], [-15, 81], [-17, 34], [-22, 23], [-15, 19], [-6, 19], [-16, 28], [-30, 42], [-21, 40], [-16, 11], [-21, -14], [-12, -4], [-5, 7], [-4, 33], [-30, 12]], [[62897, 75973], [-6, 8], [-39, 32], [-16, 17], [-14, 2], [-31, 9], [-27, 16], [-12, 20], [-18, 22], [-33, 29], [-24, 26], [-1, 17], [15, 71], [10, 68], [-6, 13], [-14, 11], [-25, 11], [-61, -4], [-38, 69], [-13, 15], [-25, 11], [-35, 21], [-20, 15], [-6, -6], [-22, -75], [-22, 54], [-13, 14], [-19, 8], [-20, 0], [-49, -26], [-36, -28], [-27, -22], [-27, -12], [-13, -17], [-37, 3], [-18, 13], [-6, 14], [3, 23], [13, 26], [1, 14], [-5, 11], [-44, 35], [-18, 22], [-59, 30], [-71, 53], [-25, 35], [-3, 24], [-28, 24], [-36, 21], [-28, -6], [-26, -2], [-41, 39], [-38, 3], [-44, -12], [-10, -5], [-10, -5], [-130, 16], [-34, 33], [-28, 33], [-77, 24], [-39, 25], [-39, 36], [-42, 31], [-36, -13], [-49, 18], [-54, 15], [-18, -9], [-17, -40], [-13, -37]], [[61104, 76854], [-29, 31], [-99, 146], [-52, 98], [-170, 225], [-22, 17], [-90, 33], [-37, 26], [-91, 161], [-41, -22], [-37, 6], [-21, 14], [-24, 23], [-16, 30], [-19, 68], [-22, 38], [-72, 56], [-82, 33], [-6, 14], [-3, 20], [71, 38], [19, 22], [-36, 29], [-14, 5], [-11, 13], [20, 22], [20, 10], [31, -25], [35, -46], [31, -18], [14, 22], [106, 39], [7, 30], [0, 34], [-11, -2], [-6, 8], [0, 38], [16, 51], [48, 84], [25, 116], [23, 27], [16, -18], [-1, -27], [3, -20], [15, 39], [14, 53], [36, 0], [24, -9], [26, 6], [-49, 88], [-66, 87], [-28, -6], [-18, 13], [-29, 73], [-12, 60], [28, -2], [28, -9], [53, 42], [20, 6], [31, -13], [44, -8], [-3, 39], [-14, 47], [53, 34], [47, 19], [91, 68], [40, 12], [5, 15], [1, 20], [-13, 54], [-14, 40], [-48, 2], [-26, -55], [-72, -19], [-33, 4], [26, 36], [25, 13], [8, 15], [-52, -13], [-25, -37], [-76, -48]], [[58823, 81855], [-2, 14], [-19, 55], [-11, 24], [-13, 13], [-7, 15], [0, 66], [2, 61], [9, 8], [-25, 50], [-2, 38], [12, 19], [0, 16], [-8, 22], [-25, 37], [-25, 41], [-16, 33], [-11, 15], [13, 26], [17, 45], [6, 26], [9, 6], [40, 4], [29, -1], [22, -9], [8, -22], [21, -23], [57, -10], [24, 1], [30, 21], [49, 48], [12, 34], [30, 24], [18, 10], [17, 4], [2, 20], [-1, 28], [-6, 17], [-60, 57], [-8, 18], [-5, 22], [8, 21], [-1, 23], [-69, 51], [-58, 9], [-47, -3], [-19, 10], [8, 26], [12, 46], [3, 38], [-3, 17], [-9, 15], [-46, 32], [-62, 48], [-29, 56], [-15, 57], [-17, 35], [-31, 23], [2, 14], [21, 54], [-1, 9], [-9, 13], [-38, 27], [-51, 51], [-3, 13], [4, 31], [7, 32], [11, 14], [30, 64], [0, 21], [-5, 29], [-23, 49], [-17, 32], [-1, 16], [3, 14], [11, 17], [11, 22], [2, 73], [0, 26], [-7, 15], [-7, 7], [-16, -4], [-22, 12], [-16, 19], [-10, 6], [-11, 20], [-31, 39], [-6, 11], [-61, 33], [-53, -5], [-30, 6], [-15, -8], [-16, -21], [-22, -15], [-17, 0], [-15, -11], [-41, -38], [-19, 23], [-17, 34], [6, 29], [7, 27], [-1, 18], [-6, 15], [-25, 17], [-55, 31], [-15, 0], [-24, -11], [-42, -34], [-15, 7], [-14, 27], [-15, 34], [-20, 18], [-44, -2], [-4, -1], [-21, -20], [-9, 2], [-38, 50]], [[57818, 84183], [7, 27], [8, 41], [-3, 31], [-6, 41], [-16, 72], [-2, 20], [-27, 31], [-4, 26], [-14, 34], [-14, 22], [-3, 47], [-9, 17], [-12, 8], [-41, -14], [-5, 2], [20, 76], [2, 44], [12, 47], [15, 18], [4, 16], [2, 30], [-2, 27], [-9, 13], [-35, 30], [-37, 35], [-8, 45], [-11, 10], [-33, 2]], [[57597, 84981], [1, 13], [5, 36], [8, 31], [25, 33], [6, 23], [8, 20], [59, 24], [6, 9], [1, 8], [-3, 8], [-13, 12], [-14, 17], [-8, 46], [-20, 71], [-19, 48], [-4, 28], [5, 33], [7, 31], [0, 31], [-29, 172], [2, 31], [8, 31], [14, 26], [30, 34], [38, 62], [25, 81], [14, 49], [11, 11], [22, 3], [8, 15], [4, 8], [19, 9], [6, 9], [-5, 17], [-19, 29], [-14, 18]], [[57781, 86108], [14, 40], [-5, 54], [-9, 44], [12, 33], [21, 3], [22, -36], [34, -18], [25, 24], [8, 46], [18, 20], [24, -18], [40, -7], [33, 3], [22, 10], [10, 15], [9, 27], [18, 34], [19, 23], [145, -26], [126, -47], [9, 18], [5, 30], [-32, 26], [-23, 14], [-29, 54], [-42, 43], [-42, 4], [-55, -15], [-84, 9], [-71, 81], [-47, 25], [-34, 62], [-8, 33], [36, -28], [5, 29], [3, 40], [-20, 24], [-18, 14], [-93, -61], [-106, -20]], [[57721, 86714], [98, 120], [71, 87], [14, 14], [31, 23], [26, 24], [21, 33], [71, 63], [72, 69], [67, 90], [24, 28], [31, 30], [67, 96], [22, 26], [82, 120], [48, 59], [24, 34], [103, 113], [69, 91], [28, 50], [27, 71], [15, 49], [27, 63], [1, 21], [-8, 19], [-20, 30], [-28, 35], [-25, 43], [-18, 38], [-57, 53], [-89, 67], [-66, 50], [-101, 107], [-18, 26], [4, 7], [57, 33], [57, 83], [25, 42], [6, 32], [0, 37], [-4, 34], [-7, 21], [-27, 27], [-78, 48], [-19, 44], [-15, 47], [0, 19], [37, 50], [2, 25], [-5, 26], [-10, 19], [-80, 22], [-23, 24], [-18, 38], [-9, 33], [-1, 19], [6, 22], [27, 23], [25, 16], [5, 22], [-1, 23], [-4, 11], [-50, 11], [-5, 6], [-1, 8], [2, 10], [28, 41], [3, 79], [26, 55], [-29, 32], [2, 5], [44, 17], [41, 4], [18, 7], [2, 25], [-4, 35], [-42, 136], [-9, 39], [-28, 50], [-23, 33], [-14, 24], [-22, 47], [-13, 47], [-22, 54], [-26, 48], [-22, 46], [-55, 88], [-8, 25], [1, 22], [5, 23], [44, 73], [40, 60], [51, 71], [49, 59], [53, 69], [13, 70], [-2, 12], [-44, 37], [-82, 101], [-51, 77], [-78, 32], [-104, 41], [-35, 93], [-25, 79], [2, 29], [76, 134], [7, 25], [-1, 15], [-8, 9], [-11, 6], [-70, 4], [-11, 18], [42, 14], [35, 19], [58, 28], [18, 7]], [[58045, 91602], [43, 16], [14, 12], [11, 15], [40, 100], [10, 16], [123, 36], [45, 18], [26, 23], [12, 19], [9, 21], [7, 24], [2, 22], [-10, 28], [6, 3], [13, -1], [42, -28], [66, -30], [48, -2], [20, 5], [10, 13], [7, 26], [0, 27], [-15, 75]], [[58574, 92040], [50, -8], [112, -46], [26, 5], [34, 13], [34, 55], [25, 9], [33, -12], [9, 14], [-17, 46], [4, 22], [113, -48], [48, -36], [105, -32], [18, -17], [2, -30], [-5, -25], [-23, -14], [-44, 2], [-161, 39], [-23, -24], [19, -20], [47, -25], [13, -43], [72, 6], [69, -16], [32, 5], [6, -14], [-22, -36], [10, -9], [77, 34], [36, 10], [19, -9], [3, -29], [-13, -36], [-1, -28], [-24, -66], [-36, -21], [-16, -27], [54, 17], [28, 18], [53, 92], [16, 12], [152, 1], [34, -5], [142, -44], [40, -3], [46, 5], [16, 20], [16, 6], [158, -48], [211, -109], [309, -179], [174, -160], [20, -34], [63, -20], [14, 14], [35, -12], [205, -146], [70, -7], [-9, 31], [-12, 29], [18, -7], [24, -21], [38, -57], [48, -42], [48, -64], [41, -24], [36, -9], [30, -18], [56, -17], [26, -155], [20, -34], [0, -68], [36, -28], [27, -5], [-1, -51], [-22, -119], [-24, -51], [-186, -219], [-116, -84], [-226, -97], [-176, -36], [-72, -3], [-138, 18], [-75, 20], [-93, 55], [-86, 27], [-60, 12], [-110, 5], [-239, 54], [-41, 19], [-150, 105], [-60, -30], [-35, -5], [-24, 36], [10, 10], [5, 12], [-85, 30], [-70, 2], [-37, 26], [-46, 19], [-20, -12], [-11, 0], [-92, 46], [-41, 37], [-43, 65], [10, 23], [13, 15], [-148, 38], [-140, 5], [25, -18], [60, -10], [39, -26], [44, -37], [-10, -50], [62, -50], [47, -48], [2, -14], [18, -10], [70, -14], [12, -44], [-11, -17], [9, -25], [53, -27], [31, -7], [38, -17], [-17, -33], [-32, -22], [-33, -10], [16, -8], [41, 3], [152, -55], [80, -56], [81, -102], [26, -50], [2, -28], [-4, -27], [-12, -30], [-5, -31], [-28, -88], [-20, -31], [-38, -35], [36, -68], [37, -63], [37, -105], [7, -42], [1, -65], [33, -26], [-13, -10], [-13, -18], [3, -84], [46, -69], [70, -45], [41, -9], [59, 18], [43, -25], [96, -84], [43, -89], [18, -18], [97, -34], [72, -20], [111, -54], [19, -2], [54, 47], [92, 32], [29, 44], [-3, 37], [-23, 67], [-7, 65], [-31, 27], [-28, 18], [-86, -14], [-39, 3], [-30, 17], [-40, 47], [-75, 113], [-40, 37], [-13, 24], [-14, 32], [2, 53], [33, -2], [37, 30], [27, 106], [46, 14], [25, -1], [108, -50], [134, -132], [29, -14], [31, -2], [51, 4], [9, -18], [27, -20], [20, -3], [123, -42], [142, -82], [53, 3], [21, 46], [4, 20], [59, 46], [40, 8], [57, -17], [10, 13], [-19, 68], [-26, 59], [-39, 37], [-68, 111], [-28, 54], [-13, 57], [9, 50], [10, 36], [142, 89], [51, 53], [50, 69], [23, 14], [83, 19], [111, 59], [85, 78], [84, 119], [36, 31], [28, -2], [38, -19], [42, -35], [57, -6], [55, 5], [64, -3], [88, -54], [14, -17], [14, -23], [-28, -45], [-3, -29], [23, 14], [32, 6], [29, -9], [28, -25], [20, -28], [25, -24], [7, 32], [4, 28], [-13, 70], [34, 99], [26, 43], [48, 110], [-14, 71], [-2, 82], [-7, 38], [-31, 55], [-61, 39], [-61, 13], [-20, 38], [4, 43], [17, 63], [50, 133], [52, 188], [2, 43], [-5, 24], [4, 24], [-7, 57], [-9, 42], [-213, 163], [-13, 15], [-7, 22], [23, 5], [16, -1], [160, -76], [35, -4], [251, 21], [123, -18], [103, -39], [74, -108], [76, -99], [70, -86], [2, -70], [-73, -14], [-70, -4], [-180, -35], [-43, -39], [-120, -122], [-11, -37], [11, -36], [55, -38], [118, -57], [52, -113], [37, -57], [28, -22], [27, -5], [60, -1], [42, -13], [12, -11], [17, 11], [38, 4], [224, 60], [44, 26], [15, 40], [16, 133], [20, 46], [19, 57], [-7, 35], [-2, 40], [112, 38], [104, 26], [50, -8], [13, 28], [-32, 55], [-19, 28], [16, 12], [24, -15], [32, -9], [56, 9], [215, 113], [84, 63], [50, 25], [80, 57], [38, 19], [67, 7], [71, 23], [78, 42], [105, 36], [17, 2], [21, -5], [43, -42], [-16, -24], [-12, -25], [21, -14], [17, -6], [21, 7], [22, 17], [54, 26], [15, 33], [-21, 13], [-27, 49], [-32, 11], [-26, -2], [95, 71], [202, 105], [108, 48], [107, 4], [85, -6], [-32, -16], [-140, -22], [-21, -11], [0, -13], [34, -8], [14, -16], [-11, -18], [-11, -6], [-16, -54], [-21, -43], [44, -56], [4, -58], [-28, -31], [-39, 12], [-34, -20], [-62, -14], [-14, -18], [-9, -26], [40, -6], [31, 2], [110, -17], [15, -2], [37, 18], [37, 4], [45, 6], [23, 11], [23, -13], [44, -51], [40, 10], [17, 99], [63, 62], [74, 50], [72, 5], [69, 35], [33, 7], [64, -14], [96, -3], [81, -30], [60, -8], [88, 51], [203, 143], [17, -33], [33, 48], [157, 50], [38, 2], [1, -20], [14, -44], [30, -27], [42, -64], [-20, -17], [-21, -10], [-31, -43], [-3, -99], [59, -25], [81, -29], [34, 1], [28, 16], [9, 9], [10, 15], [8, 29], [5, 22], [-21, 55], [8, 58], [74, -4], [91, 17], [41, 33], [49, 63], [33, 52], [-21, 92], [-53, -20], [-91, 199], [-47, 77], [30, 36], [78, 23], [71, 74], [27, 15], [29, 3], [210, -51], [239, -12], [203, -39], [230, -81], [112, -57], [93, -63], [-9, -45], [38, 13], [82, -40], [56, -16], [57, -24], [22, -32], [75, -23], [78, -43], [14, -8], [95, -32], [68, -11], [41, -69], [136, -100], [25, -38], [119, -63], [59, -52], [37, 20], [91, 126], [54, 144], [32, 77], [-60, 3], [-45, -22], [-29, 5], [-32, 23], [-52, 58], [-66, 97], [-13, 106], [-18, 35], [-64, 28], [-42, 32], [-156, 63], [-28, -22], [-8, -34], [-10, -25], [-16, 32], [-10, 29], [0, 46], [8, 59], [26, 99], [40, -5], [21, 15], [26, 44], [-12, 37], [-14, 28], [3, 43], [25, 118], [11, 138], [-21, 34], [-19, 23], [-89, -24], [-33, 13], [-8, 26], [-2, 21], [25, 35], [25, 59], [-43, -13], [-15, 23], [36, 34], [42, 82], [99, 38], [74, 37], [116, 78], [86, 77], [56, 98], [38, 93], [62, 218], [58, 160], [98, 165], [61, 15], [23, -3], [4, -12], [-14, -14], [-4, -20], [26, -7], [42, -1], [79, 10], [134, -6], [234, 14], [33, -7], [87, -48], [47, 6], [96, -23], [52, -26], [50, -31], [-7, -120], [-10, -80], [-35, -152], [-14, -39], [-56, -110], [-26, -72], [-42, -50], [-60, -35], [-8, -21], [-5, -31], [59, -87], [140, -90], [34, -108], [8, -81], [-9, -210], [-13, -31], [-26, -34], [-25, -40], [16, -59], [20, -219], [4, -178], [-16, -61], [-8, -129], [0, -43], [14, -64], [28, -54], [37, -34], [105, -63], [99, -76], [7, -24], [5, -29], [-35, -30], [-55, -78], [-35, -65], [-3, -53], [12, -67], [-6, -63], [-23, -56], [-33, -41], [-99, -63], [-207, -334], [-50, -39], [-84, 13], [23, -48], [29, -68], [-4, -45], [-54, 3], [-77, -48], [-35, -32], [-60, -17], [-45, 17], [-50, 31], [7, 26], [10, 12], [35, 19], [34, 25], [-17, 5], [-14, 0], [-38, -32], [-45, -7], [-52, 40], [-41, 43], [-19, 9], [-38, -18], [-146, 8], [-38, -7], [-18, -16], [10, -13], [11, -24], [15, -48], [14, -36], [60, -39], [81, -15], [78, -48], [99, -34], [224, 14], [59, -4], [58, -15], [97, -50], [42, 4], [71, 45], [17, 101], [9, 31], [257, 142], [48, 31], [77, 77], [25, 52], [29, 140], [25, 50], [167, 161], [26, 41], [5, 76], [-3, 51], [-10, 50], [-30, 84], [-34, 49], [-33, 67], [24, 138], [28, 53], [151, 63], [129, 23], [144, 43], [58, 9], [40, -7], [41, -47], [36, -69], [104, -105], [35, -72], [7, -89], [-4, -216], [-20, -94], [41, -24], [20, -22], [51, -31], [27, -31], [27, -11], [59, -7], [168, 11], [92, 6], [-9, 14], [-14, 11], [-78, 4], [-110, 23], [-159, 42], [-19, 91], [4, 56], [36, 106], [25, 18], [31, 7], [36, 15], [-11, 67], [-14, 61], [-34, 85], [-37, 157], [-51, 1], [-39, 31], [-189, 92], [-179, 68], [-123, 9], [-39, -7], [-102, -71], [-66, -15], [-125, 31], [-107, -17], [-40, 17], [-16, 31], [32, 127], [-17, 49], [-47, 66], [-28, 51], [5, 56], [70, 214], [29, 56], [75, 100], [38, 76], [-9, 44], [-161, 239], [-43, 85], [-19, 27], [-39, 32], [-60, 38], [-18, 34], [163, 231], [74, 40], [103, 25], [50, 22], [87, 47], [52, 39], [17, 31], [11, 37], [2, 91], [-11, 73], [-14, 41], [-31, 52], [-31, 59], [22, 15], [22, 9], [58, -1], [60, -32], [30, -64], [35, -60], [0, -40], [-3, -31], [15, -44], [13, -18], [14, -31], [-13, -25], [-14, -12], [-27, -35], [-43, -108], [-33, -14], [-8, -84], [71, -92], [-9, -69], [-14, -23], [-39, -37], [5, -30], [10, -21], [111, -44], [105, -27], [176, -9], [51, -43], [19, 30], [165, -7], [133, -105], [70, -32], [57, -11], [116, 13], [20, 9], [19, 30], [-54, -2], [-24, -14], [-22, 1], [-38, 11], [-27, 18], [-29, 35], [-48, 104], [-84, 33], [-57, -14], [-62, 7], [-102, 56], [-68, 21], [-121, 61], [-34, 25], [-27, 51], [-31, 84], [-20, 47], [26, 9], [83, 46], [124, 15], [53, -16], [136, -94], [63, -3], [114, 41], [13, 26], [-26, 53], [-34, 27], [-66, 13], [-80, -24], [-23, 20], [8, 28], [9, 21], [43, 5], [30, 16], [65, 58], [72, 28], [71, 10], [261, -8], [148, -91], [144, -41], [63, -31], [17, -5], [15, -21], [11, -48], [182, -129], [42, -17], [116, -6], [130, 30], [59, 3], [63, -9], [33, -16], [36, -30], [-19, -38], [-17, -23], [-36, -64], [-16, -18], [-118, -73], [-47, -19], [-13, -96], [-6, -21], [-5, -34], [22, -68], [5, -42], [-18, -58], [-30, -62], [6, -50], [10, -67], [5, 20], [-2, 30], [8, 35], [54, 85], [39, 115], [40, 30], [36, 7], [40, -34], [11, -46], [2, -70], [-8, -65], [-30, -100], [-50, -70], [-16, -39], [23, -37], [25, -29], [29, -9], [33, 3], [8, 9], [6, 28], [-10, 36], [-6, 33], [61, 25], [57, 14], [45, 42], [11, 28], [10, 46], [-23, 72], [-20, 54], [-68, 129], [-51, 66], [32, 99], [53, 110], [20, 27], [6, 17], [6, 30], [-5, 31], [-6, 20], [-54, 83], [-39, 27], [-123, 16], [-31, 13], [-90, 85], [-11, 19], [-20, 61], [-7, 15], [-25, 16], [-83, 35], [-58, 15], [-84, 4], [-51, 18], [-76, 56], [-8, 19], [-22, 73], [-17, 37], [5, 28], [27, 58], [19, 51], [-23, 44], [-33, 14], [-36, 21], [-15, 40], [-9, 43], [-1, 34], [-6, 39], [17, 33], [38, 34], [-9, 24], [5, 31], [247, 41], [96, 11], [480, 4], [34, 12], [209, 20], [89, 24], [94, -25], [34, 1], [69, 7], [45, 51], [102, 20], [170, 21], [84, -4], [19, -15], [19, -21], [-92, -62], [-92, -56], [-76, -24], [-74, -49], [-7, -19], [-2, -12], [2, -39], [5, -25], [77, -32], [59, -44], [57, -32], [45, -19], [11, 11], [-165, 104], [-42, 23], [-17, 25], [8, 38], [17, 17], [26, 19], [17, 9], [62, 20], [206, 27], [49, 51], [21, 30], [56, 31], [-19, 13], [-46, 8], [-36, 18], [-142, 183], [-35, 28], [-109, 20], [-49, 21], [50, 62], [59, 16], [40, -4], [35, -17], [65, -51], [92, 22], [-35, 23], [-58, 26], [-54, 42], [-77, 37], [-86, 24], [-90, 10], [25, 55], [50, -7], [16, 17], [23, 33], [125, -77], [59, 21], [50, 35], [104, 93], [14, 42], [-50, 23], [-41, 11], [-56, -2], [-5, 25], [24, 33], [45, 13], [139, -36], [232, 93], [63, 45], [161, 58], [79, -7], [164, 77], [227, 33], [132, 1], [102, 42], [156, 15], [54, 17], [263, 43], [146, 34], [23, 27], [-131, -22], [-31, 20], [-27, -13], [-20, -19], [-63, 34], [-17, -9], [-13, -18], [-23, -6], [-27, 4], [-9, 41], [32, 55], [37, -29], [43, 42], [27, 1], [81, -26], [54, 27], [72, 13], [79, -12], [33, 3], [19, 25], [129, -22], [89, 15], [61, -2], [95, -13], [43, -18], [-25, -42], [-92, -68], [25, -11], [53, 31], [159, 46], [26, -9], [-18, -40], [-11, -17], [106, 23], [91, 50], [40, 9], [41, -31], [39, 28], [9, 28], [69, 6], [28, 26], [49, 19], [40, 8], [89, 36], [31, -11], [59, -9], [56, -17], [105, -40], [14, -15], [13, -3], [30, -28], [-22, -42], [-24, -60], [-45, -28], [27, -3], [19, 8], [36, 40], [32, 28], [-8, 119], [-57, 60], [-44, 20], [-102, 63], [-34, 27], [-46, 28], [18, 17], [196, -22], [100, 11], [108, -7], [144, 27], [61, -28], [69, 1], [80, -23], [24, 27], [-131, 29], [-58, -3], [-21, 15], [22, 34], [25, 51], [-25, 44], [-24, 24], [-4, 45], [23, 52], [54, 22], [30, 42], [63, 55], [303, 179], [145, 68], [55, 9], [64, -6], [126, 57], [47, 0], [175, -45], [42, -33], [96, -26], [111, -14], [51, -21], [25, -24], [21, -33], [-90, -22], [-97, -66], [-132, -36], [-163, -24], [-34, -18], [311, -5], [90, 4], [19, -57], [30, -2], [90, 27], [54, 2], [102, -20], [21, 11], [44, 1], [94, -25], [42, -37], [-67, -60], [-69, -53], [-84, -90], [-26, 7], [-44, 2], [8, -45], [74, 2], [40, -20], [92, 25], [130, -8], [27, 7], [50, 28], [13, 52], [22, 33], [43, 11], [47, -10], [80, 0], [203, 17], [170, -22], [136, 27], [178, -20], [78, -21], [57, -37], [52, -11], [42, -29], [43, -42], [-21, -34], [-21, -23], [56, 25], [43, 6], [32, -15], [57, -15], [18, -95], [17, -18], [15, -33], [-21, -30], [-18, -14], [45, 3], [63, 32], [13, 11], [16, 24], [-24, 23], [-21, 14], [27, 11], [52, -4], [26, -42], [17, -38], [38, -127], [81, 17], [4, -38], [-34, -87], [-36, -64], [-14, -14], [-23, -3], [9, 34], [-14, 20], [-21, 12], [-74, 12], [-138, 79], [-37, 8], [-8, -4], [-4, -7], [77, -54], [63, -95], [57, 28], [23, -5], [31, -45], [56, -18], [47, -30], [-31, -91], [-192, -160], [-203, -93], [-90, -65], [-158, -47], [-113, -64], [-144, -47], [-42, -51], [-107, -32], [8, -17], [12, -18], [-13, -30], [-15, -23], [-83, -47], [-121, -32], [-243, -195], [-121, -40], [-137, -2], [-29, -18], [-104, -123], [-32, -26], [-136, -13], [-142, -201], [-79, -68], [-69, -37], [72, 7], [85, 27], [99, 65], [26, 30], [14, 34], [29, 27], [45, 19], [176, 21], [72, -8], [106, 6], [70, 36], [41, 13], [37, 4], [19, 26], [62, 5], [143, 34], [21, 12], [46, 51], [85, -19], [61, 10], [159, 91], [96, 34], [26, 24], [-19, 17], [-22, 12], [-92, -32], [-83, -10], [-94, 8], [-13, 13], [-11, 32], [30, 47], [26, 28], [60, 37], [49, 13], [183, -40], [38, -5], [21, 66], [58, -3], [58, -11], [-25, -14], [-64, -21], [20, -48], [28, -33], [112, -47], [95, -21], [70, 1], [110, 20], [17, 14], [23, 38], [-28, 72], [27, -9], [27, -18], [42, -44], [40, -75], [25, -35], [-15, -37], [-57, -71], [33, -39], [59, -26], [0, -116], [-4, -56], [-29, -61], [-34, -26], [-33, -38], [8, -36], [8, -22], [35, -42], [98, -13], [13, 11], [-23, 13], [-66, 20], [-26, 16], [-23, 38], [27, 42], [29, 31], [35, 71], [11, 50], [-7, 52], [23, 24], [35, 25], [17, 5], [16, 11], [-25, 13], [-23, 6], [-48, 32], [-8, 41], [96, 17], [57, 29], [210, 13], [144, 55], [322, -15], [226, -45], [317, -5], [117, -30], [11, -11], [7, -22], [-50, -9], [-83, 0], [-22, -56], [14, -70], [148, -74], [129, -31], [90, -49], [48, -4], [188, 5], [110, -25], [100, 19], [109, 0], [38, -5], [40, -37], [64, -10], [77, -1], [43, 7], [17, 9], [-6, 15], [-64, 22], [7, 27], [25, 6], [107, -36], [44, -6], [39, 27], [29, 49], [16, 33], [17, 17], [14, 2], [14, 10], [-34, 39], [-33, 49], [-7, 32], [-10, 16], [-4, 59], [30, 60], [21, 17], [85, -23], [38, 36], [24, 14], [102, 24], [43, -2], [71, -23], [228, -110], [-5, -42], [54, 12], [26, 17], [61, 11], [41, 18], [11, -7], [14, -17], [-10, -25], [-14, -25], [9, -15], [12, -3], [61, -31], [79, 57], [32, 55], [22, 11], [197, -38], [59, -21], [12, -12], [8, -20], [32, -22], [39, -12], [-5, -18], [-2, -19], [92, -3], [40, -16], [44, -25], [-5, -29], [11, -17], [41, -2], [11, 3], [-13, -39], [-55, -42], [-33, -16], [-38, -28], [21, -5], [95, -8], [59, -56], [6, -41], [-37, -16], [-84, -52], [-50, -21], [-35, -2], [-25, -7], [36, -22], [158, -6], [46, -28], [36, -70], [0, -86], [-36, -43], [-97, -7], [-127, 96], [-78, 37], [-109, 71], [-21, -12], [32, -60], [51, -34], [92, -93], [154, -192], [36, 16], [21, 24], [10, 31], [-9, 43], [25, -21], [23, -38], [46, -64], [-62, 3], [-80, -21], [-29, -26], [22, -35], [59, -5], [25, -49], [46, -60], [103, -164], [73, -31], [71, -68], [71, -32], [37, -2], [25, 42], [20, -15], [19, -76], [34, -33], [38, -2], [31, 13], [45, 36], [36, 42], [58, 116], [38, 58], [36, 24], [-13, 28], [4, 33], [26, 77], [36, 91], [27, 49], [66, 97], [25, 18], [18, -32], [14, -42], [10, -18], [10, -7], [81, -85], [82, -67], [73, -33], [115, -32], [167, 5], [30, 42], [58, 32], [94, 16], [55, 39], [91, 11], [57, -6], [88, -28], [197, -89], [55, -33], [29, -35], [64, -52], [41, -25], [40, -18], [14, 5], [-5, 15], [-20, 15], [-16, 19], [47, 19], [5, 15], [17, 12], [62, 11], [-61, 19], [-20, 3], [-29, 11], [2, 27], [19, 19], [15, 36], [19, 23], [32, 18], [24, 3], [57, -23], [41, 42], [30, -3], [63, -43], [56, -64], [31, 0], [87, 26], [98, 1], [-13, 38], [-68, 83], [8, 106], [-47, 24], [-54, 14], [78, 27], [58, 87], [46, 8], [48, 16], [-15, 11], [-143, 9], [-31, -10], [-21, -26], [-71, 0], [-8, 59], [-2, 37], [93, 79], [35, 17], [236, -2], [71, 15], [104, 39], [-27, 25], [-3, 50], [-89, 73], [7, 16], [9, 11], [27, 0], [140, -19], [58, -39], [151, -40], [404, -13], [45, -14], [174, -17], [73, -19], [175, -23], [80, -17], [63, -25], [103, -15], [47, -17], [-5, -53], [-213, 7], [-71, 17], [-88, 2], [-33, -8], [-53, -44], [-63, -23], [-53, -4], [35, -38], [49, -10], [158, 49], [432, 24], [66, -4], [-7, -34], [-58, -65], [-55, -50], [-80, -52], [-30, 0], [63, 110], [-26, 6], [-24, -3], [-70, 46], [-11, 2], [-14, -11], [0, -16], [-13, -64], [26, -27], [0, -46], [-97, -29], [-38, 3], [-40, 18], [-17, 0], [-5, -15], [8, -27], [-1, -13], [-15, -22], [-8, -23], [24, -26], [31, -7], [171, 29], [75, 36], [82, 65], [146, 159], [65, 54], [37, 21], [48, 8], [269, -17], [156, -34], [149, -51], [74, -42], [54, -57], [10, -24], [5, -32], [-37, -30], [-167, -10], [-64, -17], [-24, -19], [-3, -11], [-8, -17], [12, -14], [75, -2], [72, -13], [100, -36], [15, -12], [32, -35], [10, -6], [149, 6], [10, -12], [9, -26], [-39, -40], [-39, -27], [-80, -64], [40, 23], [161, 55], [41, 10], [49, -4], [121, -50], [50, -39], [92, -112], [-26, -12], [-66, -12], [208, -85], [80, 1], [184, 24], [93, 1], [172, 54], [171, 35], [157, 2], [83, 33], [220, -1], [211, -11], [164, -20], [185, -60], [180, -83], [105, -82], [21, -25], [30, -57], [13, -48], [13, -65], [-6, -51], [-26, -36], [-16, -45], [2, -53], [-31, -69], [29, -49], [80, -32], [172, -42], [47, -29], [6, -85], [14, -71], [15, -136], [29, -35], [47, -32], [9, -45], [-59, -144], [-37, -27], [-39, -40], [69, 14], [35, 53], [38, 97], [36, 16], [19, 31], [0, 92], [-23, 79], [0, 57], [15, 46], [114, 95], [61, 38], [58, 22], [158, 19], [72, 19], [82, -13], [58, 5], [67, 20], [59, -10], [98, -63], [347, -14], [61, -22], [233, -27], [18, 0], [52, 31], [154, 108], [64, -7], [26, -17], [27, -43], [28, -27], [23, -75], [20, -102], [33, -18], [46, -6], [100, -38], [101, -48], [29, -92], [54, -77], [126, 7], [132, 16], [127, 126], [0, 52], [-31, 74], [-47, 72], [-37, 112], [-117, 25], [11, 33], [44, 39], [40, 61], [6, 46], [-11, 98], [106, -7], [106, -11], [201, -44], [163, -18], [86, -28], [52, -32], [62, -23], [21, 57], [23, 14], [82, -33], [60, -9], [103, 4], [130, -15], [141, 3], [127, 25], [47, -5], [52, -20], [84, -53], [143, -71], [130, -20], [150, -66], [141, -25], [113, -38], [16, -14], [5, -21], [8, -18], [89, -20], [165, -143], [-99962, -16], [56, -25], [56, -20], [23, 6], [12, -2], [32, -35], [21, -16], [113, -41], [51, -45], [42, -52], [-21, 10], [-38, 34], [4, -39], [12, -27], [61, -26], [64, -20], [40, -24], [14, -21], [8, -38], [-10, -33], [37, 12], [35, 30], [-18, 23], [-117, 81], [-25, 27], [34, -14], [158, -103], [43, -39], [-18, -8], [-13, -23], [14, -10], [19, 8], [31, 4], [31, -13], [35, -27], [73, -32], [434, -254], [10, -44], [12, -21], [7, -26], [2, -43], [-39, -51], [61, 5], [9, 6], [16, 21], [17, 14], [24, -17], [19, -34], [-6, -46], [-17, -38], [-2, -63], [15, -54], [15, -22], [13, -26], [3, -76], [-27, -34], [-15, -59], [17, -6], [52, -5], [18, -11], [30, -27], [7, -26], [7, -36], [9, -34], [7, -16], [8, 3], [30, 46], [14, 14], [34, 12], [19, -53], [-13, -88], [11, 0], [8, 10], [11, 23], [15, 14], [19, 32], [16, 39], [-19, 31], [-21, 20], [-51, 10], [-26, 24], [-10, 29], [26, 12], [22, 21], [15, 52], [-4, 28], [-6, 27], [-12, 39], [-19, 23], [-36, 11], [-16, 22], [-25, -1], [-25, 6], [-9, 8], [1, 16], [28, 7], [157, 2], [57, 22], [25, -6], [26, -16], [94, -21], [-3, -10], [-16, -10], [-27, -46], [-6, -26], [-1, -34], [24, -6], [24, 14], [-12, 27], [-3, 33], [10, 14], [13, 3], [24, -24], [27, -8], [89, -10], [26, 3], [8, 13], [-18, 14], [-116, 33], [-2, 17], [108, -22], [48, -20], [48, -15], [67, 5], [66, -24], [63, -65], [58, -82], [59, -49], [61, -36], [103, -99], [13, -8], [10, -14], [-19, -16], [-17, -25], [34, 17], [33, 12], [17, -3], [15, -12], [10, -21], [5, -20], [-14, -18], [99, -4], [30, -12], [14, -49], [-28, -34], [-17, 5], [-16, 14], [-15, 1], [-44, -14], [-67, -46], [-38, -37], [-7, -24], [6, -65], [-5, -31], [-29, -20], [-64, 12], [-29, 13], [-33, 17], [-31, 24], [-41, 39], [-12, 4], [-8, -10], [13, -24], [28, -31], [47, -40], [22, -45], [-14, -23], [-18, -5], [-13, 1], [-41, 14], [-29, 3], [-90, -13], [-32, -8], [-11, 7], [-3, 19], [-48, 15], [-29, 2], [-13, 6], [-11, 21], [-32, 30], [-48, 11], [-31, 2], [-17, -7], [63, -39], [56, -67], [-11, -13], [-7, -14], [31, -1], [21, 4], [5, -17], [-16, -71], [-11, -15], [-98, -16], [25, -12], [25, -3], [29, 3], [26, -13], [17, -44], [3, -46], [-25, -27], [-27, -21], [-53, -33], [-56, -14], [-29, 3], [-28, -7], [-19, -17], [-5, -17], [24, 11], [28, -6], [27, -21], [-3, -17], [-26, -18], [-5, -14], [9, -24], [-3, -20], [13, -11], [30, -4], [36, -14], [36, -20], [14, -16], [12, -24], [4, -24], [-6, -11], [-82, -4], [-12, 3], [-5, 28], [-10, 22], [-31, 16], [-12, -11], [9, -79], [-12, -24], [-14, -18], [-41, -10], [-33, 6], [-28, 37], [0, 32], [19, 19], [0, 26], [-6, 30], [-18, -35], [-23, -29], [-35, -37], [-18, -4], [-17, 4], [-47, 26], [-29, 23], [-56, 74], [-32, 34], [-70, 46], [-72, 34], [-57, 22], [-31, -3], [-30, -9], [-39, 5], [-13, 8], [-11, 19], [-11, 10], [-54, 46], [-38, 37], [-2, 25], [8, 30], [-7, 73], [-18, 69], [-48, 68], [-126, 44], [-104, 31], [-37, 7], [-33, -6], [-87, -57], [-59, -8], [-170, -3], [-28, 6], [-26, 24], [-6, 33], [8, 59], [-1, 25], [-7, 9], [-9, -1], [-33, 24], [-31, 40], [-25, 41], [-16, 56], [22, 3], [31, -14], [5, 13], [10, 51], [21, 24], [9, 18], [14, 68], [2, 49], [-24, -26], [-39, -68], [-18, -20], [-14, -9], [-13, -4], [-30, 13], [-22, 17], [-1, 65], [-10, 17], [-10, -12], [-4, -24], [-28, -4], [-13, -10], [7, -39], [-3, -33], [-27, -13], [-53, -7], [-19, 32], [-16, -45], [-12, -51], [-2, -67], [17, -56], [25, -27], [53, -40], [23, -28], [6, -37], [-2, -33], [-28, -42], [-18, -34], [-33, -81], [-19, -33], [-82, -69], [99951, -19], [-49, -66], [-56, -57], [-83, -23], [-126, -87], [-49, -16], [-65, 40], [-149, 26], [-47, 35], [-68, 88], [-23, 13], [-21, 35], [-82, 39], [-72, -25], [-58, 19], [-20, -14], [30, -12], [54, -11], [82, 5], [27, -9], [24, -31], [28, -49], [-21, -32], [-22, -11], [-66, 36], [-76, -5], [-36, 9], [-102, 60], [-78, -67], [-107, -35], [-83, -4], [-152, -53], [41, -2], [111, 38], [65, 0], [96, 21], [51, 24], [24, 23], [31, 23], [31, -11], [22, -24], [14, -35], [14, -45], [-18, -24], [-18, -12], [-22, -33], [102, 56], [62, -33], [31, 5], [58, 49], [93, 32], [11, -6], [11, -16], [-15, -94], [6, -74], [71, -81], [73, -47], [26, -2], [24, 9], [9, 43], [18, 32], [23, -29], [19, -31], [27, -76], [-1, -23], [-6, -45], [23, -20], [32, -6], [12, -71], [11, -101], [-14, -9], [-16, 0], [-51, -26], [7, -18], [52, -10], [15, -21], [-11, -47], [3, -21], [18, -5], [12, 28], [-3, 39], [5, 17], [35, -81], [0, -31], [30, -36], [85, -54], [15, -24], [5, -40], [-21, -12], [-20, -28], [12, -40], [22, -32], [36, -12], [17, -52], [0, -49], [-26, -43], [-53, -59], [-31, -24], [-12, -42], [-3, -44], [-21, 2], [-23, 19], [-262, 110], [-99, 21], [-87, 2], [-16, 7], [1, 26], [5, 24], [13, 29], [-6, 26], [-11, 2], [-11, -20], [-24, 0], [-23, 23], [-19, -7], [-9, -32], [-7, -17], [0, -20], [12, -18], [50, -20], [-8, -18], [-70, -14], [-57, -18], [-74, -54], [-30, -38], [-198, -93], [-48, -32], [-21, -4], [-27, -11], [-21, -39], [-110, -55], [-23, 5], [-29, -46], [-27, -26], [-63, -3], [-41, -13], [-88, -67], [-55, 21], [-65, -91], [-72, -87], [-21, 0], [-55, 36], [-14, -19], [9, -35], [19, -37], [-11, -10], [-22, 10], [-16, 2], [-12, -11], [2, -27], [-31, -33], [-24, -3], [-28, -11], [-10, -29], [9, -32], [-50, -36], [-41, -48], [-19, -8], [-22, -21], [-24, -16], [-28, 3], [-67, -67], [-150, -117], [-42, -15], [-53, -36], [-5, -23], [0, -30], [-21, -48], [-25, -122], [-8, -22], [-12, -25], [-55, 12], [-48, 46], [-15, 22], [-8, 25], [-3, 40], [-9, 19], [-11, 9], [-55, 99], [-95, 68], [-14, 23], [-121, -18], [-33, -1], [-58, 17], [-90, -11], [-109, -37], [-33, -23], [-111, -36], [-73, -57], [-142, -208], [-34, -43], [-16, -9], [-24, -4], [-10, 42], [-4, 33], [9, 63], [17, 52], [17, 96], [5, 39], [12, 41], [-48, -3], [-66, -71], [-100, -69], [-46, -18], [-36, -41], [-26, -5], [-30, -15], [-3, -89], [-15, -48], [-18, -10], [-28, -2], [-21, 19], [-30, 71], [-40, 37], [-24, 7], [-18, -9], [-35, -48], [-38, -44], [6, 50], [-33, 19], [-29, 11], [-36, 2], [-11, -7], [-14, -29], [-33, -37], [-22, -15], [-23, -30], [-13, -31], [-12, -44], [-14, -107], [1, -125], [-53, -99], [-20, 10], [-10, -6], [-10, -13], [18, -55], [-10, -19], [-9, -13], [-25, -14], [-56, -81], [-53, -52], [-87, -151], [-25, -100], [-25, -113], [12, -55], [10, -36], [16, -25], [28, -27], [59, -29], [-5, -19], [0, -16], [21, 28], [15, 79], [37, 26], [18, -1], [118, -63], [23, -27], [-4, -60], [-7, -28], [-22, -42], [-42, -50], [-49, -69], [-5, -43], [0, -23], [13, -81], [1, -46], [-6, -85], [3, -37], [13, -31], [20, -20], [35, 11], [33, -9], [25, -22], [-4, -71], [15, -67], [11, -124], [-21, -34], [-20, -21], [-39, -54], [-21, -6], [-37, 18], [-58, 96], [23, 57], [50, 40], [23, 28], [17, 42], [-26, -8], [-18, -18], [-57, 8], [-23, -20], [-28, -32], [11, -80], [-19, -15], [-35, -27], [-52, -34], [-17, -23], [-45, -143], [-41, -107], [-15, -92], [2, -79], [15, -88], [11, -38], [48, -82], [23, -64], [7, -77], [-38, -37], [-67, -89], [-28, -10], [-92, 2], [-46, 45], [-54, -11], [-45, -22], [-71, -63], [-63, -82], [-60, -57], [-18, -34], [-24, -71], [-22, -129], [8, -64], [12, -30], [11, -39], [-16, -61], [0, -38], [29, -61], [6, -84], [-21, -2], [-49, 60], [-52, 4], [-124, -69], [-52, -40], [-57, -80], [-17, 15], [-12, 46], [-21, 20], [-26, -10], [-11, -43], [36, -20], [13, -28], [-21, -107], [-15, -36], [6, -95], [-2, -45], [-8, -45], [-37, -123], [-63, -162], [-78, -118], [-54, -41], [-27, -31], [-12, -41], [-80, -113], [-98, -119], [-28, -21], [-6, 45], [-3, 44], [-12, 59], [-36, 49], [-6, 40], [-6, 54], [-3, 252], [-31, 262], [-3, 82], [-38, 67], [-21, 70], [-12, 68], [-3, 81], [-41, 425], [-13, 106], [-55, 342], [-24, 198], [-16, 192], [-2, 86], [24, 257], [21, 160], [74, 359], [11, 33], [12, 17], [128, 138], [56, 75], [33, 80], [36, 101], [-4, 55], [-4, 31], [-14, 36], [-30, 41], [11, 18], [12, 14], [31, 15], [64, -31], [65, 13], [60, 127], [86, -19], [65, 22], [18, -9], [13, 43], [36, 46], [66, 68], [97, 82], [48, 55], [27, 52], [40, 50], [39, 62], [71, 186], [140, 154], [55, 88], [45, 31], [40, 15], [101, 126], [64, 105], [85, 72], [25, 46], [44, 108], [18, 26], [55, 41], [124, 71], [72, 71], [106, 10], [31, 28], [33, 16], [35, 23], [-43, 63], [10, 33], [8, 16], [76, 74], [31, 60], [-4, 25], [-5, 19], [-47, 24], [9, 55], [13, 48], [38, 40], [13, 94], [2, 99], [37, 142], [22, 32], [87, 71], [20, 2], [60, -24], [66, -12], [23, -22], [5, 19], [-3, 24], [18, 9], [38, -10], [-5, 27], [-98, 14], [-70, 31], [-63, 60], [-41, 17], [-45, -5], [-257, -84], [-12, -23], [-12, -32], [16, -47], [-13, -21], [-12, -14], [-14, -31], [-12, -61], [3, -59], [-31, -92], [-3, -57], [55, -32], [14, -21], [-16, -32], [-17, -19], [-14, -24], [-11, -9], [-15, -6], [-20, 31], [-18, 62], [-29, 4], [-10, -10], [-5, -24], [-25, -2], [-28, 12], [-32, -5], [-57, -70], [-319, -333], [-34, -40], [-42, -80], [-79, -8], [-31, -18], [-23, -24], [-31, -16], [1, 30], [6, 22], [7, 59], [43, 111], [-27, 12], [-27, 1], [-50, -23], [-34, -37], [-26, 8], [13, 33], [31, 66], [-9, 61], [-9, 33], [13, 18], [65, 123], [23, 64], [20, 84], [1, 26], [-4, 32], [-19, 5], [-16, 0], [-128, -83], [-47, -23], [-15, 36], [-21, 15], [-35, 61], [-30, 9], [-31, -4], [-70, -41], [-77, -23], [-59, 8], [-51, -35], [-23, -6], [-75, 24], [-91, 2], [-28, -30], [-79, -41], [-54, -64], [-28, -20], [-31, -28], [-14, -120], [-41, -39], [-38, -29], [-80, -92], [-56, -126], [-38, -54], [-81, -76], [-126, -100], [-110, -162], [-38, -122], [-14, -4], [-27, -25], [-7, -60], [1, -41], [-17, -33], [-17, -42], [18, -26], [16, -5], [24, 4], [63, 34], [108, -52], [54, -52], [-4, -52], [2, -46], [-40, 3], [-53, -4], [-34, -27], [-68, 43], [-23, -16], [-36, -46], [-65, -19], [-33, 23], [-55, 63], [-93, -6], [-24, -71], [-21, 2], [-33, -7], [-55, -82], [-18, -8], [-67, 16], [-48, 42], [-23, 2], [-43, -19], [-21, -50], [-107, -25], [-105, 5], [-57, 119], [107, 47], [63, -10], [72, 8], [75, 37], [-26, 31], [-18, 7], [-45, -4], [-40, 23], [-87, 116], [-38, 21], [-49, 13], [-38, 1], [-14, -8], [-20, -28], [-13, -27], [-12, -9], [-26, 5], [-31, 22], [-37, -7], [16, 17], [35, 18], [-58, 20], [-37, 28], [-34, 7], [-156, 69], [-60, -6], [-37, -19], [-63, -56], [17, -41], [14, -19], [8, -22], [-20, -4], [-58, -4], [-35, 33], [-25, -48], [10, -43], [40, 15], [21, -18], [-14, -49], [-52, -15], [-65, 3], [-65, 87], [-107, -15], [-51, -56], [-49, -13], [-131, 56], [-66, 5], [-74, 48], [-26, -15], [-47, -121], [-63, -29], [-32, 16], [-29, 76], [-20, 25], [-56, 23], [-298, -22], [-100, 19], [-70, 2], [-96, -39], [-92, 15], [-170, -75], [-70, -50], [-84, -88], [-76, -147], [-42, -55], [-71, -70], [-100, -64], [-54, -65], [-30, -53], [-52, -200], [-14, -30], [-123, -72], [-39, -80], [-17, -20], [-51, -34], [-31, -56], [-17, -16], [-73, -40], [-60, -100], [-85, -70], [-123, -194], [-11, -23], [-10, -52], [-19, -38], [-106, -169], [-33, -16], [-53, -79], [-54, -47], [-49, -56], [-61, -59], [-92, -67], [-31, -39], [-48, -90], [-118, -111], [-59, -27], [-77, -98], [-8, -23], [-6, -36], [13, -63], [19, -14], [31, -9], [115, -62], [107, 17], [95, 0], [37, 6], [23, -2], [8, -34], [-1, -63], [-14, -57], [-11, -168], [-13, -75], [10, -73], [23, -13], [23, 33], [37, 5], [38, -15], [28, 117], [-23, 18], [-22, 42], [13, 31], [66, 57], [41, 5], [39, -4], [-43, -73], [-17, -15], [-13, -4], [-18, -14], [38, -42], [41, -32], [59, -14], [-14, -25], [-39, -22], [-36, -91], [-56, -44], [-26, -30], [9, -19], [21, -4], [114, 12], [59, 25], [84, 71], [35, 105], [32, 29], [9, 0], [11, -7], [1, -74], [-45, -83], [-32, -47], [-12, -40], [19, 0], [37, 8], [16, 19], [42, 101], [11, 72], [6, 100], [-5, 60], [3, 43], [-16, 43], [11, 13], [113, -59], [60, -14], [108, 48], [24, -12], [18, -29], [89, -89], [17, -29], [29, -108], [95, -125], [88, -59], [3, -23], [56, -69], [44, -24], [7, -62], [-20, -50], [-41, -48], [-82, 44], [-13, -2], [10, -28], [59, -81], [47, -34], [3, -108], [-6, -59], [-31, -66], [10, -38], [44, -56], [22, -22], [22, -32], [-28, -70], [-5, -78], [-30, -35], [-36, -76], [-55, -62], [-26, -119], [-42, -105], [-5, -104], [-7, -37], [-34, -108], [-13, -146], [17, -239], [8, -14], [16, -14], [-3, -17], [-8, -11], [-33, -71], [0, -49], [13, -37], [2, -95], [-24, -153], [-9, -24], [-10, -39], [-4, -36], [-7, -22], [-4, -39], [7, -34], [12, -17], [-43, -110], [-15, -144], [-16, -58], [-31, -57], [-66, -83], [-24, -52], [-43, -66], [-41, -51], [-57, -145], [-46, -145], [-116, -188], [-15, -46], [-9, -50], [-30, -84], [-15, -116], [-35, -46], [-29, -122], [-94, -186], [-23, -63], [-72, -103], [-77, -142], [-96, -128], [-18, -53], [-37, -58], [-40, -90], [-58, -90], [-12, -60], [-19, -42], [-43, -28], [-31, -39], [-95, -231], [-12, -42], [-2, -37], [-62, -86], [-35, -92], [-60, -57], [-62, -78], [-149, -144], [-41, -54], [-83, -68], [-34, -1], [-72, -37], [-47, -38], [-28, 14], [-17, 50], [-21, -2], [-16, -7], [-43, 48], [-37, -3], [-26, 22], [-50, -15], [9, 205], [-7, 43], [-21, -40], [-57, -72], [-23, -14], [-22, 0], [9, 44], [31, 62], [-10, 10], [-10, 3], [-40, -27], [-20, -30], [-58, -119], [-34, -100], [-28, -29], [-13, -43], [-24, -41], [-37, 11], [-22, -7], [-53, 23], [-13, -10], [35, -77], [-29, -113], [-12, -14]], [[63178, 98417], [127, -23], [95, 6], [29, -3], [28, -7], [28, -16], [38, -35], [0, -49], [-17, -2], [-161, 22], [-74, 51], [-20, 5], [-29, -13], [-25, -31], [-27, -8], [-31, -39], [-29, 5], [-15, -4], [-37, -27], [-93, 0], [-15, -12], [-30, -38], [-38, -10], [-66, -6], [-22, 21], [-10, 33], [-15, 17], [-92, -19], [-69, 13], [-67, 22], [-68, 8], [61, 23], [334, 48], [131, 12], [62, 34], [92, 22], [25, 0]], [[63966, 98460], [42, -10], [103, 2], [32, -14], [149, -84], [38, -2], [31, -30], [-154, -49], [-52, -36], [-189, -8], [-121, -17], [-26, -15], [12, -26], [-58, -29], [-191, -4], [-24, -9], [-37, -31], [3, -5], [65, -8], [10, -6], [9, -14], [5, -20], [-9, -26], [-24, -4], [-26, 3], [-60, 20], [-7, -7], [-6, -14], [-19, -28], [-22, -8], [-61, 21], [-20, -6], [-19, -13], [-24, -6], [-56, -4], [-29, 17], [25, 23], [70, 35], [-23, 15], [-70, 4], [-55, -9], [-28, -24], [-26, -5], [-72, 2], [-40, 31], [-30, 12], [-26, 25], [211, 83], [70, 32], [67, 16], [87, 9], [27, 10], [27, 4], [17, -6], [44, -29], [129, 5], [27, 24], [2, 56], [-13, 33], [27, 63], [74, 25], [171, 34], [43, 2]], [[68823, 95758], [-111, -44], [-66, -30], [-65, -21], [-66, -15], [-104, -36], [-184, -46], [-116, -37], [-127, -30], [-134, -39], [-134, -27], [-33, -2], [-96, -38], [-75, -16], [-272, -85], [-125, -63], [-36, -5], [-36, 3], [-30, -20], [-28, -33], [-59, -34], [-30, -31], [-30, -24], [-18, -8], [-34, 2], [-16, -2], [-55, -27], [-10, -22], [59, -14], [13, -24], [-17, -16], [-38, -23], [-22, -23], [-40, -23], [-27, -7], [-65, 1], [-4, -29], [11, -18], [-6, -16], [-22, -15], [-21, 2], [-99, 45], [-16, -15], [-7, -32], [-3, -34], [-13, -25], [-17, -13], [-31, -13], [-109, 21], [-9, -20], [17, -25], [23, -54], [5, -22], [-13, -36], [-49, -56], [-187, -67], [3, -23], [21, -44], [5, -27], [-8, -26], [-24, -21], [-28, 0], [-15, 4], [-43, 29], [-37, 7], [-7, -14], [49, -39], [21, -51], [-23, -27], [-90, -61], [-47, -80], [-92, -35], [-57, -5], [-56, 10], [-53, 18], [-135, 7], [-75, 20], [-76, 36], [-66, -3], [-56, -18], [-74, -39], [-47, 75], [20, 35], [-101, 90], [-22, 40], [25, 19], [31, 13], [59, 36], [59, 29], [61, 9], [10, 5], [25, 43], [27, 35], [25, 20], [28, 33], [89, 134], [21, 10], [184, 26], [16, 8], [-53, 27], [-54, -1], [-25, 9], [-14, 19], [-8, 22], [21, 16], [71, 81], [84, 58], [78, 35], [-19, 9], [-25, 23], [-95, -6], [-37, 32], [-12, 19], [-3, 19], [31, 25], [32, 15], [35, -4], [35, -13], [28, -15], [27, -24], [23, 1], [85, 84], [-13, 19], [-5, 29], [9, 14], [41, 13], [27, 5], [59, -6], [85, -18], [7, 9], [21, 56], [21, 30], [86, 50], [-5, 15], [-4, 25], [100, 33], [65, 33], [63, 45], [32, 9], [32, 2], [65, 19], [121, 22], [71, 22], [23, 48], [45, 17], [90, 7], [35, -3], [20, -20], [39, 1], [15, 11], [16, 17], [-5, 29], [-1, 37], [34, 23], [13, 5], [102, 9], [60, -4], [125, -28], [65, -7], [87, 9], [52, -5], [154, 42], [261, 39], [68, 28], [67, 33], [34, 7], [35, 2], [31, 11], [61, 28], [30, 7], [33, 0], [30, 20], [26, 43], [29, 33], [79, 43], [134, 60], [121, 23], [75, 25], [32, 2], [102, -12], [130, -33], [59, -36], [49, -47], [10, -17], [9, -30], [-14, -28], [-9, -28], [11, -22], [-95, -71], [-93, -78], [-16, -17], [-111, -27]], [[65366, 94071], [130, -23], [97, -7], [59, -18], [22, -14], [-9, -36], [-17, -14], [-41, -47], [-6, -28], [7, -45], [-6, -33], [-13, -24], [-11, -10], [-73, 0], [-27, -13], [-1, -26], [-5, -29], [-24, -42], [-48, -13], [-11, -16], [4, -27], [-17, -21], [1, -32], [9, -18], [2, -37], [33, -54], [-6, -22], [-26, -43], [-8, -53], [-21, -46], [48, -38], [21, -50], [19, -53], [57, -105], [62, -94], [114, -137], [122, -104], [48, -29], [116, -48], [20, -16], [19, -21], [-49, -39], [-51, -14], [-5, -18], [-28, -10], [-138, 34], [-7, 5], [-15, 24], [-16, 18], [-35, 3], [-35, -11], [21, -22], [23, -7], [40, -41], [-17, -16], [-18, -2], [-82, 55], [-7, -7], [-8, -16], [-40, 18], [-10, -13], [-31, -6], [-25, 15], [0, 19], [-5, 10], [-125, -15], [-52, 0], [-51, 7], [-61, 36], [-11, -16], [-2, -19], [-23, 8], [-51, 29], [-37, 12], [-133, 28], [-94, 34], [24, 16], [40, 8], [1, 21], [-7, 29], [-1, 29], [23, 20], [52, -9], [-7, 32], [25, 6], [47, -18], [18, 11], [-75, 41], [-82, 58], [8, 21], [-29, 5], [-30, -1], [-25, 34], [4, 45], [22, 31], [-13, 6], [-127, -27], [-64, 6], [-72, 18], [-66, -26], [-67, -9], [-35, 9], [-34, 20], [-28, 26], [-22, 45], [-20, 74], [-3, 28], [4, 62], [11, 27], [28, 52], [19, 16], [43, 25], [22, 6], [51, -12], [51, -1], [22, 14], [21, 25], [15, 32], [35, 18], [10, 10], [11, 20], [12, 31], [2, 27], [10, 26], [32, 39], [-12, 24], [5, 16], [21, 29], [-64, 7], [-22, 13], [-21, 19], [6, 18], [8, 13], [64, 48], [28, 15], [31, 7], [31, 0], [33, -5], [32, 7], [-34, 33], [-3, 22], [-13, 53], [3, 25], [14, 21], [30, 24], [43, 8], [34, 12], [33, 19], [31, 3], [63, -12], [31, 2], [34, 11], [97, 40], [36, 11], [38, -3], [50, -15], [55, -28]], [[76812, 98545], [10, -26], [36, -21], [18, -21], [183, -67], [80, -8], [36, -17], [10, -20], [-3, -37], [-31, 0], [-22, -12], [-124, -15], [-30, -22], [-24, -45], [13, -9], [12, -13], [37, -77], [10, -12], [37, -11], [-33, -29], [-35, -19], [-366, -37], [-249, -15], [-83, -16], [-27, 2], [-65, -29], [-127, -38], [-61, 0], [-181, 53], [-222, 45], [-31, 25], [-55, 15], [-71, 12], [-31, 51], [45, 35], [58, 34], [97, 12], [92, 20], [69, 49], [43, 48], [78, 51], [-135, -13], [-51, 7], [5, 17], [28, 36], [15, 12], [49, 19], [35, 36], [81, 25], [39, 4], [38, -1], [70, 12], [70, 18], [66, 10], [65, 5], [63, 14], [62, 28], [27, 48], [179, 5], [28, -11], [22, -29], [26, -10], [31, -6], [79, -48], [15, -14]], [[77131, 98017], [64, -37], [31, -41], [-30, -11], [-28, -28], [-13, -34], [-37, -27], [-10, -43], [17, -8], [20, 12], [41, 41], [53, 28], [58, -16], [23, 6], [40, 39], [-7, 33], [16, 20], [18, 5], [75, -4], [119, -17], [21, -17], [29, -10], [17, -16], [53, -13], [26, -12], [35, -28], [32, -42], [-40, -22], [-22, -40], [-9, -9], [-7, -15], [-3, -35], [-6, -30], [-7, -13], [-5, -17], [5, -45], [-12, -35], [-40, -27], [-41, -1], [-61, 18], [-18, -1], [-17, -7], [76, -38], [56, -56], [65, -13], [18, -6], [23, -52], [8, -26], [-108, -62], [-28, -11], [-172, -9], [-113, -18], [-36, 4], [-63, 15], [-42, -6], [-60, 10], [-37, 0], [-85, 23], [-88, 38], [-17, 18], [-18, 12], [-105, 10], [-23, 8], [-153, -9], [-26, 6], [-47, 50], [-27, 1], [-84, -29], [-31, 2], [-64, 19], [-38, 24], [-6, 8], [-4, 29], [-38, 15], [-46, 52], [-27, 54], [-128, 28], [-77, 7], [-58, -2], [-56, 21], [93, 78], [123, 41], [53, 31], [61, 42], [25, 65], [103, 40], [27, 14], [36, 31], [12, 4], [81, -38], [16, 7], [15, 17], [29, 19], [100, 3], [85, -8], [32, 8], [39, -3], [195, 28], [130, 8], [24, -5]], [[78578, 97496], [-27, -45], [-11, -40], [-83, -133], [-10, -23], [49, 20], [44, 45], [27, 38], [30, 24], [34, 0], [35, 9], [65, 31], [66, 14], [36, -1], [34, -15], [22, -35], [24, -28], [87, -21], [13, -7], [8, -24], [-7, -25], [50, -25], [69, 11], [37, -7], [36, -14], [17, -22], [14, -27], [15, -39], [9, -41], [-8, -55], [-134, -84], [-25, -8], [-62, 6], [-61, -9], [-161, -44], [-199, -1], [-57, -39], [-17, 1], [-17, 7], [-16, 13], [-121, -11], [-136, -7], [-136, -1], [-45, -28], [-139, -55], [-127, -42], [-66, -10], [-96, 11], [-30, 14], [-29, 21], [42, 27], [30, 54], [37, 32], [94, 61], [11, 24], [18, 51], [11, 20], [15, 18], [11, 22], [2, 33], [6, 28], [37, 42], [27, 20], [29, 6], [71, -8], [22, 3], [-16, 13], [-11, 50], [2, 16], [10, 31], [18, 15], [18, 10], [11, 42], [-5, 15], [27, 20], [13, 27], [32, 16], [65, 13], [3, 34], [10, 21], [14, 7], [33, 6], [18, -1], [24, -34], [26, -28], [34, -6], [34, 2], [-20, 33], [1, 35], [12, 22], [16, 10], [34, 2], [107, -24], [70, -35], [16, -18], [-13, -10], [-31, -6], [-16, -10]], [[88902, 95523], [28, -11], [34, 7], [32, -15], [30, -61], [14, -16], [15, -11], [15, -5], [45, -2], [20, 12], [15, 28], [-1, 28], [-4, 29], [0, 39], [7, 35], [10, 21], [13, 14], [74, 43], [52, 42], [71, -16], [72, -38], [127, -80], [59, -23], [71, -21], [72, -8], [35, 5], [69, 22], [35, 2], [436, -160], [15, -13], [14, -19], [-94, -24], [-61, -42], [-21, -29], [24, -24], [20, -32], [-133, -96], [-53, -25], [-54, -8], [-110, 23], [-64, -1], [-62, 20], [-69, 58], [-29, 29], [-25, 40], [-8, 64], [10, 55], [37, 16], [32, 35], [5, 15], [-17, 31], [-108, 5], [-68, -17], [-61, -18], [18, -117], [13, -37], [18, -27], [98, -123], [22, -17], [65, -24], [55, -53], [-97, -59], [-43, -17], [-42, -10], [-26, 5], [-26, 12], [-28, 28], [-24, 30], [-31, 23], [-66, -5], [-61, -20], [-61, -14], [-180, -24], [-55, -15], [-55, -5], [-71, 28], [-70, 39], [-22, 1], [-20, -11], [-17, -24], [-9, -38], [-23, -51], [-29, -36], [-31, -16], [-32, -2], [-33, 10], [-32, 16], [-215, 56], [-25, 17], [-24, 25], [-65, 79], [-32, 19], [-33, 8], [-64, 40], [-59, 64], [-12, 20], [-4, 32], [10, 23], [51, -11], [34, 1], [-21, 119], [15, 112], [25, 19], [97, -13], [-31, 37], [-26, 49], [16, 27], [18, 19], [42, 15], [56, 7], [17, 12], [16, 19], [31, 20], [62, 8], [107, 40], [29, -1], [27, -21], [26, -30], [28, -16], [88, -39], [60, -35], [85, -71]], [[90776, 95259], [73, -4], [107, 43], [14, 1], [260, -15], [22, -15], [2, -30], [-8, -15], [-4, -22], [32, -21], [84, -4], [53, 19], [156, -10], [128, -14], [49, -32], [38, -17], [31, -20], [23, 12], [22, 20], [18, 4], [18, -4], [-49, -122], [-18, -14], [-69, -30], [-137, -42], [-67, -13], [-152, 0], [-209, 16], [-57, 15], [-34, 18], [-64, 43], [-31, 16], [-103, 14], [-32, 8], [-60, 37], [-62, 30], [-154, 49], [10, 56], [20, 56], [24, 50], [26, 45], [28, 13], [59, -41], [-1, -47], [14, -33]], [[89655, 83175], [60, -145], [2, -32], [-5, -33], [-11, -42], [-4, -44], [7, -39], [-5, -10], [49, -176], [35, -111], [11, -45], [7, -48], [11, -99], [2, -151], [-3, -50], [-8, -49], [-8, -29], [-18, -20], [-8, -54], [-4, -153], [9, -80], [17, -56], [12, -60], [2, -64], [5, -29], [27, -36], [11, -28], [3, -40], [2, -59], [4, -13], [13, -18], [56, -426], [22, -129], [64, -223], [26, -135], [17, -64], [11, -68], [9, -69], [19, -76], [25, -74], [49, -67], [22, -37], [5, -30], [2, -103], [-11, 22], [-14, 79], [-24, 45], [-35, 54], [-35, 48], [-44, 80], [-21, 23], [-23, 16], [-41, 18], [-24, 2], [-98, -12], [-40, -16], [-37, -37], [-21, -54], [-16, -108], [-89, -386], [-21, -101], [-8, -108], [3, -85], [6, -31], [26, -84], [21, -49], [15, -21], [18, -14], [11, -17], [10, -23], [18, -57], [23, -128], [25, -91], [11, -28], [28, 7], [18, -1], [18, -8], [10, -23], [15, -101], [11, -98], [1, -26], [-20, -75], [-5, -32], [-3, -34], [-5, -27], [-9, -23], [-3, 111], [-14, 79], [-5, 68], [-19, 47], [-65, 20], [-61, 7], [-9, 9], [-14, 29], [-15, 23], [-16, 3], [-16, -9], [-27, -33], [-21, -51], [-15, -55], [-13, -59], [-27, -155], [-16, -51], [-20, -48], [-17, 26], [-15, 30], [-9, 43], [-4, 48], [-24, 161], [10, 140], [41, 194], [7, 63], [-6, 60], [-9, 60], [-6, 113], [1, 25], [14, 65], [17, 62], [20, 54], [9, 64], [-13, 159], [-29, 108], [-37, 102], [-7, 28], [-2, 27], [32, 128], [11, 62], [13, 134], [12, 74], [9, 74], [3, 373], [-3, 55], [-20, 117], [-1, 67], [9, 84], [13, 65], [17, 63], [0, 129], [-32, 119], [-24, 52], [-37, 63], [-28, 35], [-14, 27], [14, 9], [10, 21], [-24, 33], [-15, 50], [-2, 196], [6, 49], [18, 55], [16, 59], [14, 137], [5, 141], [-9, 57], [-4, 116], [8, 29], [31, 38], [49, 23], [11, -7], [38, -45], [14, -2], [15, 5], [29, 21], [16, 52], [-21, 29], [12, 37], [35, 13], [3, 32], [-13, 4], [11, 46], [7, 45], [-10, 42], [-57, 104], [-36, 76], [60, -1], [18, 14], [14, 32], [7, 33], [19, -13]], [[0, 93051], [43, 8], [43, 15], [40, 3], [40, -9], [41, 2], [40, 15], [32, -2], [33, -9], [122, -21], [23, -7], [39, -27], [22, -10], [22, -16], [23, -27], [43, -29], [65, -34], [14, -10], [10, -26], [-7, -30], [-83, -57], [-67, -15], [-129, -15], [-175, -43], [-72, -12], [-25, 2], [-63, 28], [-74, 12], [99966, -10], [-65, -44], [-137, -11], [-81, -31], [-19, -2], [-40, 103], [-6, 26], [15, 34], [41, 42], [17, 30], [96, 54], [86, 71], [47, 11], [47, 33], [-99967, 8]], [[59948, 89390], [9, -23], [3, -37], [-9, -24], [5, -20], [-18, -14], [-27, 46], [-17, 1], [-17, 20], [-8, 33], [15, 9], [7, -6], [33, 24], [24, -9]], [[61864, 90265], [-10, -8], [-55, 27], [-5, 21], [2, 8], [22, 6], [23, -7], [17, -27], [6, -20]], [[64695, 92951], [25, -42], [22, -31], [19, 3], [14, -16], [4, -32], [-38, -54], [-6, -20], [16, -18], [4, -10], [-27, -8], [-5, 25], [-15, 24], [-32, 19], [-13, 16], [-14, 38], [-53, 40], [-34, -6], [-38, 18], [-11, 8], [-3, 23], [16, 19], [60, 16], [29, -1], [31, -16], [-2, 20], [3, 8], [13, -3], [35, -20]], [[96677, 83274], [11, -30], [-112, 106], [-52, 56], [-13, 36], [19, 0], [23, -34], [32, -16], [48, -46], [44, -72]], [[94643, 92639], [-19, -10], [-40, 8], [-19, 18], [1, 42], [2, 6], [33, -6], [22, -23], [20, -35]], [[94851, 91532], [-12, -1], [9, 39], [1, 17], [-27, 28], [-50, 21], [-13, 17], [-3, 50], [11, 78], [-23, 42], [8, 37], [59, 41], [24, 31], [27, 25], [4, -3], [27, -24], [-2, -52], [-20, -37], [-46, -14], [-6, -25], [6, -44], [1, -57], [5, -51], [28, -52], [6, -26], [-3, -25], [-11, -15]], [[92467, 95691], [-27, -20], [-64, 33], [24, 18], [43, 12], [10, -6], [8, -13], [6, -24]], [[91430, 96001], [-209, -6], [14, 16], [75, 40], [191, 21], [-38, -20], [-18, -41], [-15, -10]], [[88321, 93034], [-69, -49], [-27, 6], [-28, 24], [-15, 5], [-15, -4], [-17, -10], [-22, -2], [-51, 26], [-5, 16], [5, 8], [14, 8], [10, 0], [32, 13], [149, 5], [11, -3], [21, -23], [7, -20]], [[79915, 96849], [-25, -28], [-35, -14], [-38, 23], [-95, -1], [-163, 25], [47, 16], [257, 13], [18, -3], [34, -31]], [[81243, 95979], [43, -39], [8, -25], [-13, -6], [-8, -9], [-3, -18], [-12, -1], [-38, 19], [-27, 31], [-40, 7], [-42, 31], [-9, 13], [11, 4], [75, -8], [32, 14], [23, -13]], [[76814, 95782], [22, -9], [-6, -24], [-29, 7], [-38, -12], [1, -20], [-15, -33], [-53, 20], [-73, 3], [-46, 19], [-102, 12], [3, 27], [16, 16], [59, -23], [54, 26], [101, -13], [33, 19], [73, -15]], [[76745, 96213], [-9, -11], [-12, -9], [-33, 6], [-65, -16], [-25, 9], [-24, 18], [-88, -6], [-26, 4], [42, 22], [120, 24], [188, 62], [9, -30], [0, -14], [-38, -34], [-39, -25]], [[74864, 96306], [-59, -3], [-34, 15], [-10, 10], [16, 26], [23, 17], [93, 6], [17, -18], [-4, -15], [-42, -38]], [[70738, 93820], [-6, -5], [-14, 10], [-42, 15], [-71, 39], [-22, 27], [11, 30], [16, 20], [58, 12], [53, -5], [35, -7], [66, -27], [-61, -17], [-26, -37], [3, -22], [11, -13], [-11, -20]], [[70973, 94156], [-45, -14], [9, 26], [54, 37], [100, 19], [30, -8], [4, -6], [-42, -39], [-21, -13], [-89, -2]], [[73207, 94511], [-14, -14], [-13, 2], [-11, -7], [-70, 21], [-95, 9], [24, 22], [68, 13], [101, -17], [30, -19], [-20, -10]], [[68706, 91894], [-22, -50], [-46, 3], [-14, 11], [-6, 9], [52, 54], [32, -2], [4, -25]], [[68488, 92477], [3, -23], [-15, 8], [-19, 26], [-11, 32], [-4, 64], [7, 17], [6, 9], [6, -2], [-1, -40], [28, -91]], [[69450, 90150], [-49, -7], [-54, 44], [-51, 86], [10, 21], [31, -7], [51, -2], [33, -14], [44, -9], [-5, -40], [0, -16], [14, -17], [-14, -30], [-10, -9]], [[63903, 97968], [-23, -8], [-106, 44], [-9, 13], [91, 41], [102, -6], [16, -20], [3, -7], [-69, -36], [-5, -21]], [[64280, 97893], [7, -7], [-1, -6], [-99, 6], [-173, -4], [-100, 32], [106, 32], [56, 7], [72, 27], [89, -26], [-5, -23], [1, -11], [24, -10], [23, -17]], [[64098, 98529], [-39, -4], [-27, 3], [-29, 22], [-10, 11], [-2, 11], [26, 2], [12, 11], [4, 8], [20, 6], [34, 1], [45, -12], [19, -24], [-44, -21], [-9, -14]], [[65410, 98083], [-79, -27], [-40, 1], [-20, 16], [32, 23], [41, 17], [31, -5], [23, -8], [12, -17]], [[65115, 98198], [-39, -30], [-129, 32], [11, 16], [14, 6], [0, 16], [-12, 12], [5, 24], [83, -18], [8, -7], [56, -12], [9, -24], [-6, -15]], [[66580, 97900], [-100, -19], [-35, 6], [-10, 9], [-19, 9], [-50, 12], [7, 33], [16, 7], [150, 37], [72, -21], [30, -51], [-61, -22]], [[66283, 98526], [39, -30], [15, -33], [24, -20], [8, -38], [-20, -31], [-60, -6], [-99, -2], [-97, 16], [-52, 56], [-96, 15], [-54, 58], [56, 17], [68, -8], [109, 50], [15, -3], [24, -11], [88, -19], [32, -11]], [[63328, 78045], [-4, -10], [-13, 53], [-1, 32], [8, 17], [11, -54], [-1, -38]], [[63962, 91696], [5, -56], [-17, -23], [-16, -6], [-7, 35], [-13, 15], [-48, -41], [-22, -46], [-60, -66], [-123, -47], [-75, -20], [-68, -6], [-63, 42], [-35, 79], [-6, 24], [-4, 32], [1, 33], [4, 50], [7, 49], [26, 44], [60, 52], [59, 34], [31, 8], [75, 2], [214, -117], [48, -30], [27, -41]], [[67603, 98329], [-52, -2], [-51, 9], [-67, 29], [-67, 34], [20, 18], [63, 23], [82, 42], [139, 9], [67, 0], [67, 10], [19, 21], [13, 41], [12, 22], [15, 17], [74, 14], [63, -1], [63, -16], [40, -14], [38, -28], [20, -23], [-6, -28], [3, -23], [18, -21], [-122, -65], [-125, -36], [-326, -32]], [[66098, 97996], [-43, -11], [-113, 21], [-17, 11], [-14, 20], [-19, 78], [-1, 23], [-7, 16], [-28, 28], [-20, 13], [18, 15], [124, -11], [266, -6], [136, -28], [40, -16], [39, -26], [-238, -14], [-32, -12], [1, -29], [-9, -26], [-25, -3], [-58, -43]], [[67268, 98406], [17, -23], [-10, -37], [-22, -27], [-10, -38], [-86, -9], [-24, -9], [-23, -29], [-87, -18], [-65, -49], [-91, 9], [-124, 34], [-105, -28], [-69, -8], [-85, 42], [-11, 10], [-5, 29], [5, 26], [23, 55], [30, 31], [15, 10], [12, 19], [34, 11], [105, 7], [39, -6], [12, -21], [57, 2], [94, 13], [137, 20], [79, 18], [70, -4], [70, -11], [18, -19]], [[66983, 98473], [-87, -12], [-141, 15], [-73, 17], [6, 8], [19, 10], [122, 41], [242, 9], [30, -30], [-26, -23], [-92, -35]], [[64866, 98032], [-184, -7], [-62, 4], [-8, 7], [-15, 6], [-58, 6], [-36, 29], [16, 8], [85, 12], [29, 12], [10, 17], [38, 31], [92, 6], [40, -6], [5, -20], [39, -25], [101, -32], [-20, -23], [-35, -3], [-37, -22]], [[65855, 98128], [12, -20], [-1, -71], [-13, -31], [2, -26], [-26, -13], [-218, 3], [-108, 6], [-25, 10], [61, 34], [19, 23], [-6, 67], [10, 12], [175, -6], [14, 19], [66, 1], [38, -8]], [[66058, 98816], [14, -23], [43, -13], [117, -11], [35, -26], [-53, -19], [-143, -10], [15, -38], [29, -28], [-29, -33], [-40, -16], [-88, -19], [-81, 24], [-94, 35], [-42, -23], [-44, -14], [-41, 2], [-48, 27], [-132, -21], [-40, 23], [-29, 48], [87, 10], [104, -15], [69, 48], [88, 21], [70, 51], [33, 17], [76, -3], [25, 4], [73, 13], [26, -11]], [[65199, 98568], [209, -55], [194, 5], [84, -17], [122, -50], [182, -53], [35, -16], [-31, -21], [-213, -53], [-138, -18], [-120, -3], [-48, 6], [-48, 38], [-117, 28], [-125, -8], [-13, 15], [-25, 11], [-43, 2], [-86, 15], [-6, 34], [54, 17], [35, 1], [14, 48], [60, 73], [24, 1]], [[67680, 98853], [-34, -8], [-179, 7], [-86, 14], [-12, 8], [-4, 7], [-114, 12], [49, 16], [142, 7], [254, -19], [16, -13], [5, -8], [-37, -23]], [[66193, 98914], [-92, -12], [-13, 9], [-3, 6], [10, 15], [11, 29], [42, 17], [313, 16], [41, -17], [-15, -26], [0, -12], [-294, -25]], [[75745, 97744], [-68, -5], [-80, 5], [-130, 61], [-85, 26], [-70, 40], [-15, 44], [44, 28], [54, 11], [91, 2], [117, -4], [116, -29], [247, -31], [90, -21], [-56, -51], [-61, -19], [-63, -27], [-64, -19], [-67, -11]], [[75435, 98583], [-96, -45], [-346, 29], [-16, 20], [-5, 13], [47, 25], [288, -9], [103, -9], [25, -24]], [[89169, 94469], [-140, -47], [-27, 2], [-63, 48], [-23, 103], [26, 31], [29, 11], [30, 6], [123, 4], [26, -5], [26, -13], [12, -19], [5, -24], [-14, -68], [-10, -29]], [[89495, 94409], [69, -25], [57, -28], [196, -135], [18, -28], [15, -35], [8, -123], [-11, -9], [-72, -6], [-98, 14], [-70, 5], [-68, 0], [-60, 17], [-147, 16], [-115, 45], [-120, 33], [-25, 4], [-75, -10], [-102, -43], [-28, -3], [-39, 0], [-27, 40], [65, 14], [65, 5], [63, 14], [59, 47], [29, 38], [51, 85], [28, 31], [28, 20], [30, 6], [33, -3], [103, 19], [70, 6], [70, -11]], [[87763, 95281], [-57, -16], [-81, 5], [6, 42], [14, 19], [19, 46], [-9, 35], [5, 42], [10, 33], [23, 45], [25, -27], [17, -40], [15, -20], [62, -39], [12, -12], [-52, -48], [-5, -21], [16, -27], [-20, -17]], [[87832, 94420], [-21, -17], [-20, 25], [-93, 76], [-23, 35], [-51, 34], [-13, 12], [-4, 30], [67, -19], [113, -75], [62, -60], [-17, -41]], [[88316, 83578], [25, -23], [39, 4], [10, -15], [-31, -25], [-22, -51], [-7, -47], [-9, -18], [-25, -23], [-22, -30], [-19, -19], [-17, -6], [-37, 99], [-18, 28], [-52, -47], [-12, -1], [12, 58], [30, 63], [15, 9], [30, 85], [9, 19], [93, -50], [8, -10]], [[96999, 91923], [-79, -5], [-158, 54], [-56, 28], [-42, 36], [-48, 25], [-9, 10], [7, 21], [14, 16], [54, 43], [38, 19], [45, 4], [283, -76], [12, -16], [4, -14], [-4, -30], [-24, -6], [-9, -20], [-10, -61], [-5, -16], [-13, -12]], [[95453, 85600], [-45, -54], [-7, 9], [-4, 12], [-1, 19], [41, 36], [42, 91], [16, 75], [-5, 25], [-2, 24], [123, 47], [87, 75], [16, -3], [15, -63], [9, -81], [-12, -49], [-94, -28], [-88, -54], [-91, -81]], [[96291, 83432], [-2, -84], [-34, 43], [-16, 34], [-23, 6], [-16, 16], [-26, 41], [-31, 54], [-10, 27], [-4, 34], [-21, 31], [-67, 60], [22, 7], [28, 26], [78, -16], [18, -7], [-13, -40], [5, -44], [43, -92], [21, -32], [28, -25], [20, -39]], [[93002, 80248], [-27, -25], [-28, 15], [0, 50], [59, 153], [21, -9], [-5, -37], [-22, -57], [7, -69], [-5, -21]], [[93445, 81023], [-11, -13], [-11, 3], [-36, 36], [-8, 17], [13, 30], [45, 45], [22, -1], [9, -10], [-1, -53], [-22, -54]], [[93310, 80819], [-35, -58], [-52, -14], [-25, -19], [-19, -39], [-14, -21], [-30, 12], [-13, 19], [0, 68], [-13, 30], [6, 19], [30, -3], [30, 44], [69, 18], [25, 47], [31, 117], [33, 41], [26, 9], [8, -58], [-7, -64], [-15, -62], [-35, -86]], [[92799, 79948], [-10, -30], [-12, 10], [-2, 9], [27, 35], [10, 41], [20, 1], [8, -8], [-6, -20], [-35, -38]], [[93234, 81118], [-26, -7], [-11, 16], [-8, 18], [-5, 26], [29, 12], [19, -14], [4, -38], [-2, -13]], [[92527, 79356], [-13, -33], [-14, 4], [-5, 9], [18, 39], [8, 7], [6, -26]], [[92222, 78857], [-52, -63], [-17, 0], [-9, 24], [-2, 13], [42, 10], [48, 84], [35, 55], [19, 19], [16, -1], [-80, -141]], [[91579, 78134], [-41, -29], [-26, 1], [61, 142], [36, 21], [46, 84], [97, 103], [11, 7], [56, -3], [-88, -113], [-11, -45], [-39, -48], [-28, -16], [-20, -23], [-54, -81]], [[91277, 77947], [-52, -40], [-42, -18], [-71, -84], [-26, -46], [-36, -19], [-35, 11], [-10, -19], [-3, -33], [-13, -29], [-70, -91], [-29, -72], [-30, -13], [-56, -73], [10, 63], [11, 30], [47, 56], [3, 60], [26, 51], [51, 52], [35, 67], [28, 18], [31, 56], [32, 20], [-3, 43], [14, 48], [11, -3], [26, -67], [20, -2], [54, 14], [80, 116], [26, 21], [19, 4], [11, -10], [4, -14], [-1, -17], [-6, -25], [10, -29], [-13, -22], [-53, -4]], [[90753, 77041], [-9, -16], [-20, 14], [1, 32], [2, 9], [57, 28], [16, -18], [4, -15], [-51, -34]], [[90612, 77475], [42, -42], [58, 9], [-14, -38], [-22, 1], [-39, -55], [-34, -7], [-17, -13], [-55, -82], [-8, -32], [-33, -62], [-50, -55], [-9, -104], [-32, 42], [-4, 42], [10, 35], [57, 74], [23, 41], [7, 34], [22, 36], [10, 32], [14, 14], [48, 131], [26, -1]], [[81496, 94700], [-10, -27], [-15, -21], [-11, -26], [-19, -19], [-59, -24], [-46, -54], [-8, -5], [-163, 30], [-26, 9], [-53, 33], [-75, 31], [-39, 46], [19, 8], [19, 4], [67, -6], [19, 14], [10, 39], [1, 23], [5, 18], [22, 13], [241, -40], [93, -23], [28, -23]], [[71180, 97725], [34, -21], [26, 16], [248, -50], [53, -18], [11, -13], [-217, -8], [-44, 3], [-4, 29], [-49, 1], [-85, 19], [-23, 27], [-5, 11], [27, 11], [28, -7]], [[72229, 98414], [-258, -21], [-25, 13], [-8, 8], [36, 44], [30, 21], [164, 8], [131, -14], [41, -13], [-15, -26], [-8, -9], [-88, -11]], [[69631, 93948], [-82, -27], [-22, -2], [-50, 7], [-22, -11], [-33, 27], [2, 24], [16, 25], [9, 31], [-6, 78], [42, 49], [56, 19], [164, 22], [23, -6], [33, -15], [25, -18], [33, -43], [26, -18], [40, -34], [12, -33], [-2, -30], [-75, -6], [-130, -25], [-59, -14]], [[71564, 93485], [-135, -5], [-67, 9], [-10, 11], [9, 28], [69, 42], [31, 27], [32, 46], [56, 38], [47, 0], [147, -45], [21, -28], [3, -13], [-58, -38], [-41, -14], [-63, -48], [-41, -10]], [[72083, 93733], [-20, -6], [-152, 23], [-53, 30], [-16, 27], [6, 24], [141, 117], [54, -33], [15, -31], [36, -38], [-1, -86], [-10, -27]], [[72825, 95287], [10, -19], [4, -21], [-12, -6], [-36, 1], [-20, -54], [-20, 9], [-13, 31], [-45, -21], [-12, 5], [-21, 24], [-13, 5], [-9, 16], [59, 48], [36, -25], [24, 1], [-5, 29], [1, 22], [30, 9], [40, 1], [2, -55]], [[66791, 92128], [9, -29], [-1, -53], [-11, -39], [-31, -6], [-31, -16], [-53, 17], [-29, -11], [-30, -1], [-24, 6], [-25, 8], [-16, 11], [1, 30], [-22, 43], [-34, 14], [-31, 5], [-35, 13], [-17, -6], [-22, -16], [-14, 5], [-76, 92], [-12, 21], [-8, 24], [-11, 15], [-26, 64], [13, 29], [26, 19], [18, 5], [32, 43], [59, 18], [12, -3], [11, -13], [61, -44], [33, -29], [28, -35], [30, -30], [89, -51], [60, -50], [61, -35], [16, -15]], [[55821, 83685], [-27, -55], [-74, -116], [23, -15], [27, -5], [32, -22], [30, -3], [53, 18], [10, 100], [3, 90]], [[55898, 83677], [17, 0], [26, 6], [16, -23], [30, -23], [35, -20], [54, -34], [55, -22], [18, -2], [58, 3], [61, -3], [17, -51], [30, -24], [25, -34], [1, -18], [-33, -119], [-7, -40], [-2, -40], [13, -51], [11, -28]], [[56323, 83154], [-9, -4], [-157, 6], [-148, 9], [-137, 9], [-132, 9], [-127, 8], [-79, 8], [-78, 7], [-11, 7]], [[55445, 83213], [43, 49], [28, 52], [23, 67], [3, 46], [6, 52], [37, 21], [80, -3], [35, 25], [44, 62], [46, 74], [15, 32]], [[55805, 83690], [16, -5]], [[59722, 78187], [6, -19], [66, -146], [31, -54], [24, -22], [28, -3], [53, 46], [23, 7], [50, -18], [18, 31], [26, 16], [33, 2], [38, -13], [41, -23], [-17, -52], [-17, -41], [-7, -45], [-9, -51], [-46, -23], [-48, 3], [-52, -15], [-18, 20], [-12, 18], [-23, 18], [-30, 10], [-27, -12], [-32, -69], [-56, -47], [-19, -54], [-56, 12], [-47, -10], [-69, -49], [-52, -106], [-57, -66], [-46, -21], [-43, 7], [-28, 20], [-57, 69], [4, 25], [8, 13], [10, 35], [23, 131], [-3, 43], [-13, 66], [-45, 52], [-36, -9], [-21, 13], [-75, 89], [-40, 6], [-45, -18], [-16, 13], [-13, 31], [89, 109], [88, 90], [38, 9], [52, 42], [55, 63], [-8, 49], [-12, 37]], [[58251, 77914], [-5, -38], [-3, -24], [-12, -99], [-8, -37], [-13, -42], [-142, -49], [9, 23], [-3, 42], [-6, 31], [13, 29], [-31, 10], [-14, -15], [-11, -28], [9, -62], [-15, -35], [-6, -19], [-1, -46], [-9, -20], [-2, -21], [23, 5], [-10, -39], [-43, -76], [-15, -45], [4, -180], [-19, -107], [-1, -32]], [[57940, 77040], [-45, -1], [-14, 2], [-42, 16], [-48, 29], [-28, 55], [-18, 40], [-40, -18], [-8, 5], [-11, 19], [-31, 13], [-37, 0], [-85, 72], [-9, 13], [-67, -13], [-99, -35], [-76, -45], [-79, -78], [-32, -60], [-37, -32], [-52, -23], [-94, 9], [-97, 30], [-105, 32], [-57, -18], [-77, 13], [-115, 39], [-86, 12], [-85, -23], [-14, 17], [-4, 20], [4, 28], [12, 23], [20, 17], [11, 17], [1, 18], [-23, 29], [-47, 39], [-20, 24]], [[55622, 78403], [11, 14], [63, 19], [29, -19], [14, 7], [13, 16], [7, 12], [1, 14], [6, 16], [22, 8], [56, -10], [23, 23], [8, 13], [5, 27], [6, 23], [20, 12], [0, 20], [-3, 22], [12, 50], [7, 20], [11, 8], [14, 15], [24, 33], [-6, 28], [5, 21], [25, 51], [19, 49], [0, 25], [3, 22], [16, 23], [18, 31], [23, 96], [9, 16], [15, 18], [11, 18], [1, 63], [11, 18], [21, 21], [20, 33], [17, 38], [12, 19], [17, 4], [19, 16], [20, 5], [20, -7], [13, 4], [19, 19], [48, 71], [7, 14]], [[57394, 79642], [26, 2], [20, -4], [32, -26], [22, -32], [9, -26], [19, -36], [20, -51], [22, -68], [4, -34], [9, -37], [16, -45], [31, -50], [5, -10], [14, -35], [27, -78], [23, -31], [20, -34], [9, -34], [15, -31], [33, -41], [27, -37], [22, -107], [15, -50], [10, -38], [-5, -76], [6, -33], [-12, -60], [-23, -120], [-5, -95], [4, -52], [0, -33], [6, -21], [6, -44], [1, -38], [-8, -11], [-12, -9], [-4, -8], [10, -17], [14, -32], [14, -36]], [[64112, 66122], [8, 35], [3, 22], [-19, 167], [-6, 128], [2, 26], [11, 30], [19, 66], [9, 65], [28, 148], [29, 57], [43, 42], [35, -82], [43, -63], [8, -70], [-13, -57], [-11, -90], [7, -42], [2, -36], [12, -61], [11, -78], [2, -55], [-6, -51], [-15, -42], [-29, -129], [-9, -13], [-36, -22]], [[45224, 70776], [38, -30], [35, 14], [43, -39], [23, -9], [-20, -27], [-21, -36], [-50, 9], [-42, 34], [-15, 26], [-5, 23], [14, 35]], [[47942, 73259], [-24, -6], [-95, -94], [-29, 0], [-55, 41], [-96, 14], [-32, 12], [-39, -27], [-30, 1], [-25, -35], [-17, 10], [20, 77], [31, 152], [-1, 93], [7, 81], [-8, 80], [-16, 50], [21, 130], [-2, 67], [-19, 84], [59, -13], [-19, 34], [-18, 20], [-17, -4], [-15, 1], [-50, -33], [-25, -10], [-8, 6], [3, 52], [-13, 68], [20, 18], [24, 5], [20, 29], [12, 33], [-7, 57], [18, 55], [40, 46], [-21, -7], [-24, -29], [-38, -104], [-12, -53], [-33, -17], [-29, -9], [-14, 6], [-18, 13], [-2, 39], [2, 31], [12, 62], [4, 88], [18, 78], [-2, 21], [-5, 31], [16, 30], [19, 20], [28, 68], [40, 160], [47, 170], [-4, 21], [-10, 15], [4, 46], [28, 200], [11, 26], [13, 59], [3, 94], [5, 65], [-1, 33], [-4, 39], [-18, 75], [-18, 159], [-2, 53], [15, 26], [-25, 4], [-11, 35], [2, 38], [28, 63]], [[43048, 73133], [-2, -11], [-15, 5], [-20, -4], [-11, 31], [10, 13], [22, 3], [11, -14], [5, -23]], [[41350, 74542], [-12, -27], [-21, 10], [-7, 10], [6, 59], [17, 14], [17, -24], [0, -42]], [[42479, 74103], [-6, -6], [-58, 16], [-16, 21], [-7, 39], [10, 13], [25, 8], [37, -7], [24, -28], [0, -36], [-9, -20]], [[42283, 74052], [-13, -7], [-74, 44], [-26, 21], [-34, 51], [96, -62], [51, -47]], [[42044, 74034], [-29, -1], [-27, 44], [40, 23], [12, -14], [8, -16], [6, -21], [-10, -15]], [[42181, 73993], [23, -23], [-35, -5], [-11, -11], [-29, 16], [-33, -3], [-22, 31], [-5, 33], [11, 20], [30, 0], [71, -58]], [[42875, 73640], [17, -4], [89, 9], [24, -6], [-3, -43], [-17, -17], [-52, -11], [-82, 27], [-27, 37], [-4, 27], [0, 12], [17, 10], [38, -41]], [[55231, 80363], [-1, 17], [-6, 42], [-59, 83], [-8, 35], [3, 13], [-4, 22], [-13, 13], [-47, 16], [-12, -9], [-11, 9], [-17, 20], [-29, 16], [-3, 9], [-11, 14], [-6, 2], [-3, -9], [-9, -12], [-30, -16], [-12, 7], [-11, 13], [-13, 29], [-18, 25], [-15, 9], [-9, 14], [-2, 10], [34, 21], [7, 21], [-4, 39], [-5, 5], [-13, -13], [-28, -11], [-26, -6], [-13, 0], [-73, 71], [-48, 22], [-28, 6], [-3, -7], [13, -40], [22, -49], [-1, -13], [-26, -20], [-15, -9], [-18, -17], [-15, -24], [-12, -10], [-12, 2], [-11, 12], [-31, 73], [-38, 55], [-4, 13], [-12, 3], [-17, 12], [-6, 18], [9, 17], [11, 17], [21, 10], [6, 9], [4, 14], [7, 19], [-2, 6], [-14, 21], [-22, 20], [-60, -15], [-16, -10], [-9, 13], [-7, 21], [-16, 3], [-20, 19], [-25, 18], [-24, 5], [-50, 26], [-19, 1], [-11, 9], [-12, 20], [-10, 21], [-5, 44], [-37, 19], [-37, 13], [-2, -7], [1, -43], [-2, -24], [-24, -14], [-24, -2]], [[54113, 81139], [2, 8], [28, 78], [13, 50], [15, 91], [-18, 72], [-5, 33], [-8, 16], [-50, 35], [-4, 12], [8, 48], [-4, 20], [-12, 21], [-16, 41], [-7, 36], [21, 42], [5, 30], [9, 42], [6, 23], [1, 7], [-13, 16], [-3, 23], [3, 33], [-7, 25], [-18, 15], [-11, 21], [-6, 27], [5, 41], [13, 56], [-29, 67], [-72, 79], [-35, 55], [3, 32], [15, 28], [28, 26], [21, 45], [11, 54], [1, 10], [1, 39], [-33, 157], [-5, 39], [-4, 48], [-2, 13]], [[53960, 82793], [64, -33], [26, -19], [-3, 21], [-5, 18], [3, 27], [-2, 40], [-57, 20], [-38, 7]], [[53948, 82874], [-5, 28], [4, 18]], [[53947, 82920], [11, -11], [37, -4], [92, 54], [159, 70], [170, 66], [40, 7], [40, 14], [14, 24], [15, 17], [23, 43], [51, 68], [91, 24], [34, 32], [70, 45], [162, 50], [67, 11], [66, 1], [59, -39], [62, -49], [12, -30], [-34, 19], [-49, 44], [-18, 2], [42, -134], [22, -47], [47, -36], [39, -11], [119, 21], [43, 28], [12, 14]], [[56323, 83154], [16, 23], [20, -3], [23, -14], [11, -11], [4, -12], [3, -13], [13, -3], [23, -10], [31, -24], [24, -23], [23, -33], [8, -37], [0, -42], [-1, -27], [2, -11]], [[56523, 82914], [32, -196], [53, -189], [19, -92], [8, -49], [6, -70], [2, -50], [0, -28], [-4, -38], [-16, -23], [-101, -65], [-20, -20], [-29, -51], [-28, -52], [-6, -18], [-2, -11], [6, -18], [36, -27], [37, -23], [12, -17], [26, -21], [10, -19], [6, -17], [-1, -39], [-12, -54], [5, -40], [-12, -27], [-10, -30], [-2, -53], [18, -58]], [[83638, 62566], [43, -30], [94, -108], [34, -27], [36, -20], [28, -5], [26, 24], [10, 25], [20, 67], [20, 8], [13, -24], [9, -33], [5, -47], [-6, -50], [-20, -44], [-12, -54], [-8, -177], [0, -53], [7, -51], [17, -81], [9, -23], [26, -29], [7, -22], [1, -39], [4, -35], [17, -13], [14, -18], [-5, -38], [-9, -39], [-12, -97], [-55, -223], [-3, -48], [-22, -96], [-45, -16], [-52, -46], [-28, -36], [-25, -47], [-10, -62], [8, -28], [5, -30], [0, -32], [-8, -27], [-25, -65], [-10, -54], [-11, -24], [-6, -29], [2, -33], [10, -29], [30, -125], [33, -121], [7, -14], [2, -16], [-19, -32], [1, -58], [5, -58], [29, -142], [4, -38], [10, -31], [14, -30], [17, -24], [46, -42], [18, -9], [19, -1], [4, 28], [17, 10], [-4, 28], [-20, 38], [0, 21], [10, 16], [13, 9], [28, 42], [29, 34], [38, -3], [37, -19], [27, -19], [22, -37], [22, -62], [16, -69], [-1, -33], [-3, -33], [0, -33], [12, -22], [36, -1], [18, 51], [3, 58], [-13, 22], [6, 28], [11, 22], [16, -19], [15, -36], [56, -39], [14, -1], [11, -7], [25, -28], [12, -21], [-14, -45], [-56, -10], [-16, -34], [17, -68], [26, -55], [17, -45], [15, -49], [0, -45], [-9, -46], [24, 3], [23, -9], [32, -40], [10, -3], [10, 6], [-1, -141], [-22, -129], [-27, 16], [-23, 54], [4, 67], [15, 64], [-8, 14], [-15, -6], [-17, -14], [-19, -5], [-30, 8], [-62, 70], [-26, 7], [-6, 31], [2, 67], [-25, 80], [-4, 28], [-8, 23], [-74, 86], [-9, 15], [-23, 69], [-52, 98], [-14, 10], [-16, 3], [-5, -25], [7, -38], [3, -33], [-1, -35], [2, -27], [25, -54], [3, -26], [17, -70], [2, -82], [-21, -34], [-24, 38], [-1, 31], [-4, 29], [-25, 74], [-8, 16], [-48, 74], [-37, 80], [-82, 86], [-9, 5], [-15, -7], [-13, -10], [-40, -43], [-14, -29], [-1, -46], [-28, -36], [-39, -5], [-30, 23], [-25, 45], [-21, 2], [-25, 71], [-31, 9], [-26, -55], [-5, 109], [0, 111], [7, 33], [13, 27], [65, 116], [8, 38], [-3, 50], [-15, 40], [-23, 25], [-27, 10], [-19, 23], [-15, 38], [-11, -67], [10, -98], [2, -65], [-9, -24], [-17, 0], [-16, 7], [-11, 23], [-9, 67], [-23, 43], [-9, 63], [-10, 9], [-21, -5], [-16, 29], [-10, 74], [-2, 78], [-9, 66], [-13, 64], [-7, 52], [-12, 235], [-2, 21], [-6, 18], [-15, 27], [-11, 32], [-2, 27], [3, 115], [5, 28], [11, 13], [16, -22], [12, -28], [15, -14], [14, -17], [25, -69], [10, -10], [31, 2], [18, 8], [9, 25], [5, 30], [1, 35], [-18, 103], [-6, 74], [0, 67], [5, 67], [24, 112], [3, 77], [-2, 104], [4, 61], [-1, 36], [-14, 55], [-4, 60], [41, 302], [13, 58], [9, 61], [4, 80], [31, 22], [29, 33], [15, -3], [15, -8], [36, 17], [13, 1]], [[82586, 56704], [-26, -42], [3, 52], [7, 49], [26, 99], [19, 31], [31, 78], [18, 38], [42, 75], [39, 82], [13, 6], [14, 1], [12, 9], [25, 45], [63, 147], [53, 110], [54, 139], [26, 41], [7, 15], [49, 128], [16, 18], [17, 14], [12, 17], [11, 22], [17, 56], [8, 65], [-5, 37], [-10, 54], [13, 74], [9, 34], [35, 150], [10, 31], [14, -19], [2, -27], [-7, -64], [0, -31], [8, -33], [-10, -53], [25, -142], [19, -89], [1, -30], [-26, -53], [-15, -16], [-33, -15], [-15, -15], [-23, -44], [-15, -57], [-4, -30], [-7, -23], [-68, -39], [-31, -25], [-15, -19], [-7, -31], [5, -55], [-57, -199], [-18, -51], [-19, -45], [-24, -31], [-33, -19], [-27, -39], [-18, -68], [-22, -61], [-28, -45], [-30, -40], [-28, -30], [-30, -20], [-9, -27], [-6, -33], [-14, -16], [-15, -8], [-28, -33]], [[84026, 58533], [32, -29], [32, 25], [31, -7], [26, -38], [-9, -24], [-1, -27], [57, 58], [16, -3], [-1, -54], [-3, -46], [-7, -44], [-12, -52], [-17, -46], [-21, -33], [-26, -21], [-12, -19], [-4, -28], [1, -35], [-6, -32], [-27, -14], [-42, -62], [-90, -40], [-25, -27], [-16, -36], [-17, -32], [-10, -8], [-4, 15], [-1, 13], [13, 84], [-3, 35], [-6, 33], [4, 66], [16, 62], [8, 68], [3, 132], [12, 182], [-1, 22], [-9, 25], [-35, 20], [-14, 19], [7, 36], [13, 25], [18, -1], [16, -23], [57, -48], [30, -40], [27, -51]], [[84202, 57064], [-18, -6], [-20, 3], [-13, 28], [-22, 122], [-26, 30], [-30, 22], [-15, 19], [-14, 23], [-42, 122], [-3, 74], [7, 42], [13, 38], [14, 10], [35, 1], [18, 5], [40, 56], [3, 22], [0, 92], [-4, 64], [-10, 62], [11, 29], [14, 28], [14, 55], [3, 39], [0, 41], [4, 29], [12, 14], [54, 45], [10, 3], [71, -41], [14, -62], [1, -20], [-11, -69], [-9, -46], [-24, -71], [-18, -77], [-13, -115], [-8, -38], [-22, -72], [-7, -40], [0, -86], [-4, -32], [0, -31], [44, -143], [4, -23], [0, -26], [-8, -32], [-18, -55], [-10, -19], [-17, -14]], [[84603, 58377], [20, -20], [22, 8], [27, 45], [30, -16], [18, -68], [9, -25], [5, -44], [-2, -106], [-7, -95], [6, -20], [14, -17], [12, -22], [10, -27], [7, -30], [2, -74], [18, -62], [2, -24], [-4, -25], [-29, 5], [-3, -21], [1, -27], [-10, 17], [-17, 60], [-16, 26], [5, -98], [5, -48], [1, -47], [-27, 36], [-33, 23], [-9, 19], [4, 61], [-1, 31], [-14, 64], [16, 140], [0, 29], [-3, 28], [-13, 57], [-21, 47], [-13, 0], [-32, -33], [-16, 11], [-9, 131], [-13, 127], [-9, 32], [-7, 34], [6, 28], [13, -11], [17, -34], [21, -19], [10, -16], [7, -30]], [[84788, 59059], [20, -47], [4, -34], [-2, -38], [9, -16], [16, -5], [20, -19], [15, -35], [-9, -32], [3, -46], [-16, -59], [2, -105], [9, -33], [1, -33], [-2, -36], [4, -28], [24, -96], [5, -32], [-8, -25], [-2, -24], [15, -2], [21, -40], [12, -53], [-3, -13], [-17, 41], [-13, 6], [-55, -11], [-33, 17], [-22, 2], [-21, 70], [-19, 12], [-15, 31], [-25, 79], [-8, 46], [18, 46], [5, 37], [-1, 36], [-17, -6], [-14, 12], [-17, 44], [-7, 25], [-13, 22], [-20, 50], [-30, 20], [-11, 14], [-24, 42], [-16, 53], [-17, 92], [-9, 95], [76, -25], [76, 5], [86, 22], [25, -26]], [[83528, 59607], [14, -5], [45, 18], [18, -9], [12, -33], [15, -10], [12, -17], [23, 29], [22, -33], [20, -63], [24, -44], [22, -33], [5, -25], [-14, -40], [-4, -50], [2, -55], [16, -114], [-5, -31], [-18, -44], [-12, -49], [1, -20], [-5, -16], [-1, -35], [-11, 7], [-9, -5], [-9, -16], [-15, -33], [-23, 10], [-10, 10], [-3, 29], [-7, 20], [-9, 12], [-24, 50], [-11, 38], [-1, 40], [-6, 37], [-12, 33], [-16, 26], [-6, 24], [-2, 29], [-1, 75], [-24, 92], [-8, 23], [-21, 22], [-18, 30], [-8, 29], [-7, 48], [-5, 7], [-14, -3], [-13, 7], [3, 35], [14, 25], [19, 3], [51, -14], [14, -11]], [[85001, 57212], [22, -35], [30, 9], [-1, -87], [5, -26], [27, -74], [4, -61], [-16, -59], [-12, -27], [-22, -40], [0, -18], [9, -20], [31, -12], [23, -32], [4, -91], [22, -71], [-1, -31], [-9, -128], [3, -54], [16, -44], [14, -19], [8, -27], [6, -75], [-1, -128], [-2, -44], [-10, -42], [-30, -94], [-40, -75], [-22, 5], [-6, -22], [13, -68], [-5, -145], [-9, -100], [-13, 51], [-9, 53], [-9, 140], [-10, 64], [-16, 57], [-7, 52], [-16, 48], [-22, 125], [-14, -7], [-23, -34], [-5, -23], [-3, -36], [-6, -32], [-27, -51], [-22, -60], [-17, -67], [-6, -61], [15, -47], [15, -20], [21, -42], [7, -20], [23, -139], [-1, -141], [-17, -63], [-42, -119], [-30, -37], [-17, 19], [-13, 72], [-2, 29], [9, 68], [1, 62], [-10, 21], [-12, -4], [-4, -9], [-27, -81], [-12, -21], [-17, -2], [-13, 5], [-81, 71], [-66, 70], [-51, 65], [-38, 99], [-8, 74], [0, 77], [-17, 113], [-2, 38], [2, 37], [16, 70], [20, 35], [12, 25], [9, 28], [6, 37], [-2, 37], [-7, 23], [-32, 82], [-27, 50], [-57, 45], [-13, 24], [-14, 19], [-16, 8], [-16, 0], [-16, -14], [-5, -29], [2, -27], [-2, -26], [-24, -148], [-30, 32], [-29, 38], [-7, 26], [-4, 32], [-5, 21], [-6, 19], [-14, -49], [-16, -39], [-20, -10], [-21, 0], [-7, 17], [-7, 94], [-22, 30], [-27, -7], [-33, -52], [-6, -19], [-7, -45], [-36, -127], [-19, -98], [-21, -96], [-9, -31], [-13, -21], [-19, 9], [-18, 23], [-17, 61], [6, 72], [19, 45], [15, 49], [19, 171], [1, 61], [4, 26], [31, 77], [26, 48], [13, 10], [57, 28], [23, 23], [36, 0], [30, 13], [24, 37], [2, 38], [-2, 40], [6, 24], [9, 21], [12, 27], [15, 20], [40, 15], [14, 17], [10, 26], [16, 50], [17, -12], [18, -20], [33, -16], [28, -42], [19, -66], [3, -32], [5, -108], [-7, -25], [-28, -51], [13, -5], [36, 46], [19, 18], [45, 24], [11, 16], [7, 24], [16, 66], [12, 71], [9, 29], [13, 23], [13, 4], [47, -48], [31, 23], [8, 73], [7, 106], [6, 29], [17, 28], [21, -9], [28, -38], [27, -13], [9, 31], [10, 61], [10, -1], [36, -20], [34, 13], [10, 73], [-7, 78], [-27, 226], [16, 51], [14, 1], [34, -60], [65, -81], [22, -50], [14, -61]], [[84269, 57286], [-11, -15], [-4, 38], [3, 51], [21, 179], [-5, 45], [36, 100], [22, 93], [32, 99], [5, 51], [29, 97], [27, 134], [-1, 45], [7, 22], [4, 33], [0, 29], [20, 50], [6, -33], [-6, -64], [1, -30], [3, -14], [0, -60], [-7, -91], [7, -105], [-13, -107], [-15, -48], [-21, -34], [-24, -21], [-25, -53], [-15, -62], [-3, -57], [-39, -192], [-34, -80]], [[83866, 62727], [-17, -42], [-10, 12], [10, 40], [0, 14], [8, 31], [15, 11], [13, -31], [-19, -35]], [[83755, 62996], [3, -52], [-17, 1], [-24, 32], [-3, 16], [1, 13], [4, 11], [36, -21]], [[83877, 63574], [-5, -7], [-8, 3], [8, 55], [14, 15], [11, -6], [-20, -60]], [[83854, 63814], [-13, -47], [-11, 0], [2, 26], [14, 55], [5, -1], [3, -33]], [[83655, 55342], [15, -41], [19, 11], [30, -12], [6, -22], [-1, -14], [-32, -40], [-21, 42], [-38, -29], [-18, 17], [-24, -15], [-15, 33], [6, 31], [39, 51], [34, -12]], [[82521, 56384], [-14, -44], [-16, 50], [1, 71], [5, 19], [24, 11], [0, -107]], [[83309, 57883], [-34, -18], [-8, 56], [24, 51], [28, -21], [16, -20], [-8, -18], [-18, -30]], [[83360, 58852], [15, -9], [11, 8], [10, 31], [9, -45], [22, -37], [-7, -38], [-20, -4], [-19, 8], [-21, -15], [-25, 9], [-14, 35], [-17, 63], [-9, 12], [1, 26], [6, 16], [-3, 4], [2, 12], [3, 8], [5, 3], [13, -28], [32, -42], [6, -17]], [[83343, 58584], [-21, -19], [-5, 12], [-3, 28], [0, 20], [-20, 104], [15, 15], [11, -12], [12, -16], [10, -9], [10, -32], [-2, -23], [3, -22], [-10, -46]], [[84068, 57875], [-7, -8], [-7, 2], [-16, -21], [-6, 39], [5, 66], [25, 50], [6, 16], [7, 10], [8, 1], [8, -20], [2, -30], [-16, -90], [-9, -15]], [[84609, 57480], [-3, -21], [-22, 2], [-8, -3], [-20, -54], [-12, -14], [-66, -18], [-52, 14], [-18, 30], [-12, 49], [-3, 33], [13, 35], [12, 24], [42, 46], [10, 35], [22, 43], [45, 14], [4, -11], [6, -6], [9, -2], [23, -35], [25, -23], [-6, -85], [7, -28], [4, -25]], [[83402, 54871], [-7, -35], [-9, -16], [-12, 9], [-9, 18], [-5, -27], [-24, -10], [-15, -41], [-23, -12], [-15, 6], [2, 37], [43, 54], [27, 21], [23, 39], [12, 5], [6, -33], [6, -15]], [[83914, 55546], [-28, -8], [-9, 0], [-22, 59], [-2, 26], [-18, 29], [6, 29], [23, 7], [40, 38], [64, -59], [10, -21], [-20, -13], [-14, -56], [-30, -31]], [[85016, 57468], [-4, -3], [-15, 45], [2, 51], [21, 76], [15, -67], [0, -30], [-2, -15], [14, -37], [-10, -19], [-21, -1]], [[84913, 57554], [-5, -16], [-6, 33], [-17, 31], [-15, 53], [-11, 16], [7, 42], [1, 68], [16, 31], [7, 10], [11, 33], [6, 2], [5, -28], [-11, -85], [16, -100], [-6, -62], [3, -14], [-1, -14]], [[83408, 59764], [0, -39], [-47, 57], [-1, 20], [1, 14], [5, 9], [25, -21], [17, -40]], [[83864, 59642], [18, -1], [5, 5], [33, -48], [-2, -24], [4, -33], [-19, -55], [-3, -19], [-11, -18], [-35, 44], [-13, 27], [-4, 56], [14, 81], [13, -15]], [[83914, 58959], [-22, -143], [-15, 49], [6, 31], [-13, 26], [-3, 24], [5, 31], [13, 29], [3, 94], [29, 30], [11, 1], [-4, -23], [1, -43], [-11, -106]], [[84070, 58933], [-14, -13], [-29, 56], [-17, 26], [-4, 15], [13, 21], [37, 0], [19, -39], [3, -24], [-8, -42]], [[84244, 59247], [24, -88], [-26, 60], [-30, 41], [-31, 67], [-23, 24], [-6, 14], [2, 28], [17, 5], [7, -2], [45, -119], [21, -30]], [[84381, 59017], [1, -51], [-10, 19], [-34, 99], [-9, 36], [9, 24], [25, -37], [18, -90]], [[84365, 58921], [53, -69], [37, -116], [4, -89], [-3, -35], [-17, 39], [-38, 54], [-26, 12], [-8, 10], [3, 30], [-17, 27], [-2, 11], [-15, 12], [-23, 61], [-16, 12], [-15, -13], [-35, -91], [-37, -64], [-1, 25], [15, 79], [10, 128], [6, 39], [-8, 57], [-1, 51], [28, -24], [35, -23], [27, -33], [4, -22], [40, -68]], [[84542, 59695], [-8, -37], [-9, 13], [-12, -2], [-21, -32], [-33, 43], [-5, 33], [24, 73], [0, 109], [8, 27], [9, 19], [11, 11], [23, -75], [8, -10], [22, -34], [-5, -70], [2, -41], [-14, -27]], [[83937, 59935], [-1, -23], [-60, 85], [-3, 15], [0, 13], [4, 14], [60, -104]], [[83897, 60486], [5, -20], [-5, 1], [-4, -4], [-13, -41], [14, -77], [-9, -56], [-16, -4], [-6, 6], [3, 28], [4, 12], [-3, 37], [-10, 23], [-7, 44], [-12, 27], [6, 43], [36, 5], [17, -24]], [[84531, 57952], [-7, -3], [13, 61], [10, -9], [3, -6], [0, -28], [-19, -15]], [[84799, 57593], [2, -29], [-35, 75], [-8, 53], [12, -2], [16, -20], [13, -77]], [[84148, 56111], [3, -14], [-1, -14], [-29, -27], [-9, 1], [-3, 44], [7, 21], [14, -18], [12, 21], [6, -14]], [[84939, 55853], [-4, -32], [-17, 77], [-7, 19], [9, 65], [19, -32], [0, -97]], [[84613, 58463], [-35, -4], [-15, 26], [-19, 78], [21, 16], [21, -4], [15, -27], [15, -52], [-3, -33]], [[84668, 57109], [-8, -34], [-31, 28], [-8, 25], [4, 29], [15, 10], [8, 0], [15, -31], [5, -27]], [[83680, 62835], [-1, -39], [-14, 21], [-3, 29], [1, 21], [6, 26], [9, -23], [2, -35]], [[83294, 58482], [6, -31], [-8, -46], [-7, -10], [-8, 19], [-20, 14], [-1, 24], [10, 0], [18, 24], [10, 6]], [[84376, 58342], [16, -76], [-22, 0], [-8, 56], [10, 18], [4, 2]], [[83974, 59060], [-8, -18], [-5, 3], [-4, 31], [8, 21], [3, -2], [6, -35]], [[84991, 57369], [-5, -15], [-8, 31], [7, 68], [5, 11], [7, -43], [-6, -52]], [[84681, 58522], [-5, -30], [-8, 8], [-7, 14], [-11, 44], [-3, 33], [16, -18], [9, -33], [9, -18]], [[82598, 56575], [-19, -14], [-4, 36], [2, 35], [14, -3], [6, -11], [1, -43]], [[84360, 57164], [2, -60], [-25, -18], [-21, 16], [-13, 36], [0, 13], [11, -1], [26, 31], [8, 7], [12, -24]], [[30565, 49403], [-2, -38], [-9, -15], [-14, -3], [-21, 26], [-15, -6], [-15, -2], [-22, 31], [-7, 31], [-17, 25], [-35, -10], [-29, -1], [-24, 6], [-22, -8], [-18, -33], [-14, -38], [-16, -31], [-48, -22], [-25, 0], [-23, -21], [-33, -8], [-23, -18], [-41, -10], [-49, -10], [-28, -28], [-10, -12], [-28, -39], [-49, -62], [-26, -21], [-33, -67], [-38, -62], [-25, -33], [-37, -16], [-16, -16], [-5, -20], [3, -24], [-6, -60], [-12, -111], [-3, -54], [-2, -26], [-25, -89], [-26, -83], [-13, -55], [-8, -40], [9, -34], [10, -60], [9, -48], [3, -32], [-3, -38], [-11, -34], [-18, -22], [-23, -7], [-49, -60], [-54, -89], [-18, -41], [-5, -39], [-8, -62], [4, -31], [9, -22], [10, -52], [1, -27], [-8, -15], [-16, -3], [-13, -5], [-11, -14], [-10, 4], [-10, -7], [0, -22], [3, -25], [-1, -26], [-7, -17], [-5, -12], [5, -17], [10, -15], [14, -25], [21, -48], [15, -9], [13, -16], [1, -27], [-4, -27], [-12, -12], [-1, -23], [16, -28], [10, -21], [11, -30], [9, -41], [0, -27], [11, -34], [6, -28], [0, -27], [17, -27], [15, -20], [10, -18], [11, -12], [2, -20], [-1, -30], [15, -50], [28, -38], [22, -55], [14, -39], [27, -64], [1, -73], [-33, -84], [-33, -84], [54, 3], [56, -2], [58, -24], [39, -23], [23, -11], [17, -26], [8, -42], [7, -34], [1, -50], [25, -40], [-2, -38], [-1, -54], [11, -1], [71, 0], [78, 0], [74, 10], [28, 13], [34, 65], [21, 20], [20, 30], [24, 56], [19, 25], [16, 31], [23, 31], [10, 23], [8, 8], [19, 15], [-8, -30], [-6, -31], [-2, -44], [9, -49], [-8, -36], [-12, -32], [0, -85], [0, -121], [0, -104], [-1, -129], [0, -147], [0, -98], [13, 20], [17, 17], [23, -45], [16, -20], [14, -4], [15, 1], [19, 10], [43, 37], [29, 31], [34, -2], [46, -12], [26, 1]], [[30672, 45534], [35, -125], [25, -91], [29, -105], [24, -84], [35, -127], [31, -110], [32, -118], [37, -133], [-11, -34], [-10, -27], [1, -46], [-15, -24], [-15, -15], [-19, -38], [-12, -34], [-1, -47], [3, -242], [-3, -66], [-10, -56], [-10, -29], [-6, -22], [15, -56], [13, -113], [10, -22], [13, -46], [6, -44], [-3, -16], [-25, -21], [-9, -18], [-3, -64], [-11, -23], [-18, -31], [-12, -35], [-10, -24], [-10, -14], [-5, -42], [-7, -44], [-23, -28], [-4, -53], [0, -44], [12, -43], [40, -92], [4, -22], [-23, -56], [-13, -38], [-32, -117], [-1, -22], [8, -55], [49, -238], [8, -19], [15, -23], [24, 3], [37, -26], [18, -29], [2, -15], [-4, -9], [-20, -20], [-22, -26], [-7, -24], [-2, -39], [5, -57], [-9, -18], [-22, -23], [-18, -32], [-19, -53], [-32, -81], [-11, -22], [-5, -28], [-18, -9], [-34, -55], [-5, -28], [5, -27], [17, -22], [12, -32], [3, -41], [0, -26]], [[30691, 41759], [-21, -39], [-27, -44], [-34, -9], [-13, -22], [3, -47], [11, -66], [0, -52], [-10, -60], [-24, -65], [-37, -44], [-35, -24], [-27, 0], [-27, -5], [-11, -7]], [[30439, 41275], [-20, 39], [-91, 130], [-34, 69], [-32, 33], [-78, 111], [-8, 36], [-9, 114], [-11, 32], [-26, 41], [-68, 55], [-26, 28], [-27, 50], [-40, 36], [-44, 72], [-26, 59], [-29, 38], [-91, 54], [-45, 54], [-85, 76], [-38, 49], [-91, 59], [-27, 28], [-90, 138], [-62, 46], [-51, 77], [-153, 166], [-24, 53], [-23, 81], [-34, 49], [-38, 112], [-57, 66], [-54, 87], [-20, 80], [-36, 101], [-11, 54], [-32, 53], [-2, 107], [-22, 49], [16, 24], [17, 11], [21, 165], [-12, 83], [-56, 151], [-21, 72], [-15, 93], [-22, 55], [-34, 116], [-21, 102], [-45, 75], [-12, 27], [-7, 38], [-25, 26], [-1, 79], [-17, 150], [-25, 76], [-90, 140], [-2, 55], [-7, 99], [-20, 106], [-99, 332], [-26, 99], [-25, 161], [-22, 91], [-25, 162], [-37, 123], [-24, 107], [-25, 133], [-2, 71], [-45, 122], [-24, 112], [-42, 94], [-42, 72], [-18, 50], [-58, 240], [-8, 71], [-40, 132], [-40, 95], [-25, 76], [-32, 69], [-195, 212], [-69, 88], [-23, 42], [-10, 66], [4, 38], [20, 36], [28, -27], [17, 11], [13, 47], [1, 72], [-17, 92], [-63, 177], [5, 38], [12, 42], [-24, 86], [-27, 68], [-13, 53], [15, 200], [14, 51], [95, 203], [26, 86], [40, 54], [42, 82], [49, 62]], [[27687, 49891], [8, -11], [7, -10], [0, -21], [2, -18], [5, -17], [1, -32], [6, -21], [1, -23], [0, -33], [-3, -16], [3, -28], [11, -52], [-4, -16], [-11, -11], [-10, -14], [-10, -32], [-15, 1], [-22, 14], [-15, -18], [-5, -35], [4, -28], [2, -27], [9, -23], [28, -2], [-25, -73], [-12, -33], [3, -21], [15, -18], [11, -2], [25, 27], [17, 39], [10, 22], [16, 9], [21, -18], [28, -36], [33, -32], [13, -18], [24, 5], [20, 7], [17, -26], [17, -22], [4, -76], [13, -55], [15, -42], [19, -51], [18, -17], [22, 0], [31, -19], [12, 12], [11, 35], [5, 20], [16, 9], [1, 23], [-3, 28], [5, 32], [13, 28], [33, 42], [15, 18], [4, 25], [6, 35], [-3, 19], [-6, 23], [1, 34], [9, 45], [12, 52], [11, 67], [4, 31], [12, 20], [4, 29], [6, 34], [14, 38], [0, 41], [6, 18], [0, 46], [15, 94], [0, 20], [6, 5], [11, -6], [9, -22], [3, -21], [4, -9], [9, 2], [10, 12], [-1, 19], [-7, 18], [-2, 11], [3, 18], [15, 38], [17, 44], [36, 92], [22, 38], [56, 40], [42, 30], [41, 29], [55, 42], [78, 58], [56, 42], [50, 76], [39, 58], [33, 50], [42, 64], [56, 138], [40, 95], [28, 70], [20, 44], [16, 123], [18, 142], [8, 62], [3, 22], [8, -9], [9, -15], [10, -1], [11, 1], [6, 8], [-9, 141], [1, 31], [5, 37], [-1, 20], [-17, 28], [-28, 56], [-11, 50], [-7, 43], [-19, 27], [-20, 25], [1, 20], [12, 0], [30, -20], [22, 7], [16, 2], [15, 20]], [[29087, 51781], [17, 38], [11, 0], [13, -5], [23, -39], [14, -22], [17, -19], [15, -6], [15, -2], [9, 1], [6, -25], [7, -31], [18, -21], [21, -21], [17, -34], [11, -23], [14, -28], [13, -36], [12, -64], [6, -43], [7, -24], [-2, -24], [14, -45], [11, -24], [18, -16], [35, -18], [19, -40], [16, -16], [18, -41], [16, -12], [20, 2], [19, -20], [15, -39], [10, -49], [15, -27], [8, -51], [-9, -58], [8, -32], [16, -25], [25, -27], [23, 7], [12, -9], [7, -25], [5, -29], [10, -70], [5, -45], [-10, -43], [-3, -30], [5, -41], [24, -19], [22, -16], [13, -31], [15, -9], [21, 2], [27, 8], [15, 18], [10, 5], [11, -8], [24, -17], [29, -19], [26, 11], [23, 5], [23, 11], [23, 33], [19, -2], [14, 22], [19, 35], [17, 36], [14, 8], [23, -17], [31, -25], [18, -31], [13, -9], [14, -23], [27, 0], [29, 12], [23, 39], [24, 12], [16, 10], [15, -6], [58, -71], [16, -37], [20, -7], [17, -20], [27, -22], [15, -22], [19, -14], [14, -31], [22, -19], [20, -11], [8, -25], [0, -16], [-2, -12], [-21, -65], [-39, -129], [-36, -116], [-56, -182], [-32, -102], [8, -4], [49, -45], [12, -1], [18, 11], [12, 18], [11, 2], [11, -17], [17, -22], [11, -65], [9, -31], [20, -25], [21, -40], [15, -42]], [[33844, 40227], [6, -42], [4, -32], [9, -23], [9, -31], [9, -17], [7, -28], [-2, -33], [4, -41], [4, -37], [5, -9], [13, -10], [7, -33], [-5, -16], [2, -19], [5, -19], [-5, -18], [2, -14], [9, -12], [9, -46], [1, -78], [-10, -42], [-7, -34], [-2, -21], [6, -31], [-9, -36], [-11, -44], [2, -30], [2, -29], [1, -30], [3, -29], [-4, -30], [-4, -27], [-1, -30], [4, -35], [-8, -32], [-5, -23], [-1, -23], [8, -36], [21, -15], [16, -4], [16, 19], [12, 6], [22, -17], [20, -31], [26, -4], [23, -5], [17, -10], [26, 11], [27, -11], [31, -17], [26, -15], [25, 3], [20, 2], [20, 17], [19, -1], [15, 30], [8, 27], [8, 19], [21, 15], [14, -10], [12, -49], [21, -29], [9, -21], [15, -9], [34, -2], [21, 2], [24, -15], [16, 0], [14, -27], [13, -32], [1, -59], [12, -46], [16, -17], [8, -29], [-2, -40], [-8, -40], [1, -44], [8, -40], [0, -40], [6, -40], [11, -34], [4, -55], [-2, -40], [7, -23], [3, -33], [-5, -26], [-2, -36], [1, -33], [6, -26], [16, -35], [5, -61], [0, -42], [7, -49], [14, -23], [22, -8], [26, -7], [31, 11], [28, 13], [15, 14], [31, 36], [26, 21], [14, 13], [13, 10], [27, -23], [24, -29], [20, -40], [35, -43], [-6, -11], [-15, -36], [1, -42], [10, -61], [-9, -127], [-28, -196], [-11, -114], [4, -32], [-10, -57], [-38, -123], [-1, -82]], [[34829, 37110], [-5, -248], [-13, -174], [-21, -129], [-20, -69], [-17, -8], [-13, -21], [-8, -33], [-14, -27], [-21, -22], [-11, -24], [-2, -26], [-20, -16], [-38, -8], [-23, -21], [-6, -34], [-13, -27], [-19, -20], [-9, -33], [1, -46], [-11, -40], [-23, -33], [-21, -1], [-19, 31], [-25, 21], [-33, 10], [-26, -8], [-22, -26], [-19, -41], [-17, -57], [-18, -9], [-21, 38], [-26, 11], [-31, -15], [-25, 5], [-18, 26], [-28, 3], [-39, -20], [-77, 23], [-117, 65], [-99, 25], [-121, -23], [-11, 68], [7, 37], [19, 27], [13, 32], [5, 35], [13, 27], [23, 18], [9, 19], [-3, 19], [4, 16], [13, 15], [7, 23], [2, 31], [5, 15], [8, 12], [1, 21], [-4, 67], [0, 55], [6, 43], [8, 25], [5, 7], [5, 15], [2, 26], [8, 24], [38, 49], [15, 27], [1, 24], [6, 33], [23, 71], [7, 34], [1, 16], [8, 17], [27, 40], [16, 37], [2, 35], [-7, 39], [-16, 45], [-49, 110], [-38, 50], [-49, 42], [-33, 13], [-15, -14], [-16, 11], [-16, 38], [-27, 29], [-57, 33], [-128, 129], [-52, 62], [-17, 39], [-48, 69], [-79, 100], [-61, 48], [-42, -2], [-67, 29], [-93, 61], [-54, 59], [-14, 57], [-35, 57], [-54, 57], [-28, 38], [-2, 18], [-16, 24], [-31, 29], [-33, 50], [-36, 71], [-38, 109], [-41, 148], [-44, 100], [-47, 51], [-23, 35], [0, 16], [-7, 16]], [[32597, 39035], [6, 29], [17, 112], [25, 164], [25, 169], [31, 199], [0, 141], [0, 149], [43, 122], [30, 87], [27, 83], [26, 142], [18, 94], [68, 23], [116, 49], [57, 24], [122, 52], [123, 53], [130, 3], [125, 3], [97, -117], [74, -90], [82, -99], [5, -21], [6, -83], [-6, -96]], [[92490, 49103], [-21, -44], [-13, 41], [-16, 36], [-13, 36], [-17, 79], [0, 40], [4, 42], [1, 43], [-8, 87], [-19, 78], [-68, 189], [-21, 49], [-24, 44], [-16, 11], [-31, 11], [-14, 8], [-26, 31], [-24, 36], [-60, 106], [-31, 30], [-17, 37], [-94, 120], [-27, 28], [-34, 0], [-28, 24], [22, 15], [5, 40], [-5, 41], [47, -67], [50, -58], [14, -47], [25, -3], [45, -38], [30, -35], [29, -40], [33, -58], [62, -45], [9, -17], [32, -75], [42, -64], [14, -35], [177, -301], [30, -85], [2, -58], [-6, -22], [-19, -49], [1, -58], [-6, -51], [-16, -52]], [[92198, 49368], [14, -12], [42, 60], [22, -42], [28, -20], [30, -12], [-12, -86], [4, -40], [7, -40], [-1, -59], [-13, -52], [-26, -76], [-12, -15], [-13, -8], [-43, -6], [-8, -40], [3, -43], [23, -57], [18, -63], [-18, -59], [-30, -40], [-29, -21], [-47, 12], [-50, -5], [-10, -22], [0, -37], [-7, -28], [-9, -25], [-25, -53], [-29, -46], [-38, -45], [-13, -10], [-35, -7], [-31, -26], [-13, -25], [-15, -20], [-33, -22], [-32, -43], [-12, -8], [-66, -7], [-95, -2], [-28, -5], [-27, 6], [-15, 17], [-32, 79], [-28, 26], [-30, 0], [-41, -28], [-8, 6], [-80, 116], [-25, 28], [-26, 21], [-32, 15], [-30, 23], [-18, 55], [2, 72], [24, 42], [37, -21], [14, 0], [14, 12], [16, -4], [17, -10], [60, 15], [34, -22], [34, -29], [32, -6], [32, 6], [43, 33], [14, -4], [42, 0], [36, 44], [14, 177], [9, 60], [13, 14], [9, -4], [13, -30], [-17, -38], [-8, -29], [-2, -71], [9, -69], [22, -54], [32, -7], [29, 36], [32, 7], [30, -35], [30, 6], [14, 23], [16, 10], [16, 4], [14, 13], [20, 60], [13, 67], [19, 52], [52, 88], [15, 11], [17, 6], [37, -4], [27, 32], [2, 70], [-4, 72], [-31, 167], [-2, 27], [4, 30], [9, 27], [31, 0], [32, -9], [13, -26], [14, -20]], [[89159, 46590], [0, 8], [0, 117], [0, 117], [0, 117], [0, 117], [0, 117], [0, 117], [0, 117], [0, 117], [0, 117], [0, 118], [0, 96], [-16, 38], [-15, 57], [3, 74], [19, 92], [9, 61], [0, 50], [0, 117], [0, 117], [0, 117], [0, 117], [0, 118], [0, 117], [0, 117], [0, 117], [0, 117], [0, 117], [0, 117], [0, 117], [0, 117], [0, 117], [-1, 118], [0, 117], [0, 117], [0, 70], [0, 39], [0, 2]], [[89158, 50339], [9, 0], [28, -1], [22, -9], [140, -125], [41, -50], [14, -12], [14, -1], [14, -5], [62, -70], [94, -69], [99, -67], [31, -14], [31, -6], [69, -23], [37, -21], [53, -82], [27, -25], [25, -46], [35, -50], [15, -12], [15, -6], [35, -2], [35, 9], [15, -4], [14, -9], [13, -17], [6, -33], [22, -47], [31, -20], [29, -42], [27, -50], [19, -50], [22, -43], [34, -18], [35, -2], [120, -253], [6, -39], [1, -165], [-13, -129], [30, -40], [40, -15], [58, -28], [55, -41], [175, -174], [24, -15], [35, -6], [36, 3], [13, -9], [26, -32], [14, -20], [24, -57], [21, -61], [9, -17], [11, -14], [6, -33], [9, -103], [-3, -64], [-9, -24], [-28, -11], [-99, -11], [-65, 12], [-46, -65], [-2, -28], [4, -27], [40, -137], [23, -121], [20, -50], [29, -40], [26, -48], [24, -54], [50, -95], [27, -36], [31, -21], [53, -74], [7, -33], [16, -103], [6, -69], [1, -29], [4, -26], [46, -63], [11, -18], [20, -140], [16, -65], [27, -24], [31, 2], [85, 42], [12, 1], [16, -10], [14, -23], [4, -63], [-13, -66], [-4, -64], [17, -52], [43, -41], [16, -12], [78, -13], [30, -11], [30, -17], [11, -16], [-8, -28], [-15, -14], [-18, -6], [-29, -20], [1, -36], [16, -38], [15, -45], [12, -17], [14, -11], [33, -15], [33, -22], [22, -22], [22, -15], [48, -10], [36, -29], [51, 12], [-44, -47], [-15, -11], [-53, 17], [-10, -18], [22, -50], [32, -34], [12, -19], [-9, -23], [-37, -46], [-16, -6], [-29, -4], [-50, 20], [-35, 25], [-9, 34], [-10, 20], [-31, 49], [-23, 26], [-28, 9], [-30, -1], [-53, 28], [-116, 20], [-27, 12], [-35, 39], [-16, 6], [-18, -12], [-44, -8], [-13, 3], [-32, 33], [-33, 12], [-14, -9], [-14, -3], [-44, 24], [-34, 10], [-28, 33], [-15, 30], [-17, 28], [-16, 70], [-24, 67], [-31, 54], [-65, 89], [-13, 22], [-25, 81], [1, 54], [9, 54], [-14, -19], [-16, 3], [-44, 36], [-18, 42], [-30, 116], [-19, 62], [-44, 108], [-13, 64], [-18, 56], [-12, 21], [-9, 24], [-9, 32], [-12, 21], [-62, 49], [-11, 15], [-12, 8], [-46, 5], [-26, 8], [-50, 39], [-26, 12], [-31, 7], [-30, 15], [-15, 15], [-10, 25], [-6, 59], [-25, -7], [-25, 10], [-24, 21], [-24, 13], [-17, -18], [-5, -47], [-8, -2], [-14, 9], [-7, -5], [-16, -22], [-12, -29], [-23, 4], [-47, 30], [-21, 18], [-18, 34], [-15, 38], [-16, 29], [-19, 22], [24, -51], [56, -228], [-14, -4], [-14, 6], [13, -44], [-15, -6], [-15, 0], [-32, 19], [-31, 6], [-10, -9], [7, -16], [11, -49], [9, -50], [-46, -23], [-46, -14], [-52, -27], [-53, -2], [-27, 16], [-28, 9], [-26, -9], [-25, -20], [-21, 3], [-14, 36], [-6, 27], [-8, 23], [-20, -4], [-19, -12], [33, -2], [10, -30], [8, -36], [23, -32], [29, 19], [61, -5], [60, -57], [14, -7], [13, -11], [31, -56], [24, -51], [19, -59], [4, -23], [-1, -61], [-6, -30], [-39, -43], [-41, -33], [-61, -63], [-59, -73], [-31, 15], [-28, 38], [-10, 10], [-29, 21], [-18, 7], [-69, -16], [-70, -8], [-30, 1], [-28, 12], [-32, 23], [-31, -11], [-21, -26], [-23, -4], [-44, 59]], [[91117, 48486], [-11, -4], [-5, 26], [-26, 23], [-26, 70], [1, 61], [3, 17], [15, 1], [57, -70], [6, -22], [-4, -66], [-10, -36]], [[90560, 49120], [-19, -17], [-13, 13], [-6, 38], [5, 36], [16, 29], [10, 9], [12, -20], [4, -38], [-9, -50]], [[92408, 50038], [-7, -51], [-17, 30], [-12, 42], [8, 20], [19, 11], [9, -52]], [[92249, 50145], [-3, -29], [-9, 1], [-24, 57], [-4, 15], [5, 14], [28, -41], [7, -17]], [[91601, 50948], [-1, -21], [-20, 11], [-6, -3], [-34, 60], [0, 37], [9, 31], [15, -5], [25, -39], [12, -71]], [[91966, 46071], [12, 0], [20, 43], [17, 13], [11, -20], [-18, -137], [-16, 21], [-60, 38], [-2, 54], [-15, 18], [-10, 53], [-20, 58], [-4, 38], [12, -16], [12, -38], [53, -79], [-2, -25], [10, -21]], [[91762, 46374], [-4, -14], [-16, 10], [-46, 80], [7, 59], [21, 30], [31, -33], [10, -49], [3, -27], [-6, -56]], [[91973, 46812], [5, -41], [-22, 44], [10, 50], [2, 27], [-1, 15], [-22, 26], [11, 42], [13, 14], [7, 4], [0, -59], [6, -27], [-9, -95]], [[92855, 45298], [-4, -31], [-10, 10], [-30, -16], [-16, 4], [-9, 28], [-3, 13], [27, -10], [-5, 31], [38, -16], [12, -13]], [[89884, 46957], [-12, -2], [-49, 39], [-12, 29], [57, -7], [15, -7], [3, -40], [-2, -12]], [[90881, 48714], [-15, -3], [-26, 54], [-6, 21], [3, 28], [32, 39], [21, -35], [4, -75], [-13, -29]], [[90851, 50714], [93, -38], [6, 1], [-1, 13], [1, 4], [6, -10], [-2, -27], [-15, -7], [-13, 3], [-10, -15], [-26, -52], [-18, 9], [-22, -12], [-38, -1], [-50, 23], [-13, -20], [-18, 6], [-17, -22], [-8, 1], [-4, 32], [1, 16], [20, 14], [-3, 49], [17, 25], [29, -3], [27, 17], [58, -6]], [[91787, 50309], [-55, -8], [-20, 9], [-18, 33], [-16, 52], [-16, 12], [-7, 11], [39, 39], [35, 12], [56, -49], [6, -25], [0, -16], [-1, -53], [-3, -17]], [[91813, 46459], [39, -48], [21, 14], [12, -7], [25, -55], [1, -40], [4, -34], [-1, -15], [-14, -21], [1, 24], [-10, 4], [-37, -1], [-28, 15], [-39, 4], [16, 36], [4, 14], [-21, 59], [0, 28], [1, 15], [17, 8], [9, 0]], [[92397, 46682], [16, -9], [33, 4], [11, -33], [16, -11], [13, -15], [12, -22], [0, -13], [-3, -12], [-7, -10], [2, -23], [-12, 3], [-16, -12], [-30, 27], [-11, 6], [-3, 24], [-19, 39], [-35, 28], [18, 23], [15, 6]], [[92648, 45232], [46, -30], [16, -34], [-17, -15], [-40, -10], [-10, 20], [-39, 21], [-6, 37], [-19, -13], [10, 27], [-25, 29], [-7, 40], [-1, 16], [28, -19], [64, -69]], [[89885, 46869], [5, -25], [-40, 35], [-39, 58], [-19, 15], [-13, 38], [24, -28], [41, -27], [41, -66]], [[91076, 50527], [-9, -30], [-21, 3], [-9, 9], [15, 6], [6, 25], [7, 8], [11, -21]], [[92209, 50212], [-6, 0], [-1, 46], [4, 24], [16, -16], [2, -42], [-15, -12]], [[91915, 45757], [-4, -45], [-22, 13], [-5, 10], [4, 28], [20, 1], [7, -7]], [[92682, 49481], [-2, -13], [-17, 15], [14, 30], [6, 2], [-1, -34]], [[93321, 47991], [-7, -54], [-5, -9], [-7, 20], [-24, -20], [-11, -22], [-13, -17], [-28, 4], [-27, 15], [-26, 28], [-23, 35], [-23, 55], [-14, 57], [7, 66], [-9, 60], [-44, 43], [-10, 14], [-19, 59], [-19, 26], [-25, 52], [-6, 23], [-11, 66], [-3, 40], [9, 116], [-4, 58], [12, -5], [13, -23], [15, -16], [35, -11], [27, -46], [25, -90], [4, -30], [8, -21], [26, -38], [14, -25], [26, -98], [15, -21], [17, -9], [16, -14], [27, -43], [24, -49], [17, -51], [12, -55], [9, -70]], [[92957, 48713], [-6, -4], [-12, 72], [-2, 54], [-4, 40], [-6, 24], [18, 43], [8, 12], [13, -23], [2, -51], [11, -43], [-8, -95], [-14, -29]], [[28507, 56830], [-5, -8], [-16, -45], [-8, -39], [20, -41], [6, -44], [11, -47], [17, -47], [20, -89], [4, -35], [-5, -23], [-19, -14], [-17, -41], [-5, -51], [3, -25], [-52, -80], [-13, -13], [-9, 12], [-11, 40], [-13, 33], [-8, 11], [-4, 1], [-4, -8], [-2, -17], [7, -76], [-6, -30], [-17, -24], [-20, -123]], [[28361, 56007], [-8, 16], [-67, 165], [-58, 205], [-12, 93], [15, 6], [14, -3], [8, 15], [9, 27], [-7, 63], [28, 47], [11, 32], [7, -3], [19, -55], [26, -31], [33, -46], [21, -10], [-26, 47], [-44, 63], [-13, 42], [-12, 57], [-17, -25], [-8, -21], [-9, -12], [-8, 15], [-1, 18], [-26, 4], [-7, 17], [-7, 9], [3, -36], [5, -22], [-2, -27], [-9, -1], [-7, 27], [-9, 25], [-13, 105], [-29, 49], [-14, 16], [-11, 7], [-17, 33], [-22, 18], [-29, 52], [-37, 37], [-44, 14], [-54, -9], [-19, -20], [-12, -27], [-6, -12], [-32, -30], [-12, -43], [-7, -37], [-16, -42], [18, -25], [-104, -142], [-21, -20], [-47, -15], [-11, -15], [-14, -28], [-2, -42], [2, -37], [14, -28], [12, -17], [29, -85], [52, -106], [9, -39], [8, -57], [-15, -27], [-12, -11], [-49, -5], [-17, -23], [-7, -35], [-18, -29], [-64, -28], [-49, -3], [-16, 33], [-4, 92], [-33, 158], [-8, 108], [-8, -13], [-18, -13], [-6, -27], [-5, -80], [-6, -27], [-14, 2], [-28, 29], [-37, 26], [-48, 170], [-5, 32], [-9, 38], [-37, 16], [-32, 29], [-34, 4], [-17, -16], [-18, 21], [-3, 46], [-36, -21], [-47, 7], [-41, 20], [-28, -10], [-24, -33], [4, -85], [-7, -16]], [[26978, 56492], [-1, 34], [-9, 40], [-10, 33], [-20, 34], [-1, 12], [8, 18], [38, 49], [4, 21], [1, 43], [-4, 41], [-17, 60], [10, 38], [19, 30], [20, 24], [4, 10], [-4, 20], [-12, 22], [-27, 38], [-16, 3], [-1, 108], [1, 116], [4, 11], [10, 7], [8, 18], [5, 34], [11, 12], [22, -26], [22, -24], [9, 8], [7, 11], [5, 12], [1, 10]], [[27065, 57359], [18, -31], [36, -54], [2, -27], [-3, -26], [10, -74], [18, -10], [19, 14], [5, -14], [-4, -13], [-9, -15], [-3, -64], [31, -30], [15, -26], [51, 13], [19, -7], [13, 7], [-14, 51], [-19, 38], [1, 17], [15, -13], [11, -25], [25, -32], [46, -111], [53, -26], [42, 3], [39, 15], [63, 43], [45, 78], [36, 34], [116, 74], [42, 77], [17, 10], [17, 10], [36, 58], [20, 46], [21, 22], [62, -16], [39, -22], [28, 3], [27, -15], [11, -33], [12, -14], [65, 3], [54, -16], [117, -98], [70, -97], [37, -103], [90, -133]], [[28084, 56609], [-6, -24], [-13, 54], [2, 14], [-1, 49], [13, 13], [9, 1], [7, -7], [5, -58], [-4, -26], [-12, -16]], [[27332, 56067], [-15, -3], [-31, 24], [-23, 48], [-2, 15], [1, 16], [12, 49], [17, 17], [6, 0], [16, -57], [-11, -21], [5, -35], [22, -26], [3, -27]], [[27157, 57246], [-3, -27], [-21, 49], [12, 8], [5, -1], [7, -29]], [[28037, 56597], [-12, -25], [-5, 24], [9, 25], [3, 0], [5, -24]], [[86436, 53586], [-6, -3], [-4, 2], [0, 8], [4, 9], [6, 4], [4, -3], [0, -8], [-4, -9]], [[87387, 56095], [-17, -12], [-8, 44], [3, 51], [11, 39], [12, 13], [2, 4], [12, 51], [3, -28], [-8, -93], [-9, -37], [-1, -32]], [[71323, 72385], [13, -52], [19, -78], [13, -51], [14, -58], [7, -29], [13, -50]], [[71402, 72067], [-5, -27], [-9, -41], [-30, -30], [-30, -23], [-7, -12], [-3, -18], [-14, -35], [-28, -29], [-24, 3], [-15, 8], [-79, -51], [-36, 2], [-29, -33], [-21, -30], [-42, -33], [-29, -1], [-43, 20], [-52, 37], [-21, 22], [-19, -1], [-47, 5], [-45, 18], [-54, 22], [-27, 10], [-55, 19], [-35, -26], [-33, -23], [-26, -16], [-22, -71], [-9, -26], [-10, -36], [-5, -25], [4, -31], [32, -21], [13, -30], [2, -26], [-11, -27], [-10, -21], [0, -19], [5, -18], [8, -14], [45, -9], [27, 0], [10, -8], [2, -25], [-10, -34], [-38, -28], [-22, -29], [-7, -39], [1, -30], [7, -21], [18, -23], [17, -27], [6, -22], [-3, -30], [-6, -41], [-19, -48], [-16, -34], [-1, -12], [4, -18], [12, -27], [22, -39], [27, -31], [17, -9], [5, -8], [6, -37], [2, -38], [-7, -29], [13, -24], [36, 1], [29, -10], [13, 10], [8, -8], [-5, -86], [4, -51], [7, -15], [29, -21], [55, 3], [33, -24], [36, -28], [19, -31], [8, -22], [-2, -37], [-20, -43], [-32, -21], [-19, -9], [-92, -81], [-29, -34], [-22, -41], [-8, -31], [-4, -30], [19, -108], [4, -34], [-17, -118], [-4, -43], [6, -31], [19, -11], [5, -26], [2, -19], [-35, -43], [-35, -39], [-12, 0], [-34, -71], [-58, -144], [-30, -49], [-2, -23], [-3, -24], [12, -41], [2, -34], [-13, -35], [-21, -40], [-42, -34], [-53, -36], [-24, -21], [-18, -93], [-16, -94], [-8, -34], [-28, -108], [-50, -158], [-13, -35], [-77, -76], [-79, -83], [-14, -32], [-16, -75], [-15, -83], [-14, -44], [-50, -97], [-17, -75], [-5, -49], [-42, -27], [-49, -26], [-70, -9], [-29, -13], [-86, -68], [-22, -3], [-16, 12], [-13, 23], [-12, 38], [-6, 59], [-16, 26], [-23, 23], [-23, 1], [-24, -25], [-20, -27], [-14, -23], [-14, -26], [-26, -89], [-43, -128], [-48, -92], [-17, -28], [-11, -21], [-15, -31], [-9, -30], [-12, -97], [-6, -86], [3, -19], [7, -17], [26, -25], [37, -41], [49, -24], [41, -4], [16, -18], [9, -24], [2, -20], [-2, -71], [-4, -77], [-16, -82], [1, -47], [6, -46], [45, -117], [17, -12], [34, -3], [16, 2], [18, 12], [13, -8], [9, -14], [2, -24], [-1, -117], [14, -53], [27, -72], [22, -82], [20, -99], [19, -77], [8, -40], [-13, -20], [-7, -20], [-2, -27], [3, -29], [-2, -20], [9, -25], [11, -8], [0, -17], [-17, -23], [-15, 1], [-12, -10], [-23, -48], [-10, -9], [-14, -4], [-16, 4], [-22, 19], [-7, 30], [3, 32], [-5, 18], [-16, -3], [-56, -32], [-53, -40], [-9, -27], [-12, -28], [-25, -12], [-35, -3], [-25, 4], [-23, 30], [-21, 28], [-32, 1], [-58, -4], [-32, 0], [-19, 10], [-18, -7], [-24, 11], [-10, -15], [-10, -1], [-8, 26], [-5, 2], [-6, -4], [-5, -8], [-4, -15], [-1, -174], [-38, 1], [-27, 1], [-30, -10], [-27, -13], [-14, -16], [-19, -25]], [[68934, 65585], [-4, -34], [-10, -26], [-13, 38], [-9, 17], [-9, -13], [-14, 2], [-26, 42], [-11, -43], [-42, -9], [-5, 32], [-1, 30], [-23, -22], [-17, 34], [-7, 45], [-6, 12], [-8, 15], [-17, 15], [-16, 48], [-1, 51], [-4, 60], [-33, 224], [-20, 21], [-110, 39], [-6, 40], [8, 105], [-3, 66], [-36, 88], [-10, 61], [-29, 52], [-29, 15], [-30, -7], [-15, -20], [-9, -35], [63, 8], [14, -13], [17, -23], [-18, 1], [-21, 11], [-26, -1], [-98, -26], [-56, -37], [-76, 11], [-96, -36], [-79, -2], [-33, -71], [-18, 12], [-14, 18], [-109, 56], [-7, 23], [-18, 17], [-20, -30], [-15, -5], [-59, 25], [-46, -19], [-17, -32], [-1, -50], [-57, 10], [-32, 15], [-43, -17], [-98, 23], [-25, -6], [-36, -33], [-15, -26], [-21, -10], [-18, 36], [-14, 16], [-13, -10], [-18, -30], [-50, -14], [-46, 4], [-49, 28], [6, 9]], [[67107, 66360], [8, 48], [7, 172], [8, 62], [-2, 34], [2, 10], [19, 31], [4, 12], [8, 88], [8, 98], [9, 35], [7, 9], [61, 44], [11, 29], [31, -7], [3, 7], [3, 34], [14, 36], [21, 30], [15, 11], [54, 19], [32, 26], [10, 2], [85, -6], [18, 10], [3, 9], [5, 99], [15, 16], [3, 8], [-5, 69], [3, 45], [17, 27], [-1, 16], [-12, 32], [-17, 21], [-8, 5], [-70, -20], [-29, 7], [-14, 12], [-2, 9], [2, 20], [1, 32], [10, 51], [3, 30], [-8, 175], [-12, 116], [6, 115], [-1, 24], [-2, 5], [-9, 0], [-43, -10], [-36, 74], [-22, 30], [-62, 36], [-27, 7], [-40, 32], [-37, 70], [-37, 72], [-15, 45], [-17, 78], [-47, 149], [0, 39], [-6, 23], [-46, 98], [-33, 70], [-53, 112]], [[66900, 69042], [106, -63], [83, -48], [133, -78], [103, -60], [29, -10], [303, 52], [112, -40], [36, -22], [5, 13], [15, 27], [26, 27], [35, 21], [36, 12], [51, 1], [34, -1], [25, -7], [49, 4], [24, 10], [81, 43], [54, 29], [82, 44], [60, 33], [15, 17], [15, 32], [8, 28], [-19, 43], [-2, 38], [12, 48], [7, 74], [-2, 104], [-4, 61], [17, 112], [14, 63], [28, 30], [19, 19], [8, 13], [8, 15], [30, 86], [27, 40], [26, 24], [29, -3], [25, -33], [47, -15], [46, 10], [40, 25], [18, 20], [21, 18], [-1, 20], [-24, 18], [-14, 25], [-5, 31], [14, 18], [31, 6], [77, 74], [31, 49], [9, 23], [15, 3], [29, -23], [34, -8], [22, 23], [21, 5], [21, -25], [11, -29], [20, -36], [24, -7], [29, 19], [30, 41], [29, 58], [26, 56], [-7, 180], [-4, 107], [14, 55], [19, 35], [13, 53], [-1, 47], [14, 40], [13, 107], [19, 26], [37, 17], [61, 11], [47, 49], [47, 52], [7, 46], [-18, 50], [-24, 95], [-22, 57], [-52, 103], [6, 63], [29, 26], [72, -44], [20, -9], [25, -6], [66, 1], [54, 17], [57, 39], [11, 41], [-1, 48], [1, 40], [1, 56], [-20, 35], [-12, 32], [-4, 25], [14, 14], [14, 26], [13, 47], [31, 57], [19, 51], [18, 24], [27, 33], [17, 48], [8, 29], [16, 29], [5, 18], [-4, 17], [-8, 21], [-9, 23], [0, 23], [7, 24], [8, 22], [-3, 30], [-5, 50], [-14, 29], [-10, 68], [-16, 68], [-8, 27], [-15, 34], [-34, 35], [-10, 24], [13, 46], [22, 29], [42, 70], [23, 48], [21, 34], [27, -5], [15, 3], [14, 31], [27, 28], [49, 57], [17, 39], [26, 19], [21, 5], [29, 13], [28, 21], [25, 16], [40, 3], [63, 9], [35, 10], [81, 8], [89, 3], [11, 1], [38, -21], [26, -17], [11, 2], [43, 41], [66, 50], [30, 22]], [[70705, 73169], [17, 8], [25, 0], [21, -14], [21, -19], [13, -15], [16, 9], [30, 11], [25, -8], [56, -35], [8, -17], [13, -84], [10, -7], [32, 19], [26, -10], [29, -27], [19, -26], [12, -28], [14, -46], [5, -36], [6, -44], [-1, -123], [-10, -20], [-8, -26], [2, -23], [9, -18], [18, -12], [17, -8], [9, -19], [12, -70], [9, -10], [20, 0], [38, 15], [32, 24], [14, 5], [3, -66], [19, -25], [26, -29], [11, -10]], [[66311, 63489], [-17, -8], [-6, 4], [1, 73], [40, 91], [27, 106], [19, -94], [-33, -53], [-17, -91], [-14, -28]], [[65663, 66232], [28, -152], [42, -142], [37, -78], [38, -106], [59, -98], [27, -33], [108, -69], [60, -25], [82, -25], [57, -53], [19, -3], [29, 15], [22, -1], [54, -73], [16, -69], [23, -36], [20, -57], [13, -60], [45, -92], [33, -103], [33, -76], [29, -47], [44, -19], [36, -21], [4, -51], [-4, -67], [-7, -49], [-33, -96], [-8, -59], [-37, -97], [-41, -163], [-18, -37], [-66, -84], [-48, -102], [-57, -176], [-43, -174], [-17, -56], [-35, -12], [-23, 5], [-15, 17], [6, 47], [4, 54], [-21, -6], [-19, -11], [-43, -131], [-24, -57], [-5, -73], [-12, -94], [-16, -86], [-8, -73], [0, -41], [13, -101], [1, -103], [7, -62], [6, -74], [-20, -23], [-18, -11], [-68, -8], [-70, -24], [-61, -43], [-37, -43], [-47, -95], [-29, -243], [-47, -103], [-31, -21], [-76, -9], [-106, -28], [-38, -25], [-62, -148], [-5, -47], [12, -34], [4, -37], [-5, -35], [-29, -94], [-30, -68], [-81, -43], [-30, 25], [-27, 13], [-53, 2], [-86, -17], [-31, -50], [-50, -36], [-46, -55], [-87, -21], [-59, -43]], [[65577, 66856], [24, 83], [9, 13], [8, -6], [22, 9], [11, 45], [9, 25], [10, -3], [4, -14], [-3, -69], [0, -57], [-12, -175], [-13, -30], [-6, -25], [-2, -34]], [[53163, 85850], [-1, 17], [-5, 22], [-65, 22], [-12, -1], [-25, 13], [-15, 4], [-31, 8], [-25, 64], [-28, 54], [-3, 22], [0, 101], [-8, 44], [-2, 49], [-17, -39], [9, -63], [-21, -26], [-26, -13], [2, -37], [11, -7], [3, -38], [-7, -56], [-52, -126], [-11, -13], [-7, -17], [-27, 11], [-34, -35], [-32, -5], [-12, 39], [-46, 53], [-22, -3], [20, -26], [19, -34], [-11, -22], [-11, -14], [-18, -8], [-67, -44], [23, -29], [-20, -34], [-23, -5], [-13, -15], [-4, -21], [-69, -61], [-113, -155], [-59, -44], [-40, -46], [-36, 2], [-45, -39], [-114, -34], [-75, 15], [-53, -13], [-28, 26], [-4, 19], [2, 10], [5, 13], [-10, 5], [-21, 2], [-9, -13], [-1, -29], [-10, -8], [-39, 17], [-10, 15], [14, 30], [25, 28], [-5, 5], [-5, 17], [-11, 2], [-35, -4], [-29, 5], [-93, 62], [-21, 33], [-75, 52], [-34, 56], [-19, 61], [2, 56], [9, 87], [15, 22], [68, -31], [68, -51], [10, 3], [22, 40], [41, 32], [-12, 9], [-61, -37], [-23, 21], [-36, 42], [0, 21], [17, 22], [5, 29], [-8, 28], [4, 37], [27, 40], [41, 40], [30, 39], [31, 24], [-4, 8], [-34, -15], [-34, -26], [-39, -44], [-48, -35], [-35, -13], [-17, -12], [-26, -11], [-27, -50], [-29, -21], [-53, -3], [-11, 37], [15, 131], [16, 64], [17, 45], [27, 7], [20, 34], [16, 0], [13, -16], [54, -15], [26, 43], [35, 6], [62, 42], [-1, 8], [-42, -9], [-26, -2], [-37, -10], [-20, 7], [-9, 32], [15, 29], [59, 68], [21, 30], [11, 28], [-2, 19], [10, 39], [58, 69], [47, 32], [15, -28], [-13, -84], [0, -35], [38, 123], [16, 30], [19, 20], [45, 14], [13, 20], [-53, -7], [-127, -47], [-54, -42], [-15, -32], [-37, -49], [-17, -31], [-8, -47], [-21, -25], [-29, -9], [-39, -59], [-17, -48], [-39, -37], [-25, -29], [-8, -11], [-14, -28], [-11, -2], [-10, 16], [-1, 37], [3, 59], [19, 42], [9, 42], [-12, 38], [9, 24], [16, 0], [31, -11], [33, 1], [54, 31], [-9, 18], [-23, 2], [-44, -2], [-36, 29], [-29, 59], [-13, 79], [9, 23], [105, 81], [28, 36], [-16, 4], [-39, -45], [-57, -27], [-35, 38], [-19, 41], [-11, 87], [4, 45], [-4, 59], [24, 19], [27, -10], [26, -4], [61, 5], [133, 35], [85, -21], [35, 2], [54, 31], [46, 3], [35, -23], [19, -27], [3, -36], [16, -23], [11, 7], [-9, 29], [-2, 43], [140, 50], [17, 19], [-56, 7], [-16, 45], [30, 68], [-3, 9], [-31, -36], [-15, -51], [6, -40], [-6, -19], [-29, -9], [-64, -3], [-41, 17], [-38, 10], [-13, 13], [4, 29], [-7, 6], [-16, -26], [-14, -52], [-30, -12], [-84, 19], [-121, -11], [-54, -26], [-35, 3], [-61, 46], [-24, 36], [-8, 73], [3, 33], [47, 13], [24, -1], [22, 17], [-19, 12], [-28, 22], [-19, 44], [-29, 14], [-19, 38], [-5, 57], [6, 40], [15, 13], [37, -9], [97, 6], [91, -40], [62, -23], [125, 12], [73, 36], [-13, 10], [-80, -21], [-73, 1], [-130, 40], [-53, 14], [-57, -6], [-30, 12], [-18, 40], [13, 77], [27, 17], [15, -20], [18, -2], [18, 32], [17, 19], [14, 41], [51, 39], [22, 3], [31, 18], [20, -5], [12, -18], [16, -15], [35, 2], [103, 31], [11, 10], [20, 25], [-65, -11], [-54, -18], [-35, -5], [-5, 22], [13, 21], [20, 21], [10, 37], [22, 16], [24, -1], [50, 7], [35, 9], [60, -6], [90, -14], [58, -34], [21, 3], [23, 9], [11, 12], [-46, 14], [-2, 21], [5, 15], [74, 28], [81, 6], [-14, 23], [-177, -34], [-46, 23], [-36, 0], [-24, -13], [-68, -16], [-13, 11], [13, 40], [41, 65], [3, 16], [19, 16], [106, 37], [51, 44], [23, 6], [22, -3], [35, 5], [67, -13], [30, -55], [28, -17], [87, -69], [-4, 20], [-75, 93], [-29, 23], [-21, 46], [7, 43], [24, 29], [86, 15], [15, 17], [2, 29], [-13, 19], [-32, -1], [-26, 12], [-7, 31], [10, 21], [50, 38], [27, 13], [47, 13], [81, -30], [6, -16], [-22, -38], [2, -21], [20, -3], [46, 64], [55, 9], [23, 14], [26, 9], [38, -58], [16, -19], [12, -7], [12, -48], [12, -3], [17, 24], [30, 13], [42, 8], [69, -12], [32, 9], [15, -1], [-14, 43], [-10, 12], [15, 39], [15, 15], [48, 27], [46, 12], [30, 26], [40, 24], [-6, 18], [-12, 22], [-26, 2], [-10, 12], [33, 28], [45, 32], [-8, 12], [-34, 14], [-26, -10], [-38, -25], [-45, -39], [15, -11], [22, -32], [-31, -43], [-166, -115], [-78, -34], [-37, 5], [-9, 32], [-16, 23], [-18, 48], [-31, -1], [-17, -11], [-8, 16], [13, 51], [26, 40], [44, 31], [20, 36], [20, 59], [63, 55], [91, 138], [75, 44], [27, 48], [44, 21], [38, 37], [29, 4], [54, 34], [30, 40], [-20, 2], [-47, -26], [-27, -10], [2, 43], [13, 44], [39, 40], [186, 117], [19, -19], [22, -35], [56, 8], [64, 66], [49, 72], [-26, -12], [-29, -30], [-57, -41], [-26, -6], [-15, 5], [-8, 28], [-20, 8], [-18, -6], [-18, 20], [-3, 48], [23, 71], [19, 47], [20, 36], [78, 101], [17, 56], [36, 29], [46, -7], [14, 9], [-16, 36], [-50, 29], [-3, 18], [167, 47], [80, -1], [24, 23], [43, 15], [33, 29], [-17, 13], [-81, -26], [-51, -13], [-23, 0], [-18, -9], [-64, -3], [-14, 115], [10, 63], [24, -2], [5, 60], [28, 35], [39, 8], [19, 15], [28, 31], [46, -7], [48, 7], [-12, 14], [-59, 19], [-14, 32], [20, 17], [23, 13], [20, 3], [40, 62], [24, 27], [26, -5], [38, 28], [37, -10], [35, 18], [49, 12], [178, 5], [5, 25], [-38, 6], [-132, 7], [-67, -1], [-29, -7], [-10, 9], [2, 16], [24, 24], [12, 26], [49, 65], [58, 44], [44, -11], [46, -42], [34, -5], [15, -13], [25, -57], [11, -2], [-5, 55], [32, 44], [-8, 13], [-49, -16], [-37, 16], [-29, 34], [-8, 31], [18, 30], [17, 15], [-11, 18], [-74, -48], [-51, -11], [-21, 7], [11, 43], [-6, 34], [70, 85], [23, 9], [39, -6], [35, -24], [30, 4], [32, 12], [-5, 23], [-69, 9], [-18, 19], [7, 19], [47, 19], [48, 36], [54, 10], [43, 27], [8, -6], [8, -11], [15, -99], [39, -81], [15, -3], [-15, 69], [14, 20], [17, 15], [6, 17], [-20, 6], [-17, 24], [-24, 79], [9, 21], [51, 41], [64, 10], [68, -29], [24, -1], [40, 8], [67, 24], [40, 10], [20, 0], [5, 12], [-19, 8], [-6, 7], [-15, 5], [-62, -13], [-172, 4], [-16, 14], [-3, 24], [18, 34], [20, 20], [65, 34], [68, 5], [72, 61], [28, 45], [15, 71], [44, 57], [111, 32], [4, 14], [-12, 30], [1, 53], [31, 63], [20, 21], [9, 3], [24, -21], [29, -43], [45, -24], [59, -5], [16, 12], [-46, 25], [-35, 32], [-3, 33], [17, 17], [25, -2], [33, 4], [30, 21], [4, 16], [1, 20], [8, 22], [44, 50], [136, 33], [10, -14], [-7, -97], [-16, -63], [0, -46], [27, 46], [35, 126], [27, 59], [30, 34], [22, 8], [21, 17], [28, 11], [9, -14], [9, -31], [-16, -110], [2, -35], [-17, -46], [-65, -104], [3, -13], [15, 5], [25, 17], [80, 98], [70, -12], [1, 8], [-22, 29], [-28, 28], [-8, 34], [4, 91], [21, 37], [60, -4], [37, 5], [17, -17], [36, 1], [25, 66], [50, 6], [44, -44], [52, -29], [43, -42], [12, 12], [-23, 98], [-25, 35], [-54, 19], [-58, 44], [-15, 19], [3, 15], [50, 14], [68, -16], [59, 36], [17, -10], [46, 19], [28, -25], [17, 7], [11, 35], [73, 21], [46, -20], [25, -20], [12, -39], [17, -78], [36, -42], [23, -21], [27, -5], [12, 21], [-24, 25], [-7, 24], [12, 59], [14, 23], [78, 87], [66, 46], [39, 4], [68, 102], [20, 18], [18, 5], [-5, 24], [-37, 16], [-2, 31], [50, 38], [60, 63], [30, 4], [18, -17], [59, -29], [35, -33], [26, -16], [17, 3], [14, 25], [17, 11], [37, -6], [22, -16], [18, -2], [15, -9], [4, -21], [-32, -23], [-55, -61], [-54, -69], [-18, -36], [-17, -95], [-43, -61], [-3, -43], [17, -20], [47, 16], [57, 57], [15, 60], [143, 164], [68, 91], [76, 75], [43, 15], [21, -49], [-17, -65], [-32, -41], [24, -19], [-5, -50], [-7, -27], [-5, -28], [0, -26], [23, 7], [89, 52], [23, 56], [21, 42], [10, 36], [35, 34], [66, 0], [3, 14], [-80, 47], [-9, 22], [27, 28], [73, 55], [38, -6], [23, -13], [91, -9], [69, -39], [-2, -61], [-16, -26], [-15, -15], [-89, -47], [-15, -22], [28, -8], [60, 23], [16, -21], [-19, -53], [-4, -78], [-7, -46], [0, -42], [8, -23], [24, 90], [8, 22], [36, 34], [13, 68], [34, 81], [39, 47], [23, 13], [75, -2], [33, -18], [28, -39], [21, -16], [67, -17], [24, -21], [4, -12], [16, -3], [45, 30], [30, 5], [48, -46], [-10, -35], [3, -11], [58, 2], [48, -13], [92, -71], [10, -33], [-5, -40], [-132, -44], [-57, -42], [-94, -16], [-318, 28], [7, -31], [221, -66], [13, -19], [-7, -40], [-1, -33], [5, -22], [16, -20], [27, -10], [55, 5], [27, -11], [19, 17], [7, 55], [16, 12], [31, -16], [13, -59], [9, -6], [15, 42], [31, -3], [33, 3], [43, -7]], [[58045, 91602], [-20, 22], [-17, 34], [4, 33], [50, 64], [46, 45], [13, 16], [27, 46], [-54, 114], [-94, 34], [-108, 53], [-40, 28], [-62, 58], [-43, 52], [-40, 1], [-43, -13], [-68, -47], [-39, -24], [-22, -7], [-5, -1], [-49, 14], [-54, 3], [-43, -4], [-16, -7], [-61, -76], [-42, -39], [-23, -14], [-17, -22], [-14, -37], [-31, -128], [-23, -48], [-5, -30], [5, -89], [-5, -50], [-28, -40], [-20, -19], [-27, -4], [-34, -10], [-30, -24], [-21, -32], [-24, -73], [-40, -26], [-39, 7], [-28, 27], [-59, 21], [-44, 13], [-49, 28], [-44, 22], [-39, 4], [-23, -27], [-18, -26], [-68, -21], [-39, -16], [-50, -4], [-20, 19], [-72, 12], [-86, 14], [-25, 0], [-8, 32], [-23, 46], [-61, 79], [-25, 28], [-48, 65], [-55, 67], [-7, 2], [-37, 2], [-54, -2], [-34, -15], [-22, -20], [-4, -15], [21, -61], [-6, -16], [-11, -7], [-49, 17], [-59, -1], [-15, -19]], [[51377, 87030], [-25, -8], [-19, 6], [7, 55], [10, 9], [15, 4], [16, -30], [-4, -36]], [[51412, 86582], [1, -68], [-25, 5], [-12, 26], [-3, 17], [2, 39], [-6, 41], [7, 20], [10, 3], [16, -36], [10, -47]], [[58321, 92048], [-53, -17], [-6, 14], [11, 22], [14, 44], [22, -2], [22, -17], [17, -20], [-27, -24]], [[53324, 89646], [-18, -18], [-35, 5], [-3, 15], [9, 31], [21, 13], [27, -3], [9, -13], [-10, -30]], [[52352, 88517], [-31, -1], [-20, 13], [46, 25], [72, 25], [6, 15], [9, 2], [12, -19], [2, -26], [-8, -13], [-88, -21]], [[52250, 88327], [-27, 0], [-32, 9], [-21, 19], [-3, 16], [38, 21], [37, 12], [18, -23], [1, -37], [-11, -17]], [[56511, 92635], [-6, -18], [-9, -18], [-23, -18], [-66, -74], [-38, -11], [-13, -12], [-15, -7], [-48, 10], [-14, -15], [-14, -10], [-34, -4], [-21, 4], [-53, 27], [-31, 29], [-17, 26], [49, -1], [17, 6], [33, -5], [19, 26], [42, -3], [80, 18], [29, -10], [67, 60], [21, -2], [32, 17], [13, -15]], [[57107, 92823], [74, -22], [25, 0], [37, -41], [19, 4], [-3, -25], [-37, -12], [-58, -7], [-9, -5], [-49, 4], [-28, 33], [-47, 9], [0, 11], [30, 25], [46, 26]], [[56559, 92482], [5, -27], [2, -23], [-26, -32], [-59, -42], [3, -11], [-20, -11], [-31, -8], [-17, 8], [2, 36], [-5, 11], [-23, -15], [-24, 19], [-1, 18], [7, 16], [23, 25], [37, 16], [25, -6], [83, 65], [9, -14], [10, -25]], [[56671, 92492], [-53, -23], [-31, 20], [-13, 20], [-1, 45], [7, 27], [25, 15], [16, -11], [4, -8], [29, -9], [34, -28], [-17, -48]], [[53853, 91166], [17, -10], [43, 3], [8, -4], [-6, -16], [-19, -18], [-39, -11], [-18, -27], [-12, -9], [-34, -1], [-20, -6], [-25, -24], [-20, 18], [-5, -13], [-4, -23], [-11, -6], [-34, -9], [-8, 53], [16, 20], [12, 22], [19, 4], [17, -2], [30, 50], [42, 14], [26, 1], [25, -6]], [[53603, 90941], [-41, -31], [15, 56], [22, 56], [30, 32], [16, -12], [-7, -27], [0, -27], [-7, -13], [-28, -34]], [[54224, 91556], [36, -58], [16, -34], [-13, -64], [-35, -32], [-54, -6], [-38, 3], [-24, 16], [-3, 17], [-14, 5], [-37, -22], [-25, -3], [-32, 17], [-9, 28], [34, 35], [16, 27], [38, -3], [10, -8], [21, -5], [13, 32], [-3, 23], [10, 15], [46, -11], [0, 61], [17, 5], [8, -3], [13, -13], [9, -22]], [[55490, 92290], [15, -7], [14, 4], [11, -6], [23, -30], [25, -12], [2, -15], [-23, -15], [-31, -4], [-32, 5], [-9, 19], [-10, 31], [-27, 31], [-4, 27], [23, 5], [23, -33]], [[55771, 92217], [-15, -14], [-23, -5], [-12, 8], [-17, 6], [-20, -3], [-16, 25], [1, 20], [23, 28], [45, 16], [36, -6], [10, -9], [-12, -66]], [[55348, 92203], [25, -31], [22, 3], [6, 12], [15, 6], [30, -17], [-4, -28], [-42, -36], [-30, -50], [-38, -12], [-18, 6], [-35, -29], [-27, -31], [-28, -38], [-2, -20], [-5, -15], [-104, -15], [-37, -10], [-40, 12], [-19, 26], [6, 14], [40, 5], [1, 24], [10, 14], [13, 8], [9, 30], [16, 8], [30, -7], [20, 22], [11, 3], [14, -18], [6, 25], [-6, 23], [3, 15], [38, 40], [17, 29], [24, 19], [22, -3], [7, 28], [-7, 28], [3, 18], [20, 45], [22, 2], [11, -40], [1, -65]], [[53474, 89805], [-22, -2], [0, 23], [13, 22], [20, 14], [26, 4], [29, 2], [9, -12], [-17, -16], [-58, -35]], [[53449, 89886], [-25, -4], [4, 26], [21, 24], [8, 16], [4, 20], [18, 14], [26, -19], [1, -31], [-13, -30], [-44, -16]], [[53119, 89208], [-14, -16], [-33, 13], [-63, -10], [-26, 15], [20, 31], [58, 32], [31, -2], [31, -39], [-4, -24]], [[54861, 91933], [34, -33], [15, 10], [29, 3], [22, -11], [18, -21], [22, -1], [13, -27], [7, -36], [-16, -27], [-22, -12], [-6, -31], [9, -44], [-49, -15], [-58, -7], [-22, 21], [-45, -38], [-46, -60], [-21, -7], [-2, 19], [-32, 13], [-42, 1], [1, 14], [8, 10], [36, 15], [7, 30], [-7, 54], [7, 26], [1, 19], [23, 21], [77, -10], [9, 20], [-6, 13], [-39, 22], [6, 15], [28, 14], [28, 2], [8, 22], [1, 10], [4, 6]], [[54377, 91336], [4, -4], [38, 56], [41, 17], [3, 19], [16, 19], [-2, 31], [9, 24], [21, 7], [13, 8], [15, 5], [27, -20], [15, -22], [19, -50], [-8, -48], [-50, -38], [-40, -17], [-41, -43], [-20, -35], [-17, -8], [-11, 3], [-10, 9], [-21, 0], [-22, -31], [-68, -25], [-27, 7], [-1, 31], [-16, -3], [-26, -36], [-25, -12], [-16, -4], [-31, 14], [-83, -63], [-78, -11], [-25, 7], [0, 38], [50, 49], [41, 34], [142, 23], [88, 101], [21, 109], [21, 39], [-10, 23], [-24, 4], [-1, 34], [12, 37], [47, 51], [25, 22], [42, 62], [20, 14], [23, 0], [23, -16], [-4, -33], [-34, -60], [-50, -51], [6, -37], [20, -30], [5, -51], [1, -50], [-38, -66], [-9, -33]], [[47512, 92649], [-25, -4], [-15, 13], [37, 35], [124, 66], [49, 63], [95, 22], [6, -35], [-6, -44], [-84, -35], [-92, -23], [-89, -58]], [[55338, 94695], [-33, -23], [-51, 34], [-33, 43], [18, 16], [89, 3], [22, -23], [4, -13], [-16, -37]], [[57465, 97147], [-41, -1], [-75, 42], [-14, 37], [13, 15], [36, 1], [57, -51], [61, -15], [-37, -28]], [[59034, 97994], [-263, -22], [-27, 16], [427, 63], [22, 6], [80, 8], [68, -14], [-20, -11], [-287, -46]], [[56002, 97117], [38, -14], [83, 3], [45, -98], [26, -103], [41, -8], [80, 15], [70, 7], [36, -8], [65, -30], [28, -21], [-24, -17], [-59, -19], [-10, -55], [59, -20], [98, -47], [56, -6], [98, 19], [93, -37], [92, -45], [-215, -56], [-19, -16], [-29, -42], [-32, -35], [-29, -20], [-64, -35], [-35, -13], [-78, 3], [-29, -14], [-27, -28], [-27, -21], [-69, -5], [-35, 28], [12, 9], [5, 17], [-13, 40], [66, 40], [15, 23], [-13, 8], [-18, -2], [-48, 12], [-14, 0], [-40, -24], [-55, -16], [-55, -4], [-224, -31], [-34, 11], [-15, 61], [91, 31], [14, 53], [23, 35], [26, 23], [50, 60], [12, 4], [-123, 48], [-48, 31], [-53, 61], [-17, 50], [-71, 42], [9, 54], [-52, -4], [-41, 38], [38, 21], [190, 24], [113, 24], [43, -1]], [[55804, 98069], [28, -6], [153, 2], [30, -14], [11, -34], [24, -12], [32, -3], [81, -42], [28, -6], [24, 23], [19, 58], [0, 68], [-7, 33], [9, 21], [27, 8], [34, -2], [34, 12], [29, 21], [31, 3], [67, -16], [18, -13], [-18, -25], [-7, -37], [-31, -75], [66, -4], [93, 15], [24, 22], [50, 35], [53, -5], [25, 4], [13, 15], [5, 18], [29, -3], [40, -34], [19, -6], [34, 9], [13, 0], [34, -14], [157, -25], [54, -14], [24, -12], [23, -8], [167, 1], [118, -9], [43, -20], [37, -38], [14, -88], [-33, -24], [-239, -108], [-60, -35], [-29, -32], [-48, -70], [-24, -21], [-112, -34], [-26, -3], [-84, 16], [-25, -2], [-102, -36], [-36, -22], [-34, -27], [-51, -13], [-53, 7], [-237, 14], [-32, 20], [-26, 37], [47, 48], [-265, -18], [-292, 10], [-15, 6], [-13, 19], [-100, 12], [-75, 15], [-64, 26], [-62, 33], [20, 15], [20, 9], [54, 4], [48, -4], [85, 0], [20, 33], [34, 10], [27, 24], [-90, 15], [-94, 2], [-62, -20], [-73, -9], [-66, -1], [-127, 6], [-60, 14], [-83, 36], [-28, 21], [-11, 16], [-9, 24], [95, 21], [36, 17], [36, 24], [-142, 13], [-60, 19], [-59, 29], [48, 16], [192, 13], [51, -11], [50, -21], [56, -12], [53, 27], [-50, 12], [-46, 45], [-9, 22], [6, 17], [23, 3], [18, -7], [67, -42], [51, -14], [14, 39], [2, 19], [-9, 15], [-24, 28], [-21, 35], [33, 9], [33, -4], [70, -24], [71, -17], [32, -16], [61, -42], [56, -29]], [[54662, 97872], [15, -1], [14, 6], [10, 16], [11, 9], [71, -11], [99, -32], [30, -16], [41, -33], [34, -55], [-27, -40], [-35, -37], [-12, -21], [13, -30], [-6, -29], [-13, -26], [54, 29], [114, 94], [17, 6], [18, -3], [51, -19], [46, -48], [11, -16], [8, -20], [5, -24], [-3, -28], [-4, -19], [-25, -12], [-11, -12], [26, -1], [30, -15], [27, -31], [31, -13], [111, 11], [73, -17], [39, -52], [62, 12], [0, 27], [13, 12], [82, -9], [43, -13], [43, -27], [-74, -45], [61, -43], [103, -31], [61, -33], [12, -14], [10, -18], [-40, -24], [-41, -13], [-104, -2], [-93, -17], [-172, -12], [-26, -7], [-6, -7], [-10, -21], [-66, -47], [-64, -58], [-26, -35], [-20, -49], [-8, -29], [15, -29], [-4, -30], [-48, -23], [-31, 0], [-38, 4], [-38, -13], [-2, -20], [2, -28], [-9, -85], [-12, -65], [-18, -59], [-19, -33], [-25, -9], [-81, -5], [-62, -57], [-50, -100], [-26, -39], [-55, -62], [10, -22], [17, -24], [-30, -43], [-46, -48], [1, -19], [16, -34], [7, -35], [-35, -30], [-66, -16], [-66, 17], [-32, 21], [-30, 32], [-32, 22], [-33, 13], [-127, 72], [-117, 114], [-108, 45], [-69, 21], [-34, 20], [-33, 28], [-28, 31], [-27, 39], [-12, 24], [-3, 36], [9, 21], [12, 11], [85, 9], [31, -5], [30, -19], [27, -7], [63, 94], [357, 54], [115, 9], [115, 0], [-18, 25], [-15, 33], [-17, 7], [-87, -18], [-133, -19], [-65, 0], [-67, 13], [-67, -7], [-69, -28], [-69, -17], [-68, -7], [-143, 3], [-35, 14], [-48, 33], [-11, 17], [-10, 21], [-9, 63], [10, 17], [14, 9], [15, 6], [32, 1], [31, -11], [72, -36], [-17, 39], [208, 46], [96, 40], [49, 6], [50, -2], [-11, 21], [0, 20], [35, 16], [25, 7], [77, 8], [174, -2], [62, 11], [47, 28], [-50, -10], [-50, -2], [-23, 6], [-53, 24], [-24, 31], [68, 63], [24, 30], [-70, -5], [-23, -10], [-80, -58], [-60, -26], [-73, -12], [-73, 1], [-16, 8], [-22, 39], [-7, 20], [3, 11], [23, 31], [12, 34], [-2, 29], [-17, 5], [-27, -28], [-25, -39], [-33, -20], [-35, 6], [-15, 15], [-13, 23], [-13, 9], [-15, 0], [-31, -9], [-31, -18], [11, -25], [3, -29], [-14, -23], [-10, -28], [32, -17], [26, -28], [-39, -13], [-38, -18], [-34, -29], [-36, -23], [-56, -2], [-70, -12], [-141, -5], [-66, 37], [-12, 17], [-13, 12], [-44, 19], [-63, 57], [-50, 64], [-33, 6], [-49, 21], [-27, 19], [-25, 24], [-8, 29], [3, 26], [29, 12], [-69, 29], [-68, 39], [25, 13], [25, 6], [202, -46], [14, 6], [22, 23], [-8, 7], [-34, 5], [-46, 0], [-11, 5], [-18, 24], [-16, 30], [-6, 20], [-3, 23], [34, 35], [19, 32], [-29, 14], [-83, -1], [-28, -4], [10, -45], [-26, -31], [-51, -25], [-36, 12], [-28, 60], [-37, 41], [-14, 26], [-10, 38], [-15, 27], [-27, 33], [-3, 20], [3, 16], [20, 34], [-15, 28], [-19, 25], [-1, 14], [18, 18], [16, 6], [17, -2], [51, -21], [28, -25], [9, 2], [19, 38], [25, 8], [100, 12], [111, -48], [29, -10], [23, -4], [-12, 21], [-7, 28], [17, 10], [89, -24], [42, 1], [98, 33], [163, 16], [62, -25], [3, -14], [-2, -18], [-3, -5], [-36, -22], [-206, -17], [-134, -66], [183, 10], [33, -7], [14, -55], [13, -5], [48, -8], [32, -16], [32, -31], [34, -21], [21, 3], [7, 22], [-8, 27], [-5, 30], [3, 33], [5, 27], [39, 19], [56, 62], [59, 42], [66, -19], [62, -53], [55, -74], [53, -80], [60, -99], [29, -35], [27, -8], [121, -103], [13, -3], [-25, 78], [-62, 133], [-43, 102], [-9, 39], [-7, 54], [3, 16], [5, 14], [31, 59], [40, 28], [-12, 40], [10, 31], [42, 24], [39, 2], [38, -19], [73, -65]], [[53125, 97125], [3, -40], [45, 4], [53, -42], [58, -22], [17, -16], [12, -20], [35, -40], [17, -42], [-42, -4], [-58, 60], [-47, 34], [-60, 29], [-48, 2], [-21, 12], [-78, 105], [-15, 24], [-44, 39], [-20, 48], [0, 38], [60, -9], [52, -24], [45, -54], [9, -16], [-21, -22], [21, -27], [27, -17]], [[55205, 98099], [-60, -32], [-100, 25], [12, 25], [23, 15], [64, -6], [61, -27]], [[58068, 97299], [83, -4], [83, 9], [14, -9], [-107, -31], [-119, 16], [-107, 4], [-127, -33], [-42, 13], [65, 33], [70, 10], [11, 20], [27, 4], [93, 2], [56, -34]], [[85175, 73606], [-3, 5], [-14, 4], [-56, 47], [-46, -29], [-12, -37], [-12, -12], [-19, 73], [-30, 2], [-48, 65], [-21, -13], [-5, -26], [-26, -60], [-37, -48], [-12, -7], [-13, 3], [2, 14], [-15, 55], [-58, 22], [-21, 23], [-11, 6], [57, 61], [15, 11], [-11, 14], [-12, 7], [-47, -9], [-24, 20], [-36, -7], [-24, 16], [51, 60], [2, 36], [-1, 27], [26, 80], [26, 44], [67, 62], [30, 9], [21, -3], [17, 6], [-18, 24], [-18, 11], [-35, -2], [-36, 36], [-3, 38], [70, 240], [1, 22], [-11, 58], [-3, 57], [-51, 33], [-22, 4], [-64, 64], [-26, 33], [-10, -10], [-2, -51], [-9, -12], [-17, -10], [-9, 59], [-14, 42], [-42, 44], [-16, 23], [8, 52], [-4, 4]], [[84544, 74886], [7, 58], [26, 45], [64, 79], [17, 37], [33, 44], [14, -1], [16, 4], [4, 19], [4, 15], [13, 13], [31, 25], [36, 31], [28, 9], [35, 48], [14, 21], [15, 0], [3, 10], [9, 24], [11, 16], [15, 3], [25, 12], [32, 7], [22, 40], [7, 29], [14, 31], [31, 34], [20, 51], [24, 55], [11, 18], [10, 3], [7, 21], [7, 59], [11, 56], [6, 27], [27, 30], [7, 14], [6, 5], [12, -4], [16, 17], [16, 19], [14, -7], [15, -15], [15, -32], [7, -25], [12, -21], [2, -30], [12, -14], [25, -6], [42, -21], [27, -1], [15, -16], [32, -8], [64, 12], [26, -7], [11, -19], [17, -16], [10, -1], [14, 27], [16, 42], [10, 32], [-1, 26], [-9, 28], [-21, 25], [-14, 40], [-13, 41], [-8, 14], [-6, 20], [-1, 30], [4, 21], [32, 14], [41, 8], [33, -9], [56, 6], [34, 12], [25, -2], [23, 0], [11, 18], [32, 42], [16, 15], [17, 29], [3, 30], [3, 24], [10, 26], [17, 32], [14, 15], [16, -2], [17, -15], [11, -14], [12, 4], [10, 25], [7, 5], [19, 2], [6, 16], [8, 74], [7, 59], [2, 40], [17, 68], [6, 41], [10, 19], [12, -1], [10, -12], [12, -7], [17, 6], [12, -10], [7, -22], [25, -15], [2, -11], [0, -74], [13, -34], [18, -31], [25, -29], [14, -6], [8, -20]], [[86301, 76210], [-14, -16], [-19, 10], [-31, 6], [-39, -51], [-22, -17], [-16, -50], [-31, -30], [-17, -31], [-22, -54], [-14, -53], [-33, -54], [-20, -67], [-1, -58], [21, -59], [2, -51], [-15, -104], [9, -110], [-10, -43], [-102, -76], [-26, -37], [-38, -98], [-46, -36], [-28, -40], [-39, -24], [-26, -69], [-27, -39], [-33, -24], [-25, -30], [-55, -2], [-39, -21], [-27, -58], [-83, -66], [-12, -49], [6, -77], [0, -58], [-7, -49], [-18, 14], [-10, -16], [-11, -44], [4, -51], [28, -17], [23, -20], [33, -11], [24, -24], [52, -107], [42, -47], [11, -17], [24, -24], [22, -37], [13, -33]], [[84695, 74617], [-16, -17], [0, 30], [12, 25], [12, 3], [-8, -41]], [[52027, 54388], [-26, -18], [-18, 4], [24, 77], [12, -17], [16, -7], [-8, -39]], [[53779, 59737], [44, -124], [47, -133], [36, -104]], [[53906, 59376], [27, -268], [3, -51], [2, -23], [2, -21], [3, -37], [21, -16], [40, -7], [29, -26], [17, -44], [1, -7], [9, -34], [3, -24], [-3, -71], [-6, -90], [-10, -58], [6, -79], [-2, -34], [-4, -23], [-18, -27], [-24, -26], [-57, -76], [-17, -12], [-24, -2], [-21, -19], [-25, -41], [-53, -154], [-46, -154], [-16, -128], [-17, -122], [-40, -78], [-6, -44], [-2, -25], [-1, -59], [-5, -97], [-6, -47], [-7, -14], [-43, -30], [-25, -35], [-15, -71], [-5, -77], [-9, -87], [-5, -76], [-7, -40], [-14, -42], [-22, -44], [-19, -26], [-50, -16], [-26, -101], [-21, -79], [-1, -32], [-21, -164], [-36, -124], [-3, -44], [0, -35], [-45, -109], [-12, -32], [-12, -42], [12, -41], [12, -37], [2, -12], [-20, -35], [-36, -60], [-22, -36], [-5, -20], [-3, -90], [-6, -25], [-14, -33], [-21, -37], [-22, -28], [-24, -20], [-23, -7], [-13, 12], [-8, 27], [-13, 111], [-7, 24], [-15, 21], [-30, 61], [-30, 61], [-36, 43], [-8, -3], [-6, -12], [-11, -61], [-10, -23], [-19, -8], [-33, 0], [-25, 8], [-5, 13], [-5, 26], [-7, 22], [-29, -43], [-46, -68], [-15, -12], [-11, -13], [-15, -64], [-18, -68], [-24, -35], [-23, -30], [-14, -26], [-19, -31], [-37, -77], [-50, -102], [-17, -53], [-18, -78], [-10, -87], [-11, -96], [-16, -153], [-24, -87], [-20, -69], [-16, -54], [-8, -45]], [[52376, 54582], [-3, 1], [-8, -19], [-23, 13], [-11, 39], [-14, 6], [-25, 57], [-5, -9], [26, -145], [-10, -57], [-73, -1], [-64, -19], [-43, 1], [-22, 21], [-10, 54], [-3, -5], [-3, -30], [-13, -22], [-49, -5], [-22, 37], [-17, 42], [-19, 18], [3, -17], [22, -41], [-3, -58], [-39, -67], [-25, -4], [-16, 29], [-8, 47], [-4, 70], [-10, 46], [-6, 0], [5, -42], [2, -34], [0, -71], [19, -55], [-29, -17], [-11, -1], [-23, -1], [-4, 20], [-5, 46], [-6, 12], [-7, -78], [-15, -5], [-10, 1], [-46, -17], [-10, 3], [-2, 14], [6, 22], [-2, 35], [-15, -27], [-3, -54], [-9, -8], [-27, 7], [-29, 28], [-18, 28], [-30, 39], [-58, 111], [-10, 49], [-17, 61], [-12, 62], [-18, 105], [5, 8], [14, -9], [7, 15], [-25, 12], [-5, 12], [-1, 37], [1, 45], [19, 16], [18, 8], [8, 27], [5, 28], [-45, -42], [-43, 47], [-9, 29], [4, 22], [21, 3], [29, -1], [17, 21], [-10, 8], [-19, -1], [-7, 14], [0, 34], [-6, -7], [-8, -31], [-29, -22], [-16, 22], [-2, 50], [-4, 23], [-14, 17], [-50, 132], [-63, 110], [-57, 76], [-84, 36], [-178, -2], [-10, 11], [11, 17], [16, 12], [57, 61], [-10, 8], [-59, -38], [-21, -4], [-26, -74], [-156, -12], [-19, -3]], [[50751, 55512], [1, 33], [7, 97], [5, 38], [6, 29], [-6, 34], [-6, 47], [-3, 74], [8, 22], [2, 28], [-1, 43], [0, 145], [4, 16], [5, 12], [0, 20], [-9, 37], [-9, 43], [0, 61], [-3, 60], [-6, 27], [4, 102], [3, 128], [-3, 57], [6, 40], [3, 100], [0, 97], [11, 153], [35, 7], [40, 13], [19, 60], [10, 77], [-3, 75], [8, 25], [16, 41], [29, 58], [-1, 64], [8, 20], [14, 15], [20, 8], [23, 32], [12, 56], [12, 89], [-19, 63], [0, 13], [8, 34], [11, 34], [10, 10], [22, -8], [3, 3], [4, 10], [14, 99], [-2, 27], [-20, 66], [-3, 47], [-3, 70], [-5, 62], [-6, 23], [-11, 20], [-5, 13], [-42, 126], [1, 60], [18, 76], [11, 37]], [[50998, 58580], [16, 21], [3, 17], [-4, 22], [-8, 16], [-2, 34], [2, 23], [6, 25], [-2, 53], [0, 80], [3, 118], [0, 71], [35, 53], [49, 89], [25, 91], [14, 70], [17, 232], [12, 14], [14, 11], [50, 84], [38, 31], [29, 18], [44, 16], [28, -6], [49, -4], [40, 8], [33, 46], [15, 13], [21, 8], [96, -62], [96, -59], [18, 6], [14, -8], [24, -32], [36, -68], [21, -44], [10, -26], [50, -148], [18, -37], [18, -20], [19, -7], [15, 2], [13, 17], [19, 33], [28, 15], [23, -3], [120, 133], [12, 1], [34, -10], [39, -18], [100, -134], [82, -87], [58, -29], [67, -21], [116, -6], [87, 187], [32, 41], [39, 37], [12, 6], [68, 28], [135, 24], [125, -10], [25, -8], [54, -24], [82, -61], [36, -59], [55, -9], [40, 11], [14, 58], [40, 76], [29, 31], [31, 40], [49, 49], [40, 22], [37, 57], [28, 17], [50, 2]], [[50998, 58580], [-17, 53], [-23, 37], [-25, 16], [-17, 27], [-9, 37], [-33, 73], [-75, 144], [-8, 3], [-12, 6], [-22, -17], [-13, -24], [-9, -9], [-14, -1], [-36, -19], [-28, -23], [-1, -19], [14, -109], [-7, -59]], [[50663, 58696], [-13, 28], [-41, 110], [-29, 81], [-5, 18], [-4, 28], [3, 12], [11, 9], [27, 11], [5, 8], [1, 23], [-4, 41], [-15, 57], [-15, 37], [-8, 7], [-16, 2], [-17, -5], [-32, -46], [-14, -9], [-33, 4], [-30, 9], [-18, 24], [-53, 91], [-59, 96], [-25, 13], [-5, 10], [-4, 74], [1, 89], [3, 23], [25, -14], [26, -6], [8, 16], [-21, 32], [-30, 32], [-11, 48], [-9, 17], [-13, 17], [-16, 9], [-15, 14], [-11, 14], [-17, 6], [-19, 10], [-26, 79], [-26, 76], [-16, 60], [-5, 36], [8, 62], [-8, 24], [-29, 62], [-24, 59], [6, 89], [5, 75], [0, 47], [4, 27]], [[50060, 60432], [3, 30], [16, 10], [41, -1], [79, -14], [64, 16], [3, 3], [45, 80], [50, 84], [74, 8], [81, 9], [64, 4], [92, 7], [75, 5], [86, 7], [3, 38], [5, 10], [9, 1], [63, -21], [60, -20], [4, 73], [53, 92], [30, 18], [7, 16], [9, 31], [6, 48], [3, 34], [11, 28], [8, 52], [11, 90], [29, 95], [17, 129], [3, 125], [3, 95], [9, 19], [0, 168], [-1, 170], [0, 143], [0, 178], [-1, 156], [0, 169], [0, 152], [0, 101]], [[51174, 62870], [60, 24], [63, 25], [92, 36], [99, 39], [108, 43], [25, 26], [81, 146], [37, 66], [74, 130], [56, 101], [72, 128], [76, 129], [61, 103], [95, 117], [144, 176], [144, 176], [144, 175], [143, 176], [144, 176], [144, 176], [144, 176], [144, 176]], [[53324, 65390], [145, -67], [137, -64], [138, -64], [33, -35], [73, -125], [94, -160], [4, -3], [4, 0], [91, 94], [117, 123]], [[54160, 65089], [31, -333], [23, -285], [2, -183], [1, -47], [9, -32], [22, -33], [87, -263], [-19, -46], [13, -81], [23, -35], [72, -157], [10, -31], [-4, -25], [-51, -185], [-9, -45], [-10, -235], [-7, -167], [-10, -228], [-11, -273], [-10, -230], [-12, -304], [-12, -289], [-73, -158], [-129, -280], [-105, -229], [-53, -153], [-103, -298], [-46, -194], [-36, -100], [-18, -44], [16, -141], [28, -248]], [[26900, 60479], [-7, -21], [-9, -14], [-18, -69], [-6, -6], [-1, 51], [-10, 7], [-13, -18], [-7, -26], [11, -35], [10, 0], [11, -9], [31, -236], [-7, -42], [-19, -65], [-18, -56], [-18, -35], [-23, -148], [-20, -241], [14, -217], [-7, -200], [6, -48], [2, -59], [-15, -10], [-8, 1], [-9, 37], [1, 31], [9, 38], [4, 50], [-5, 27], [-9, -58], [-15, -26], [-10, -9], [-10, -29], [10, -55], [14, -40], [4, -29], [-5, -34], [-3, -117], [-5, 3], [-5, 16], [-14, 1], [-2, -47], [1, -26], [-12, -21], [-4, -20], [10, -14], [11, -9], [13, 2], [12, -58], [3, -47], [-26, -44], [-9, -36], [-14, -43], [-8, -43], [-3, -31], [10, -98], [18, -69], [15, -44], [20, -10]], [[26766, 58131], [-5, -46], [-15, -29], [-27, -25], [-30, -4], [-49, 23], [-20, 3], [-8, 12], [-3, 23], [-14, 34], [-25, 45], [-15, -3], [-24, 10], [-41, 31], [-18, 4], [-27, -27], [-31, -34], [-75, 54], [-53, 38], [-47, 35], [-13, 13], [-10, -3], [-9, -18], [-10, -32], [-4, -9], [-5, -9], [-6, -2]], [[26182, 58215], [0, 15], [-24, 64], [-36, 76], [-141, 234], [-52, 140], [-28, 101], [-27, 53], [-76, 107], [-17, 43], [-76, 143], [-57, 85], [-1, 35], [24, 45], [11, -2], [13, -32], [20, -36], [10, -1], [14, 17], [0, 17]], [[25739, 59319], [78, 7], [13, 10], [14, 26], [8, 37], [1, 35], [3, 26], [12, 25], [23, 7], [17, 3], [5, 17], [-5, 54], [-9, 131], [-2, 37], [3, 27], [7, 10], [34, 6], [65, -11], [13, 9], [26, 74], [24, 55], [17, 25], [14, 7], [15, -49], [55, -69], [9, 4], [6, 4], [1, 10], [0, 32], [13, 29], [29, 26], [28, 47], [29, 66], [25, 39], [21, 12], [8, 18], [-5, 24], [1, 35], [9, 46], [12, 26], [16, 7], [6, 14], [-3, 22], [3, 23], [15, 39], [34, 33], [20, -12], [17, -44], [23, -30], [30, -16], [23, 6], [17, 28], [15, 8], [13, -11], [7, 6], [1, 24], [7, 5], [13, -13], [12, -3], [10, 6], [4, 12], [2, 11], [7, 9], [26, -9], [29, 14], [33, 35], [21, 16], [11, -4], [12, 18], [15, 40], [34, 18], [71, -9]], [[98087, 28064], [32, -3], [29, 43], [31, 34], [32, 28], [49, 66], [12, 9], [32, 13], [14, 15], [15, 4], [-14, -39], [-17, -13], [-3, -14], [10, -22], [-15, -31], [0, -39], [-18, -46], [28, 18], [10, 30], [-5, 17], [12, 34], [18, 16], [-7, 25], [0, 20], [23, -7], [11, 0], [9, 8], [16, 4], [4, -23], [21, 3], [-8, -28], [-16, -33], [-4, -20], [-27, -33], [-18, -14], [28, -4], [40, 44], [24, 39], [-1, -48], [-19, -44], [-17, -28], [-19, -8], [-18, -23], [-9, -36], [1, -25], [5, -19], [19, -32], [-21, -63], [24, 8], [13, -12], [18, -36], [-11, -42], [-8, -22], [-47, -88], [-20, -44], [-24, -29], [1, -47], [-14, -34], [-70, -117], [-12, -25], [-55, -186], [-35, -78], [-20, -27], [-21, -22], [-51, -36], [-23, -43], [-25, -35], [-26, -8], [1, -15], [17, -9], [13, -23], [-10, -26], [-19, -16], [-19, -5], [-10, -17], [46, 12], [13, -13], [3, -29], [5, -26], [11, -34], [39, -21], [35, -10], [7, -16], [5, -54], [-6, -27], [-8, -18], [-12, -6], [-28, -3], [-29, 12], [-19, 33], [-54, -11], [-15, -7], [-7, 6], [30, 35], [-16, 19], [-13, 8], [-14, -12], [-9, -18], [-3, -30], [-10, -17], [-15, -5], [-21, 25], [-21, 35], [-30, 36], [4, -22], [24, -54], [12, -36], [-28, -29], [-28, -22], [-25, -13], [-22, -20], [-27, -32], [-15, -11], [-39, -1], [-21, -10], [-7, -42], [-15, -27], [-34, -5], [12, -8], [8, -14], [-23, -126], [-5, -53], [-4, -89], [-14, -83], [-41, 0], [6, -15], [31, -23], [-6, -36], [-34, -64], [-14, -38], [-14, -90], [-20, -84], [-32, -95], [0, -17], [11, -24], [13, -21], [1, -30], [-4, -16], [-15, -4], [-13, -10], [-71, -26], [-24, -29], [-19, -53], [-22, -45], [-74, -100], [-44, -83], [-9, -24], [-12, -18], [-95, -39], [-68, -6], [-37, 10], [-36, 20], [-19, 7], [-38, -12], [-16, -14], [-30, 13], [-23, -10], [-7, 10], [-9, 25], [5, 32], [-6, 24], [-15, 17], [-10, 19], [-12, 13], [-31, 6], [-49, -9], [-16, 1], [-34, 80], [-11, 20], [-39, 25], [-14, -3], [-21, -43], [-13, -7], [-74, -5], [-75, 14], [-28, 16], [-5, 37], [57, 102], [-17, -14], [-35, -41], [-22, 6], [21, 45], [2, 20], [-4, 23], [-30, -38], [-33, -5], [-4, 35], [3, 41], [7, 11], [89, 22], [33, 14], [14, 22], [-54, 7], [-3, 31], [7, 25], [46, 41], [-33, -11], [-38, 4], [3, 43], [9, 34], [40, 1], [-13, 23], [-1, 33], [11, 2], [39, -44], [29, -16], [-12, 33], [2, 21], [7, 9], [24, 7], [-7, 6], [-22, 8], [-26, 25], [-3, 26], [1, 31], [28, 42], [17, -25], [20, 7], [-15, 19], [-9, 30], [6, 19], [60, 78], [15, -75], [4, 25], [1, 24], [-7, 20], [1, 21], [7, 18], [25, 17], [34, 58], [25, 26], [20, -17], [13, -23], [-2, 23], [-9, 19], [-3, 53], [45, 81], [49, 78], [48, 82], [25, 29], [54, 34], [34, -14], [9, 3], [51, 58], [21, 16], [19, -21], [12, -8], [-12, 54], [10, 24], [42, 44], [54, 45], [40, 19], [30, 30], [18, 1], [-3, 23], [3, 22], [16, -2], [5, 9], [-14, 12], [44, 44], [24, 48], [13, 11], [11, 14], [14, 34], [17, 11], [15, -5], [11, -17], [-6, 28], [-20, 15], [22, 24], [22, 16], [21, -12], [21, -19], [-21, 30], [-3, 18], [25, 21], [14, 6], [19, -39], [-2, 31], [4, 28], [28, 45], [36, 75], [11, -26], [2, -31], [-2, -39], [8, 14], [2, 34], [-5, 61], [45, 113], [8, 12], [10, 8], [16, 3], [-5, 17], [-12, 17], [12, 57], [8, 65], [10, 63], [17, 62], [18, 102], [14, 22], [38, 7], [16, 15], [28, 37], [32, 67], [18, 54], [23, 140], [13, 147], [37, 108], [54, 79], [48, 60], [19, 12], [33, 4], [32, -17], [-59, -14], [-6, -36], [-2, -35], [7, -33], [11, -28], [28, -27], [33, -16], [15, -61], [3, -72], [5, -62], [13, -54]], [[98309, 28304], [-38, -34], [2, 23], [7, 51], [17, 26], [8, 1], [17, 20], [-1, -43], [-12, -44]], [[96317, 25543], [-1, -28], [-3, -14], [-10, 0], [-14, 3], [-14, 13], [-10, -4], [-7, 5], [10, 32], [33, 17], [12, -14], [4, -10]], [[96382, 25818], [12, -70], [-25, 14], [-11, 20], [20, 35], [4, 1]], [[96706, 24848], [0, -23], [-29, 9], [1, -26], [23, -14], [8, -18], [24, 5], [5, -28], [-5, -24], [-16, -19], [-47, -9], [-31, -36], [-26, 6], [-7, -3], [-30, -39], [-34, -12], [-9, 3], [5, 34], [25, 33], [0, 31], [7, 25], [24, 18], [0, 33], [16, 29], [-10, 63], [6, 56], [47, 3], [53, -97]], [[98761, 30944], [2, -31], [-21, 11], [-8, 24], [-24, 24], [-4, 8], [-2, 48], [12, 23], [2, 10], [6, 4], [10, -26], [19, -36], [8, -59]], [[98129, 31719], [5, -26], [15, 18], [11, 30], [19, 30], [-3, -48], [10, -11], [61, -34], [13, -28], [13, -8], [7, 16], [9, 8], [22, -18], [50, -49], [4, -17], [-2, -25], [2, -27], [7, -21], [17, -5], [22, 31], [10, 4], [15, -45], [6, -25], [-3, 1], [10, -25], [12, -25], [22, -74], [-3, -26], [-6, -23], [20, -68], [-13, -5], [-40, 12], [1, -14], [23, -50], [20, -70], [15, -43], [55, -132], [-8, -47], [1, -31], [-7, -26], [19, -70], [-12, -22], [-8, -72], [-8, -12], [1, -26], [22, -7], [13, -11], [12, -21], [7, 25], [10, 7], [26, -34], [55, -34], [15, -13], [8, -27], [5, -67], [11, -29], [21, -6], [23, 9], [7, 25], [-5, 65], [-16, 104], [0, 34], [2, 33], [-3, 34], [-9, 32], [-8, 24], [-12, 21], [4, 32], [17, 14], [10, -27], [9, -32], [42, -97], [26, 7], [2, -40], [17, -41], [10, -47], [12, -143], [19, -133], [35, -59], [4, -28], [-21, 15], [-7, -9], [2, -14], [20, -25], [23, -13], [14, 2], [14, -9], [90, -87], [43, -34], [109, -56], [31, -4], [17, 2], [33, 19], [29, 34], [25, 52], [22, 59], [23, 28], [27, 23], [14, 21], [14, 15], [73, -7], [25, -30], [32, -24], [16, -18], [-5, -38], [-19, -56], [-15, -61], [-13, -138], [-9, -141], [-13, -61], [-24, -48], [-27, -34], [-30, -17], [-12, -79], [-6, -93], [1, -24], [10, -18], [4, -28], [-16, -56], [-9, 8], [-13, 47], [-12, 19], [-36, 15], [-37, 7], [-32, -5], [-31, -19], [-47, -41], [-14, -21], [-13, -25], [-21, -58], [-5, -71], [1, -38], [7, -28], [40, -40], [-39, -136], [-35, -143], [-20, -40], [-23, -38], [-21, -85], [-38, -74], [-25, -56], [-20, -59], [-17, -62], [-37, -88], [-16, -58], [-22, -48], [-40, -61], [-42, -53], [-67, -73], [-18, -24], [-20, -18], [-24, 21], [-5, 23], [-6, 50], [-5, 18], [-31, 15], [-41, -24], [-7, 5], [-2, 11], [0, 73], [7, 20], [-9, 12], [-10, -5], [-3, -18], [6, -16], [-23, -20], [-25, -1], [-7, 8], [-2, 13], [6, 22], [8, 20], [45, 91], [47, 122], [40, 130], [11, 67], [15, 125], [-12, 51], [-16, 49], [-40, 94], [-55, 53], [-35, 7], [-33, 20], [-31, 45], [-29, 53], [-56, 43], [-60, 34], [-34, 48], [-8, 29], [-5, 33], [0, 30], [5, 32], [6, 24], [11, 17], [63, 62], [67, 35], [12, -1], [12, 6], [17, 21], [30, 48], [8, 33], [6, 104], [10, 102], [17, 116], [26, 73], [9, 44], [-11, 73], [10, 27], [12, 17], [13, 9], [-23, 69], [-26, 104], [-6, 32], [4, 32], [7, 31], [-17, 8], [-10, 30], [-24, 101], [7, 16], [14, -11], [20, -73], [4, 38], [16, 23], [16, 12], [18, 2], [-40, 82], [-14, -4], [-18, -12], [-19, -8], [-18, 7], [-17, 18], [-8, 34], [-11, 66], [-7, 24], [-53, 135], [16, 4], [43, -67], [8, 21], [7, 31], [-3, 35], [-10, 26], [-15, 17], [-1, 30], [12, 28], [-1, 20], [-24, 40], [-10, 4], [-5, -18], [7, -28], [-6, -3], [-61, 73], [-18, 58], [-15, 65], [-2, -26], [2, -37], [24, -74], [39, -82], [7, -22], [-6, -29], [-14, -8], [-11, 18], [-18, 71], [-13, 35], [-148, 365], [19, 48], [29, 41], [7, 18], [5, 22], [-13, 3], [-11, -10], [-13, -18], [-11, -22], [-15, -47], [-7, -11], [-17, 33], [-7, 20], [0, 24], [-4, 16], [-13, 5], [-19, 48], [-12, 24], [20, 47], [1, 62], [-21, 65], [-24, 60], [-47, 96], [-43, 102], [47, 13], [47, 2], [-22, -61], [10, -35], [15, -30], [32, -91], [3, -27], [16, -26], [8, -21]], [[96993, 21602], [15, -29], [-29, -13], [-14, 11], [-10, 13], [-5, 19], [15, -2], [14, 8], [14, -7]], [[96172, 22602], [6, -48], [-16, -1], [-32, 14], [-9, 21], [-7, 5], [-12, -24], [-18, -1], [-5, 8], [8, 25], [44, 49], [8, 61], [-1, 19], [35, 5], [8, -7], [3, -9], [-2, -11], [-14, -20], [0, -23], [3, -24], [-11, -12], [6, -21], [6, -6]], [[1062, 26647], [-10, -15], [-17, 1], [-30, -59], [2, 44], [-9, 17], [-26, -4], [-4, -10], [17, -12], [4, -6], [-17, -25], [17, -55], [15, 2], [14, -43], [0, -13], [-33, -16], [-17, -23], [-16, 1], [-7, 4], [-9, 41], [0, 17], [19, 31], [11, 30], [-9, 28], [-22, 19], [-48, -9], [-11, 6], [24, 39], [26, -5], [28, 28], [108, -13]], [[1062, 26312], [-12, -5], [1, 33], [-4, 21], [21, 7], [9, -26], [-15, -30]], [[2089, 46900], [-1, -1], [-1, 6], [-2, 7], [-1, 7], [0, 1], [3, -6], [2, -7], [0, -7]], [[2448, 46454], [0, -2], [-2, 3], [-2, 5], [-1, 6], [1, 1], [2, -4], [1, -4], [1, -5]], [[2832, 40850], [-28, -31], [-12, 37], [11, 48], [13, 12], [8, 2], [11, -45], [-3, -23]], [[5628, 39602], [-9, 0], [-12, 4], [-7, 3], [-1, 5], [3, 16], [6, 9], [12, -2], [8, -11], [1, -19], [-1, -5]], [[51664, 81077], [-28, 1], [-26, 1], [-14, 3], [-15, 9], [-7, 18], [-8, 21], [2, 14], [25, 37], [4, 11], [-3, 5], [3, 17], [19, 56], [2, 23], [-8, 16], [-13, 9], [-40, 17], [-19, 23], [-8, 21], [-9, 6], [-13, -7], [-33, -8], [-27, 11], [-32, 39], [-7, 35], [-4, 26], [-8, 10], [-11, -14], [-13, -22], [-27, -2], [-7, 5], [-2, 12], [-1, 11], [-8, 14], [-7, 8], [-34, -40], [-13, 1], [-16, 15], [-8, 15], [-17, -9], [-16, -18], [6, -35], [-9, -6], [-19, 3], [-22, 14]], [[51173, 81443], [-24, 9], [-37, 24], [-51, -20], [-36, 24], [-29, 2], [-19, 19], [-19, 31], [14, 21], [13, 7], [54, 4], [40, -13], [71, -68], [18, 1], [19, 8], [-10, 19], [-18, 9], [-26, 18], [-21, 26], [49, 8], [-7, 13], [-6, 23], [-52, 79], [9, 22], [13, 46], [16, 38], [13, 10], [22, 27], [46, 80], [30, 65], [22, 76], [32, 212], [10, 36], [15, 40], [20, -8], [13, -11], [48, 30], [83, 78], [24, 68], [24, 31], [95, 62], [52, 18], [81, 5], [59, 11], [70, 4], [27, -38], [15, -28], [25, -15], [39, -11]], [[51999, 82535], [-3, -55], [1, -108], [-3, -19], [-18, -46], [-18, -81], [-5, -54], [-5, -11], [-74, 1], [-10, -10], [-2, -11], [4, -14], [-2, -14], [-6, -11], [3, -18], [13, -20], [23, -13], [25, -1], [13, 2], [9, -14], [10, -22], [-1, -29], [-4, -37], [-11, -35], [-34, -40], [-16, -14], [-14, -8], [-7, -10], [-3, -14], [1, -12], [24, -32], [-1, -7], [-7, -17], [-9, -16], [-62, -33], [-26, 3], [-14, -16], [-5, -4], [-16, 16], [-37, 17], [-13, -6], [-8, -10], [-23, -11], [-16, -18], [0, -23], [29, -60], [10, -12], [0, -23], [14, -28], [15, -35], [1, -22], [-1, -23], [-8, -32], [-25, -75], [0, -15], [2, -11], [9, -3], [6, -6], [-2, -10], [-47, -52], [-6, -9], [-19, 3], [-3, -9], [2, -14], [8, -13], [17, -6], [14, -13], [12, -26], [-16, -89]], [[51173, 81443], [-4, -22], [-10, -24], [-37, -34], [-39, -23], [-19, 3], [-14, 12], [-7, 12], [-21, 12], [-28, 6], [-18, -13], [-12, -12], [-11, 2], [-8, 10], [-7, 16], [-8, 50]], [[50930, 81438], [21, 9], [46, 4], [35, -18], [46, -8], [36, 24], [28, -21], [31, 15]], [[51759, 82667], [-39, -20], [-10, 4], [3, 6], [34, 12], [12, -2]], [[51647, 82637], [-55, -9], [-19, 7], [-3, 6], [15, 4], [47, 1], [14, -6], [1, -3]], [[51419, 82550], [-52, -42], [-4, 6], [33, 37], [23, -1]], [[51479, 82595], [-26, -5], [-12, 8], [63, 23], [39, 7], [7, -3], [-71, -30]], [[51357, 82413], [-28, -41], [-17, 12], [-4, 9], [8, 32], [41, 53], [0, -65]], [[51096, 81646], [28, -31], [5, -10], [2, -11], [-34, -12], [-37, 38], [-24, -9], [-9, 18], [0, 12], [25, 9], [44, -4]], [[51870, 82708], [-25, -2], [7, 15], [24, 12], [13, 0], [-19, -25]], [[31054, 58838], [-14, -64], [-8, 28], [-1, 52], [-6, 20], [-11, 12], [-6, 17], [0, 26], [42, -41], [4, -50]], [[32517, 61921], [-7, -12], [-6, 1], [-4, 11], [0, 20], [5, -6], [3, -2], [1, -4], [8, -8]], [[32435, 61994], [-2, -2], [-4, 5], [1, 10], [3, 4], [2, -3], [2, -7], [-2, -7]], [[30583, 59015], [1, -16], [-13, 9], [-17, 35], [-17, 27], [4, 29], [4, 10], [18, -27], [17, -50], [3, -17]], [[30902, 58789], [-14, -8], [-54, 56], [-44, 90], [-1, 47], [11, -4], [12, -18], [17, -64], [52, -42], [21, -57]], [[74474, 67897], [11, -16], [2, -25], [-2, -29], [-12, -61], [-10, -44], [-13, -91], [-11, -158], [3, -28], [33, -91], [12, -69], [2, -48], [-14, -80], [-16, -90], [-8, -20], [-9, -7], [-40, 31], [-28, -4], [-32, -18], [-34, 4], [-27, 10], [-35, -36], [-34, 20], [-21, 22], [-15, 63], [-6, 8], [-70, -66], [-17, -4], [-44, 35], [-36, 35], [-13, 10], [-35, 14], [-31, 8], [-34, 22], [-42, -29], [-17, 3], [-16, 20], [-8, 42], [-2, 40], [-15, 27], [-22, 6], [-31, -24], [-45, -33], [-15, 6], [-13, 9], [-5, 9], [-7, 37], [-7, 9], [-10, 1], [-19, 9], [-23, 27], [-70, 66], [-9, 29], [0, 65], [-3, 27], [-9, 28], [-36, 28], [-70, 46], [-38, 37], [-19, -17], [-35, -16], [-19, -33], [-23, 11], [-54, 34], [-29, 6], [-18, -12], [-4, -20], [-22, -23], [-21, 18], [-41, 25], [-37, 13], [-55, 30], [-6, 44], [-10, 45], [-13, 7], [-50, -8], [-45, 48], [-49, 63], [-21, 20], [-13, 8], [-12, -8], [-14, -15], [-12, -4], [-26, 27], [-34, 38], [-42, 47], [-48, 66], [-20, 37], [-9, 28], [-11, 27], [-42, 43], [-34, 34], [-40, 41], [-7, 8], [-15, 24], [-23, 31], [-20, 9], [-6, -17], [-4, -18], [-17, 4], [-26, 32], [-28, 32], [-21, 31], [-22, 31], [-5, 23], [9, 71], [13, 62], [11, 13], [17, 41], [7, 71], [-1, 61], [18, 85], [23, 91], [41, 98], [18, 32], [20, 22], [37, 72], [8, 12], [17, 19], [16, 4], [12, -9]], [[72502, 69218], [13, -37], [15, -36], [18, 2], [22, 30], [45, 141], [63, 29], [59, -15], [52, -20], [16, -47], [10, -50], [6, -25], [17, -29], [74, -71], [43, -64], [59, -85], [45, -37], [39, -3], [22, -34], [33, -66], [29, -77], [35, -71], [24, 3], [33, 23], [41, 30], [24, -15], [22, -20], [7, -36], [13, -69], [15, -72], [23, -25], [28, -37], [15, -30], [51, -53], [8, -22], [10, -15], [13, -10], [10, -11], [16, -3], [60, 32], [15, -4], [10, -6], [0, -12], [-11, -50], [-9, -65], [9, -32], [25, -14], [55, -9], [75, 0], [22, -32], [23, -49], [22, -84], [9, -36], [12, -10], [19, 14], [3, 35], [1, 51], [16, 18], [11, -14], [12, -40], [30, -36], [23, -17], [21, 6], [9, 14], [10, 70], [17, 10], [21, -5], [8, -14], [9, -28], [25, -13], [26, -18], [24, -22], [33, -52], [42, -10], [48, 1], [25, -1], [19, -4], [17, 4], [49, 37], [20, 3], [25, -5], [24, -7]], [[96376, 51545], [-5, -20], [-6, 3], [-3, 13], [2, 14], [7, 6], [5, -5], [0, -11]], [[57016, 41593], [-12, 3], [-85, -19], [-33, -25], [-73, -108], [-15, 14], [-17, 22], [-15, 7], [-32, -27], [-32, -31], [-35, -44], [-29, -43], [-10, -23], [-45, -89], [-15, -15], [-13, -6], [-5, 4], [-6, 38], [-28, 90], [-45, 117], [-13, 12], [-9, 4], [-33, -6], [-96, -33], [-82, -28], [-124, -47], [-134, -39], [-83, -24], [-71, -7], [0, -116], [0, -235], [0, -235], [0, -235], [0, -235], [1, -235], [0, -235], [0, -235], [0, -235], [0, -102], [-2, -22], [-41, 0], [-94, 0], [-78, 0], [-63, 0], [0, -140], [0, -165], [0, -165], [0, -165], [0, -165], [0, -165], [0, -166], [0, -165], [0, -165], [1, -124], [0, -15]], [[54568, 35358], [-31, 47], [-91, 175], [-32, 46], [-48, 107], [-105, 334], [-15, 64], [-20, 161], [-23, 120], [-3, 69], [11, 39], [-6, 53], [-12, 47], [-36, 62], [-10, 208], [-24, 134], [5, 110], [-11, 101], [-1, 65], [5, 123], [-19, 141], [-39, 138], [-35, 199], [-5, 88], [3, 235], [-6, 95], [0, 113], [-14, 117], [-6, 63], [10, 51], [6, -16], [10, -8], [7, 67], [1, 59], [-17, 146], [-39, 149], [-97, 244], [-24, 92], [-13, 77], [-108, 321], [-46, 226], [-33, 196], [-35, 90], [-162, 634], [-36, 101], [-65, 121], [-15, 41], [-25, 115], [-48, 155], [-12, 144], [-4, 164], [6, 125]], [[53261, 41906], [45, 14], [31, 33], [28, 2], [27, -26], [29, -2], [12, 4], [52, -3], [30, 30], [36, 30], [20, 26], [29, 27], [39, 28], [21, -3], [27, -10], [36, -10], [20, -19], [24, -58], [36, -53], [28, -32], [31, -42], [9, -16], [14, -9], [8, -3], [58, 7], [53, 6], [56, 0], [106, -1], [107, 0], [106, 0], [106, -1], [106, 0], [107, 0], [106, -1], [106, 0], [44, 0], [76, -2], [80, -2], [8, -3], [9, -12], [8, -10], [28, -73], [36, -77], [30, -36], [36, -22], [33, -8], [32, 5], [52, -9], [73, -25], [76, -8], [78, 11], [55, -14], [32, -38], [33, -25], [33, -13], [45, 8], [57, 28], [49, -4], [22, -21], [14, 0], [83, 30], [68, 25], [101, 39], [83, 32], [123, 47], [87, 34]], [[59222, 43770], [12, -17], [40, -142], [32, -83], [37, -77], [6, 4], [10, 18], [19, 7], [57, 18], [23, 1], [14, 20], [30, 15], [34, 9], [12, -10], [36, -99], [5, -77], [8, -110], [2, -54], [-1, -72], [-4, -90], [-29, -104], [-6, -51], [-16, -80], [-21, -39], [-10, -33], [1, -33], [11, -28], [24, -51], [8, -32], [-2, -29], [0, -40], [6, -27], [6, -16], [25, -26], [23, -65], [41, -78], [48, -111], [23, -34], [18, -8], [9, -38], [-5, -43], [-14, -25], [6, -35], [7, -19], [9, -9], [22, -2], [19, 7], [5, 12], [-2, 167], [-15, 97], [-14, 38], [-3, 7], [5, 32], [16, 75], [14, 74], [8, 31], [10, 19], [67, 20], [31, 17], [12, 21], [10, 58], [8, 160], [3, 151], [-7, 88], [10, 133], [15, 82], [-8, 17], [-5, 111], [-44, 118], [-56, 152], [-31, 82], [-36, 94], [-65, 146], [-29, 52], [-16, 21], [-52, 17], [-14, 28], [-14, 45], [-5, 83], [0, 62], [-6, 105], [-11, 149], [-5, 44], [-15, 112], [-14, 107], [-1, 26], [5, 26], [24, 79], [18, 55], [8, 31], [14, 83], [4, 40], [11, 18], [46, 8], [37, -2]], [[61239, 45815], [15, -60], [26, -54], [-15, -31], [-19, -28], [30, -38], [-22, -57], [-3, -40], [6, -15], [5, -24], [-15, -65], [-20, -50], [-5, -38], [18, -68], [-9, -119], [17, -108], [4, -55], [6, -37], [-8, -67], [2, -111], [4, -46], [-10, -57], [17, -20], [9, -63], [-3, -71], [-5, -38], [-29, -46], [-4, -18], [1, -27], [36, -1], [2, -42], [-3, -33], [2, -63], [-5, -40], [8, -46], [-10, -51], [4, -40], [0, -51], [9, -130], [1, -160], [2, -25], [13, -18], [18, -9], [0, -44], [-21, -58], [-1, -35], [3, -50], [22, 68], [14, -1], [12, -26], [-2, -39], [4, -20], [-2, -38], [7, -48], [-3, -42], [-16, -29], [-21, -50], [-4, -48], [2, -30], [-14, -10], [-7, -19], [10, -45], [-1, -39], [-25, -123], [-68, -167], [-30, -59], [-27, -65], [0, -27], [-3, -23], [-32, -92], [-34, -15], [-20, -25], [15, -81], [-22, -19], [-39, -64], [-106, -122], [-17, -29], [-27, -75], [-35, -19], [-20, -21], [-36, -8], [-12, 6], [-12, -3], [-10, -16], [-70, -53], [-66, -42], [-16, -19], [-11, -26], [-58, -41], [-91, -103], [-74, -97], [-54, -98], [-14, -15], [-17, -33], [-5, -50], [-6, -28], [-40, -103], [-60, -121], [-11, -34], [-24, -67], [-2, -44], [-22, -14], [-18, 42], [-7, -81], [-15, -6], [-16, 17], [-40, -41], [-35, -46], [-56, -98], [-80, -191], [-116, -183], [-16, -5], [-10, 0], [-37, 64], [-20, 5], [18, -38], [12, -32], [-3, -61], [1, -93], [-14, -181], [2, -40], [16, -51], [31, -62], [30, -79], [37, -224], [3, -115], [39, -147], [1, -64], [16, -159], [-1, -128], [-3, -79], [19, -33], [7, 30], [-2, 50], [5, 80], [10, 35], [11, -5], [3, -38], [7, -33], [3, -31], [0, -43], [-14, -162], [4, -66], [19, -110], [-22, -128], [-33, -301], [-1, -52], [7, -23], [18, -7], [6, 38], [11, 0], [5, -23], [-14, -139], [-15, -61], [-51, -149], [-27, -64], [-46, -63], [-106, -98], [-215, -142], [-85, -70], [-50, -42], [-108, -132], [-47, -88], [-19, -102], [-19, -47], [-18, -59], [16, -50], [16, -39], [18, -25], [10, -22], [12, -16], [13, 80], [6, 25], [11, 2], [-6, -98], [-13, -333], [-1, -11]], [[59622, 44922], [-5, 17], [-9, 8], [-10, -7], [-4, -21], [11, -27], [12, 0], [5, 30]], [[59644, 44866], [7, 13], [3, 17], [0, 16], [-5, 11], [-7, 6], [-9, -4], [-4, -22], [-1, -31], [6, -10], [10, 4]], [[49383, 72064], [8, -43], [16, -34], [59, -78], [35, -48], [1, -17], [-12, -39], [-4, -27], [9, -29], [21, -35], [2, -17], [-5, -20], [-11, -37], [23, -111], [4, -107], [-6, -76], [0, -44], [3, -37], [20, -87], [-13, -143], [15, -78], [21, -63], [11, -113], [17, -53], [27, -47], [15, -16], [30, -39], [22, -32], [13, -48], [-27, -40], [-22, -36], [-6, -38], [10, -61], [0, -33], [-14, -11], [-56, 3], [-44, 3], [-50, 3], [-71, 6], [-44, 4], [-61, 5], [-20, -3], [-56, -17], [-39, -12], [-6, -4], [-13, -15], [-8, -45], [-8, -52], [-8, -23], [-117, -74], [-46, -11], [-26, 8], [-19, -6], [-16, -16], [-6, -24], [-1, -31], [4, -31], [11, -43], [2, -44], [-7, -30], [-2, -31], [-3, -33], [6, -18], [11, -3], [11, -15], [16, -14], [14, -26], [-1, -38], [-11, -21], [-10, -11], [-44, -10], [-35, -8], [-45, -60], [-48, -64], [-58, -42], [-25, -12], [-44, -30], [-53, -50], [-26, -80], [-32, -93], [-32, -62], [-43, -58], [-40, -23], [-51, -28], [-63, -21], [-45, -8], [-14, -4], [-39, -2], [-20, 5], [-14, 2], [-6, -6], [-2, -15], [-1, -33], [-3, -38], [-12, -32], [-9, -15], [-11, -6], [-33, 9], [-28, 10], [-66, 14], [-13, -3], [-5, -4], [-21, -22], [-32, -46], [-22, -41], [-16, -18], [-38, -10], [-17, -15], [-72, -101], [-15, -24], [-74, -88], [-21, -29], [-17, -28], [-44, -65], [-28, -28], [-5, -17], [-2, -40], [0, -87], [0, -84], [0, -122], [0, -122], [0, -140]], [[47587, 67774], [-37, 0], [0, -1], [1, -24], [8, -48], [3, -40], [-4, -25], [-4, -32], [2, -31], [6, -33], [6, -34], [0, -23], [-11, -18], [-27, -9], [-31, -8], [-23, 0], [-34, 5], [-22, -1], [-19, 0], [-16, -5], [-21, -22], [-23, -35], [-29, -46], [-17, -29], [-23, -6], [-23, 0], [-22, 23], [-14, 12], [-10, -1], [-15, -16], [-19, -12], [-17, 0], [-29, 24], [-34, 34], [-20, 17], [-29, 6], [-29, 11], [-20, -5], [-26, 0], [-34, -23], [-29, -17], [-31, -18], [-36, -16], [9, -51], [12, -28], [0, -35], [-6, -30], [-17, -28], [-20, -37], [-11, -29], [-12, -39], [-8, -24], [-15, -37], [-13, -47], [-4, -30], [-6, -33], [-10, -11], [-35, -9], [-22, -11], [-19, -12], [-8, -20], [-1, -3], [-5, -40], [0, -29], [-6, -23], [-8, -57], [-11, -53], [-9, -69], [-8, -57], [-11, -93], [-11, -86], [-14, -81], [-11, -51], [-9, -29], [-19, -35], [-17, -22], [-19, -30], [-22, -28], [-31, -35], [-25, -29], [-10, -13], [-12, -16], [-20, -40], [-16, -57], [-11, -47], [-20, -74], [-14, -41], [-8, -22], [-22, -23], [-25, -18], [-28, -23], [-22, -23], [-31, -23], [-19, -23], [-14, -34], [-11, -41], [-14, -58], [-11, -63], [-6, -40], [-16, -139], [-6, -80], [-6, -52], [-8, -64], [-5, -97], [0, -81], [-6, -46], [-3, -35], [-14, -40], [-11, -29], [-19, -40], [-17, -23], [-5, -23], [-17, -29], [-17, -46], [-14, -29], [3, -23], [3, -40], [-8, -41], [-9, -46], [-22, -57], [-25, -29], [-36, -6], [-50, 0], [-39, 6], [-47, 0], [-42, 11], [-39, 12], [-47, 6], [-33, 0], [-42, -12], [-108, 0], [-42, -6], [-61, -23], [-15, -5]], [[45276, 64182], [21, 276], [38, 149], [30, 66], [47, 35], [43, 150], [16, 138], [28, 64], [9, 50], [-11, 38], [27, 75], [32, 114], [15, 73], [38, 113], [5, 25], [-4, 29], [-15, -25], [-16, -41], [-19, -33], [8, 40], [15, 60], [34, 62], [53, 69], [110, 234], [42, 41], [37, 98], [14, 88], [4, 200], [13, 106], [24, 83], [29, 150], [22, 68], [15, 136], [16, 53], [28, 24], [40, 69], [60, 42], [71, 89], [33, 53], [23, 79], [24, 158], [42, 166], [22, 125], [1, 2], [37, 66], [26, 83], [43, 37], [90, 18], [134, 69], [120, 104], [34, 42], [37, 83], [60, 108], [114, 130], [52, 72], [79, 182], [53, 150], [44, 97], [30, 86], [21, 87], [12, 140], [-8, 55], [-33, 89], [-23, 24], [-6, 42], [12, 75], [0, 128], [7, 204], [37, 165], [91, 217], [17, 88], [10, 142], [1, 50], [114, 200], [67, 154], [23, 37], [59, 70], [205, 154], [116, 109], [68, 80], [40, 94], [112, 371], [110, 521], [9, 61], [49, 17], [35, 7], [28, 19], [34, 40], [33, -16], [-16, -27], [0, -64], [23, -75], [41, -85], [75, -107], [58, -43], [83, -26], [96, 47], [54, 1], [27, 20], [28, -30], [55, -9], [52, 16], [40, 45], [25, 51], [4, -25], [1, -28], [8, -16], [15, -66], [9, -25], [30, 4], [26, -13], [59, 6], [57, -11]], [[47587, 67774], [0, -96], [0, -118]], [[47587, 67560], [1, -96], [0, -114], [0, -114], [0, -130], [0, -129], [0, -94], [0, -66], [-57, 0], [-51, 0], [-52, 0], [-52, 0], [-52, 0], [-51, 0], [-52, 0], [-52, 0], [-52, 0], [-51, 0], [-52, 0], [-52, 0], [-52, 0], [-52, 0], [-51, 0], [-52, 0], [-52, 0], [-41, 0], [0, -69], [0, -78], [0, -79], [0, -78], [0, -78], [0, -79], [0, -78], [0, -79], [0, -78], [0, -79], [0, -78], [0, -78], [0, -79], [0, -78], [0, -79], [0, -78], [0, -79], [0, -69], [-2, -63], [-17, -19], [-40, -33], [-40, -34], [-52, -16], [-17, -11], [-33, -46], [-44, -59], [-37, -51], [-25, -67], [-9, -37], [-4, -39], [3, -37], [14, -74], [3, -37], [2, -65], [3, -71], [2, -76], [3, -76], [2, -81], [3, -81], [2, -82], [2, -61], [3, -76], [-42, 0], [-64, 0], [-63, -1], [-64, 0], [-64, 0], [-64, 0], [-63, 0], [-64, 0], [-64, -1], [-63, 0], [-64, 0], [-64, 0], [-63, 0], [-64, 0], [-64, -1], [-64, 0], [-63, 0], [-36, 0], [-11, -108], [-10, -77], [-6, -63], [4, -53]], [[45264, 63828], [-14, 29], [25, 300], [1, 25]], [[55651, 76513], [-36, -17], [-7, -25], [-17, 3], [-21, 0], [-7, -16], [10, -27], [7, -31], [-5, -43], [-2, -6]], [[55573, 76351], [-5, 2], [-30, -25], [-22, -12], [-20, -6], [-9, 12], [-5, 17], [1, 47], [-4, 16], [-6, 7], [-14, -11], [-16, -36], [-15, -42], [-22, -45], [-18, -42], [-19, -53], [-14, -44], [14, -25], [9, -35], [-3, -26], [3, -15], [-5, -46], [-1, -28]], [[55372, 75961], [-43, 46], [-18, 64], [-63, 109], [-73, 74], [-4, 12], [4, 14], [4, 11], [-15, 1], [-11, -9], [-10, 3]], [[55143, 76286], [-11, 27], [-11, 24], [0, 22]], [[55121, 76359], [5, 2], [7, 9], [15, 23], [3, 13], [-1, 18], [-21, 60], [-3, 38], [-3, 72], [4, 17], [8, 8], [38, 9], [-1, 56], [2, 17], [8, 23], [5, 21], [21, 31], [28, 36], [12, 1], [11, -5], [12, -31], [14, 4], [2, 37], [-17, 49], [-9, 31], [3, 18], [6, 9], [15, -6], [14, -9], [10, 6], [14, 5], [8, -2]], [[82411, 80543], [-26, -80], [-52, -161], [-44, -135], [-23, -77], [-17, -58], [-18, -56], [-3, -33], [-19, -54], [-37, -64], [-8, -70], [1, -63], [-3, -57], [-41, -35], [-32, -32], [10, -107], [16, -41], [26, -43], [28, -35], [24, -30], [27, 14], [22, 45], [44, 40], [24, 1], [16, -9], [38, -3], [38, 14], [31, 3], [39, -9], [14, -10], [33, -17], [35, -38], [25, -43], [18, -8], [9, 14], [20, 37], [27, 37], [34, 60], [26, 45], [20, 7], [38, 0], [18, 11], [29, 6], [26, -17], [71, -9], [20, -23], [34, -70], [19, -37], [33, -19], [21, -13], [18, -10], [17, -18], [5, -22], [7, -33], [11, -19], [20, -19], [16, -11], [4, -25], [5, -11], [14, -17], [42, -72], [20, -20], [31, -41], [13, -35], [1, -36], [8, -28], [20, -41], [10, -29], [-4, -38], [4, -34], [-8, -35], [-34, -25], [-11, -13], [-24, -1], [-41, 13], [-39, -7], [-47, 14], [-37, 31], [-20, 25], [-32, 14], [-15, -7], [-18, -32], [-21, 5], [-19, -5], [-49, 6], [-26, 8], [-42, -22], [-24, -7], [-45, -27], [-27, -47], [-20, -11], [-19, 2], [-14, 17], [-21, 21], [-30, -1], [-9, -9], [-4, -19], [-10, -58], [0, -26], [-6, -17], [-18, -6], [-32, 2], [-49, 4], [-33, 15], [-20, -7], [-27, -31], [-20, -5], [-15, -14], [-13, -46], [-20, -29], [-24, -36], [-26, -77], [-14, -44], [4, -24], [3, -28], [-12, -33], [-24, -30], [-20, -6], [-29, -29], [-40, -53], [-30, -44], [-40, -11], [-27, -11], [-62, -14], [-15, -3], [-68, -7], [-50, 24], [-26, -4], [-24, -13], [-11, -15], [-5, -28], [-4, -25], [-19, -40], [-38, -53], [-32, -35], [-24, -45], [-14, -17], [-27, -17], [-15, -10], [-35, -40], [-28, -36], [-18, -10], [-22, 9], [-14, 3], [-43, 14], [-29, 2], [-41, 9], [-95, 42], [-31, 20], [-27, 54], [-24, 27], [-34, 3], [-49, 0], [-23, 10], [-37, -10], [-41, -54], [-19, -41], [-17, -41], [-20, -89], [-9, -60], [-8, -33], [-21, -53], [-3, -30], [8, -26], [16, -29], [9, -46], [23, -49], [22, -38], [43, -61], [12, -33], [14, -36], [3, -36], [-2, -24], [-16, -18], [-29, -9], [-15, -25], [-21, -33], [-26, -39], [-13, -2], [-14, -10], [-74, -48], [-27, -13], [-22, -16], [-27, -49], [-20, -36], [-25, -48], [-11, -21], [-23, -48], [-30, -55], [-16, -30], [-9, -17], [-8, -23], [-31, -18], [-26, -19], [-38, -28], [-55, -32], [-45, -30], [-29, -25], [-42, -31], [-29, -10], [-57, 1], [-72, -8], [-52, -6], [-39, 7], [-59, 5], [-45, 6], [-30, -12], [-72, -12], [-16, -3], [-126, -30], [-56, -16], [-52, -7], [-37, -12], [-22, -14], [-31, -21], [-17, -9], [-56, -41], [-125, -84], [-84, -69], [-13, -12], [-57, -48], [-32, -19], [-23, -43], [-18, -27], [-19, -12], [-34, 28], [-24, -2], [-77, 11], [0, 125], [-53, -17], [-86, -29], [-79, -26], [-73, 60], [-56, 47], [-48, 40], [-74, 26], [-65, 23], [-116, 38], [-51, 33], [-26, 45], [-46, 99], [-15, 20], [-22, 14], [-24, 8], [-50, 0], [-62, 8], [-88, 21], [-71, 16], [-120, 32], [-29, 3], [-62, -27], [-81, -36], [-145, 28], [-64, 13], [-130, 26], [-147, 30], [-142, 31], [-104, -17], [-57, -9], [-67, -14], [-9, 15], [-3, 59], [-12, 46], [-36, 50], [-25, 47], [-46, 63], [-15, 40], [-5, 62], [-43, 162], [-27, 109], [-6, 22], [-12, 36], [-15, 18], [-32, 12], [-8, 19], [0, 38], [5, 52], [6, 38], [-5, 9], [-83, -10], [-51, 25], [-43, 27], [-60, 70], [-36, 27], [-46, 73], [-67, 17], [-25, 28], [-32, 62], [-27, 40], [-39, 25], [-62, 23], [-105, 21], [-35, 9], [-58, -14], [-43, -2], [-70, 16], [-40, 19], [-49, 0], [-32, 0], [-43, 4], [-20, 13], [-19, 15], [-36, -4], [-25, 16], [-24, 28], [-24, 13], [-27, 0], [-11, -13], [-10, 1], [-7, 39], [-25, 62], [-4, 28], [-15, 32], [-9, 29], [3, 40], [10, 78], [24, 71], [16, 18], [10, 21], [20, 37], [12, 29], [-2, 40], [-14, 41], [-10, 54], [2, 31], [15, 37], [17, 81], [-1, 21], [-7, 17], [-2, 38], [-3, 51], [-21, 77], [-11, 41], [-20, 18], [-23, 11], [-20, 55], [-25, 66], [-16, 41], [-5, 25], [-3, 45], [-12, 56], [-12, 30], [-9, 23], [-5, 34], [-5, 12], [-34, 15], [-24, 25], [-10, 33], [-4, 27], [-7, 16], [-19, 5], [-14, -24], [-22, -12], [-14, 2], [-15, 14], [-9, 16], [-15, 17], [-22, 55], [-22, 14], [-42, -2], [-37, -26], [-22, 4], [-19, 9], [-22, 27], [-14, 23], [-22, 7], [-44, 40], [-29, 28], [-3, 56], [-14, 39], [-28, 11], [-29, 39], [-42, 22], [-27, 16], [-23, 10], [-3, 15], [1, 13], [11, 21], [11, 20], [2, 19], [-9, 16], [-23, 17], [-31, 15], [-6, 26], [-19, 26], [4, 21], [14, 16], [15, 12], [3, 19], [-10, 19], [-5, 28], [2, 20], [-3, 27]], [[52066, 77044], [-17, -10]], [[52049, 77034], [1, 12], [4, 7], [5, 3], [6, -5], [1, -7]], [[23015, 66797], [-5, -119], [-17, -97], [-55, -203], [-24, -126], [-44, -360], [-14, -236], [-3, -111], [-4, -15], [4, -17], [-10, -245], [5, -210], [-3, -32], [-17, -63], [-11, -88], [5, -39], [-1, -27], [17, -133], [5, -100], [50, -171], [28, -60], [34, -51], [13, -30], [-6, -72], [-14, -37], [-6, -59], [-7, 49], [2, 62], [11, 34], [1, 25], [-21, 26], [-37, 86], [-45, 153], [32, -244], [11, -39], [9, -16], [14, -17], [4, -27], [0, -19], [40, -170], [45, -175], [3, -48], [18, -58], [114, -246], [70, -184], [25, -174], [15, -54], [7, -75], [46, -83], [14, -54], [24, -30], [20, -90], [38, -53], [-9, -1], [-33, 27], [2, -18], [28, -37], [54, -37], [13, 0], [-21, 19], [-18, 26], [6, 4], [38, -32], [105, -11], [47, -75], [60, -32], [32, -96], [38, -100], [24, -5], [19, 0], [56, 17], [88, 63], [30, 30], [59, 42], [90, 8], [28, -12], [67, 26], [33, 32], [11, 29], [5, 22], [62, 30], [13, 6], [63, 6], [31, 11], [35, 7], [26, -45], [0, -22], [-17, -21], [8, -20], [31, -34], [56, -13], [19, 5], [26, 49], [46, 48], [-1, 55], [-9, 31], [-13, 2], [-3, 17], [9, 40], [-2, 14], [-29, -39], [-6, 0], [3, 18], [6, 15], [83, 85], [22, 35], [28, 31], [60, 115], [13, 218], [12, 38], [40, 67], [4, 20], [3, 45], [-1, 114], [2, 90], [-2, 102], [7, 90], [7, 26], [23, 145], [47, 64], [82, 76], [19, 13], [261, 80], [37, 20], [45, 52], [33, 17], [60, -1], [18, 7], [4, 7], [0, 7], [11, 7], [34, -7], [65, -31], [24, -8], [58, -36], [63, -15], [10, 6], [8, 11], [6, 22], [-6, 18], [-6, -1], [-11, -10], [-13, -1], [-25, 15], [5, 13], [25, -1], [17, 6], [24, 22], [26, -16], [35, -75], [24, -24], [2, -108], [4, -19], [8, -29], [-12, -84], [-13, -69], [-17, -57], [-37, -89], [-45, -71], [-56, -159], [-13, -75], [1, -59], [9, -58], [-3, -21], [-6, -22], [-12, 2], [-22, -28], [-28, -82], [-1, -25], [13, -23], [16, 11], [21, 1], [12, 7], [12, -2], [-3, -47], [-13, -33], [-8, -11], [-15, -5], [-17, -19], [-9, -18], [1, -54], [9, -4], [20, 40], [12, -2], [2, -17], [-26, -139], [-16, -143], [-23, -82], [-8, -121], [-11, -51], [-14, -51], [-8, 3], [-21, 96], [-23, 25], [-4, 23], [12, 117], [-6, 65], [-11, -3], [-15, -35], [-19, -31], [0, -45], [-22, -73], [-6, -25]], [[25473, 62483], [-21, 6], [-25, -3], [-17, -18], [-18, -89], [-43, -126], [-18, -62], [-14, -21], [-11, -8], [-13, 15], [-29, 34], [-24, -17], [-8, -39], [1, -50]], [[25233, 62105], [-59, 0], [-99, 0], [-126, 0], [-122, 0], [-102, 1], [0, -113], [-1, -100], [0, -112], [-56, 1], [-60, 1], [5, -12], [20, -21], [27, -50], [31, -78], [38, -63], [44, -46], [29, -46], [14, -44], [8, -38], [0, -32], [16, -24], [29, -17], [15, -28], [0, -22], [-9, -52], [-3, -57], [4, -52], [-21, -1], [-51, 0], [-76, 0], [-71, 0], [-56, 0], [-84, 0], [-23, -80], [-38, -132], [-35, -119], [-29, -101], [-5, -26], [0, -22], [36, -94], [-6, -27], [-13, -15], [-4, -22], [1, -36], [-9, -47], [3, -33], [5, -41], [-8, -35], [-6, -34], [-7, -15]], [[24379, 60221], [-8, 13], [-74, 157], [-78, 172], [-30, 56], [-29, 43], [-40, 79], [-104, 174], [-54, 80], [-50, 95], [-45, 53], [-45, 34], [-20, 20], [-17, 26], [-10, 2], [-5, -35], [16, -18], [19, -15], [14, -1], [16, -13], [46, -48], [7, -25], [-130, 97], [-53, 9], [-6, 15], [27, 50], [-9, 18], [-9, 3], [-28, -35], [-11, -2], [-2, 23], [1, 21], [-18, 32], [-11, -1], [-10, -22], [-25, -42], [1, -17], [49, -18], [16, -10], [-3, -11], [-42, 0], [-51, -19], [-92, -116], [-86, -50], [-122, -113], [-54, -5], [-29, -18], [-82, 43], [-105, 105], [-158, 33], [-107, 138], [-106, 57], [-67, 132], [-41, 6], [-26, 21], [-96, 48], [-95, 32], [-93, 115], [-61, 37], [-52, 46], [-115, 79], [-43, 43], [-41, 68], [-66, 69], [-28, 59], [-32, 21], [-45, 109], [-23, 47], [-20, 21], [-21, 8], [-62, -9], [-91, 48], [-43, 12], [-88, 72], [-118, 80], [-39, 91], [-32, 86], [-60, 113], [-37, 48], [-64, 57], [-36, 46], [-55, 35], [-93, 91], [-29, 77], [-18, 68], [-49, 83], [-55, 156], [-14, 57], [-10, 88], [-13, 51], [-15, 39], [8, 29], [27, 36], [46, 8], [33, 39], [4, 32], [-2, 19], [-21, 49], [-26, 13], [-20, 1], [-5, 18], [15, 20], [18, 48], [25, 58], [18, 53], [4, 75], [-3, 76], [7, 63], [-62, 74], [-7, 31], [-19, 84], [-34, 98], [1, 195], [-41, 173], [-42, 86], [-22, 30], [-59, 134], [-46, 77], [-46, 146], [-45, 93], [-58, 156], [-41, 78], [-189, 262], [11, 0], [55, -64], [9, 5], [2, 32], [-7, 37], [-10, 9], [-15, -8], [-20, 8], [-10, 12], [-29, 8], [-38, 44], [-16, 45], [-1, 52], [-54, 110], [-20, 62], [10, -5], [14, -25], [15, -7], [17, 0], [12, 10], [-4, 18], [-12, 15], [-78, 58], [-26, 41], [-64, 68], [-15, 24], [-10, 65], [-16, 3], [-13, -18], [-38, -18], [-10, 21], [-1, 20], [27, 22], [24, 61], [0, 22], [-14, -25], [-20, -28], [-21, -15], [-32, -13], [-16, 9], [-14, 14], [-22, 54], [-11, 176], [20, 61], [23, 61], [20, 35], [11, -27], [12, -3], [-9, 31], [-19, 28], [-7, 29], [-1, 26], [-9, 48], [-57, 102], [-54, -8], [-22, 3], [-20, 39], [-17, 65], [-9, 55], [-1, 29], [-5, 29], [-93, 48], [-28, 41], [-27, 51], [-12, 42], [-11, 32], [-9, 54], [-7, 63], [11, 82], [13, 39], [-64, 30], [-24, 1], [-21, -16], [-18, 21], [-37, 24], [-45, 85], [-53, 155], [-57, 50], [-19, 54], [-24, 48], [-20, 60], [-4, 26], [-6, 15], [-29, 42], [-32, 71], [-9, 57], [-8, 87], [-22, 31], [-21, 14], [-5, 41], [2, 24], [-7, 44], [-44, 105], [-23, 87], [-12, 27], [-11, 39], [-6, 81], [-18, 101], [-36, 120], [-29, 82], [-15, 82], [7, 83], [-5, 51], [-4, 12], [3, 17], [10, -9], [8, 15], [-1, 53], [-10, 16], [-29, 17], [-12, 11], [-70, 22], [-39, 30], [-3, 70], [-19, 32], [-16, 20], [-52, 41], [-9, -21], [-7, -39], [-21, -8], [-19, -2], [-32, 27], [-79, 103], [-17, 17], [-25, 9], [-12, 16], [-53, 55], [11, -29], [15, -30], [14, -87], [-16, -63], [-10, -220], [11, -44], [23, -70], [16, -112], [5, -82], [14, -66], [-4, -155], [5, -47], [22, -77], [41, -73], [9, -38], [53, -55], [33, -72], [65, -98], [20, -42], [58, -152], [2, -46], [11, -56], [33, 12], [15, -42], [-2, -20], [4, -15], [17, 3], [15, -11], [31, -166], [17, -22], [21, -10], [24, -18], [1, -42], [-1, -34], [21, -49], [-4, -66], [17, -56], [-3, -55], [7, -43], [50, -97], [62, -77], [13, -101], [26, -93], [25, -23], [27, -39], [-4, -40], [2, -24], [35, -73], [6, -94], [30, -61], [9, -4], [6, 9], [-22, 61], [-10, 40], [-2, 63], [8, 8], [62, -99], [7, -74], [21, -42], [1, -56], [13, -34], [4, -49], [20, -80], [1, -112], [10, -82], [40, -125], [32, -26], [6, -61], [33, -159], [38, -87], [19, -73], [3, -45], [-14, -68], [-2, -47], [21, -143], [31, -73], [35, -18], [6, -10], [-3, -20], [12, -18], [13, 23], [7, 32], [-7, 37], [-1, 27], [6, 19], [11, 3], [67, -98], [11, -38], [25, -43], [23, -55], [9, -42], [19, -36], [9, -81], [46, -37], [25, -68], [2, -43], [-12, -110], [-11, -31], [-37, -47], [-27, -56], [-27, -34], [-27, -21], [-23, 4], [-23, 65], [-26, 193], [-18, 41], [-12, 61], [-20, 50], [-75, 76], [-37, 81], [-37, 53], [-39, 78], [-106, 129], [-44, 66], [-29, 65], [-19, -1], [-14, -7], [-6, 18], [-1, 33], [-6, 22], [-62, 98], [-13, 55], [-3, 62], [14, 162], [6, 95], [-4, 49], [-6, 6], [-6, 27], [-2, 78], [-15, 84], [-56, 174], [-41, 34], [-37, 25], [-101, 154], [-27, 76], [-7, 44], [-3, 89], [-14, -52], [-19, -38], [-42, 3], [-48, -43], [-29, 40], [-15, 46], [-24, 55], [-26, 11], [-17, 2], [-31, 68], [-26, 21], [-36, 9], [-32, 34], [-9, 38], [-5, 53], [-12, 32], [-49, 62], [-39, 69], [-38, 45], [-11, 36], [-1, 25], [59, -7], [71, -27], [34, 8], [21, 25], [20, 18], [3, -19], [-4, -37], [20, -33], [26, -27], [19, 3], [-18, 29], [-12, 60], [5, 22], [0, 29], [-26, -6], [-4, 15], [23, 45], [25, 120], [13, 118], [-27, 103], [-46, 72], [-98, 210], [-59, 108], [-17, 40], [-16, 19], [-48, 25], [-40, 60], [-71, 85], [-30, 44], [-21, 104], [-16, 14], [5, 71], [-7, 127], [-12, 32], [-38, 31], [-9, 86], [-2, 82], [-8, 57], [-65, 96], [-3, 46], [0, 44], [-7, 44], [-35, 91], [-42, 79], [-14, 38], [-2, 77], [-15, 21], [6, 5], [13, -2], [8, 10], [1, 54], [-63, 84], [-18, 116], [-34, 61], [-8, 23], [-18, 109]], [[25850, 63538], [-15, -18], [-7, 64], [11, 61], [14, 36], [28, 4], [18, 12], [2, -16], [-15, -48], [-36, -95]], [[20416, 64291], [-8, -47], [-21, 19], [-8, 30], [-1, 48], [11, 9], [17, -21], [4, -14], [6, -24]], [[19190, 62638], [-17, -12], [-24, 36], [6, 27], [14, 19], [14, -35], [7, -35]], [[19287, 66246], [8, -65], [-15, 10], [-18, 35], [-13, 44], [1, 20], [3, 4], [26, -26], [8, -22]], [[18568, 68578], [-2, -10], [-29, 35], [-64, 122], [-23, 61], [-4, 28], [2, 64], [22, -8], [25, -42], [12, -40], [0, -45], [48, -21], [7, -98], [6, -46]], [[18008, 68012], [-4, -19], [-47, 39], [26, 67], [-4, 70], [12, 15], [10, -23], [13, -90], [-6, -59]], [[18832, 68551], [-21, -136], [-21, 2], [-44, 43], [-5, 27], [17, 157], [13, 21], [39, 21], [6, -19], [4, -47], [12, -69]], [[17155, 68514], [-12, -22], [-32, 120], [0, 29], [9, 15], [15, -3], [0, -30], [13, -26], [5, -24], [2, -59]], [[25913, 64077], [4, -28], [-4, 4], [-7, 21], [-4, 26], [4, 1], [3, -9], [4, -15]], [[24532, 62601], [-31, -13], [-6, 13], [63, 58], [11, -2], [4, -8], [-33, -28], [-8, -20]], [[19498, 65755], [-6, -3], [-14, 31], [-6, 75], [3, 8], [27, -93], [-1, -11], [-3, -7]], [[18140, 70106], [-9, -2], [-17, 26], [1, 25], [4, 2], [17, -21], [6, -19], [-2, -11]], [[19139, 66831], [3, -20], [-2, -6], [-11, 14], [-19, -86], [-6, -8], [12, 118], [12, 17], [13, 3], [-2, -32]], [[18972, 65894], [-3, -27], [-84, 108], [20, 10], [23, -8], [44, -83]], [[18873, 65982], [-6, -7], [-24, 67], [-3, 46], [-10, 19], [-24, 15], [21, 93], [17, 193], [8, -35], [-18, -195], [1, -26], [8, -24], [10, -40], [1, -44], [16, -40], [3, -22]], [[66014, 40043], [-36, -17], [-39, 6], [-15, 31], [-3, 13], [13, 12], [-1, 39], [7, 63], [8, 26], [20, 23], [8, 51], [17, 34], [22, 4], [22, -63], [16, -66], [-3, -65], [-16, -25], [-5, -38], [-15, -28]], [[45451, 63194], [-17, -56], [-8, 22], [-3, 37], [15, 52], [8, 28], [14, 9], [-9, -92]], [[45406, 60966], [0, 258], [15, 97], [5, 85], [33, 187], [38, 153], [36, 204], [14, 197], [-5, 193], [-11, 172], [-18, 113], [-17, 164], [-26, 87], [-47, 76], [-11, 44], [11, 16], [29, 12], [18, 59], [-38, -23], [44, 181], [14, 123], [-2, 81], [9, 50], [-35, 108], [-26, 136], [-14, 22], [-14, 11], [-1, -32], [-8, -29], [-17, 18], [-29, 99], [-41, 161], [-15, 17], [-12, -23], [-7, -21], [-14, -134]], [[47587, 67560], [53, -63], [52, -64], [52, -64], [52, -64], [53, -63], [52, -64], [52, -64], [52, -63], [53, -64], [52, -64], [52, -63], [52, -64], [53, -64], [52, -64], [52, -63], [52, -64], [44, -53], [67, -86], [63, -80], [63, -81]], [[48660, 66241], [-97, 0], [-130, 0], [-89, 0], [-91, 0], [-85, -1], [7, -131], [8, -143], [8, -143], [8, -144], [8, -143], [8, -143], [8, -143], [8, -143], [8, -144], [7, -143], [8, -143], [8, -143], [8, -144], [8, -143], [8, -143], [8, -143], [8, -144], [8, -143], [8, -143], [8, -143], [7, -144], [8, -143], [8, -143], [8, -143], [8, -144], [8, -143], [8, -143], [8, -143], [8, -143], [8, -144], [8, -143], [7, -143], [8, -143], [8, -139], [33, -73], [42, -92], [-12, -129], [-15, -155], [-16, -169], [-58, 0], [-57, 0], [-57, 0], [-56, 0], [-57, 0], [-57, 0], [-56, 0], [-57, 0], [-57, 0], [-56, 0], [-57, 0], [-57, 0], [-56, 0], [-57, 0], [-57, 0], [-56, 0], [-57, 0], [-53, 0], [-32, 4], [-12, 13], [-4, 87], [-10, -5], [-11, -26], [-6, -28], [2, -36], [-2, -31], [-36, -12], [-49, -21], [-52, -16], [-52, 6], [-18, 7], [-19, 12], [-42, 12], [-22, 2], [-26, -3], [-31, -7], [-10, -16], [-23, -66], [-22, -75], [-15, 0], [-16, 42], [-45, 78], [-55, 102], [-24, 51], [-14, 7], [-26, -37], [-22, -35], [-23, -50], [-11, -47], [-8, -57], [-4, -66], [-8, -78], [-19, -62], [-23, -47], [-16, -22], [-7, -13], [-49, 37]], [[54046, 72495], [-10, -19], [-26, 1], [-24, 29], [0, 61], [27, -12], [25, -41], [8, -19]], [[53975, 72596], [-16, -9], [-17, 17], [-4, 11], [23, 9], [12, -8], [4, -15], [-2, -5]], [[48660, 66241], [85, -110], [77, -104], [91, -124], [91, -123], [91, -123], [91, -124], [90, -123], [91, -123], [91, -124], [91, -123], [91, -123], [91, -124], [91, -123], [91, -123], [91, -124], [91, -123], [91, -123], [91, -124], [41, -55], [3, -23], [4, -46], [-2, -52], [0, -43], [12, -29], [23, -31], [89, -91], [7, -18], [3, -37], [11, -47], [19, -27], [22, -20], [26, -14], [81, -14], [17, -22], [35, -84], [19, -16], [54, -25], [38, -13], [17, -8], [35, -23], [38, -38], [20, -35], [0, -11], [0, -30], [0, -91], [7, -50], [8, -36], [-1, -22], [-9, -16], [-8, -19], [-4, -25], [-11, -32], [-9, -36], [4, -27], [15, -18], [23, -34], [19, -14], [9, -1], [12, 1], [11, 4], [68, 26], [63, 25], [88, 34]], [[50060, 60432], [-58, 42], [-68, 43], [-47, -27], [-8, 10], [-6, 18], [-23, 10], [-36, -5], [-26, -12], [-41, -64], [-31, -55], [-8, -13], [-43, -33], [-80, -78], [-46, -57], [-10, -11], [-21, -13], [-31, -3], [-26, -14], [-23, -151], [-16, -15], [-95, 61], [-19, -9], [-17, -18], [-53, -88], [-27, -71], [-14, -95], [2, -29], [0, -32], [-9, -18], [-13, -7], [-12, 1], [-44, 20], [-14, -9], [-6, -46], [1, -102], [-10, -69], [-26, -22], [-20, -27], [-16, -8], [-14, 7], [-77, 103], [-26, 17], [-29, -12], [-28, -44], [-12, -28], [-17, -34], [-20, -45], [5, -39], [14, -44], [10, -55], [-1, -50], [-70, -70], [6, -24], [10, -28], [0, -51], [-2, -89], [-14, -33], [-18, -31], [-12, -42], [-11, -20], [-20, -25], [-27, -25], [-48, -23], [-38, -15], [-14, -14], [-20, -30], [-16, -36], [-4, -39], [3, -44], [6, -37], [7, -25], [4, -31], [-6, -85], [-14, -97], [-13, -44], [-21, -24], [-19, -27], [6, -64], [4, -92], [-6, -73], [0, -45], [-8, -48], [-5, -33]], [[48465, 57848], [-9, 8], [-38, -3], [-42, -26], [-14, -20], [-3, -27], [-10, -19], [-13, -20], [-13, -26], [-23, 4], [-22, 18], [-11, 17], [-1, 10], [7, 25], [6, 27], [1, 18], [-8, 43], [-6, 47], [3, 23], [-6, 70], [-3, 3], [-29, -18], [-10, -4], [-6, -8], [-2, -13], [7, -44], [-5, -8], [-16, 1], [-23, 15], [-25, 40], [-6, -13], [-3, -32], [-1, -38], [6, -69], [-7, -25], [-16, 5], [-23, 0], [-19, -7], [-13, -2], [-8, -24], [-4, -28], [8, -31], [-1, -12], [-6, -12], [-8, -7], [-6, 0], [-18, 34], [-22, 13], [-50, 19], [-6, 47], [-8, 1], [-12, 24], [-11, 32], [-10, -1], [-8, -9], [-28, 3], [-24, -49], [-18, -61], [-20, -29], [-21, -13], [-8, 0]], [[47780, 57697], [4, 38], [-3, 28], [-6, 25], [-62, 67], [-10, 28], [-9, 76], [-7, 76], [1, 44], [4, 40], [-2, 31], [-6, 24], [-19, 22], [-20, 11], [-24, -30], [-12, -5], [-11, 2], [-6, 10], [1, 16], [27, 81], [13, 34], [16, 26], [10, 14], [7, 20], [1, 15], [-3, 12], [-17, 14], [-28, 38], [-14, 4], [-12, 18], [-13, 59], [-6, 11], [-13, 6], [-12, 15], [1, 77], [0, 66], [-27, 108], [-10, 67], [-13, 69], [-12, 33], [-22, 27], [-26, 19], [-24, 4], [-18, -6], [-8, -8], [0, -13], [15, -44], [2, -24], [-2, -24], [-5, -16], [-13, -2], [-23, -13], [-28, -27], [-19, -22], [-16, -58], [-11, -8], [-18, 8], [-53, 42], [-44, 35], [-30, 21], [-18, -13], [-9, -7], [-26, -23], [-34, -86], [-8, -28], [-7, -9], [-9, -15], [-9, 0], [-7, 10], [-3, 6], [-17, 62], [-20, 68], [-15, 30], [-20, 2], [-17, -22], [-18, -43], [-22, -41], [-14, -12], [-13, 7], [-30, 51], [-22, 36], [-3, 18], [8, 28], [8, 42], [8, 34], [8, 15]], [[70393, 53704], [-6, -1], [-4, 10], [1, 14], [5, 10], [7, 1], [4, -9], [-2, -14], [-5, -11]], [[70419, 54242], [-4, -6], [-5, 2], [-2, 7], [3, 10], [3, 13], [3, 14], [4, 7], [3, -2], [0, -8], [-2, -11], [-1, -14], [-2, -12]], [[78361, 55438], [48, -22], [18, -18], [54, -178], [71, -126], [30, -46], [23, -23], [32, -67], [28, -84], [61, -237], [10, -105], [5, -159], [-14, -240], [-16, -119], [3, -57], [22, -86], [-6, -82], [4, -68], [-2, -189], [13, -55], [15, -36], [76, -112], [6, -41], [37, -143], [70, -310], [19, -139], [-2, -38], [-8, -15], [-21, -14], [-17, 27], [-6, 20], [2, 24], [-7, 24], [-16, 28], [-10, 26], [3, -42], [0, -55], [-21, -5], [-28, 17], [-34, -15], [-40, -68], [-19, -2], [-15, 58], [-8, 39], [-12, 28], [-127, 142], [-47, 37], [-50, 107], [-112, 119], [-71, 116], [-30, 71], [-73, 64], [-31, 74], [-16, 15], [-15, 27], [16, 72], [-7, 76], [-8, 64], [-51, 126], [-25, 88], [-49, 87], [-19, 51], [-18, 58], [11, 21], [11, 12], [-10, 43], [-27, 74], [-13, 85], [0, 160], [-39, 226], [-34, 313], [6, 110], [-9, 119], [-22, 114], [-29, 82], [-11, 67]], [[82659, 54245], [-11, 1], [-24, 12], [-48, 61], [-49, 22], [-71, 2], [-41, 8], [-16, -9], [-14, 0], [-10, 12], [-11, 6], [-27, -36], [-13, 11], [-14, 16], [-23, 5], [-28, -5], [-32, -37], [-34, 34], [-10, -1], [-7, -8], [-15, -46], [-29, -35], [-14, -64], [-9, -61], [-7, -21], [-3, -119], [-4, -57], [7, -76], [-1, -32], [-13, -49], [-2, -11], [-6, -77], [2, -21], [-1, -25], [-11, -54], [-20, -15], [-20, -9], [-18, 19], [-16, -30], [-20, -46], [-8, -31], [0, -29], [2, -19], [-4, -20], [-1, -21], [1, -30], [14, -13], [14, -26], [-1, -25], [-7, -17], [-18, -27], [-33, -55], [-37, -47], [-14, -11], [-5, -22], [-2, -29], [8, -64], [7, -18], [5, -23], [-5, -26], [-4, -23], [-14, -15], [-13, -10], [-5, -19], [-7, -76], [-8, -40], [-18, -59], [-6, -27], [-9, -9], [-35, 28], [-31, -17], [-41, -11], [-35, 2], [-27, -12], [-19, -31], [-21, -40], [-22, -29], [-16, -14], [-30, 41], [-16, -3], [-27, 14], [-65, 47], [-16, 13], [-17, 2], [-5, 13], [3, 23], [-3, 29], [-13, 11], [-129, -4], [-38, -26], [-25, -20], [-18, -23], [-5, -59], [-11, -54], [-14, -58], [-43, -17], [-32, -59], [-11, -7], [-21, 9], [-24, 5], [-17, -17], [-17, 1], [-55, 28], [-51, 4], [-30, -14], [-16, -5], [-89, -81], [-31, -9], [-12, 12], [-17, 33], [-24, 32], [-55, 112], [-21, 26], [-14, 27], [-13, 32], [-18, 35], [-17, 24], [-23, 48], [-22, 53], [-5, 93], [-18, 17], [-7, 24], [-2, 28], [25, 76]], [[80452, 53011], [18, -80], [7, -18], [40, -54], [33, -27], [36, -11], [37, -2], [15, 4], [14, 10], [14, -11], [76, -88], [30, -15], [31, 6], [13, -8], [44, -67], [13, -8], [22, 5], [-28, 30], [-18, 22], [-8, 41], [4, 44], [18, 29], [12, 31], [5, 94], [8, 48], [14, 46], [5, 43], [-16, 34], [-4, 57], [3, 47], [10, 33], [15, -22], [15, -19], [15, 2], [11, 7], [2, 25], [-3, 43], [1, 78], [19, 63], [31, 43], [29, 21], [108, 35], [172, 89], [51, 35], [19, 18], [15, 25], [27, 80], [50, 125], [35, 103], [74, 151], [59, 139], [8, 26], [9, 76], [1, 36], [-2, 36], [8, 17], [12, 10], [3, 0]], [[81684, 54488], [8, -16], [21, -22], [15, -28], [10, -37], [8, -34], [0, -29], [10, -24], [26, -4], [8, -30], [18, -52], [17, -37], [10, -14], [13, 7], [19, 34], [14, 42], [10, 56], [-8, 9], [14, 42], [2, 22], [-6, 21], [-8, 20], [-3, 51], [-5, 66], [-4, 29], [11, 22], [22, 27], [22, 31], [23, 25]], [[81951, 54665], [1, -45], [-1, -75], [7, -63], [15, -110], [18, -15], [21, -10], [12, 3], [8, 7], [2, 9], [-13, 44], [-3, 102], [-11, 67], [-17, 67], [-7, 19]], [[81983, 54665], [65, 19], [14, 21], [26, 46], [10, 26], [7, 58], [-32, 34], [-12, 44], [-1, 48], [38, 88], [13, 21], [6, -31], [17, -8], [15, -1], [16, 2], [22, 44], [12, 64], [39, 91], [14, 70], [8, 72], [99, 226], [12, 36], [59, 227], [7, 7], [16, -22], [4, -72], [-2, -31], [-9, -47], [-6, -49], [7, 1], [28, 30], [29, 79], [17, 69], [14, 30], [28, -17], [6, -12], [-2, -49], [3, -29], [11, -61], [24, -37], [33, -24], [31, -34], [10, -22], [6, -27], [7, -45], [0, -44], [-22, -44], [10, -71], [-2, -41], [-7, -35], [-33, -33], [88, 33], [22, 18], [30, 47], [16, -41], [15, -69], [-12, -18], [-38, -26], [-2, -10], [13, -36], [16, 3], [31, 24], [29, 38], [14, 0], [15, -8], [29, -24], [16, -20], [13, -26], [9, -53], [33, -19], [68, -75], [12, -7], [14, -1], [35, 9], [13, -10], [9, -27], [3, -34], [-1, -36], [-4, -27], [-8, -22], [-25, -34], [-61, -45], [-66, -34], [-34, 2], [-47, 29], [-17, -3], [-17, -14], [-21, -92], [39, -92], [66, -96], [9, -24], [-2, -29], [-11, -18], [-14, -9], [-37, -16], [-38, -11], [-30, -17], [-31, -21], [-31, 7], [-43, 43], [-12, 3], [-13, -22], [-13, -60], [-8, -17]], [[78950, 53416], [-14, -6], [-7, 4], [-5, 23], [11, 51], [4, 9], [11, -56], [0, -25]], [[77857, 54893], [-7, -16], [-20, 9], [4, 94], [11, 12], [18, -17], [8, -16], [-14, -66]], [[77735, 55567], [19, -62], [-9, -27], [-5, -8], [-12, 9], [-11, -24], [-11, -4], [-11, 42], [-13, 17], [-3, 30], [18, 5], [10, -10], [20, 20], [8, 12]], [[82539, 55972], [-17, -31], [-6, 37], [1, 47], [23, 44], [33, 8], [4, -35], [-4, -40], [-7, -21], [-27, -9]], [[78143, 53564], [-14, -10], [0, 15], [2, 21], [10, 20], [5, -12], [-3, -34]], [[80941, 53234], [-9, -8], [-13, 21], [-3, 175], [9, 15], [6, -2], [7, -32], [-1, -76], [1, -68], [3, -25]], [[82745, 54254], [-39, -11], [-27, 1]], [[82679, 54244], [5, 20], [-1, 27], [13, 7], [15, -6], [34, -38]], [[63760, 44681], [13, -60], [15, -58], [46, -140], [20, -53], [17, -57], [8, -114], [30, -178], [28, -266], [8, -273], [9, -126], [21, -118], [36, -122], [11, -136], [-21, -140], [-32, -132], [-8, -25], [-15, -34], [-6, 1], [-26, 34], [-20, 56], [-26, 132], [-10, 66], [-10, 11], [-31, -6], [-22, -41], [-4, -27], [5, -74], [8, -66], [4, -68], [0, -85], [9, -26], [12, -22], [12, -55], [3, -133], [-8, -67], [-22, -58], [2, -32], [8, -32], [-8, -20], [-29, -25], [-11, -22], [-16, -59], [-25, -120], [-3, -61], [16, -186], [-5, -132], [-32, -252], [-18, -119], [-26, -143], [-40, -189], [-39, -237], [-34, -243], [-25, -147], [-28, -144], [-38, -255], [-33, -258], [-48, -285], [-68, -317], [-7, -41], [-14, -163], [-15, -140], [-18, -140], [-37, -230], [-5, -71], [-8, -68], [-36, -144], [-16, -54], [-10, -57], [-6, -72], [-11, -70], [-27, -129], [-39, -110], [-27, -40], [-58, -59], [-30, -11], [-65, -2], [-64, -33], [-66, -64], [-63, -73], [-25, -35], [-27, -20], [-83, -4], [-26, 16], [-84, 120], [-32, 20], [-62, 17], [-18, 10], [-17, 16], [-25, 62], [-50, 54], [-12, 16], [-7, 37], [-5, 39], [-13, 45], [-10, 84], [-16, 59], [-45, 104], [-5, 33], [-4, 110], [2, 75], [-5, 136], [5, 65], [16, 58], [-6, 62], [-17, 66], [-6, 68], [-13, 62], [-48, 112], [-11, 55], [-8, 57], [-18, 178], [-2, 62], [3, 130], [7, 68], [11, 47], [3, 35], [8, 30], [11, 24], [7, 28], [18, 168], [23, 37], [33, 21], [27, 44], [16, 59], [15, 121], [42, 121], [15, 63], [34, 96], [30, 135], [9, 64], [7, 65], [8, 143], [5, 71], [-1, 70], [-17, 72], [-41, 132], [-1, 24], [3, 98], [-4, 70], [-15, 71], [-19, 66], [-19, 124], [-10, 205], [2, 74], [-5, 65], [-14, 63], [10, 109], [123, 397], [4, 47], [-5, 121], [2, 71], [5, 26], [9, 15], [21, 7], [99, 18], [13, 12], [25, 33], [34, 65], [15, 19], [14, -7], [8, -28], [11, -15], [40, 29], [16, 1], [16, -5], [7, 27], [4, 36], [6, 26], [11, 14], [51, 8], [33, 11], [43, 25], [9, -5], [34, -91], [11, -8], [13, -4], [12, 17], [-28, 48], [-4, 26], [1, 31], [15, 65], [25, 50], [56, 76], [57, 88], [17, 6], [14, -14], [11, -103], [-1, -17], [9, -3], [10, 13], [10, 42], [0, 34], [-7, 34], [-4, 28], [0, 26], [29, 61], [23, 58], [10, 70], [10, 32], [24, 36], [7, -6], [6, -29], [3, -31], [-6, -31], [-9, -31], [-4, -40], [14, -8], [13, 10], [19, 73], [21, 70], [13, 36], [16, 25], [27, -5], [26, -15], [-43, 73], [-10, 101], [50, 174], [1, 37], [7, 11], [3, 14], [-26, 59], [-5, 29], [4, 44], [12, 40], [12, 27], [16, 11], [13, -15], [28, -49], [19, -7], [23, 46], [18, 58], [28, 40], [32, 25], [49, 91], [32, 191], [2, 56], [-7, 67], [-11, 65], [-19, 80], [5, 18], [27, -11], [9, 11], [28, 71], [48, 136], [16, 0], [13, -25], [5, -37], [10, -28], [32, -65], [16, -48]], [[63428, 44145], [0, -21], [-36, 8], [-6, 72], [18, 3], [4, 29], [11, 4], [11, -64], [-2, -31]], [[63871, 42106], [-32, -106], [9, 89], [36, 127], [11, 10], [-24, -120]], [[56206, 76217], [43, -86], [23, -34], [28, -27], [32, -19], [11, -19], [20, -91], [10, -34], [13, -11], [3, -10], [1, -13], [-15, -64], [-6, -144], [-4, -11]], [[56365, 75654], [-16, 0], [-21, -3], [-8, -11], [-8, -77], [-34, -22], [-30, -13], [-26, 3], [-45, 18], [-15, 2], [-13, -10], [-40, -5], [-18, -14], [-42, -90], [-42, -32], [-14, -15], [-33, 20], [-15, 2], [-22, -23], [-49, -3], [-13, -4], [-38, -3]], [[55823, 75374], [-2, 12], [-7, 18], [-17, 9], [-36, -7], [-9, 13], [-15, 77], [-11, 12], [-13, 26], [-22, 83], [-1, 37], [2, 32], [-12, 74], [7, 19], [11, 12], [0, 30], [-3, 46], [14, 90], [3, 6]], [[55712, 75963], [4, -4], [32, -7], [8, 11], [6, 18], [1, 66], [8, 30], [78, 58], [23, 2], [18, -27], [14, -17], [8, 1], [3, 17], [10, 33], [16, 19], [48, 16]], [[51699, 80714], [-3, -15], [1, -35], [8, -34], [18, -34], [14, -25], [19, -20], [33, -19], [13, -4], [1, -25], [-2, -27], [-11, -15], [-11, -21], [-8, -26], [-8, -50], [-1, -35]], [[51762, 80329], [-19, 14], [-10, 10], [-17, 3], [-17, -8], [-12, -18], [-18, -5], [-14, 5], [-9, 13], [-7, 8], [-22, 8], [-9, 19]], [[51608, 80378], [7, 9], [6, 15], [5, 19], [7, 19], [-21, 50], [-5, 16], [-17, 28], [0, 14], [4, 14], [-1, 11], [2, 25], [12, 24], [8, 30], [14, 40], [31, 49], [21, -8], [10, 0], [6, -17], [2, -2]], [[55805, 83690], [32, 66], [12, 43], [8, 61], [8, 20], [0, -28], [-3, -46], [-20, -80], [-21, -41]], [[55898, 83677], [0, 4], [-9, 42], [10, 64], [-19, 93], [-30, 113], [-2, 121], [-2, 27]], [[55846, 84141], [74, 68], [94, 73], [22, 6], [86, 44], [12, 3], [78, -8], [62, -10], [51, 1], [29, 11], [26, -9], [20, -33], [22, 4], [21, 21], [116, -19], [26, 0], [29, -3], [54, -19], [32, -18], [68, 11], [30, 0], [15, 7], [47, 49], [21, 9], [19, 8], [17, -7], [11, -42], [35, -72], [38, -13], [106, -27], [21, -15], [59, -64], [36, -31], [22, -25], [35, -49], [20, -35], [33, -27], [39, -18], [15, -3]], [[57387, 83909], [-1, -26], [-7, -44], [-13, -56], [-14, -44], [-3, -17], [10, -14], [52, -7], [22, -7], [4, -12], [-11, -15], [-17, -13], [-7, -12], [-13, -42], [-86, 5], [-12, -9], [-5, -19], [-4, -23], [-12, -28], [-23, -23], [-35, -9], [-29, -16], [-22, -49], [-16, -67], [0, -47], [2, -26], [-2, -15], [-11, -17], [-18, -43], [-14, -48], [-6, -26], [3, -12], [16, -1], [24, -10], [13, -19], [4, -22], [0, -24], [-4, -13], [-19, -10], [-30, 0], [-17, 12], [-4, 9], [8, 22], [-6, 29], [-12, 16], [-25, -24], [-24, 0], [-29, -21], [-19, -34], [-18, -13], [-49, 7], [-13, -15], [-10, -69], [-6, -14], [-40, 3], [-40, -28], [-45, -22], [-22, 15], [-13, 18], [-24, -3], [-27, -8], [-17, 4], [-20, -1], [-39, -14], [-48, 4], [-21, 12]], [[52646, 79072], [3, -9], [1, -12], [3, -12], [1, -16], [4, -16], [8, -15], [3, -14], [-4, -18], [-4, -11]], [[53195, 70957], [43, -37], [43, -14], [130, -136], [40, -17], [91, -16], [107, 56], [40, 10], [71, -52], [31, -15], [52, -4], [89, -47], [22, -17], [52, -75], [25, -23], [184, -69], [25, -46], [26, -87], [1, -109], [14, -79], [23, -102], [28, -72], [30, -61], [35, -37], [81, -56], [91, -21], [92, -8], [158, -76], [133, -89], [33, -44], [67, -43], [134, -208], [74, -72], [52, -14], [46, 13], [83, 72], [34, 43], [84, 180], [27, 94], [11, 66], [-3, 67], [-10, 61], [-23, 63], [-17, 84], [-9, 151], [13, 104], [16, 63], [25, 64], [69, 122], [70, 86], [122, 113], [71, 1], [30, 12], [58, 80], [24, 3], [33, -20], [97, 6], [42, -22], [51, -50], [64, -31], [45, -30], [48, -40], [11, -98], [-5, -29], [-1, -38], [50, -68], [142, -32], [28, -18], [39, -52], [25, -16], [97, -7], [57, 11], [54, -18], [20, -18], [21, -40], [25, -99], [10, -33]], [[56986, 70077], [-11, -16], [-15, -35], [-10, -30], [-26, -50], [-21, -53], [2, -79], [5, -79], [14, -78], [13, -86], [-4, -56], [-11, -70], [-12, -58], [-42, -119], [-7, -28], [3, -41], [25, -141], [2, -44], [16, -138], [14, -112], [15, -87], [2, -25], [0, -129], [0, -129], [0, -130], [0, -129], [0, -129], [0, -130], [0, -129], [0, -129], [0, -130], [0, -129], [0, -129], [0, -130], [0, -129], [0, -130], [0, -129], [0, -129], [0, -130], [0, -129], [0, -129], [0, -130], [0, -129], [0, -129], [0, -130], [0, -129], [0, -129], [0, -130], [0, -129], [0, -130], [0, -129], [0, -129], [0, -130], [0, -129]], [[56661, 63073], [-133, 137], [-134, 136], [-133, 136], [-133, 136], [-133, 137], [-133, 136], [-133, 136], [-133, 137], [-133, 136], [-133, 136], [-133, 136], [-133, 137], [-133, 136], [-133, 136], [-134, 137], [-133, 136], [-92, 94], [-99, -92], [-77, -72], [-103, -95]], [[53324, 65390], [-26, 102], [-30, 114], [-40, 142], [-24, 87], [-8, 14], [-111, 69], [-117, 67], [-69, -41], [-12, 3], [-19, 26], [-20, 35], [-10, 49], [-28, 66], [-25, 150], [-2, 119], [-6, 43], [-61, 168], [-55, 153], [-37, 102], [-7, 46], [4, 57], [15, 51], [54, 60], [48, 66], [7, 45], [3, 125], [-16, 39], [-12, 74], [-11, 101], [-2, 64], [22, 128], [25, 134], [-16, 149], [-12, 297], [8, 235], [-7, 85], [-4, 36], [-16, 110], [-21, 114], [-9, 40], [-26, 92], [-43, 114], [-22, 70], [30, 37], [28, 29]], [[47143, 56730], [14, 3], [24, 17], [14, -8], [6, -23], [3, -20], [72, 51], [6, 11], [4, -2], [9, -47], [5, 3], [5, 14], [5, 1], [5, -6], [6, -22], [9, -19], [16, -14], [10, -19], [-2, -49], [4, -49], [7, -11], [4, -28], [1, -32], [4, -17], [3, -32], [-1, -34], [2, -24], [12, -41], [7, -53], [0, -37], [-4, -39], [-8, -35], [-13, -39], [-1, -16], [8, -10], [12, -2], [10, 8], [25, -18], [14, -25], [12, -32], [10, -16], [5, -20], [18, 6], [21, 19], [4, 9], [7, -5], [13, -2], [10, 35], [7, 40], [17, 43], [8, 16], [2, 28], [1, 36], [6, 30], [13, 17], [15, 0], [8, -6], [4, -30], [11, -23], [10, -15]], [[47642, 56197], [5, -7], [9, -18], [8, -60], [31, -194], [-2, -54], [-6, -35], [0, -35], [-2, -33], [-19, -56], [-56, -114], [4, -10], [13, -13], [14, -6], [11, 3], [14, -28], [16, -36], [16, -18], [23, -17], [20, -2], [17, 7], [24, -7], [26, -30], [9, -49], [7, -42], [9, -22], [1, -36], [18, -33], [26, -6], [34, -38], [9, 2], [4, 5], [4, -8], [8, -109], [7, -58], [-3, -23], [-5, -19], [0, -88], [-16, -51], [-2, -56], [-5, -18], [-16, -16], [0, -42], [-4, -52], [-2, -55], [4, -144], [1, -107], [8, -20]], [[47904, 54349], [-32, 9], [-94, 82], [-73, 47], [-242, 267], [-68, 108], [-77, 160], [-173, 322], [-39, 51], [-50, 25], [-31, 28], [-21, 30], [-18, 89], [-43, 53], [-80, 75], [-60, 126]], [[59963, 71101], [-8, -10], [-15, -26], [-14, -22], [-30, -33], [-7, -20], [-6, 18], [-13, -12], [-11, -75], [-23, -26], [-29, 3], [-23, 7], [-32, -5]], [[59752, 70900], [13, 44], [13, 57], [13, 77], [24, 64], [49, 217], [28, 87], [10, 125], [43, 109], [33, 32], [15, 31], [0, 47]], [[55846, 84141], [-9, 109], [5, 217], [11, 108], [51, 63], [26, 49], [15, 65], [5, 61], [10, 49], [75, 144], [60, 15], [80, 40], [90, 33], [17, -42], [9, -32], [108, -117], [27, -40], [42, -135], [100, -68], [79, 22], [34, 33], [63, 61], [28, 45], [6, 43], [-11, 184], [-17, 80], [6, 50]], [[56756, 85178], [11, -2], [27, 24], [88, 44], [17, 2], [20, 9], [56, 34], [18, -18], [14, -20], [9, -1], [4, 8], [-2, 13], [4, 10], [16, -6], [65, -55], [24, -13], [17, -4], [20, -26], [55, -18], [7, -13], [4, -17], [51, -71], [23, -35], [46, -33], [20, -7], [79, 33], [23, 11], [18, 1], [19, -18], [42, -23], [39, -8], [7, 2]], [[57818, 84183], [-8, 2], [-24, -8], [-38, -32], [-56, -78], [-14, -17], [-15, -59], [-3, -6], [-33, 2], [-9, 2], [-33, -1], [-71, 15], [-28, -10], [-36, -60], [-14, -9], [-42, -8], [-7, -7]], [[79866, 60313], [-15, -23], [-14, -59], [-10, -4], [-24, 21], [-9, -11], [-15, -43], [-27, -47], [-13, 0], [-9, 5], [-11, -20], [-15, -36], [-7, 1], [-26, -9], [-10, 12], [-12, 30], [-21, 31], [-18, 22], [-10, 15], [-9, 26], [-8, 16], [-15, -36], [-26, -35], [-24, 7], [-12, 5], [-9, -50], [-7, -9], [-44, -9], [-8, -8], [7, -46], [26, -79], [7, -45], [-16, -73], [-45, 2], [-20, 30], [-19, 41], [-7, 21], [-57, 41], [-39, -28], [-12, 1], [-18, 30], [-11, 23], [-11, 34], [-6, 34], [0, 16]], [[77811, 63546], [2, 32], [15, 125], [18, 81], [22, 38], [22, 16], [24, -6], [20, 7], [16, 19], [-1, 12], [-19, 3], [-8, 21], [4, 41], [8, 26], [13, 13], [13, 40], [12, 70], [15, 35], [18, 1], [30, 30], [42, 59], [16, 57]], [[78093, 64266], [16, -26], [-6, -66], [9, -14], [4, -23], [-2, -37], [3, -32], [7, -15], [9, -8], [45, 27], [27, 2], [12, -17], [10, -11], [13, -9], [11, -11], [6, 3], [15, 28], [5, 5], [1, 13], [-11, 25], [-11, 21], [0, 46], [5, 80], [1, 41], [-1, 100], [-2, 27], [-10, 33], [-27, 61], [-7, 38], [-5, 38], [1, 24], [-7, 27], [-4, 26], [13, 13], [14, 29], [7, 45], [7, 33], [10, 14], [9, 5], [6, -3], [23, -59], [28, 30], [22, -1], [19, -15], [10, -19]], [[69707, 76179], [-15, 26], [0, 27], [16, 46], [14, 23], [6, 44], [20, 29], [20, 47], [25, 38], [46, 28], [25, -9], [24, 7], [38, 23], [7, 1], [15, 1], [96, -36], [32, -1], [74, -46], [34, -10], [24, -13], [11, -20], [18, -25], [93, -19], [26, -13], [9, -22], [26, -27], [23, -6], [-20, 106], [8, 63], [30, 173], [15, 26], [30, 23], [46, 26], [18, 36], [38, -4], [16, 3], [12, 6], [6, 21], [43, -35], [72, -71], [54, -45], [64, -43], [88, -39], [75, -13], [13, 10], [30, 59], [14, 2], [26, -5], [79, -3], [81, -3], [38, 6], [83, 25], [12, 1], [19, -2], [50, -33], [37, -5], [25, 0], [14, -2], [31, 1], [50, -4], [61, -22], [75, 4], [23, 4], [42, -4], [32, -20], [42, -22], [26, -9], [17, -5], [31, -2], [19, 7], [11, -10], [10, -53], [26, -35], [20, -34], [17, -36], [17, -15], [30, -1], [57, -10], [33, -15], [41, -63], [39, -65]], [[72280, 76146], [5, -35], [5, -40], [-3, -10], [-5, -6], [-86, -10], [-19, -11], [-20, -56], [-73, -45], [-42, -23], [-17, 1], [-40, -37], [-113, -91], [-55, -58], [-28, -24], [-22, -27], [-4, -27], [-1, -25], [-62, -118], [-46, -15], [-39, 3], [-27, -18], [-38, -18], [-83, 12], [-28, -2], [-55, 17], [-21, -9], [-24, -24], [-32, -95], [-13, -22], [-6, -21], [-5, -46], [-12, -49], [-16, -38], [-11, -36], [-23, -34], [-22, -22], [-17, 45], [-14, -13], [-14, -18], [-26, 6], [-16, -9], [-37, -39], [-54, 1], [-6, 14], [-11, 108], [-9, 51], [-8, 11], [-10, 2], [-77, -85], [-36, -15], [-30, -3], [-39, 25], [-8, -6], [-7, -14], [-3, -17], [12, -48], [-3, -10], [-18, 1], [-24, -11], [-19, -22], [-56, -78], [-47, -26], [-43, -10], [-18, -9], [-8, -9], [-15, -37], [-15, -58], [-8, -29], [-6, -16], [1, -22], [12, -27], [9, -63], [-2, -16], [-9, -26], [-14, -25], [-30, -16], [-23, -7]], [[63409, 68907], [-16, -13], [-10, 6], [-11, 31], [-17, 77], [10, 29], [-1, 12], [2, 9], [5, 6], [6, 36], [7, 12], [12, -25], [33, -88], [0, -37], [-2, -14], [-18, -41]], [[62925, 68603], [45, 94], [21, 51], [38, 109], [19, 78], [19, 87], [16, 67], [4, 12], [9, 23], [21, 24], [30, 22], [51, 9], [36, 1], [8, -1], [22, -11], [63, -54]], [[63327, 69114], [-2, -21], [9, -64], [20, -69], [17, -56], [2, -27], [-15, 4], [-12, 11], [-22, 11], [-42, -75], [-26, -40], [0, -14], [34, -16], [25, 1], [17, 11], [15, -18], [10, -46], [4, -37], [23, -133], [19, -45], [24, -80], [9, -41], [5, -35], [15, -51]], [[55712, 75963], [5, 26], [-2, 55], [-15, 91], [-10, 30], [-22, 30], [-16, 19], [-30, 17], [-15, 50], [-23, 57], [-11, 13]], [[98046, 53645], [-17, -19], [-6, 3], [21, 27], [0, -3], [2, -8]], [[98011, 53600], [-20, -22], [-6, 12], [8, 0], [14, 22], [16, 1], [-2, -11], [-10, -2]], [[98060, 52906], [1, -14], [-16, 37], [-9, 23], [0, 10], [5, -6], [5, -12], [3, -9], [11, -29]], [[98063, 52832], [-10, -3], [7, 9], [2, 11], [-1, 36], [4, -3], [1, -15], [1, -21], [-4, -14]], [[98064, 52426], [15, -23], [-2, -15], [-5, -18], [-20, -46], [-6, 4], [19, 42], [8, 27], [-11, 21], [-5, -5], [-1, 0], [-4, 20], [4, 0], [8, -7]], [[98474, 51381], [-9, -16], [-4, 14], [5, 18], [-8, 73], [-12, 10], [-8, 22], [4, 0], [12, -20], [10, -9], [6, -48], [4, -44]], [[98547, 51145], [2, -30], [-7, 4], [-2, 11], [-2, 30], [-7, 30], [8, -8], [6, -23], [2, -14]], [[98065, 52616], [-7, -2], [5, 11], [31, 13], [3, 4], [5, -7], [0, -7], [-2, -3], [-16, -1], [-12, -6], [-7, -2]], [[97097, 51339], [-3, -1], [-5, 6], [0, 7], [4, 4], [5, -6], [-1, -10]], [[2163, 49244], [1, -4], [4, 1], [4, 1], [-2, -4], [-8, -2], [-3, 10], [4, 8], [4, 1], [1, -2], [-1, -2], [-1, 0], [-3, -2], [0, -5]], [[2476, 50037], [-1, -5], [-2, 4], [1, 6], [2, 6], [1, -3], [-1, -8]], [[2435, 49272], [-3, -3], [-3, 1], [-2, 4], [0, 6], [3, 4], [3, -1], [3, -6], [-1, -5]], [[1524, 49150], [3, -8], [0, -4], [-1, 1], [-5, 2], [-1, 5], [3, -3], [2, 1], [-4, 6], [-2, 5], [-3, 2], [0, 3], [3, -1], [5, -9]], [[6957, 49488], [-1, -4], [-4, 5], [-6, 9], [-6, 9], [0, 4], [8, 5], [10, 5], [2, -6], [-2, -9], [-1, -18]], [[7838, 45252], [-2, -9], [-5, 3], [-2, 12], [-1, 12], [2, 11], [2, -1], [4, -12], [2, -16]], [[6704, 48601], [-6, -2], [-8, 0], [-3, 7], [-1, 6], [3, 1], [2, -2], [11, -1], [3, -4], [-1, -5]], [[6294, 52912], [46, -67], [-20, -5], [-48, 32], [-44, 66], [13, 15], [7, -24], [20, -22], [12, 46], [7, 11], [-35, 48], [14, -3], [33, -32], [-5, -65]], [[5739, 54103], [22, -49], [-4, -24], [-16, 2], [-7, 8], [12, 5], [2, 9], [-6, 14], [-7, 10], [-5, 0], [-2, -20], [-8, 16], [5, 15], [6, 10], [8, 4]], [[2306, 50249], [9, -11], [7, -15], [4, -20], [-1, -5], [-5, 0], [-6, 6], [-5, 9], [-2, 2], [-1, 2], [6, -1], [6, -9], [5, -4], [-1, 10], [-5, 18], [-4, 6], [-4, 5], [-5, 3], [-4, -3], [-1, -2], [-1, 5], [1, 3], [1, 4], [6, -3]], [[61387, 50599], [-11, -5], [6, 33], [30, 43], [13, -10], [2, -10], [-1, -8], [-5, -9], [-34, -34]], [[59796, 55006], [-1, -19], [0, -27], [7, -16], [10, -11], [15, 12], [12, 16], [13, 3], [77, -43], [12, -38], [0, -40], [3, -30], [-6, -29], [-6, -90], [2, -82], [23, -60], [20, -48], [16, -67], [13, -21], [16, -10], [53, -3], [78, -4], [75, -4], [7, -2], [16, -9], [69, -91], [63, -82], [54, -72], [52, -70], [51, -68], [39, -57], [39, -17], [62, -8], [44, -3], [40, -23], [60, -22], [44, -12], [27, -12], [75, -14], [12, 8], [33, 63], [37, 101], [15, 56], [47, 56], [84, 77], [59, 55], [66, 55], [30, -48], [41, -76], [18, -38], [15, -17], [23, -11], [27, 0], [15, 2], [30, 10], [71, 9], [41, -1]], [[61536, 50866], [-40, -99], [-33, -45], [-45, -21], [-13, 4], [-18, 14], [-7, -24], [-5, -37], [-10, 8], [-7, 11], [4, -66], [5, -32], [-7, -44], [-22, -38], [-2, -32], [-47, -85], [-66, -10], [-35, -42], [-16, -34], [-12, -75], [5, -116], [-19, -88], [-3, -45], [-35, -57], [-15, -53], [-11, -54], [-10, -24], [-12, -120], [-16, -73], [-4, -25], [-4, -22], [-12, -43], [-8, -29], [-6, -20], [-41, -187], [-32, -85], [-24, 10], [-17, -33], [-2, -15]], [[63939, 77681], [-9, -17], [-15, 3], [-28, 61], [8, 62], [10, 13], [14, 8], [2, -13], [-20, -28], [-2, -35], [17, -39], [23, -15]], [[63975, 77748], [-10, -8], [-6, 37], [11, 31], [15, 4], [-5, -49], [-5, -15]], [[64633, 78001], [-5, -6], [-18, 16], [-12, 26], [15, 31], [14, -5], [9, -33], [-3, -29]], [[64581, 75910], [-7, 60], [-3, 94], [1, 30], [15, 79], [16, 54], [13, 56], [5, 73], [-11, 118], [-13, 26], [-16, 9], [-17, 2], [-30, -5], [-14, -9], [-25, 40], [-30, 6], [-16, -11], [-16, -6], [-17, 11], [-15, 24], [-10, 25], [-7, 29], [-23, 57], [-24, 31], [-28, 7], [-46, -1], [-15, 3], [-1, 33], [6, 72], [0, 38], [-3, 35], [-8, 29], [-10, 25], [-27, 42], [-21, 58], [-35, 120], [-30, 135], [-13, 21], [-27, 21], [-60, 17], [-39, 18], [-15, 17], [-7, 29], [1, 32], [3, 38], [9, 31], [31, 25], [67, 5], [58, -3], [53, -56], [17, -13], [18, -4], [37, 18], [19, 5], [46, -6], [-14, 27], [-17, 14], [-18, -1], [-16, 11], [-25, 52], [-45, 59], [-10, 24], [-3, 39], [8, 34], [32, 34], [26, 47], [13, 63], [11, 28], [23, 45], [34, -8], [54, 32], [87, -6], [105, 9], [29, -3], [67, -32], [39, -14], [46, -7], [34, 14], [-32, 44], [-69, 51], [-17, 44], [31, 119], [43, 109], [26, 129], [-7, 128], [-13, 35], [4, 42], [15, 35], [11, 35], [-9, 42], [-19, 65], [-10, 22], [-33, 35], [-66, 2], [-54, 19], [-17, -16], [-10, -24], [-13, -15], [-42, -32], [-14, -6], [-14, 6], [-21, 36], [-18, -4], [-56, 22], [-26, 49], [-10, 7], [-90, 38], [-32, 8], [-71, -40], [-52, -52], [-15, -7], [-27, -32], [-15, -6], [-16, 6], [-14, -2], [-32, -49], [-57, -57], [-28, -35], [-31, -23], [-35, -14], [-36, -2], [-13, -13], [-41, -4], [-25, -11], [-1, -19], [5, -43], [-21, 15], [-22, -30], [7, -28]], [[74256, 80118], [-26, 11], [-51, 3], [-30, -7], [-15, -4], [-21, -24], [-16, -24], [-6, -40], [8, -45], [-11, -94], [-15, -36], [-32, -61], [-19, -14], [-30, -11], [-30, -18], [-58, -18], [-63, -9], [-22, -13], [-16, -42], [-12, -35], [-7, -27], [-17, -88], [-11, -78], [10, -98], [8, -108], [-1, -37], [16, -56], [7, -34], [-3, -48], [-22, -38], [-13, -51], [-13, -21], [-36, -10], [-34, -6], [-34, -43], [-27, -30], [-43, -38], [-20, -7], [-11, 19], [-8, 43], [-14, 19], [-21, 2], [-17, 0], [-53, 12], [-35, -1], [-25, -9], [-30, -5], [-51, 16], [-33, 13], [-22, 13], [-53, 38], [-70, 45], [-28, 13], [-17, -14], [-3, -25], [-4, -62], [-8, -39], [-49, -197], [-30, -137], [-38, -131], [-12, -88], [-23, -112], [-22, -81], [-9, -44], [-1, -18], [4, -25], [35, -28], [36, -17], [8, -10], [4, -29], [-1, -47], [-7, -44], [-11, -35], [-10, -17], [-12, -2], [-23, 23], [-20, 25], [-16, 7], [-40, -13], [-37, -20], [-12, 0], [-22, 12], [-21, 25], [-9, 49], [-19, 22], [-24, -22], [-75, -37], [-82, -44], [-51, -23], [-21, 3], [-40, -5], [-35, -12], [-26, -17], [-52, -24], [-47, -16], [-30, -36], [-22, -35], [1, -13], [16, -20], [18, -17], [36, 4], [35, 3], [30, -22], [26, -14], [7, -18], [-7, -18], [-15, -4], [-6, -12], [3, -17], [-10, -43], [-5, -65], [5, -65], [3, -59], [-2, -30], [-1, -43], [11, -29], [10, -55], [18, -34], [27, -119], [16, -70], [15, -79], [-11, -42], [1, -25], [17, -21], [8, -40], [8, -25], [-2, -24], [-8, -10], [-37, 15], [-31, -24], [-32, -25], [-4, -13], [-1, -14], [3, -13], [19, -22], [26, -14], [-2, -22], [-32, -10], [-48, -34], [-13, -36], [-11, -39], [-1, -24], [5, -61], [8, -69], [13, -72], [1, -22], [-7, -16], [-6, -10]], [[60770, 71066], [20, -127], [19, -125], [20, -129], [20, -125], [-21, -12], [16, -96], [28, 15], [29, 11], [13, -62], [-41, -68]], [[59708, 68751], [9, 76], [-3, 40]], [[59714, 68867], [14, 134], [8, 63], [5, 47], [20, 94], [-3, 31], [5, 109], [-2, 21], [9, 60], [17, 86], [17, 74], [7, 33], [17, 71], [16, 86], [-9, 47], [-2, 10], [6, 54], [8, 89]], [[59847, 69976], [4, 48], [9, 63], [17, 54], [-8, 126], [1, 68], [11, 78], [-6, 91]], [[59875, 70504], [5, 129], [1, 12], [6, 16], [4, 8], [35, 27], [14, 3]], [[87046, 72697], [-12, -21], [-24, 7], [-14, 31], [5, 35], [25, 27], [23, -54], [-3, -25]], [[88428, 73630], [-26, -2], [-7, 6], [16, 14], [1, 24], [10, 42], [0, 13], [-21, 2], [1, 48], [16, 48], [43, 75], [11, 14], [2, -33], [-13, -77], [-3, -28], [34, -6], [-22, -93], [-42, -47]], [[87480, 71594], [-30, -49], [-26, 3], [-13, 22], [-4, 27], [25, 43], [21, 60], [19, 27], [16, 15], [12, -1], [-27, -84], [7, -63]], [[86283, 69275], [-32, -12], [-17, 13], [-16, 71], [30, 45], [41, -44], [8, -13], [-14, -60]], [[86377, 69352], [-24, -6], [-1, 34], [19, 75], [2, 55], [18, 70], [8, 15], [6, 6], [6, -22], [-7, -85], [-18, -65], [-9, -77]], [[86133, 70408], [-22, -20], [-3, 19], [-9, 9], [16, 28], [0, 12], [-11, 19], [12, 71], [-3, 30], [44, 12], [8, -29], [1, -87], [-33, -64]], [[85910, 71499], [-18, -23], [-8, 35], [8, 102], [34, -21], [0, -31], [-16, -62]], [[85940, 71632], [-6, -28], [-19, 19], [-8, 18], [17, 87], [-2, 34], [1, 16], [35, 45], [6, -8], [2, -13], [-3, -20], [2, -43], [-27, -71], [2, -36]], [[85740, 70727], [10, -15], [16, 9], [13, 2], [9, -8], [11, -40], [4, -24], [-20, -3], [-9, -5], [-11, -30], [-16, 11], [-10, 14], [-2, 19], [5, 70]], [[86216, 70520], [-24, -3], [-11, 7], [-4, 18], [35, 37], [26, -6], [-11, -34], [-11, -19]], [[89186, 77956], [-11, -37], [-14, 55], [-3, 58], [8, 0], [16, -9], [3, -28], [1, -39]], [[89248, 77833], [-19, -4], [-23, 24], [-3, 30], [17, 24], [16, -9], [16, -31], [5, -16], [-9, -18]], [[88744, 76083], [-6, -3], [-7, 5], [-6, 43], [5, 23], [18, 16], [17, 5], [-14, -80], [-7, -9]], [[87319, 71706], [-5, -11], [-5, 3], [-18, -26], [-4, 25], [-13, 17], [-2, 13], [40, 9], [13, -7], [-6, -23]], [[88737, 71846], [-3, -27], [-15, 6], [-7, 18], [1, 32], [16, 0], [8, -29]], [[85854, 70760], [-7, -6], [-9, 52], [-6, 18], [10, 10], [21, 94], [4, -37], [8, -37], [8, -6], [-8, -27], [-12, -10], [-9, -51]], [[85969, 70980], [-19, -27], [-15, 0], [13, 32], [2, 15], [11, 43], [21, 15], [9, 2], [-17, -44], [-5, -36]], [[86054, 71283], [-20, -24], [-14, 19], [7, 51], [5, 17], [16, -17], [6, -46]], [[86826, 71494], [-8, -23], [-24, 7], [10, 20], [7, 24], [6, 5], [4, -26], [5, -7]], [[86740, 71396], [13, -21], [32, 9], [4, -6], [-9, -19], [-14, -19], [-26, 14], [-16, 1], [-2, 31], [2, 12], [16, -2]], [[86032, 70078], [-9, -10], [6, 45], [22, 40], [2, -26], [-21, -49]], [[89496, 67175], [-5, -1], [-18, 61], [5, 3], [10, -9], [12, -36], [-4, -18]], [[89950, 77256], [35, -3], [16, 2], [26, -8], [106, -88], [32, -11], [33, -1], [23, 7], [20, 24], [64, 106], [67, 97], [8, -4], [0, -27], [-5, -29], [-30, -89], [-33, -119], [-7, -60], [11, -59], [20, -49], [17, -66], [19, -93], [26, -11], [14, -2], [27, 28], [25, 35], [22, 4], [22, -6], [-30, -24], [-28, -30], [-24, -57], [-9, -10], [-28, 3], [-16, -2], [-32, -24], [-29, -27], [-27, -33], [-30, -17], [-32, -4], [-49, -27], [-32, -2], [-59, 23], [-29, -6], [-63, -53], [-58, -77], [-50, -86], [-42, -104], [-17, -54], [-10, -60], [-2, -40], [-4, -38], [-9, -27], [-12, -22], [-35, 13], [-57, 55], [-110, 81], [-117, 123], [-66, 62], [-123, -19], [-117, -118], [-11, 10], [-44, 81], [-22, 32], [-26, 9], [-19, -1], [-19, -6], [-26, -41], [-10, -30], [-7, -34], [-2, -24], [3, -24], [25, -53], [31, -40], [13, -8], [30, 3], [14, -4], [49, -80], [55, -74], [12, -25], [-20, -26], [-22, -13], [-26, 3], [-25, 10], [-44, 32], [-18, -27], [-29, -56], [-16, -60], [-13, -28], [-32, -36], [-34, -19], [-17, 6], [-14, 23], [-7, 27], [-4, 32], [7, 69], [17, 62], [7, 63], [-14, 89], [-9, 18], [-36, 53], [-17, 50], [-4, 63], [2, 35], [9, 77], [9, 39], [16, 13], [18, 8], [28, 27], [30, 36], [29, 41], [29, 51], [15, 55], [-25, 68], [-5, 40], [4, 38], [26, 20], [27, -15], [55, -56], [11, -5], [37, -3], [51, -12], [30, 3], [14, 8], [22, 46], [10, 59], [-4, 75], [0, 75], [14, 61], [43, 99], [12, 57], [4, 141], [16, 62], [12, 64], [6, 135], [-17, 129], [-18, 64], [-20, 60], [3, 58], [16, 53], [0, 16], [4, 14], [31, 11], [14, 11], [14, 26], [16, 15], [12, -15], [10, -26], [43, -65], [68, -116], [80, -176], [50, -86], [53, -78], [59, -79], [63, -69], [39, -32], [29, -52], [18, -8]], [[86437, 71199], [37, -17], [16, -1], [14, 7], [23, 23], [23, 17], [17, -9], [14, -20], [8, -28], [-4, -30], [-26, -63], [-22, -68], [50, -13], [50, 1], [-12, -42], [-1, -36], [15, -18], [13, -23], [-4, -21], [-7, -21], [27, -32], [-2, -21], [-7, -22], [-68, -145], [-20, -73], [-13, -81], [-13, -59], [-9, -61], [-8, -66], [-12, -68], [4, -61], [-4, -62], [-34, -153], [-25, 3], [-30, 18], [-19, -3], [-10, -34], [17, -70], [-54, -83], [-60, -56], [-1, 26], [6, 20], [9, 16], [6, 19], [9, 66], [-5, 65], [-18, 83], [-1, 29], [12, 12], [9, 4], [4, 11], [1, 27], [-6, 21], [-17, 6], [-17, 1], [-11, -31], [-16, -59], [-8, -59], [3, -33], [7, -29], [22, -49], [-6, -29], [-9, -22], [-77, 50], [-17, 4], [-14, 11], [-15, 67], [32, 16], [9, 8], [3, 22], [5, 65], [-15, 55], [-12, 19], [-11, 23], [7, 46], [-4, 58], [-1, 81], [6, 14], [29, 16], [21, 44], [19, 49], [27, 87], [22, 94], [-21, 5], [-18, 17], [19, 45], [-6, 56], [-29, 69], [-17, 81], [-26, 36], [-14, 13], [-17, -19], [-14, -23], [13, -53], [-1, -46], [2, -47], [13, -2], [16, 11], [13, -8], [7, -24], [2, -32], [-5, -31], [-12, -15], [-15, 1], [-14, 17], [-12, 24], [-27, 13], [-28, -28], [-28, -58], [-23, -29], [11, 42], [5, 47], [-11, 32], [-27, 54], [-6, 31], [-2, 38], [5, 37], [28, -43], [14, -53], [20, -23], [25, -1], [-19, 79], [-7, 20], [-28, 35], [-37, 59], [-23, 29], [8, 62], [14, 12], [12, -3], [39, -22], [4, 31], [-6, 16], [-3, 20], [26, 26], [42, 22], [9, 11], [8, 22], [10, 11], [30, 0], [25, 21], [20, 58], [5, 31], [8, 27], [51, 46], [13, 7], [34, -6], [32, -26], [16, -55], [13, -60], [33, -40]], [[87321, 71576], [38, -24], [39, 6], [0, -105], [5, -35], [11, -32], [-5, -46], [18, -16], [-53, -52], [-48, -70], [-20, -47], [-17, -50], [-11, -53], [-6, -58], [-16, 23], [-46, 93], [-29, 26], [-47, 13], [-15, -3], [-96, -87], [-13, -63], [-26, -96], [-12, -32], [-14, -9], [-10, -16], [-11, -82], [-30, -51], [-18, -1], [-31, 14], [-14, -8], [19, 81], [-30, 9], [-30, -1], [0, 52], [-18, 30], [13, 39], [0, 31], [8, 18], [3, 25], [-1, 22], [-18, 6], [-12, 16], [2, 57], [-10, 2], [-26, -10], [-54, -44], [-15, 0], [23, 31], [48, 43], [21, 25], [48, 69], [29, 33], [16, 58], [5, 36], [10, 31], [9, 49], [15, 17], [27, 43], [15, -4], [17, -53], [23, -40], [16, 3], [30, 21], [14, 5], [34, -3], [30, 26], [13, 30], [4, 37], [-11, 63], [15, -6], [14, 3], [33, 40], [34, 23], [35, 6], [40, -22], [39, -36]], [[89229, 75675], [11, -11], [52, 29], [-10, -88], [-5, -89], [4, -148], [4, -67], [9, -65], [22, -46], [29, -33], [42, -105], [23, -129], [16, -63], [11, -66], [4, -30], [0, -30], [-3, -41], [4, -33], [-5, -105], [-19, -121], [-2, -62], [-16, -12], [-10, -29], [-9, -13], [-9, -10], [-14, -3], [-9, -11], [-4, -33], [-6, -31], [-12, -28], [-9, -31], [-8, -75], [-3, -77], [-11, -54], [-28, -14], [-32, 1], [-40, -25], [-9, -15], [-32, -94], [-9, -56], [0, -59], [9, -73], [12, -72], [9, -133], [-10, -203], [-9, -65], [-20, -44], [-16, -20], [-13, -25], [-17, -66], [-29, -132], [-2, -34], [0, -34], [-8, -45], [-5, -44], [5, -51], [9, -48], [38, -123], [15, -36], [17, -34], [-65, -36], [-12, -17], [-39, -70], [-12, -67], [1, -73], [-7, -27], [-10, -23], [-12, -15], [-43, -34], [-28, -33], [-27, -52], [-11, -28], [-21, 9], [-13, 24], [12, 31], [-3, 35], [6, 93], [-7, 37], [22, 28], [10, 45], [24, 35], [16, 32], [3, 26], [-15, 28], [-15, 20], [-22, 0], [-21, -6], [-13, -27], [-5, -36], [1, -16], [-2, -15], [-32, -49], [4, -52], [10, -26], [12, -13], [-4, -17], [-15, -42], [-11, -4], [-20, 58], [-25, 32], [-31, 0], [-31, -12], [-25, -39], [-8, -32], [-5, -33], [2, -81], [-10, -68], [-19, -59], [-10, -22], [-23, -40], [-17, -5], [-12, 18], [-9, 28], [12, 101], [-1, 57], [28, 29], [-23, 41], [-28, 16], [-39, -21], [-11, -25], [-8, -33], [-21, -41], [-24, -39], [-26, -66], [-18, -79], [-58, 26], [-32, 6], [-32, -2], [-57, 9], [-63, -16], [-71, -30], [4, 22], [59, 47], [2, 14], [-6, 26], [-14, 1], [-35, -9], [-18, 4], [-8, 28], [-12, 12], [-7, -12], [2, -54], [-9, -7], [-11, 14], [4, 42], [-8, 61], [-1, 39], [12, 32], [-12, 14], [-14, -5], [-17, -16], [-14, -22], [-32, -112], [-12, -64], [23, -52], [63, -72], [10, -17], [1, -31], [-8, -32], [-17, -15], [-69, -24], [-59, -46], [-18, -47], [-54, -183], [-43, -125], [-62, -43], [-67, 39], [-16, 43], [-14, 54], [-25, 48], [-22, 53], [-13, 63], [2, 101], [-10, 61], [9, 16], [37, 37], [12, 21], [21, 48], [8, 27], [1, 41], [-17, 21], [-44, -1], [-43, -13], [-31, 18], [-41, 49], [-12, 11], [-43, 3], [-31, -9], [-31, -18], [-32, -6], [-11, -9], [-37, -60], [-29, -38], [-26, -19], [-55, -5], [-28, -12], [-29, -20], [-8, 1], [-30, -27], [-35, -24], [-19, -24], [-34, 16], [-68, -43], [-33, -5], [-34, 23], [-31, 38], [-30, -16], [-21, -56], [-10, -113], [-12, -50], [-4, -61], [-15, 10], [-91, 109], [-6, 4], [-74, -19], [-19, -9], [-23, -22], [-25, -10], [-23, 16], [-22, 26], [-21, -8], [-22, -18], [-8, 165], [4, 21], [14, 29], [14, 25], [36, 9], [36, -9], [25, 12], [22, 32], [23, 47], [26, 37], [35, 30], [34, 34], [30, 48], [28, 52], [26, 39], [28, 32], [43, 77], [57, 87], [22, 64], [13, 18], [49, 35], [65, 28], [31, -2], [30, -56], [17, 8], [16, 14], [34, 8], [34, -9], [34, 0], [33, 7], [65, 19], [34, 22], [33, 29], [118, 20], [82, 48], [12, -3], [13, -11], [1, -36], [-10, -39], [10, -24], [16, -14], [76, -5], [22, -8], [32, 26], [30, 33], [31, 44], [22, 49], [-20, 61], [-4, 67], [17, 73], [24, 62], [30, 37], [27, 42], [54, 121], [40, 98], [14, 121], [-8, 142], [34, 106], [33, 18], [66, 49], [34, 14], [5, -21], [-1, -28], [-51, -89], [-30, -36], [-17, -12], [-16, -16], [-7, -31], [26, -53], [7, -38], [-2, -37], [1, -34], [30, -36], [34, -12], [14, 0], [13, 10], [39, 89], [8, 15], [111, 65], [55, 50], [30, 13], [28, 26], [64, 100], [23, 46], [21, 51], [18, 59], [13, 64], [18, 40], [101, 95], [32, 52], [11, 25], [12, 73], [9, 75], [12, 59], [16, 56], [22, 57], [25, 52], [15, 54], [21, 128], [10, 72], [7, 25], [11, 22], [9, 27], [7, 31], [3, 30], [5, 93], [-3, 72], [-16, 61], [-14, 17], [-15, 1], [-23, -5], [-19, 24], [4, 22], [20, 4], [13, 12], [9, 21], [18, 66], [11, 71], [1, 31], [-14, 58], [-11, 69], [0, 37], [12, 43], [17, 34], [16, 9], [17, 2], [15, 13], [14, 20], [8, 21], [13, 59], [4, 33], [-7, 90], [8, 24], [11, 15], [16, -11], [15, -2], [19, 3], [17, -9], [4, -23], [11, -151], [6, -21], [13, -16], [14, 3], [13, 23], [8, 32], [17, 6], [51, -34], [18, 24], [11, 37], [11, 66], [-5, 60], [-13, 21], [-12, -4], [-11, -16], [-13, -9], [-75, -31], [1, 66], [16, 99], [9, 31], [12, 15], [32, -17], [15, -11], [34, -48]], [[84525, 65965], [-16, -91], [-14, -13], [-14, 7], [-14, 51], [10, 19], [14, -10], [11, 4], [25, 74], [7, -12], [-9, -29]], [[84413, 65829], [-18, -8], [-21, 10], [-19, 2], [0, 18], [20, 17], [0, 25], [5, 13], [46, -30], [-2, -22], [-11, -25]], [[84845, 66096], [-24, -15], [-25, 8], [4, 81], [9, -11], [5, -28], [19, -16], [12, -19]], [[85627, 67196], [-27, -27], [-10, -31], [-25, -11], [-24, -44], [-23, -9], [0, -35], [10, -30], [-15, -6], [-17, -36], [-1, -27], [6, -22], [-1, -11], [-20, -31], [-22, -2], [-1, 35], [2, 25], [20, 63], [0, 73], [19, 8], [7, 10], [29, 52], [6, 22], [-16, 21], [1, 25], [4, 11], [24, -8], [10, -19], [5, -2], [14, 14], [6, 25], [27, 50], [11, 49], [21, -41], [-6, -52], [-14, -39]], [[85832, 67811], [-12, -11], [-15, 15], [-5, 66], [7, 32], [12, 7], [11, -57], [7, -24], [-5, -28]], [[85958, 68092], [-24, -47], [-25, 42], [-31, 29], [15, 7], [8, 11], [1, 18], [20, 27], [40, 20], [12, 2], [14, 19], [5, 17], [6, 9], [25, 24], [7, -28], [-1, -21], [-19, -12], [-19, -29], [-17, -36], [-16, -15], [-5, -11], [4, -26]], [[85922, 68032], [2, -13], [-27, 11], [-11, 53], [18, -10], [6, -18], [12, -23]], [[88844, 70884], [-5, -6], [-13, 19], [-2, 17], [2, 10], [9, 2], [18, -20], [-9, -22]], [[28538, 62475], [34, -21], [35, -11], [15, 0], [14, -7], [32, -49], [26, -28], [97, -60], [33, -105], [6, -33], [-25, -19], [-32, -7], [-30, -1], [-28, 20], [-12, 16], [-29, 7], [7, 14], [-13, 7], [-16, -2], [-12, -40], [-14, -32], [-25, 3], [-10, 27], [-13, -12], [-11, -20], [-13, -75], [-21, 37], [-23, 31], [-28, 13], [-57, 2], [-28, 11], [-22, 63], [-9, 18], [-23, 17], [-22, 72], [-8, 10], [-62, 16], [-12, 40], [4, 36], [20, 44], [10, 12], [34, -1], [32, 13], [14, 19], [15, 12], [117, -32], [27, 0], [26, -5]], [[52903, 78839], [7, -6], [28, -1], [31, -4], [19, -31], [19, -10], [28, -3], [18, 4], [9, 11], [11, 36], [19, 45], [31, 22], [52, 5], [27, 8], [27, -1], [20, -7], [21, 1], [54, 31], [56, 25], [8, -4], [1, -9], [-10, -18], [-10, -25], [7, -29], [31, -57], [17, -44], [17, -33], [25, -17], [33, -11], [28, -4], [30, -12], [100, -31], [51, -8], [39, -2], [58, -20]], [[53811, 78103], [17, 23], [-43, 82], [-19, 0], [-26, -35], [-72, 36], [-14, -15], [-10, -28], [-25, -35], [-35, -15], [-40, -38], [-41, -27], [-32, -21], [-18, 4], [29, 44], [-13, 1], [-38, -31], [-22, -27], [-7, -44], [-7, -74], [17, -19], [30, -97], [36, -41], [-7, -40], [-9, -31], [-22, -27], [-19, 20], [-11, 0], [-8, -64], [16, -168], [25, -119], [25, -51], [57, -81], [60, -42], [108, -136], [59, -42], [15, -24], [36, -104], [31, -121], [33, -189], [24, -94], [48, -105], [100, -151], [90, -111], [84, -68], [66, -12], [155, 15], [27, -6], [29, -19], [6, -47], [-10, -32], [-33, -33], [-33, -46], [-4, -63], [31, -44], [150, -117], [153, -98], [48, -50], [55, -78], [134, -107], [22, -52], [82, -111], [36, -87], [7, -67], [-17, -67], [-8, -48], [-14, -48], [-35, 18], [-39, 49], [-59, 197], [-108, 20], [-22, 15], [-39, 34], [-2, 22], [-10, 28], [-9, 10], [-42, 6], [-28, -32], [-34, -76], [-38, -109], [-39, -160], [-2, -64], [21, -63], [63, -35], [48, -56], [32, -58], [3, -140], [14, -80], [-21, -45], [-41, 11], [-54, -29], [-39, -51], [-16, -49], [4, -128], [-8, -48], [-73, -92], [-38, -94], [-10, -39], [-14, -45], [-93, -1], [-21, 55], [-1, 81], [16, 50], [34, 24], [22, 104], [-7, 75], [14, 33], [12, 23], [26, 14], [37, 13], [3, 105], [-28, 48], [-10, 66], [-14, 124], [-47, 157], [-25, 140], [-19, 69], [-30, 37], [-54, -1], [-27, 10], [-96, 98], [-6, 15], [0, 25], [16, 40], [-10, 52], [-12, 50], [-18, 43], [-21, 22], [-43, -14], [-15, -10], [-27, 4], [-21, -19], [-12, -1], [33, 75], [-9, 17], [-33, 31], [-45, 5], [-12, 4], [-8, -20], [-8, 11], [1, 33], [-53, 150], [-35, 61], [-17, 11], [-32, -13], [-54, 27], [-32, 6], [-17, -7], [-27, -19], [-13, 12], [-5, 20], [-48, 63], [-61, 35], [-118, 197], [-36, 74], [-75, 81], [-47, 119], [-39, 43], [-56, 35], [-13, -4], [-17, -13], [-13, -2], [-10, 15], [10, 16], [12, 7], [-4, 45], [-64, 118], [-38, 37], [-10, 24], [-8, 32], [-8, 20], [-18, 13], [-15, -3], [-21, 8], [1, 57], [4, 43], [-3, 37], [-20, 96], [-36, 82], [-20, 195], [-17, 55], [-39, 42], [-88, 46], [-122, 126], [-26, 2], [-74, 49], [-46, 8], [-59, -43], [-72, -121], [-59, -125], [-21, -25], [-75, -43], [-67, -20]], [[52081, 77054], [-1, 32], [-2, 24], [11, 27], [19, 31], [17, 40], [7, 28], [-3, 19], [-8, 28], [-11, 2], [-63, -23], [-15, 6], [-47, 36], [-50, 46], [-19, 32], [-7, 32], [5, 21], [-4, 20], [-10, 27], [9, 31], [16, 39], [8, 26], [13, 7], [6, 16], [-10, 64], [-6, 10], [-9, 8], [-14, 1], [-24, 13], [-18, 22], [-4, 30], [-9, 28], [-16, 27], [-1, 28], [17, 15], [25, 1], [17, -6], [39, 46], [14, 4], [13, 10], [10, 63], [9, 19], [2, 11], [-8, 13], [-31, 45], [-15, 46], [-22, 51], [-21, 23], [-4, 18], [-1, 23], [5, 19], [37, 31], [23, 34]], [[52887, 76530], [9, -22], [1, -13], [-6, -15], [3, -33], [-24, 28], [-35, -14], [-21, 3], [-6, 24], [5, 15], [33, 3], [11, 7], [20, -3], [10, 20]], [[53871, 75291], [-12, -5], [-7, 6], [-4, 9], [5, 22], [25, -13], [-1, -12], [-6, -7]], [[53347, 73016], [-13, -6], [-18, 19], [-1, 28], [3, 9], [22, -13], [6, -26], [1, -11]], [[54326, 73859], [-19, -66], [-9, -25], [-67, -160], [-7, -37], [-5, -40], [-7, -35], [-9, -34], [-9, -42], [1, -48], [4, -23], [8, -16], [13, -14], [10, -22], [-16, -21], [18, -40], [14, -24], [2, -24], [0, -24], [-30, -46], [-12, -24], [-8, -31], [-3, -31], [3, -28], [-1, -28], [-30, 4], [-32, 17], [-31, -8], [-45, 33], [-16, 5], [-15, 13], [-38, 100], [-30, 43], [-32, 33], [-33, 2], [-33, -4], [-29, 20], [-59, 68], [-63, 55], [-27, 35], [-12, 24], [-14, 16], [-36, 16], [-33, 37], [-14, 2], [-32, -4], [-16, 2], [-16, 13], [-32, 44], [-20, 60], [-5, 26], [14, 69], [17, 65], [15, 19], [17, 13], [11, 20], [9, 23], [32, -68], [15, -17], [14, 4], [26, 24], [2, 27], [29, 35], [36, 0], [17, -6], [9, -31], [14, -9], [16, -5], [53, -59], [15, -9], [15, -2], [41, 25], [31, 9], [66, -13], [36, 15], [25, 1], [36, 23], [28, 38], [15, 9], [15, 3], [38, -2], [38, -9], [16, 9], [13, 25], [16, 11], [17, -8], [44, 43], [19, 2], [18, -16], [-16, -27]], [[52675, 75392], [14, -37], [31, -151], [3, -32], [-6, -34], [-8, -23], [-31, -76], [5, -63], [11, -39], [2, -43], [-6, -54], [-19, -328], [-9, -58], [-6, -50], [-21, -16], [-28, 17], [-34, 28], [-16, -2], [-16, -10], [-13, 9], [-13, 16], [-9, -113], [-16, -46], [-23, -29], [-23, -2], [-23, 10], [-19, 0], [-15, 21], [-12, 38], [-18, 47], [-19, 55], [-2, 49], [-3, 109], [5, 24], [8, 23], [4, 49], [-3, 43], [6, 15], [11, -15], [8, 5], [-1, 22], [3, 40], [-15, 34], [-24, 11], [-2, 35], [2, 35], [13, 23], [4, 30], [1, 94], [-18, 34], [-6, 52], [-9, 33], [-16, 34], [-18, 27], [-12, 26], [-2, 69], [6, 58], [6, 24], [6, -3], [18, -29], [15, -6], [29, -7], [29, 9], [35, 26], [34, 31], [49, 93], [30, 18], [16, 25], [5, 33], [13, 8], [15, -32], [19, -3], [29, -26], [12, -26], [11, -30], [10, -13], [11, -8], [2, -7], [-9, -7], [-10, -35], [6, -10], [16, -19]], [[52355, 74347], [-16, -57], [-17, 40], [-1, 35], [3, 10], [20, -15], [11, -13]], [[52301, 75483], [-9, -26], [-13, 2], [5, 19], [12, 39], [15, 13], [6, -11], [-7, -23], [-9, -13]], [[59875, 70504], [-19, 3], [-23, 28], [-4, 25], [-7, 8], [-16, 3], [-31, 13], [-35, -43], [-15, -70], [-4, -33], [-12, -70], [5, -42], [2, -55], [3, -45], [-3, -27], [-7, -15], [2, -10], [6, -4], [19, 12], [21, -12], [20, -23], [1, -15], [-14, -9], [-33, -35], [-23, -41], [-6, -38], [-16, -81], [2, -16], [8, -10], [54, 9], [48, 32], [37, 35], [12, -2]], [[59714, 68867], [-19, -44]], [[59695, 68823], [-10, 50], [-21, 142], [-16, 98], [-21, 121], [-36, 147], [-3, 35], [-8, 51], [-25, 134], [-20, 96], [-23, 123]], [[59512, 69820], [29, 48], [0, 41], [49, 94], [-1, 9], [-13, 25]], [[59576, 70037], [2, 4], [54, 175], [35, 173], [33, 241], [23, 122], [20, 81], [9, 67]], [[59512, 69820], [-9, 48], [-4, 18]], [[59499, 69886], [52, 92], [25, 59]], [[47236, 82899], [-1, -17], [-21, 21], [-10, 22], [-56, 11], [23, 22], [12, -6], [40, -1], [11, -10], [2, -42]], [[48272, 83000], [12, -21], [5, -21], [-20, -7], [-22, 4], [-10, -14], [-1, -26], [8, -34], [14, -24], [11, -55], [10, -60], [14, -37], [3, -45], [-2, -22], [3, -40], [-6, -14], [4, -38], [18, -78], [7, -43], [5, -94], [-12, -36], [-16, -33], [-11, -40], [-8, -43], [-5, -70], [-36, -81], [-15, -20], [-18, -13], [39, -56], [-32, -26], [-34, -8], [-38, 14], [-23, -1], [-22, -19], [-8, -11], [-7, 6], [-14, 46], [-11, -48], [-22, -15], [-37, 3], [-62, -13], [-24, -14], [-10, -21], [-8, -25], [-10, -14], [-11, -8], [-48, -18], [-9, -8], [-23, -40], [-29, -23], [-24, -7], [-21, 23], [-9, 14], [-10, 8], [-33, -2], [10, -7], [7, -16], [3, -32], [-4, -31], [-16, -15], [-19, -3], [-31, -32], [-41, -9], [-22, -30], [-134, -50], [-7, 0], [-19, 13], [-20, 5], [-20, -4], [-56, -28], [-28, 6], [35, 69], [47, 35], [5, 10], [-16, 4], [-88, -24], [-31, -21], [-31, -6], [14, 32], [40, 43], [21, 21], [14, 8], [14, 25], [42, 29], [-135, -59], [-35, 7], [-8, 16], [-28, -7], [-10, 40], [40, 61], [24, 26], [29, 14], [27, 20], [10, 25], [-13, 8], [-82, -6], [-39, 5], [2, 20], [8, 22], [40, 37], [22, 6], [20, -4], [19, -9], [15, -13], [46, 8], [-19, 23], [-3, 49], [-15, 16], [19, 22], [21, 14], [36, 47], [13, 7], [71, 11], [76, 24], [76, 34], [-39, 19], [-19, 25], [-30, -51], [-21, -19], [-61, -10], [-19, 6], [-27, 15], [-9, -6], [-8, -12], [-40, -24], [-42, -6], [49, 45], [62, 76], [14, 25], [20, 42], [-6, 18], [-13, 11], [45, 87], [16, 15], [29, 3], [22, 14], [9, 0], [8, 5], [19, 26], [-29, 16], [-29, 9], [-92, -9], [-12, 2], [-12, 8], [-7, 11], [-6, 30], [-6, 6], [-21, 0], [-20, -9], [-15, 1], [-14, 13], [23, 30], [-29, 7], [-29, -6], [-25, 9], [0, 19], [11, 19], [-15, 18], [-3, 23], [16, 11], [16, -4], [35, 17], [43, 8], [-37, 16], [-15, 14], [-1, 22], [3, 18], [44, 32], [46, 13], [-4, 21], [4, 22], [-47, 7], [-46, -16], [5, 43], [11, 38], [2, 25], [-2, 27], [-22, -11], [-3, 38], [-9, 26], [-32, -18], [1, 35], [9, 24], [17, 11], [17, -5], [30, 0], [30, 19], [43, 4], [69, -5], [47, -52], [12, 9], [19, 33], [9, 3], [71, -14], [44, -18], [12, 6], [-7, 35], [-15, 25], [19, 33], [23, 22], [16, 11], [36, 14], [15, 13], [11, 42], [16, 35], [-90, -18], [-85, 41], [14, 29], [18, 17], [31, 13], [3, 15], [15, 13], [26, 33], [-9, 43], [5, 32], [19, 21], [6, 30], [8, 22], [38, 8], [37, 20], [13, -2], [43, 5], [15, -8], [-4, 36], [27, 4], [10, -7], [5, -25], [12, -17], [3, -28], [-8, -22], [-13, -17], [12, -17], [-19, -31], [21, 13], [29, 31], [-1, 25], [-5, 31], [-9, 28], [4, 31], [17, 20], [43, 10], [-18, 35], [16, 3], [18, -7], [25, -28], [26, -21], [28, -17], [-27, -35], [-32, -23], [-13, -26]], [[62434, 73238], [0, -4], [9, -41], [23, -153], [13, -19], [15, -16], [11, -23], [4, -23], [-1, -35], [0, -41], [6, -31], [9, -24], [8, -12], [12, -1], [14, -6], [9, -24], [31, -174], [3, -22], [13, -7], [21, 3], [21, -18], [24, -28], [21, -53], [15, -9], [46, 8], [63, -8], [29, -28], [-3, -16], [-23, -19], [-39, -22], [-12, -38], [-7, -48], [1, -27], [10, -30], [28, -60], [2, -21], [5, -30], [5, -21], [-6, -40], [-25, -27], [-34, -30], [-67, -132], [-5, -29], [0, -78], [-7, -23], [-21, 1], [-17, 4], [0, -28], [-11, -36], [-6, -32], [25, -75], [4, -40], [-4, -36], [-23, -63], [-13, -42], [3, -9], [18, -17], [56, -138], [17, -48], [24, 13], [9, -1], [7, -8], [4, -16], [0, -21], [-6, -31], [30, -12], [11, -32], [35, -107], [-2, -32], [-16, -50], [0, -34], [3, -30], [5, -11], [52, -4], [22, -12], [53, -55], [61, -84], [50, -69], [43, -58], [45, 4], [13, -11], [11, -18], [13, -48], [26, -109], [22, -37], [34, -87], [32, -82], [-21, -111], [-20, -116], [0, -149], [0, -80], [43, -3], [49, -4], [0, -96], [0, -96], [1, -110], [14, -5], [23, -23], [9, -36], [13, -19], [14, -3], [15, -18], [14, -32], [5, -24], [-4, -16], [3, -29], [10, -42], [13, -19], [18, -24]], [[63484, 69102], [-25, -14], [-28, 11], [-59, 48], [-19, 2], [-25, -19], [-1, -16]], [[65607, 67350], [-26, -69], [-39, -58], [-17, 18], [-12, 0], [-28, -23], [-20, -3], [-37, -40], [-33, -20], [-23, 2], [-8, 4], [-5, 27], [0, 10], [15, -5], [51, 36], [64, 58], [6, 26], [-10, 43], [3, 9], [41, -21], [46, 42], [39, 11], [19, -29], [-26, -18]], [[67017, 72361], [5, -38], [-1, -23], [-9, -23], [-6, -29], [-7, -36], [-3, -28], [-13, -14], [-11, -9], [1, -36], [6, -31], [6, -36], [-7, -25], [-5, -28], [-10, -46], [3, -38], [-11, -33], [-14, -28], [-9, -23], [-2, -33], [-10, -11], [-19, -27], [-12, -19], [-18, -5], [-3, -16], [2, -15], [8, -9], [11, -33], [24, -57], [-68, -7], [-21, -51], [-23, -72], [11, -145], [-11, -75], [7, -42], [17, -29], [23, -16], [42, -1], [28, -12], [3, -19], [-16, -28], [-26, -54], [-14, -23], [-43, -107], [0, -45], [4, -37], [19, -116], [18, -112], [33, -202], [0, -46], [-11, -105], [0, -63], [4, -82], [-3, -43], [8, -95], [9, -7], [72, -18], [65, -17], [87, -23], [27, -56], [16, -122], [-1, -92], [-7, -47], [-63, -134], [-63, -136], [-63, -135], [-73, -156]], [[67107, 66360], [-15, -4], [-12, -24], [-22, -30], [-47, 23], [-37, 24], [-124, 57], [-13, 28], [-8, 48], [-21, 13], [-31, -72], [-104, 42], [-36, -13], [-21, 22], [-57, 2], [-44, 45], [-64, -31], [-50, -6], [-69, 79], [-74, 22], [-60, -7], [-31, 6], [-50, 29], [-24, 29], [-39, -22], [-18, 41], [-110, 38], [-21, 74], [-15, 68], [-1, 70], [-27, 123], [-9, 177], [-10, 70], [-15, 60], [-20, 51], [-27, 55], [-24, 22], [-103, 42], [-20, -6], [-46, -27], [-49, -61], [-81, -34], [-17, -26], [-20, -59], [-26, -35], [-36, 9], [-39, -35], [-72, -97], [-38, -29], [-32, 2], [-34, 46], [-76, 62], [-49, 20], [-69, -14], [-32, 11], [-56, 72], [-14, 53], [-32, 35], [-99, 79], [-81, 105], [-15, 39], [-10, 59], [-35, 71], [-79, 58], [-45, 61], [-52, 14], [-49, -2], [-21, 11], [-20, 27], [-67, 127], [0, 51], [-41, 124], [-10, 45], [-9, 123], [-11, 32], [-43, 51], [-7, 33], [10, 44], [0, 34], [-23, 31], [-33, 17], [-8, 38], [6, 73], [-5, 47], [-30, 73], [-43, 76], [-44, 111], [-17, 28], [-11, 73], [-16, 87], [-24, 6], [-119, -104], [-35, 59], [-104, 102], [-8, 15], [-7, 23], [13, 14], [13, 5], [26, -18], [16, 21], [-6, 35], [-26, 21], [-36, -2], [10, -32], [-34, -30], [-7, -41], [5, -49], [3, -70], [-14, -33], [-10, -16], [-45, -4], [-21, -31], [-14, -7]], [[62449, 74683], [5, -13], [45, -118], [20, -35], [12, -29], [8, -33], [13, -23], [18, -12], [23, -32], [15, -25], [25, -51], [26, -20], [96, -37], [54, -17]], [[62809, 74238], [15, -5], [41, 25], [48, -4]], [[62913, 74254], [18, -1], [64, 105], [19, 36], [38, 18], [21, 42], [34, 50], [42, 48], [38, 43], [30, 26], [53, 61], [33, 21], [29, -1], [43, -71], [36, -65], [11, -28], [-18, -25], [-34, -25], [-6, -18], [-2, -23], [1, -22], [5, -18], [41, -42], [5, -23], [0, -23], [-5, -15], [-9, -8], [-29, -12], [-24, -13], [-9, -14], [-7, -16], [1, -17], [7, -20], [51, -55], [5, -20], [10, -27], [13, -17], [21, -4], [10, -11], [48, -101], [12, -7], [57, 22], [8, -1]], [[63574, 73983], [1, -25], [8, -143], [7, -74], [9, -72], [16, -66], [18, -62], [25, -39], [56, -47], [27, -13], [71, -9], [71, -21], [41, -22], [13, -15], [11, -23], [34, -110], [54, -78], [110, -117], [53, -39], [179, -74], [119, 4], [328, 142], [110, 36], [41, 0], [-25, -28], [-41, -17], [25, -20], [38, -3], [18, 3], [13, 18], [2, 30], [-2, 30], [-18, 132], [-10, 93]], [[77077, 52687], [61, -162], [24, -22], [33, -74], [8, -25], [-9, -52], [-7, -147], [-15, -37], [-38, 18], [-1, 26], [-22, 111], [-39, 62], [-16, 3], [-10, 63], [-20, 76], [-60, 137], [46, -1], [22, 33], [5, 27], [4, 7], [34, -43]], [[77545, 50818], [-26, -3], [-55, 69], [-13, 31], [-3, 42], [-52, 159], [-7, 37], [20, 131], [54, 31], [18, -22], [6, -59], [30, -106], [10, -57], [8, -26], [3, -19], [-2, -14], [22, -68], [15, -39], [2, -64], [-30, -23]], [[82399, 46881], [-35, -120], [13, -19], [7, -18], [-58, -25], [-24, 13], [-14, -3], [-59, 22], [-42, 28], [-5, 21], [3, 26], [13, -8], [32, -4], [13, 11], [0, 77], [-5, 100], [44, 82], [24, 33], [27, 20], [68, -46], [11, -12], [9, -18], [4, -30], [-26, -130]], [[82068, 47145], [28, -31], [40, -89], [3, -25], [-12, -24], [-28, -38], [-63, -58], [-10, -28], [-14, -54], [-3, -23], [-4, -13], [-7, -9], [-14, -8], [-15, 12], [13, 34], [1, 42], [-10, 39], [-14, 32], [-29, 44], [-30, 40], [-31, 19], [-33, 9], [-12, 19], [-19, 49], [-6, 27], [-3, 28], [2, 27], [8, 1], [32, -6], [59, -32], [30, -2], [16, 7], [43, 62], [11, -1], [41, -27], [30, -23]], [[79456, 50881], [10, -40], [13, -35], [10, -39], [13, -185], [43, -159], [126, -63], [-21, -25], [-10, -23], [-8, -27], [-18, -110], [1, -24], [11, -37], [3, -41], [-16, 0], [-17, 10], [-15, 15], [-13, 20], [-14, 16], [-15, 10], [-26, 32], [-34, 22], [-36, 17], [-17, 47], [-8, 58], [9, 86], [-9, 24], [-13, 21], [-15, 62], [-6, 73], [-22, 28], [-30, 17], [-13, 14], [-58, -26], [-14, 6], [-12, 20], [-32, 21], [1, 40], [15, 32], [35, 33], [16, 27], [3, 36], [-6, 26], [3, 28], [11, 27], [13, 21], [34, 27], [16, -48], [7, -40], [10, -30], [14, 42], [-9, 72], [27, 16], [26, 1], [19, -20], [13, -31], [5, -44]], [[84216, 49221], [6, -124], [-2, -32], [-15, 47], [-6, 10], [-4, -10], [-6, -5], [-8, 0], [-10, -48], [-1, -45], [-8, -30], [-4, -101], [3, -28], [12, 14], [7, 3], [27, -39], [15, -28], [-4, -34], [-19, -35], [-21, -15], [-16, 15], [-5, -7], [-9, -18], [-8, -24], [3, -24], [-19, -68], [-10, -19], [-22, 21], [-14, -18], [-11, 1], [-16, 69], [0, 32], [15, 36], [1, 26], [7, 29], [17, 40], [10, 29], [0, 19], [8, 72], [2, 30], [5, 32], [8, 66], [1, 122], [26, 101], [25, 28], [11, 5], [-2, -27], [31, -68]], [[84067, 48807], [-7, -38], [-15, -30], [-13, -2], [-12, 6], [-23, 26], [-6, -27], [-18, 1], [-6, 35], [12, 105], [19, 39], [-2, 41], [-15, 88], [10, 46], [43, 34], [37, 42], [12, 9], [11, -32], [5, -149], [-40, -118], [8, -76]], [[80087, 53968], [-38, -21], [-22, 30], [24, 36], [8, 3], [6, 7], [2, 15], [-43, 24], [-12, 21], [-12, 54], [0, 34], [55, 91], [13, 10], [2, -38], [38, -95], [2, -64], [-1, -23], [-22, -84]], [[80057, 50116], [-5, -61], [-6, -23], [-24, -30], [-7, -18], [-22, 3], [-3, 32], [-7, 21], [-23, 25], [-6, -6], [-4, -37], [-45, -26], [-13, -2], [6, 49], [-11, 38], [-1, 47], [-2, 21], [-6, 12], [11, 32], [-1, 37], [12, 39], [7, 95], [47, 21], [10, -17], [56, -21], [39, -58], [21, -77], [-23, -96]], [[87606, 51467], [59, -22], [21, 1], [21, -25], [26, 12], [14, -8], [49, -88], [24, -58], [35, -50], [26, -17], [-19, -45], [-39, -24], [-15, -1], [-30, 27], [-25, -5], [-21, 34], [-4, 52], [-21, 119], [-29, -34], [-33, 54], [-9, 1], [-3, -9], [-14, 19], [-12, 37], [-1, 30]], [[87631, 50926], [110, -29], [29, 4], [63, -12], [52, -38], [91, -7], [28, -12], [21, -26], [-51, -22], [-24, -20], [-45, -10], [-38, 10], [-27, -12], [-10, 20], [-39, 20], [-51, 41], [-105, 49], [-5, 30], [1, 14]], [[86336, 51840], [48, -24], [11, 4], [70, -64], [11, -31], [-4, -21], [10, -29], [-22, -43], [-11, -5], [-12, 16], [-22, 10], [-25, -18], [-17, 13], [-14, 40], [-24, 24], [-35, 84], [-17, -3], [5, -33], [14, -21], [20, -64], [11, -6], [11, 2], [16, -27], [-1, -41], [-40, -16], [-14, 30], [-3, 55], [-23, -19], [-9, -19], [-7, -2], [-15, 57], [-43, 3], [-29, 30], [14, 32], [2, 30], [19, 17], [19, -15], [19, 22], [14, -6], [10, 14], [38, 9], [25, 15]], [[85681, 53025], [-44, -10], [-10, 27], [-12, 124], [31, 99], [40, 58], [27, 15], [9, 1], [24, -71], [-18, -144], [-21, -73], [-26, -26]], [[85597, 50886], [-17, -23], [-8, -7], [-41, 16], [-48, -3], [-50, -22], [-29, 18], [-18, 30], [1, 32], [17, 78], [37, 60], [16, 10], [26, -16], [45, -45], [36, -54], [32, -41], [1, -33]], [[85014, 50431], [-4, -11], [-17, 31], [-11, 88], [-10, 24], [-11, 83], [3, 24], [14, 35], [11, 0], [8, -21], [-5, -90], [25, -114], [-3, -49]], [[85006, 50812], [85, -19], [-12, -21], [-92, -33], [-33, 6], [-100, -20], [-12, 1], [-2, 32], [-11, 23], [16, 20], [21, 4], [55, -7], [85, 14]], [[84713, 50860], [26, -20], [9, 0], [9, 24], [5, 4], [12, -12], [2, -39], [17, 6], [13, -14], [4, -9], [-1, -39], [-50, -6], [-36, -32], [-48, 28], [-54, -48], [-33, -16], [-28, 1], [-25, 84], [14, 99], [11, 16], [18, 8], [50, 5], [85, -40]], [[86478, 47235], [-4, -7], [-35, 8], [-19, 0], [2, 43], [-10, 33], [14, 48], [0, 56], [15, 7], [2, 32], [17, 84], [10, 19], [15, 7], [17, 49], [10, 15], [10, 37], [15, 17], [-2, 32], [9, 17], [23, 13], [16, -15], [10, -33], [-26, -40], [13, -99], [-19, -108], [-12, -33], [-23, -27], [-6, -27], [-27, -53], [-8, -46], [-2, -19], [-5, -10]], [[85222, 47426], [3, -28], [0, -13], [-33, -9], [-32, -31], [-17, -36], [-13, -46], [-44, 19], [-39, 3], [-18, 16], [-19, -1], [-24, -14], [-35, -40], [-8, -3], [3, 60], [10, 37], [36, 88], [31, -19], [36, -6], [40, 18], [29, 39], [40, 21], [33, -52], [21, -3]], [[84603, 47153], [7, -35], [22, 20], [21, 4], [47, -3], [35, -8], [21, -15], [2, -70], [-10, -15], [-181, -53], [-18, 17], [-7, 17], [20, 52], [-9, 25], [10, 40], [22, 27], [18, -3]], [[86389, 51085], [-10, -16], [-34, 15], [-17, 35], [-12, 48], [-8, 39], [-2, 32], [-10, 38], [1, 14], [62, 40], [12, -15], [26, -1], [12, -29], [-8, -127], [-12, -73]], [[76803, 54855], [34, -5], [63, 31], [35, -3], [32, -23], [30, -13], [72, 17], [14, -5], [13, -13], [11, -20], [33, -75], [56, -92], [16, -59], [9, -67], [6, -15], [63, -127], [7, -54], [-9, -73], [19, -59], [61, -55], [36, -40], [8, -24], [5, -29], [21, -44], [25, -28], [78, -74], [103, -156], [59, -74], [48, -112], [18, -54], [14, -58], [29, -84], [50, -105], [13, -31], [13, -46], [16, -43], [19, -39], [22, -30], [22, -10], [37, -75], [20, -24], [-3, 59], [-17, 51], [0, 32], [3, 27], [14, 24], [16, 6], [31, -21], [49, -89], [21, -52], [16, -72], [13, -75], [20, -37], [27, -13], [31, -5], [28, -23], [65, -104], [22, -48], [16, -57], [12, -68], [7, -71], [4, -16], [42, -85], [22, -36], [27, -18], [78, -19], [28, -30], [23, -49], [10, -50], [-17, -44], [-61, -68], [-66, -47], [64, 16], [32, 20], [30, 31], [30, 39], [46, 55], [17, 11], [21, -4], [18, -16], [28, -53], [26, -57], [20, -66], [12, -73], [-22, -39], [-33, -28], [-45, -71], [-4, -28], [9, -18], [-11, -52], [25, -32], [4, -28], [-22, -39], [2, -24], [26, -103], [13, -24], [40, -52], [60, -53], [34, -25], [38, -19], [17, 1], [28, 8], [6, -20], [12, -102], [6, -64], [9, -137], [11, -57], [-1, -69], [15, -59], [30, -38], [32, -31], [15, -30], [0, -45], [-5, -36], [-11, -28], [-33, -60], [-6, -25], [-5, -65], [6, -30], [13, -2], [10, 16], [40, 87], [11, 16], [15, 12], [15, 8], [72, 0], [31, -13], [27, -29], [25, -36], [88, -228], [40, -126], [3, -31], [1, -33], [-7, -25], [-37, -86], [-4, -23], [-12, -94], [2, -67], [13, -29], [9, -30], [0, -28], [-25, -139], [-2, -23], [15, -226], [1, -61], [-3, -77], [2, -124], [-19, -384], [-4, -23], [-15, -59], [-20, 1], [-16, 10], [-12, 22], [-6, 28], [-9, 23], [-48, 71], [-13, -12], [-49, -88], [-13, -13], [-16, 11], [-25, 26], [-81, 93], [-5, -30], [-1, -40], [16, -101], [2, -44], [-15, -9], [-8, 2], [-33, 59], [-31, 65], [-35, 87], [-26, 42], [-23, 46], [-66, 177], [-17, 27], [-101, 124], [-20, 30], [-26, 51], [-28, 46], [-61, 72], [-106, 184], [-46, 105], [-51, 170], [-17, 43], [-86, 128], [-47, 77], [-20, 44], [-45, 155], [-14, 52], [-16, 46], [-28, 37], [-24, 44], [-49, 140], [-15, 55], [-11, 61], [2, 120], [-103, 366], [-26, 114], [-23, 158], [-6, 16], [-56, 142], [-19, 45], [-24, 43], [-20, 50], [-38, 162], [-15, 45], [-20, 33], [-73, 61], [-27, 34], [-22, 48], [-13, 62], [-14, 131], [-35, 199], [-38, 267], [-26, 119], [-30, 94], [-9, 21], [-133, 169], [-22, 25], [-24, 15], [-34, 11], [-27, 43], [-10, 78], [-6, 105], [-7, 63], [-7, 35], [-56, 75], [-21, 58], [-18, 65], [-17, 50], [-61, 172], [-21, 45], [-26, 32], [-76, 33], [-23, 29], [-37, 98], [-22, 50], [-67, 109], [-114, 230], [-23, 57], [-18, 60], [-14, 64], [-48, 177], [3, 36], [8, 37], [-1, 31], [-6, 31], [1, 27], [15, 16], [32, 21], [34, -2], [31, -9], [30, -17], [29, -38], [51, -94], [30, -33], [33, -15], [67, -22]], [[84106, 46882], [-40, -20], [-24, -20], [-23, -26], [-15, -5], [-27, -2], [-37, 5], [-26, -9], [-71, -66], [-28, -6], [-24, -16], [-8, 26], [-10, 19], [-24, 4], [-24, -1], [-24, -59], [-38, 13], [-15, -6], [-14, -12], [-14, -5], [-15, 4], [-56, 45], [-64, 27], [-64, -10], [-55, 25], [-30, -19], [-29, -28], [-8, 29], [-11, 26], [-9, 37], [0, 44], [3, 30], [8, 27], [5, 29], [3, 31], [12, -15], [12, 5], [38, 34], [37, 50], [34, 19], [20, 5], [16, -10], [17, 4], [18, 11], [28, -39], [11, -8], [38, -3], [34, -22], [30, -34], [44, -31], [27, -42], [20, -15], [15, -5], [13, 6], [18, 28], [20, 12], [18, 0], [32, 7], [14, 7], [15, 15], [15, -9], [13, -15], [54, -74], [17, -2], [30, 16], [10, 20], [4, 31], [9, 25], [11, 22], [14, 17], [40, 28], [28, 28], [19, 48], [-44, 20], [9, 34], [15, 20], [20, -7], [17, -27], [7, -102], [-14, -15], [-8, -15], [-6, -20], [-26, -38], [10, -46], [-7, -20], [-10, -9]], [[83336, 46442], [13, -25], [45, -50], [7, -21], [3, -35], [9, -26], [21, -4], [22, 5], [16, -16], [15, -26], [21, -50], [19, -56], [23, -31], [14, -46], [-8, -41], [-30, -57], [-16, -12], [-21, -4], [-35, -34], [-12, 18], [-39, 12], [-30, 24], [-26, 45], [-15, 47], [-19, 43], [-33, 28], [-58, 83], [-37, 7], [-15, -6], [-15, 0], [-77, 37], [-12, 22], [-9, 28], [-9, 27], [-5, 31], [10, 27], [10, 19], [43, 32], [31, 10], [35, -2], [53, 10], [51, -16], [15, 12], [25, 34], [9, -12], [11, -31]], [[82844, 47051], [14, -22], [13, 2], [26, 34], [16, 13], [17, 1], [17, -6], [16, -25], [6, -40], [6, -13], [10, 49], [13, 14], [14, 8], [22, -3], [17, -23], [16, -69], [-1, -60], [6, -22], [11, -17], [8, -23], [-7, -24], [-7, -11], [-21, -11], [-9, 4], [-9, 17], [-10, 6], [-23, -6], [-21, -13], [3, -22], [17, -10], [5, -11], [-1, -14], [-7, -3], [-22, 19], [-15, -3], [-54, -26], [-14, 1], [-9, 24], [1, 63], [-6, 17], [-40, -77], [-12, -19], [-17, -9], [-16, 3], [-59, -46], [-18, 6], [-18, 0], [-62, -50], [-33, -14], [-17, -1], [-17, 4], [-15, -4], [-14, -21], [-28, -17], [-28, 13], [-25, 18], [-23, 23], [-5, 29], [1, 35], [10, 48], [-7, 84], [5, 39], [9, 38], [15, 14], [18, 2], [31, 34], [28, 45], [16, -4], [37, -31], [22, -4], [37, 5], [15, -19], [6, -44], [8, -16], [11, -11], [26, -74], [24, 4], [21, -14], [38, 45], [28, -1], [8, 34], [-17, 37], [-20, 31], [-11, 6], [-12, -2], [-11, 5], [-45, 67], [-14, 37], [-8, 43], [5, 31], [31, 28], [15, 7], [55, -19], [9, -16], [14, -68], [11, -29]], [[84691, 52416], [-53, -98], [-17, -47], [-14, -51], [-21, -56], [-24, -50], [-12, -15], [-29, -27], [-17, -10], [-32, -4], [-97, -39], [-31, -5], [-32, 2], [-60, 10], [-12, 5], [-24, 51], [-27, 40], [-24, 5], [-24, -4], [-175, -3], [-61, -8], [-61, -18], [-33, 8], [-33, 21], [-24, 7], [-25, -2], [-115, -31], [-29, 3], [-58, 39], [-34, 8], [-33, -10], [-31, -36], [-11, -23], [-32, -81], [-18, -58], [-14, -73], [-11, -75], [-7, -61], [0, -64], [5, -72], [9, -71], [10, -55], [39, -126], [8, -17], [44, -36], [25, -45], [25, -126], [17, -65], [17, 0], [19, 4], [33, -8], [33, -17], [32, 39], [17, 73], [18, 55], [43, 103], [25, 48], [15, 15], [16, -6], [13, -28], [16, -22], [32, -11], [33, 7], [34, 34], [12, 20], [11, 26], [29, 22], [69, 0], [36, -8], [64, 9], [-1, 19], [-12, 20], [-4, 16], [12, 11], [41, 23], [42, 17], [31, -12], [27, -33], [11, -34], [4, -41], [-10, -105], [-5, -25], [-22, -12], [-20, 14], [-21, 54], [-28, 20], [-41, -16], [-14, -16], [-13, -22], [-23, -56], [-19, -64], [-41, -100], [-48, -86], [-23, -33], [-26, -23], [-83, -57], [-22, -42], [-17, -55], [-19, -19], [-22, -6], [-16, 10], [-33, 31], [-11, -25], [-2, -39], [16, -14], [27, -43], [20, -61], [13, -13], [29, -20], [12, -19], [22, -52], [34, -122], [12, -66], [19, -53], [58, -91], [3, -26], [-3, -30], [4, -27], [21, -52], [5, -34], [-23, -43], [-1, -62], [-14, -83], [-3, -28], [0, -26], [10, -24], [11, -18], [16, -10], [14, -17], [26, -65], [14, -17], [8, -23], [0, -36], [12, -20], [11, -37], [16, -9], [8, 10], [6, 16], [14, -6], [8, -25], [4, -33], [2, -37], [-1, -69], [-7, -24], [-15, 1], [-27, 28], [-1, -20], [2, -20], [-14, -7], [-16, 3], [-40, -3], [-73, -42], [-26, -26], [-17, -46], [-1, -31], [6, -68], [-9, -23], [-34, -9], [-47, 18], [-28, 18], [-16, 15], [-21, 45], [-8, 58], [16, 172], [4, 22], [7, 19], [8, 31], [2, 37], [-22, 45], [-34, 18], [-29, 37], [-111, 209], [-6, 21], [0, 34], [4, 33], [37, 114], [4, 22], [5, 91], [-1, 74], [-4, 75], [-17, 46], [-31, 15], [-32, 2], [-31, -15], [-30, -37], [-57, -79], [-22, -46], [-2, -60], [13, -58], [17, -54], [8, -58], [13, -207], [-1, -23], [-14, -60], [-6, -135], [6, -190], [10, -116], [-4, -63], [-26, -136], [-8, -75], [-1, -31], [31, -142], [7, -56], [4, -58], [-33, 28], [-15, -1], [-16, -9], [-34, -9], [-35, -1], [-12, -11], [-25, -38], [-15, -15], [-13, -3], [-44, 47], [-27, 52], [-24, 56], [-4, 63], [8, 66], [12, 70], [24, 116], [-1, 78], [8, 64], [14, 62], [5, 58], [3, 224], [-3, 20], [-33, 133], [-4, 22], [0, 36], [3, 34], [1, 31], [-7, 24], [-14, 22], [-16, 9], [-34, -9], [-68, -36], [-20, 31], [-15, 49], [-10, 68], [-5, 71], [2, 67], [10, 65], [-8, 45], [-12, 49], [0, 25], [7, 23], [12, 18], [15, 11], [14, 19], [37, 66], [12, 58], [1, 72], [10, 68], [19, 63], [22, 58], [7, 60], [-11, 96], [5, 43], [-4, 51], [0, 50], [13, 95], [42, 194], [40, 103], [16, 27], [21, -47], [16, -57], [1, 51], [-5, 50], [-16, 117], [-14, 228], [4, 21], [14, -3], [15, 20], [7, 36], [-15, 84], [0, 30], [28, 119], [24, 43], [10, 27], [6, 73], [12, 27], [16, 20], [20, 50], [11, 63], [7, 5], [8, 2], [12, -55], [14, -22], [28, -18], [24, 21], [7, 27], [9, 24], [14, 25], [12, 28], [14, 66], [18, 59], [12, 21], [15, 13], [16, 8], [16, 1], [35, -37], [21, -7], [20, 2], [14, -6], [10, -17], [9, -34], [11, -29], [10, -14], [12, -7], [76, 12], [67, -33], [91, -8], [32, -19], [30, -26], [36, -44], [14, -10], [15, 2], [19, 42], [14, 10], [15, 1], [59, -8], [158, -52], [23, 8], [96, 99], [38, 93], [34, 26], [11, 43], [7, 51], [12, 13], [29, 15], [11, 15], [21, 62], [24, 56], [11, 16], [34, -8], [15, -25], [19, -81], [-3, -14], [-22, -40], [-7, -17], [-25, -115], [-17, -56], [-21, -50]], [[79825, 48382], [28, -66], [25, -35], [29, -19], [30, -2], [30, -8], [35, -25], [35, -11], [17, 4], [16, 13], [11, 1], [10, -12], [25, -56], [27, -51], [6, -26], [18, -123], [20, -35], [29, -10], [33, 0], [33, -5], [77, -29], [30, 4], [27, 29], [24, -19], [65, -34], [32, -8], [36, 10], [37, 2], [17, -10], [17, -15], [14, -6], [15, 1], [26, 29], [18, 52], [14, 67], [11, 69], [7, 30], [10, 26], [14, 17], [14, 11], [38, -7], [8, -16], [42, -118], [8, -10], [45, -8], [12, 4], [27, 24], [16, 2], [28, -29], [13, -25], [13, -18], [70, -19], [28, -50], [13, -7], [49, 6], [34, -5], [29, -13], [13, -72], [11, -73], [7, -25], [28, -25], [12, -23], [-3, -73], [3, -70], [61, -60], [65, -35], [69, -4], [70, 12], [35, 15], [45, 26], [9, 0], [87, -80], [8, -12], [9, -60], [0, -62], [-16, -149], [-1, -41], [1, -41], [18, -89], [9, -25], [31, -47], [1, -25], [-4, -24], [-35, 17], [-21, 20], [-12, 33], [-17, 19], [-33, -7], [-61, 34], [-69, 52], [-122, 110], [-33, -1], [-32, -14], [-33, -28], [-35, -20], [-26, -7], [-26, 5], [-65, 27], [-66, 17], [-168, 11], [-47, 25], [-79, 12], [-63, 22], [-62, 30], [-158, 149], [-51, 36], [-159, 71], [-24, 6], [-58, -5], [-36, 21], [-32, 0], [-47, -23], [-15, -17], [-18, -35], [-33, 2], [-32, 7], [-84, 33], [-31, 21], [-30, 30], [-28, 40], [-14, 14], [-72, 41], [-60, 14], [-122, 18], [-27, 12], [-22, 15], [-12, 33], [1, 42], [9, 36], [12, 36], [8, 34], [-89, 73], [-71, 40], [-30, 7], [-31, 0], [-34, -8], [-34, 4], [-16, 11], [-17, 5], [-16, -9], [-13, 3], [-4, 33], [9, 28], [17, 32], [10, 6], [4, -50], [5, -10], [16, -11], [6, 3], [27, 64], [8, 31], [13, 85], [14, -16], [14, 10], [8, 13], [23, 196], [19, 58], [26, 47], [12, 12], [26, -29], [51, -11], [30, -20], [31, -2], [29, -10], [42, -34], [15, 3], [14, 11], [23, 38], [9, 60], [32, -31], [48, -12], [11, -17]], [[82659, 54245], [-3, -5], [-19, -16], [-9, -33], [27, -51], [1, -34], [21, -30], [24, -46], [1, -16], [9, -21], [4, -25], [-17, -26], [-24, -5], [-17, 24], [-16, 30], [-4, -37], [-13, -21], [-45, 6], [-32, 0], [-32, -10], [16, -5], [14, -12], [50, -96], [11, -35], [-17, -70], [8, -29], [19, -16], [24, -35], [17, -4], [12, -19], [0, -34], [7, -32], [-19, -12], [19, -8], [17, -16], [-9, -16], [-7, -20], [7, -10], [23, -19], [10, -16], [6, -45], [22, -73], [41, -95], [9, -34], [0, -32], [-6, -27], [-24, -32], [-19, -42], [-2, -15], [-26, -20], [12, -14], [9, -19], [18, -59], [42, -95], [22, -35], [87, -129], [46, -57], [60, -128], [31, -30], [6, -36], [-26, -54], [-38, -28], [-62, -15], [-62, 20], [-32, 15], [-28, 32], [-22, 63], [-29, 35], [12, -39], [7, -39], [-4, -43], [-11, -33], [-20, -25], [-21, -20], [-9, -14], [-53, -224], [-9, -60], [-16, -252], [0, -71], [24, -133], [2, -69], [5, -30], [-4, -25], [-11, -15], [-46, -41], [-32, -34], [-26, -48], [-21, -59], [-19, -44], [-25, -20], [-18, 3], [-14, 20], [-10, 38], [-6, 42], [-4, -31], [1, -30], [8, -33], [4, -34], [-5, -35], [-11, -28], [-29, -30], [-16, -26], [-2, -46], [-8, -26], [-11, -20], [-40, -46], [-9, -18], [-7, -24], [22, 4], [19, -4], [2, -45], [6, -34], [-8, -75], [-30, -50], [15, -11], [14, -16], [30, -12], [10, -53], [-4, -64], [-6, -58], [-21, -16], [-14, 11], [-14, -1], [-10, -17], [-2, -30], [19, 15], [-1, -75], [-5, -72], [-7, -40], [-11, -33], [-18, -10], [-16, 24], [-4, -28], [5, -24], [24, -58], [-15, -13], [-10, -20], [-5, -29], [-26, -66], [-11, -49], [-5, -52], [-12, -41], [-194, -180], [-156, -151], [-12, 10], [-7, 23], [-6, 235], [-19, 121], [-3, 68], [-22, -61], [-14, 6], [-15, 16], [-11, 19], [0, 26], [11, 75], [-14, -41], [-16, -31], [-16, 3], [-14, 16], [-5, 24], [-7, 4], [-35, -67], [-45, -35], [-25, 0], [-20, 21], [1, 50], [-2, 50], [-5, 29], [-13, 10], [-11, -4], [-32, -25], [-12, 3], [-7, -13], [-85, 180], [-18, -146], [-59, -78], [-44, -45], [-43, 17], [-45, 29], [-44, -35], [-47, -86], [-13, -13], [-14, 1], [-10, 11], [3, 65], [1, 64], [-4, 145], [-4, 28], [-13, 40], [-18, 28], [-11, -21], [-9, -28], [-36, 1], [-35, 23], [-30, -13], [-60, -58], [-32, -8], [-17, 12], [-11, 31], [6, 29], [14, 21], [-25, -17], [-21, -29], [-9, -19], [-10, 10], [-26, 65], [-54, -24], [-8, -8], [-13, -22], [-13, 11], [-7, 24], [-2, 136], [-28, 262], [-7, 134], [-6, 31], [-32, 49], [1, 69], [16, 57], [4, 68], [-5, 73], [-10, 71], [-12, 54], [-18, 46], [-24, 52], [-30, 39], [-63, 43], [-33, -4], [-13, 17], [-8, 23], [3, 43], [12, 30], [15, 7], [2, 17], [-33, 35], [-26, 48], [-9, 28], [-2, 31], [0, 73], [8, 46], [4, 25], [8, 76], [18, 24], [-3, 14], [-8, 10], [-11, 25], [-9, 29], [-20, 49], [-36, 60], [-6, 102], [-5, 150], [3, 68], [11, 128], [21, 40], [16, 12], [12, 17], [-10, 2], [-9, -6], [-15, -4], [12, 114], [6, 33], [25, 64], [30, 57], [12, 67], [17, 58], [70, 61]], [[85480, 52331], [21, -13], [21, 4], [10, 26], [3, 33], [11, 62], [24, 42], [17, 7], [12, 18], [-2, 46], [1, 45], [18, 48], [57, 68], [31, 24], [42, 7], [5, -25], [-5, -37], [8, -56], [-4, -150], [-10, -21], [-42, -52], [-47, -42], [-13, -17], [-12, -42], [1, -41], [38, -54], [59, -52], [13, -24], [8, -40], [2, -45], [14, -21], [20, -10], [13, -22], [11, -30], [-100, 70], [-26, 31], [-32, 4], [-31, 9], [-32, 27], [-34, 6], [-16, -19], [-7, -38], [-4, -43], [8, -53], [-1, -32], [-6, -58], [25, -171], [31, -137], [45, -142], [23, -49], [25, -44], [-41, 13], [-12, 48], [-52, 47], [-10, 28], [-34, 135], [-10, 25], [-31, 46], [-14, 33], [-5, 46], [4, 48], [-2, 66], [1, 65], [7, 81], [-11, 28], [-15, 26], [-17, 62], [-5, 70], [1, 40], [7, 35], [10, 31], [2, 30], [-25, 44], [-25, 124], [-2, 65], [32, 124], [-1, 60], [7, 36], [3, 38], [17, 83], [28, 70], [47, 99], [18, 21], [20, 14], [2, -24], [-4, -21], [-34, -101], [-5, -22], [-1, -43], [17, -24], [18, -51], [3, -68], [1, -72], [-4, -73], [-7, -25], [-28, -73], [-65, -85], [-5, -21], [0, -24], [12, -29], [15, -22]], [[86042, 50192], [64, -64], [33, -9], [56, 8], [21, -6], [53, -82], [15, -56], [4, -48], [9, -46], [13, -11], [15, -5], [20, -66], [4, -21], [-15, -166], [-63, 63], [-60, 71], [-26, 27], [-69, 60], [-11, 21], [-8, 27], [-30, 37], [-60, 6], [-23, -1], [-9, -6], [2, -20], [0, -40], [-15, -12], [-37, 26], [-34, 9], [-29, 25], [-39, 14], [-4, 12], [3, 19], [-1, 18], [-9, 6], [-18, -3], [-17, -17], [-14, -21], [-20, -55], [-11, -21], [-34, -9], [-14, 5], [-13, 14], [-39, 101], [-13, 22], [-14, 18], [-14, 8], [-13, -16], [-8, -31], [-3, -37], [-4, -22], [-17, -59], [-13, -36], [-5, 6], [7, 57], [0, 32], [-9, 34], [-5, 35], [65, 165], [24, 40], [103, 13], [61, -8], [34, 4], [22, 12], [19, -5], [4, -33], [12, -24], [16, 2], [29, 25], [26, 40], [15, 17], [16, 3], [16, -3], [16, -9], [43, -34]], [[85238, 50064], [46, -45], [10, -29], [9, -35], [9, -20], [10, -15], [18, -31], [5, -46], [-4, -93], [-21, -8], [-19, -14], [-40, -54], [-20, -10], [-21, -4], [-15, -14], [-15, -6], [-39, 30], [-38, 35], [-54, 61], [-10, 15], [-9, 32], [-25, 59], [-6, 38], [-2, 106], [6, 25], [11, 13], [36, -25], [24, 26], [69, 22], [71, -2], [14, -11]], [[84740, 46363], [-19, -30], [-10, -58], [-34, -54], [-37, -89], [-29, -46], [-26, -53], [-23, -36], [-28, -13], [-42, -7], [-56, -65], [-32, -28], [-31, -2], [-28, 21], [-11, 24], [2, 31], [10, 28], [12, 22], [7, 29], [-33, 37], [-2, 27], [12, 75], [9, 76], [12, 52], [46, 93], [28, 46], [17, 19]], [[84567, 46549], [36, 20], [20, 22], [17, 32], [51, 53], [9, 15]], [[87429, 48555], [-2, -22], [-1, -41], [5, -38], [-12, -39], [11, -57], [2, -29], [-1, -41], [-3, -18], [-8, -54], [-9, -19], [-6, -5], [-7, -16], [-54, 18], [-24, 37], [-21, 40], [-4, 17], [-25, 46], [-6, 16], [0, 25], [20, 7], [21, -1], [-1, 22], [13, 80], [-33, 51], [-6, 21], [12, 15], [26, -18], [32, 89], [10, 19], [4, 50], [18, 6], [13, -6], [8, -31], [3, -27], [-3, -24], [15, -13], [13, -60]], [[87370, 48132], [-4, -41], [-5, -45], [-25, -51], [-16, -78], [-9, -19], [-34, -35], [-30, 43], [-9, 37], [13, 172], [13, -6], [9, 1], [2, 12], [-19, 19], [-4, 98], [1, 38], [15, 8], [18, -29], [24, -52], [27, -40], [33, -32]], [[88481, 47077], [-66, -76], [-87, 13], [-31, 2], [-51, -19], [-11, 15], [10, 71], [41, 190], [49, 168], [20, 43], [29, 41], [31, 33], [69, 34], [62, -7], [9, -13], [27, -56], [18, -44], [7, -63], [-27, -107], [-29, -102], [-49, -80], [-21, -43]], [[89159, 46590], [-14, 19], [-39, 64], [-34, 74], [-23, 68], [-25, 62], [-108, 184], [-27, 61], [-6, 16], [3, 16], [12, 32], [22, 92], [-23, -57], [-27, -45], [-40, -3], [-39, -11], [-37, -27], [-37, -10], [-18, 14], [-11, 34], [-6, 35], [-3, 36], [-15, -59], [-31, -33], [-41, -69], [-12, 14], [-7, 27], [-3, 27], [8, 29], [6, 31], [8, 73], [19, 44], [12, 84], [8, 30], [4, 30], [-11, 34], [-18, 12], [-13, 20], [-15, 57], [-9, 20], [-16, 23], [-13, 28], [14, 20], [19, 8], [15, -1], [27, -13], [13, 0], [31, 21], [-17, -7], [-18, 1], [-57, 37], [-35, 38], [-33, 77], [0, 15], [23, 14], [51, 16], [-16, 39], [-23, 34], [-8, 61], [-15, 38], [-34, 61], [-23, 64], [-19, 129], [-20, 98], [5, 35], [17, 25], [-26, 3], [-23, 19], [12, 47], [27, 28], [-25, -7], [-23, -14], [-11, -2], [-11, 4], [-6, 19], [-1, 27], [3, 48], [-4, 46], [-21, 22], [-17, 33], [-10, 13], [-13, -1], [-12, 22], [-10, 32], [-126, 139], [-8, 40], [-11, -18], [-12, -8], [-14, 23], [-16, 15], [-16, -2], [-15, 12], [-16, 7], [-17, 1], [-66, 43], [-63, 68], [-51, 29], [-31, 38], [-33, 31], [-73, 30], [-74, 20], [-27, 1], [-22, -7], [-22, 2], [-122, 147], [-21, 67], [2, 39], [6, 33], [50, 9], [-36, 9], [-14, -4], [-29, -27], [-16, -2], [-22, 18], [-21, 22], [-35, -20], [-17, 34], [-7, 35], [-9, 17], [-13, -2], [-17, -13], [-18, 2], [-11, 25], [-8, 32], [-12, 23], [-15, 17], [-24, 42], [-12, 56], [1, 98], [4, 36], [24, 57], [16, 54], [-20, 6], [-19, -25], [-8, -25], [-3, -31], [-2, -103], [-15, -30], [-22, 2], [6, -60], [-9, -57], [-26, -67], [-2, -31], [4, -33], [-6, -32], [-42, -94], [-14, -5], [-32, 1], [-32, -15], [-15, 22], [-13, 28], [-9, 34], [-13, 70], [-10, 71], [32, 88], [-11, 80], [-21, 68], [-55, 94], [-57, 90], [-26, 18], [-43, 8], [-13, 9], [-13, 33], [-10, 39], [26, 17], [46, 46], [26, -3], [70, -24], [21, -23], [20, -13], [48, 75], [38, 99], [24, 21], [20, 7], [20, -9], [41, -34], [32, -16], [23, -4], [12, -30], [13, -14], [3, 46], [12, 54], [22, 17], [12, 3], [8, 14], [-2, 50], [-30, 6], [17, 43], [14, 21], [5, 21], [1, 26], [-59, -50], [-62, -21], [-36, 5], [-37, 1], [-73, -33], [-27, 1], [-65, 13], [-36, 17], [-27, -13], [-27, -1], [-28, 38], [-23, 48], [-12, 34], [-16, 25], [-7, 33], [-17, 126], [-2, 89], [-27, 2], [-28, 9], [-121, 85], [-15, -21], [-17, -11], [-17, -4], [-17, 5], [-17, 13], [1, 23], [13, 58], [12, 21], [17, 17], [11, 30], [18, 92], [1, 31], [-2, 32], [1, 24], [11, 12], [46, 30], [95, 45], [24, 27], [20, 43], [24, 26], [10, 27], [12, 21], [74, 57], [32, 4], [32, -6], [65, -34], [61, -54], [53, -72], [57, -52], [70, -8], [35, 5], [34, -7], [14, -15], [24, -44], [-7, -29], [-4, -60], [13, -58], [20, -58], [16, -62], [3, -30], [-6, -65], [-5, -31], [-20, -53], [-11, -58], [7, -71], [4, -71], [-1, -66], [4, -65], [10, -65], [47, -180], [27, -122], [9, 68], [-2, 76], [9, 27], [14, 15], [17, -16], [4, -30], [2, -67], [14, -131], [19, -6], [21, 20], [3, -40], [-1, -74], [10, -59], [8, -23], [34, -48], [15, -9], [44, -12], [33, -3], [32, 17], [21, 44], [18, 47], [65, 110], [18, 53], [18, 80], [7, 18], [63, 87], [8, 31], [9, 59], [14, 58], [10, 30], [62, 28], [64, 16], [64, 53], [27, 46], [2, 30], [-14, 53], [-1, 23], [15, 23], [56, 67], [66, 69], [53, 47], [29, 0], [27, -42], [28, -34], [150, -101], [24, -31], [21, -42], [30, -29], [33, -14], [31, -27], [28, -35], [64, -64], [86, -79], [21, -5], [80, 4], [14, -15], [13, -21], [12, -5], [91, -14], [14, -15], [13, -21], [8, -57], [62, -2]], [[88581, 47010], [-14, -7], [-69, 17], [-8, 24], [-1, 12], [16, 24], [15, 40], [24, 14], [10, 0], [28, -94], [-1, -30]], [[78251, 53040], [16, -47], [3, -31], [-11, -35], [-4, -54], [-33, -42], [-28, 10], [-9, 15], [-18, 82], [2, 69], [11, 27], [26, -4], [27, 38], [18, -28]], [[78451, 52413], [-13, -18], [-15, 28], [-13, 39], [-6, 41], [-6, 68], [-2, 48], [8, 28], [5, -1], [23, -28], [15, -49], [9, -15], [1, -45], [-5, -52], [-1, -44]], [[78469, 52683], [2, -74], [-20, 20], [-17, 29], [-25, 22], [-32, 7], [-23, 19], [-16, 34], [0, 16], [1, 13], [5, 10], [119, -67], [6, -29]], [[78618, 52273], [-5, -22], [-11, 16], [-54, 25], [-18, 2], [-47, 28], [-14, 14], [-10, 19], [3, 35], [7, 21], [4, 59], [12, 24], [23, -44], [26, -38], [15, -17], [46, -38], [16, -19], [7, -65]], [[78657, 52344], [-9, -17], [-14, 4], [-14, 20], [-20, 35], [-21, 31], [-28, 20], [-17, 5], [-6, 8], [6, 60], [18, 4], [58, -56], [19, -31], [28, -83]], [[78689, 52155], [-31, -4], [-9, 8], [4, 54], [9, 33], [14, -1], [16, -49], [-3, -41]], [[78735, 52225], [-5, -7], [-24, 73], [6, 42], [6, 11], [13, -26], [10, -27], [8, -32], [-14, -34]], [[78895, 52523], [18, -25], [14, 16], [-1, -21], [-3, -21], [-17, -59], [-28, 13], [-7, 19], [-2, 15], [4, 9], [3, 29], [12, 0], [7, 25]], [[79051, 52543], [1, -43], [16, -21], [4, -32], [-3, -51], [-14, -59], [-7, -15], [-20, 12], [-6, 19], [-3, 16], [3, 11], [-15, 14], [10, 22], [-7, 32], [-40, -20], [-12, -1], [-2, 36], [2, 15], [31, 45], [18, 9], [20, -10], [24, 21]], [[79104, 51741], [8, -9], [10, 30], [19, -41], [11, -21], [15, -20], [-15, -1], [-6, -19], [-4, -4], [-59, 66], [-38, -21], [-25, 19], [-8, 14], [14, 36], [13, 83], [26, -21], [6, -26], [-2, -7], [17, -16], [18, -42]], [[79020, 51650], [26, -56], [6, -20], [-13, -31], [-10, -44], [-6, -9], [-20, 16], [-14, -43], [-9, 69], [-20, 44], [12, 44], [5, 4], [6, -2], [6, -11], [31, 39]], [[78815, 51642], [-36, -20], [-41, 15], [5, 34], [20, 41], [17, -2], [31, -27], [12, -23], [-8, -18]], [[80474, 51163], [-55, -59], [-13, 3], [-10, 21], [6, 113], [7, 34], [39, 4], [23, -17], [12, -18], [5, -38], [-2, -23], [-12, -20]], [[81623, 47750], [-6, -9], [-47, 5], [-30, -47], [-21, -14], [-76, 0], [-9, 6], [-7, 0], [-4, -10], [-24, 7], [-77, 42], [-10, 38], [12, 42], [27, 58], [56, 12], [252, 4], [27, -51], [3, -16], [-55, -35], [-11, -32]], [[87489, 51200], [-13, -11], [-15, 12], [-15, 44], [5, 34], [17, 23], [15, -23], [4, -30], [11, -2], [-9, -47]], [[85346, 51557], [-17, -15], [-19, 1], [-4, 61], [6, 78], [18, 13], [27, -16], [-10, -20], [8, -42], [-9, -60]], [[85434, 51659], [32, -86], [-21, -82], [15, -46], [40, -2], [10, -17], [7, -21], [4, -28], [-10, -23], [-23, -20], [-26, 29], [-7, 28], [-5, 10], [-35, -21], [-10, -2], [-6, 39], [8, 55], [-24, 25], [-23, 57], [-1, 24], [9, 39], [-1, 32], [13, 3], [23, -43], [11, 40], [9, 17], [11, -7]], [[86923, 48443], [-22, -50], [21, 117], [4, 59], [20, 36], [29, 179], [7, -5], [10, -17], [-15, -131], [-41, -92], [-13, -96]], [[86890, 48472], [-17, -55], [-11, 19], [-7, 1], [-4, 32], [4, 68], [-14, 76], [19, -1], [5, -23], [6, -8], [18, -73], [1, -36]], [[85631, 49726], [-7, -21], [-16, -14], [-14, 1], [5, 21], [-4, 11], [-10, -5], [-16, -16], [-20, -33], [-13, 16], [-2, 26], [1, 11], [24, 45], [29, 8], [40, 43], [18, -2], [-4, -27], [-6, -20], [-4, -20], [-1, -24]], [[85226, 54166], [-11, -12], [-18, 4], [-2, 30], [18, 52], [12, 56], [-13, 14], [-12, 35], [-1, 41], [11, 76], [15, -6], [14, -33], [6, -62], [10, -47], [-20, -64], [-9, -84]], [[84904, 53822], [-7, -18], [-34, 32], [2, 51], [-4, 25], [-9, 27], [-4, 26], [4, 28], [20, -36], [12, -57], [16, -55], [4, -23]], [[86350, 47051], [-24, -18], [16, 45], [52, 104], [18, -19], [25, -4], [-37, -47], [-38, -19], [-12, -42]], [[86065, 47261], [-16, -53], [-18, 3], [-34, 71], [2, 50], [3, 16], [13, 5], [43, -15], [9, -40], [-2, -37]], [[85506, 47177], [48, -23], [28, 3], [6, -21], [-27, -49], [-56, 38], [-10, 40], [11, 12]], [[86208, 50869], [4, -34], [16, -32], [-5, -49], [-7, -7], [4, -23], [7, -17], [-13, -12], [-10, 6], [-15, -16], [-10, -22], [-32, -9], [-11, 20], [-57, 24], [-37, 53], [-5, 16], [71, 62], [32, 17], [26, -1], [33, 23], [9, 1]], [[78435, 48687], [-23, -3], [-42, 71], [-7, 22], [12, 21], [13, -2], [48, -45], [9, -22], [-10, -42]], [[77895, 50009], [11, -84], [-33, 58], [1, 40], [-5, 26], [-20, 33], [-15, 40], [-7, 96], [5, 20], [13, 1], [58, -126], [4, -21], [-1, -45], [-8, -14], [-3, -24]], [[77834, 50264], [-20, -47], [-33, 1], [-6, 29], [1, 70], [-8, 22], [0, 9], [6, 40], [6, 9], [53, -98], [1, -35]], [[77733, 50493], [2, -15], [-45, 50], [-22, 14], [-19, 56], [5, 26], [1, 37], [3, 15], [14, 5], [18, -27], [13, -66], [23, -61], [7, -34]], [[77349, 51537], [-17, -27], [-25, 26], [9, 37], [4, 51], [15, 41], [5, 47], [-29, 130], [14, 5], [12, -14], [19, -87], [17, -52], [-7, -70], [-17, -87]], [[76795, 53202], [-18, -5], [-16, 12], [-14, 33], [-75, 96], [-23, 1], [-16, 25], [-20, 8], [-21, 64], [-5, 35], [16, 16], [9, 35], [25, -15], [28, -62], [29, -23], [8, -12], [14, -34], [66, -85], [7, -28], [5, -29], [1, -32]], [[83900, 48710], [-18, -15], [-33, 66], [-14, 54], [3, 31], [10, 26], [5, 7], [-2, 28], [13, 14], [15, -2], [9, -38], [11, -10], [6, -36], [-5, -125]], [[84225, 51168], [6, -36], [-10, -31], [11, -59], [28, 78], [27, 10], [15, -13], [10, -15], [6, -30], [-10, -63], [-18, -30], [-22, -5], [-11, 37], [-15, 4], [-10, -81], [-5, -12], [-13, -10], [-12, 22], [-2, 12], [17, 37], [-9, 108], [-13, -20], [-34, -99], [-26, -44], [-8, 23], [-14, 67], [6, 86], [21, 58], [18, -4], [52, 18], [15, -8]], [[83850, 51608], [12, -25], [-7, -30], [-9, 7], [-26, 0], [-9, -2], [-12, -18], [-7, 0], [5, 27], [21, 41], [14, -6], [18, 6]], [[83479, 48215], [-11, -96], [-6, 33], [-2, 88], [-7, 43], [5, 49], [-1, 126], [8, 58], [16, -74], [4, -38], [-6, -189]], [[82048, 47827], [-22, -10], [-21, 21], [0, 27], [5, 25], [32, 13], [17, 0], [18, -18], [12, -18], [6, -21], [-34, -1], [-13, -18]], [[82306, 49614], [-59, -107], [-9, 28], [5, 109], [-17, 67], [2, 51], [11, 89], [15, 68], [34, 46], [8, 5], [-2, -83], [7, -31], [2, -27], [-3, -23], [6, -105], [4, -26], [-8, -33], [4, -28]], [[84152, 45559], [-26, -1], [-8, 6], [-3, 51], [8, 28], [60, 37], [23, 34], [34, 70], [20, 18], [5, 8], [4, -1], [3, -54], [9, -31], [1, -17], [-30, -27], [-26, -62], [-59, -41], [-15, -18]], [[84523, 47045], [-17, -36], [-11, -62], [-11, -19], [-22, -11], [-14, 62], [-24, -3], [12, 54], [11, 21], [16, 0], [7, -22], [4, -4], [36, 92], [7, 1], [6, -4], [5, -11], [-5, -58]], [[84423, 47077], [-39, -15], [-24, -72], [-19, 1], [-11, -32], [-2, -14], [1, -12], [-2, -13], [-8, -12], [-17, 20], [-16, -25], [-6, -7], [-23, 30], [-21, -2], [-6, 5], [26, 52], [36, 50], [6, 18], [-14, 5], [-8, 7], [-2, 12], [23, 7], [16, 2], [12, -16], [8, 1], [48, 58], [20, -14], [14, -14], [8, -20]], [[84254, 47030], [-6, -25], [-75, 2], [2, 33], [21, 36], [7, 12], [23, 11], [33, -20], [-5, -49]], [[87420, 48070], [-15, -6], [-8, 48], [13, 12], [14, -29], [-4, -25]], [[78728, 52447], [2, -32], [-19, 8], [-13, 37], [11, 26], [7, 10], [7, -36], [5, -13]], [[78840, 52304], [2, -17], [-25, 34], [-1, 24], [3, 11], [15, -26], [6, -26]], [[78955, 52323], [-18, -17], [-22, 53], [1, 12], [2, 9], [4, 6], [13, -27], [16, -10], [4, -26]], [[79080, 51877], [2, -14], [-13, 16], [-8, 10], [-5, 8], [-29, 79], [12, -5], [32, -69], [9, -25]], [[79523, 53661], [-1, -39], [-19, 23], [-4, 44], [7, 14], [13, -8], [4, -34]], [[79377, 53492], [-12, -2], [-3, 17], [1, 29], [-2, 24], [-3, 17], [0, 30], [11, -15], [8, -14], [10, -10], [7, -6], [4, -5], [-7, -42], [-14, -23]], [[80246, 53516], [-14, -30], [-14, 19], [22, 61], [5, 4], [1, -54]], [[80264, 50910], [-32, -25], [-10, 55], [21, 16], [22, -14], [-1, -32]], [[79853, 50172], [-11, -14], [-7, 14], [-2, 16], [5, 20], [15, 2], [7, -6], [-7, -32]], [[79690, 50111], [-5, -11], [-15, 6], [-11, 16], [-7, 15], [-2, 16], [15, 20], [32, -20], [-7, -42]], [[81780, 47733], [-4, -22], [-14, 5], [-13, 38], [6, 10], [8, 4], [9, -4], [8, -31]], [[81310, 48495], [-6, -20], [-26, 1], [-5, 24], [17, 41], [12, 3], [10, -15], [-2, -34]], [[79236, 48018], [-17, -13], [-13, 11], [-6, 16], [19, 40], [10, 10], [9, 3], [5, -22], [-7, -45]], [[77037, 53038], [-2, -13], [-29, 61], [-32, 34], [13, 8], [27, -9], [11, -9], [10, -30], [2, -42]], [[76489, 55191], [-6, -16], [-16, 8], [-18, 52], [6, 10], [12, -5], [21, -12], [2, -20], [-1, -17]], [[84332, 50861], [-19, -4], [-13, 17], [1, 85], [12, 18], [5, -3], [4, -25], [5, -23], [10, -21], [-5, -44]], [[84233, 49473], [-27, -69], [-19, 4], [-23, 45], [-6, 50], [-1, 18], [16, 28], [52, -9], [9, -25], [-1, -42]], [[84401, 50716], [5, -23], [-17, 1], [-7, 43], [1, 24], [18, -45]], [[84208, 50796], [-20, -47], [-2, 25], [4, 23], [5, 16], [9, 9], [4, -26]], [[83184, 46808], [-11, -6], [-11, 8], [4, 52], [-6, 34], [11, 28], [3, 48], [5, 15], [6, -15], [4, -10], [5, -5], [13, -1], [3, -21], [-1, -19], [-5, -21], [-15, -23], [-11, -25], [6, -39]], [[83075, 47097], [-12, -1], [-2, 23], [4, 24], [12, 11], [5, 0], [8, -22], [2, -11], [-8, -15], [-9, -9]], [[82113, 46791], [-8, -20], [-22, 35], [-6, 16], [17, 23], [6, 3], [14, -24], [-1, -33]], [[82745, 54254], [9, -55], [2, -21], [-52, -29], [-31, 68], [6, 27]], [[82682, 53732], [-3, -19], [-24, 47], [-7, 33], [3, 27], [25, 2], [12, -17], [-6, -73]], [[84458, 48402], [-3, -28], [-10, 32], [-9, 15], [1, 34], [13, -12], [8, -41]], [[84340, 48806], [-1, -58], [-11, 3], [-9, 20], [-3, 20], [1, 15], [5, 13], [18, -13]], [[83548, 47742], [-29, -3], [-8, 5], [-3, 56], [32, -24], [10, -2], [-2, -32]], [[82654, 47023], [-7, -1], [-12, 11], [5, 24], [-7, 40], [2, 32], [16, 18], [33, 2], [1, -24], [-31, -102]], [[82339, 49847], [-10, -99], [-17, 56], [19, 67], [9, 13], [-1, -37]], [[85380, 52298], [-9, -18], [-9, 6], [-6, 24], [2, 18], [8, 11], [9, -8], [5, -33]], [[87325, 50619], [-8, -8], [-3, 25], [5, 33], [5, 6], [6, -2], [8, -12], [-13, -42]], [[87102, 49397], [14, -31], [-33, 24], [-47, 51], [-3, 34], [40, -52], [29, -26]], [[86362, 51395], [-7, -30], [-14, -19], [-119, -36], [10, 21], [5, 21], [8, 11], [12, -3], [6, 7], [5, 2], [7, -3], [12, 9], [24, -6], [25, 5], [-2, 28], [28, -7]], [[86284, 51538], [-16, -1], [-28, 25], [16, 22], [11, 5], [9, 13], [5, 0], [12, -11], [7, -19], [-16, -34]], [[85985, 51735], [-12, -2], [-10, 34], [-28, 37], [-17, 65], [65, -107], [2, -27]], [[85403, 51839], [-1, -17], [-9, 24], [-6, 6], [6, 62], [4, 11], [5, -43], [1, -43]], [[85394, 52213], [-10, -7], [-3, 2], [-3, 24], [5, 39], [12, 0], [5, -6], [1, -29], [-7, -23]], [[85360, 51393], [-3, -12], [-29, 15], [-8, 8], [15, 82], [14, -2], [12, -78], [-1, -13]], [[85755, 49800], [0, -25], [-2, -8], [-15, 9], [-11, -1], [-10, 44], [3, 10], [20, -12], [7, -5], [8, -12]], [[85711, 49777], [-48, -30], [11, 56], [6, 15], [24, -15], [7, -26]], [[85199, 54075], [1, -25], [-17, 56], [-7, 65], [14, -23], [15, -49], [-6, -24]], [[85236, 54013], [-5, -6], [-10, 15], [-6, 17], [1, 17], [7, 9], [14, -26], [0, -15], [-1, -11]], [[84835, 53370], [-3, -13], [-11, 68], [9, 34], [12, -13], [3, -12], [-11, -32], [1, -32]], [[86661, 47694], [-4, -28], [-12, 15], [-11, 33], [-17, 5], [-13, 8], [-7, 16], [47, 7], [17, -56]], [[85741, 47705], [-13, -15], [-20, 30], [-6, 13], [13, 29], [14, 9], [9, -13], [4, -13], [-2, -14], [1, -26]], [[85393, 47451], [-17, -13], [5, 43], [-1, 34], [29, -11], [0, -27], [-3, -10], [-13, -16]], [[84281, 45908], [-25, -20], [0, 42], [20, 54], [17, 18], [10, -22], [1, -9], [-26, -20], [3, -43]], [[83856, 45742], [-14, -7], [-30, 17], [-6, 10], [25, 28], [20, 39], [23, 4], [14, -8], [-5, -47], [-27, -36]], [[87449, 48136], [-7, -4], [0, 28], [8, 25], [8, 14], [9, 1], [-18, -64]], [[87409, 47955], [-5, -9], [-7, 18], [-1, 12], [10, 32], [9, 18], [11, 1], [-3, -26], [-14, -46]], [[85551, 50151], [-14, -48], [-24, 2], [-4, 7], [29, 30], [13, 9]], [[85445, 49933], [7, -25], [-28, 16], [-12, 25], [12, 15], [7, 4], [14, -35]], [[84160, 46920], [-9, -34], [-16, 10], [4, 33], [8, 19], [22, 28], [22, 5], [13, -10], [4, -11], [-34, -11], [-14, -29]], [[71402, 72067], [33, 36], [35, 37], [36, 38], [41, 44], [35, 37], [28, 31]], [[71610, 72290], [1, -2], [2, -5], [12, -14], [12, -6], [14, 13], [18, 10], [9, -6], [1, -17], [-11, -82], [1, -33], [18, -66], [23, -109], [22, -102], [12, -66], [13, -28], [52, -28], [43, -23], [26, -37], [28, -36], [20, -22], [9, -29], [2, -25], [-1, -18], [-11, -22], [-50, -59], [-6, -18], [-1, -24], [10, -73], [6, -45], [1, -92], [4, -86], [17, -40], [15, -25], [8, -24], [18, -31], [15, -24], [13, -14], [6, -31], [-3, -37], [-6, -32], [2, -17], [10, -12], [16, -32], [2, -47], [-1, -32], [6, -29], [2, -32], [-5, -80], [1, -33], [0, -4], [-14, -2], [-12, -12], [-17, -51], [-19, -13], [-22, -4], [-22, 31], [-19, 32], [-5, 18], [-4, 34], [-10, 23], [-20, -11], [-29, -4], [-31, -8], [-6, -7], [-1, -15], [8, -30], [7, -40], [3, -56], [9, -37], [3, -12], [50, -111], [13, -23], [3, -14], [-4, -41], [-9, -47], [2, -38], [16, -41], [14, -29], [-13, -39], [-8, -45], [9, -21], [-5, -65], [4, -12], [10, -5], [15, 4], [15, 18], [13, 3], [7, -5], [11, 49], [9, 7], [17, -13], [35, -93], [30, -78], [8, -15], [6, -9], [29, -41], [20, -26], [27, 10], [36, 1], [22, -25], [12, -17], [1, -3], [2, 0], [43, -62], [19, 5], [12, -18], [4, -43], [-6, -46], [2, -21], [19, -4], [41, -30], [37, -26], [19, -9], [20, -19], [18, -32], [35, -40], [31, -31], [7, -42]], [[74474, 67897], [-3, 20], [3, 16], [9, 9], [37, 12], [42, 24], [17, 13], [12, 14], [13, 20], [12, 0], [38, -30], [13, -19], [7, -58], [5, -22], [-5, -58], [-22, -142], [4, -53], [19, -38], [16, -27]], [[74691, 67578], [-2, -11], [-34, -46], [-6, -24], [7, -24], [14, -20], [6, -20], [6, -60], [17, -16], [34, -39], [30, -28], [51, 18], [14, -12], [25, -14], [20, -4], [11, -10], [7, -9], [-1, -13], [1, -12], [28, -3], [15, -7], [49, 13], [50, 17], [23, 54], [11, 4], [28, 20], [29, -22], [31, -32], [17, -9], [33, -5], [32, 4], [77, 14], [43, -7], [39, 44], [8, 0], [17, -34], [43, -3], [22, 16], [25, 13], [16, 4], [12, 0], [15, -3], [15, 12], [6, 23], [-1, 34], [-11, 38], [-9, 22], [-1, 12], [3, 27], [7, 39], [15, 44], [-11, 43], [-15, 49], [-11, 5], [-28, -12], [-30, 3], [-23, 29], [-18, 37], [-4, 31], [5, 38], [8, 34], [2, 13]], [[75453, 67833], [22, 0], [31, -7], [24, -10], [19, 0], [34, 45], [16, 2], [18, 9], [7, 8], [6, -6], [20, -6], [20, 3], [18, 12], [19, 19], [32, 40], [7, 23], [0, 21], [-6, 14], [-6, 7], [2, 18], [14, 31], [50, 47], [42, 57], [24, 43], [10, 52], [14, 57], [13, 22], [30, 14], [84, 21], [27, 23], [39, 42], [20, 33], [11, 27], [1, 30], [26, 10], [23, 48], [28, 49], [48, 41], [43, 56], [15, -9], [16, -26], [8, -29], [2, -15], [55, -18], [9, 3], [40, -26], [38, -32], [20, -8], [10, 1], [9, 10], [10, 28], [10, 20], [7, 8], [-1, 32], [54, 61], [49, 45], [42, 32], [12, -13], [14, -25], [18, -62], [11, -16], [29, 9], [5, -7], [-5, -22], [-19, -28], [-25, -26], [-16, -20], [5, -68], [-1, -24], [7, -7], [51, 67], [25, 14], [9, -16], [2, -37], [21, -74], [8, -38], [-51, -91], [-19, -47], [1, -16], [-1, -16], [-14, -24], [1, -9], [11, -15], [13, -11], [6, 1], [11, 22], [48, 31], [14, -6], [34, -48], [16, -3], [41, -14], [27, 18], [19, -16], [40, -60], [9, -11]], [[77033, 68097], [-3, -36], [-2, -40], [10, -32], [1, -28], [-2, -25], [-8, -18], [-23, -10], [-18, -30], [-31, -45], [-24, -35], [-17, -32], [-7, -32], [2, -42], [5, -43], [56, -159], [0, -28], [-18, -8], [-23, 18], [-21, 26], [-22, 68], [-19, 21], [-18, 4], [-109, -35], [-23, -10], [-36, -25], [-25, -52], [-18, -47], [-19, -18], [-28, -37], [-76, -112], [-44, -48], [-29, -18], [-20, -25], [-11, -42], [-8, -29], [-3, -73], [5, -90], [11, -58], [6, -12], [1, -17], [-11, -31], [-15, -26], [-7, -17], [-6, -82], [-13, -40], [-23, -59], [-21, -45], [-33, -35], [-13, -28], [-12, -52], [-7, -44], [0, -16], [4, -14], [13, -16], [17, -15], [8, -23], [1, -28], [-12, -68], [-22, -95], [-26, -74], [-26, -71], [-6, -24], [-23, -87], [-21, -120], [-13, -81], [-12, -56], [-15, -2], [-18, 18], [-43, 23], [-27, 19], [-21, 17], [-14, 0], [-19, -12], [-19, -7], [-12, 8], [-27, 50], [-8, -6], [-5, -24], [18, -143], [12, -53], [-2, -88], [-5, -109], [-7, -119], [-4, -28], [-12, -31], [-15, -9], [-14, 13], [-11, -3], [-3, -20], [3, -52], [-14, -58], [-10, -51], [3, -49], [5, -49], [16, -108], [0, -39], [-3, -36], [-9, -14], [-14, 2], [-7, -15], [-6, -22], [-16, -81], [-16, -9], [-15, 12], [-23, 55], [-14, 16], [-9, -1], [-4, -15], [-6, -32], [-6, -22], [-16, -19]], [[75714, 64503], [-3, 40], [-8, 209], [-7, 66], [-5, 92], [-7, 28], [-10, 51], [-10, 43], [-9, 19], [-5, 81], [-2, 99], [0, 47], [-13, 97], [-12, 110], [-16, -4], [-10, 26], [-7, 0], [-23, -25], [-18, 8], [-14, -3], [0, -51], [3, -54], [-6, -19], [-36, -64], [-9, -42], [1, -45], [4, -59], [-6, -31], [-16, -28], [-21, -14], [-18, 7], [-12, 24], [-11, 62], [-10, 34], [-10, 8], [-8, -9], [-1, -39], [0, -33], [-2, -3], [-6, 5], [-6, 16], [-17, 155], [-25, 119], [-1, 46], [8, 59], [11, 91], [29, 56], [4, 24], [5, 19], [7, 4], [37, -5], [13, 9], [11, 27], [16, 21], [16, 9], [13, 3], [20, -21], [9, 12], [6, 38], [9, 37], [5, 18], [14, 8], [18, 2], [5, 7], [5, 13], [4, 49], [23, 111], [8, 49], [1, 8], [-1, 55], [7, 8], [37, -27], [16, 1], [9, 11], [3, 20], [-5, 23], [-26, 41], [-47, 55], [-43, 34], [-80, -5], [-79, -11], [-23, 6], [-29, 15], [-70, -2], [-86, -9], [-32, 5], [-17, 0], [-32, -6], [-52, 16], [-37, 20], [-32, 22], [-38, 20], [-9, 0], [-5, 7], [-4, 18], [-1, 23], [8, 106], [-7, 161], [6, 59], [-31, 132], [-11, 25], [-15, 1], [-9, -17], [-3, -31], [5, -35], [-12, -38], [-23, -13], [-27, 13], [-22, 18], [-29, 40], [-21, 55], [-2, 61], [-10, 40], [-13, 19], [-10, 5], [-9, -4], [-8, -21], [7, -22], [9, -30], [-3, -20], [-8, -3], [-12, 9], [-19, -5], [-19, 16], [-11, 1], [-11, 6], [0, 35], [-17, 45], [-28, 50], [-28, 31], [-14, -4], [-6, -35], [1, -12], [10, -7], [14, -20], [3, -20], [-2, -19], [-17, -33], [-13, -31], [-27, -46], [-23, -52], [-6, -40], [-9, -36], [-4, -39], [6, -27], [12, -17], [29, -13], [31, -52], [24, -72], [14, -21], [26, -24], [48, -3], [8, -20], [7, -52], [9, -18], [25, -25], [2, -18], [-6, -21], [-11, -16], [-20, -11], [-20, -4], [-19, 6], [-29, 5], [-33, 0], [-23, -131], [-16, -46], [-10, 1], [-25, 22], [-11, -4], [-29, -116], [-4, -28], [-2, -21], [16, -45], [18, -37], [22, -14], [17, 11], [14, -15], [17, -37], [28, -25], [40, -12], [23, -29], [2, -25], [-1, -26], [-4, -67], [-4, -39], [-21, -102], [-16, -87], [8, -42], [6, -17], [5, -13], [17, -33], [12, -32], [-10, -83], [6, -22], [23, -14], [25, -11], [9, -14], [-22, -84], [5, -59], [9, -55], [6, -90], [1, -9], [-2, -23], [15, -69], [21, -136], [2, -51], [-1, -54]], [[74736, 64569], [-7, -90], [-22, 1], [20, -60], [6, -44], [3, -60], [-24, -7], [-16, 7], [-14, 52], [-7, -48], [-24, -44], [-9, 22], [-5, 23], [-1, 41], [13, 157], [-2, 17], [-7, 12], [-13, 6], [-5, 32], [-21, -167], [9, -68], [-4, -32], [-38, -26], [-39, 63], [-5, 20], [-3, -35], [-7, -43], [-36, 8], [-19, 33], [12, 58], [23, 137], [4, 62], [-30, 45], [-26, 27], [-15, 63], [6, -69], [14, -24], [20, -17], [21, -35], [-15, -43], [-15, -27], [-29, -101], [-34, -57], [-41, -42], [-132, -63], [-28, -25], [-41, -78], [-26, -74], [-5, -75], [15, -81], [12, -127], [10, -26], [-14, -47], [-25, -49], [-20, -66], [2, -37], [-5, -24], [-70, -82], [-15, -47], [-19, -48], [-23, 27], [-14, 0], [19, -38], [-3, -25], [-6, -14], [-18, -14], [-101, -60], [-77, -57], [-22, 3], [4, 17], [14, 15], [-1, 66], [-15, 12], [-12, 4], [-59, -79], [-23, -79], [5, -15], [13, 4], [39, 44], [19, -12], [1, -18], [-60, -68], [-126, -220], [-6, -44], [-17, -49], [-22, -46], [-41, -112], [-78, -167], [-21, -62], [-125, -128], [-23, -39], [-51, -125], [-53, -102], [-62, -85], [-106, -108], [-65, -102], [-20, -68], [-2, -25], [7, -33], [12, -30], [3, -25], [-6, -44], [-3, -24], [-19, -60], [-33, -43], [-105, -90], [-14, 3], [-86, 18], [-32, -17], [-13, -42], [-30, -174], [-28, -46], [-11, -42], [-4, -29], [-17, 1], [-14, 13], [-11, -10], [-12, 59], [-21, 12], [-17, 4], [-73, -59], [-25, -47], [-53, -223], [-14, -144], [13, -159], [18, -127], [4, -57], [-2, -75], [-10, -36], [-6, -43], [8, -88], [23, -116], [5, -48], [1, -51], [17, -115], [-12, 20], [-9, 49], [-21, 62], [-26, -62], [14, -44], [49, -53], [15, -44], [-32, -386], [-24, -138], [-29, -90], [-16, -34], [-34, -142], [-24, -172], [-5, -67], [11, -74], [-12, -43], [-16, -34], [30, 15], [10, -40], [3, -42], [1, -246], [-3, -257], [-23, -11], [-25, -2], [-22, 7], [-16, 10], [-39, -14], [-21, -28], [-17, -47], [1, -81], [-72, -203], [-16, -67], [-6, -65], [10, -34], [18, -35], [24, -14], [47, -14], [23, -19], [15, -34], [-55, 36], [-65, 8], [-155, -95], [-41, -66], [-23, -57], [-15, -131], [-3, -88], [-18, -73], [-81, -112], [-51, -34], [-19, -30], [-60, 39], [-66, 98], [-27, 53], [-97, 253], [-18, 32], [-19, 108], [-4, 41], [-5, 16], [-9, 11], [-5, 16], [-21, 124], [-9, 130], [-14, 144], [11, -10], [17, -47], [8, -70], [1, -96], [12, -11], [11, 9], [-31, 222], [-28, 55], [-7, 4], [-7, 36], [-1, 44], [2, 22], [-21, 72], [-8, 44], [-48, 220], [-22, 157], [-33, 175], [-22, 62], [-34, 135], [-28, 63], [-30, 84], [-24, 38], [-9, 19], [-70, 292], [-21, 162], [-18, 76], [-9, 58], [-25, 247], [0, 44], [-3, 49], [-17, 105], [-31, 113], [-9, 70], [1, 28], [-20, 110], [-4, 50], [-13, 47], [-15, 42], [-16, 34], [-37, 112], [-14, 27], [-25, 72], [-18, 134], [-23, 52], [36, 0], [-22, 49], [-11, 32], [-12, 20], [17, 50], [-27, -1], [-15, 30], [-20, 93], [-37, 105], [-6, 57], [-32, 177], [-27, 426], [-26, 189], [2, 54], [-30, 165], [-15, 110], [-6, 93], [-8, 61], [-7, 121], [-12, 39], [-1, 23], [8, 55], [22, 85], [8, 54], [-10, 77], [-20, -80], [-18, -23], [-9, 60], [0, 80], [-2, 20], [5, 27], [49, -13], [-56, 49], [-6, 29], [-3, 22], [12, 40], [-20, 33], [-8, 103], [-6, 24], [-2, 19], [11, 142], [48, 280], [4, 63], [-5, 90], [-10, 71], [-5, 76], [-3, 19], [-17, 7], [-16, 28], [-19, 112], [17, 36], [13, 21], [-18, -9], [-15, 3], [29, 52], [25, 39], [59, 46], [25, 30], [-37, -27], [-38, -10], [-83, 6], [14, 104], [14, 35], [16, 19], [-23, -6], [-27, 9], [9, 106], [21, 22], [22, 5], [28, 15], [-30, 17], [-31, 9], [-37, -18], [-34, 13], [-42, 0], [17, -14], [17, -33], [-8, -57], [-9, -36], [-23, -24], [-18, -38], [-6, -32], [-10, -24], [18, -16], [19, -12], [11, -26], [13, -39], [-1, -75], [-49, -177], [-17, -39], [-124, -107], [-48, -58], [-104, -75], [-40, -14], [-44, 15], [-66, 57], [-99, 147], [-26, 48], [-79, 189], [-57, 99], [-44, 93], [-54, 88], [-51, 118], [-10, 54], [3, 54], [19, 30], [22, -12], [18, -46], [12, -21], [11, -8], [76, 71], [29, -3], [20, 35], [25, -7], [52, 55], [22, 3], [26, 11], [42, 140], [31, 89], [20, 19], [-1, 22], [-5, 28], [-16, -7], [-10, -27], [-8, -33], [-8, -19], [-24, 18], [-17, -3], [-20, -11], [-75, -52], [-31, -47], [-20, -9], [-119, 51], [-117, 118], [-49, 79], [-31, 100], [-31, 120], [10, 33], [48, 72], [42, 56], [-37, -25], [-41, -35], [-20, -24], [-22, -51], [-31, -12], [-11, 76], [-8, 74]], [[76080, 55778], [-17, -48], [-33, 145], [-15, 9], [0, 69], [8, 28], [38, 30], [10, -17], [20, -134], [-11, -82]], [[76036, 56080], [-26, -54], [-12, 33], [5, 22], [11, 13], [11, 17], [11, -31]], [[75872, 56595], [8, -22], [-15, 4], [-15, 32], [4, 31], [6, 12], [12, -57]], [[75956, 56381], [-22, -1], [-6, 24], [-9, 26], [6, 25], [12, 6], [16, -40], [4, -28], [-1, -12]], [[75982, 56484], [-13, -22], [-4, 3], [-1, 16], [-1, 12], [-2, 20], [-2, 37], [11, 30], [10, -6], [-5, -31], [7, -59]], [[75774, 57106], [-13, -4], [-7, 20], [-1, 23], [7, 15], [6, 7], [7, -1], [7, -39], [-6, -21]], [[75694, 57923], [-8, -20], [-29, 15], [3, 60], [-7, 58], [5, 24], [21, 42], [18, 18], [12, -56], [5, -55], [-20, -86]], [[75747, 58399], [-13, -12], [-14, 15], [11, 23], [2, 47], [13, -26], [0, -30], [1, -17]], [[75756, 58488], [-7, -14], [-9, 15], [-25, 104], [-5, 66], [-7, 23], [9, 33], [12, 11], [6, 37], [3, 57], [10, 46], [5, 13], [20, 0], [6, 6], [-3, 44], [-12, 20], [-4, 12], [0, 106], [3, 43], [8, 30], [-6, 64], [4, 24], [15, 33], [7, 72], [-6, 21], [14, 110], [-1, 73], [19, 74], [29, 33], [9, 1], [1, -62], [3, -21], [-17, -37], [16, -49], [-2, -17], [-6, -39], [-11, -37], [-15, -16], [-11, -50], [-7, -19], [22, -53], [7, -180], [-16, -49], [-19, -10], [4, -120], [-3, -26], [-19, -59], [-4, -26], [-11, -24], [5, -30], [9, -13], [0, -25], [-8, -64], [-1, -72], [-11, -59]], [[75837, 58776], [13, -79], [-22, 35], [-8, 24], [11, 17], [6, 3]], [[75754, 59253], [-9, -37], [-1, 80], [4, 10], [4, 3], [6, -8], [-4, -48]], [[70216, 58296], [-2, -4], [0, 10], [2, 17], [3, 11], [1, -1], [0, -11], [-2, -15], [-2, -7]], [[70296, 56606], [-4, -7], [-4, -3], [-3, 1], [-1, 7], [0, 6], [4, -7], [5, 6], [5, 18], [1, 6], [1, -3], [-1, -10], [-3, -14]], [[45682, 89993], [32, -3], [52, 20], [22, 13], [53, 45], [32, 13], [49, -3], [23, 3], [1, -5], [-30, -18], [-24, -6], [-35, -27], [-32, -62], [-25, -30], [1, -13], [29, -24], [32, -13], [30, 12], [13, -5], [12, -17], [6, -18], [2, -17], [-6, -36], [-17, -37], [-24, -30], [3, -10], [19, -5], [92, 20], [10, -1], [5, -10], [1, -19], [5, -16], [9, -15], [-3, -15], [-40, -48], [48, 30], [37, 9], [65, -15], [26, -18], [15, -30], [23, 10], [9, -1], [15, -17], [0, -18], [-10, -27], [-4, -24], [-11, -10], [-21, -7], [-6, -9], [9, -18], [14, -18], [19, -1], [3, -9], [1, -10], [-3, -12], [-6, -8], [-10, -4], [-13, -13], [48, -29], [6, -10], [1, -16], [-4, -17], [-8, -18], [-15, -11], [-34, -2], [-22, -12], [7, -20], [0, -26], [-6, -29], [-28, -46], [-26, -24], [-25, -15], [-45, 5], [-24, 12], [2, -39], [-25, -24], [5, -20], [9, -10], [-5, -26], [-11, -26], [-20, -27], [-23, -17], [-45, -21], [-38, -35], [-26, -14], [-65, 1], [-67, -22], [-93, -47], [-64, -38], [-48, -43], [-65, -69], [-48, -30], [-27, -7], [-54, -7], [-45, -19], [-150, -35], [-50, -19], [-7, -18], [-21, -27], [-1, -9], [9, -8], [2, -9], [-19, -32], [-37, -22], [-17, 0], [-21, 20], [-10, -1], [-3, -3], [0, -6], [12, -24], [-23, -10], [-97, -28], [-166, 20], [-65, 22], [-81, 33], [-49, 9], [-68, 2], [-56, 47], [-26, 29], [-2, 12], [3, 14], [5, 9], [9, 5], [19, 0], [2, 5], [-14, 23], [-14, -8], [-36, -33], [-16, 2], [-21, 16], [-1, 16], [-41, 6], [-36, 20], [-36, 28], [-5, 11], [17, 16], [-3, 3], [-13, 3], [-26, -5], [-39, -36], [-17, -9], [-257, -8], [-65, -4], [-13, -5], [-11, 23], [-10, 53], [-4, 34], [3, 17], [9, 20], [14, -4], [13, -15], [12, -23], [14, -11], [89, 28], [37, 18], [15, 18], [18, 29], [20, 16], [9, 14], [18, 46], [13, 21], [14, 16], [18, 10], [40, 7], [-27, 11], [-24, 0], [-85, -48], [-28, 0], [1, 7], [12, 14], [29, 24], [-20, 1], [-8, 11], [-1, 22], [15, 37], [69, 47], [24, 7], [7, 10], [-9, 7], [-14, 5], [-70, -49], [-50, -17], [-15, 3], [-26, 19], [-8, 9], [-12, 22], [2, 13], [24, 38], [-4, 8], [-17, 3], [-44, 36], [-71, -4], [-174, 21], [-36, -9], [-59, -30], [-36, -10], [-16, 6], [-15, 16], [-14, 22], [-12, 27], [5, 19], [23, 11], [17, 5], [47, -6], [58, 19], [37, 4], [10, 3], [22, 20], [11, 5], [16, -7], [8, -14], [59, 22], [20, 10], [2, 7], [9, 8], [28, -12], [24, 0], [29, 8], [52, 3], [115, 2], [18, 18], [8, 15], [10, 39], [-4, 8], [-73, -36], [-16, 1], [-84, 19], [-30, 21], [10, 18], [44, 37], [46, 30], [67, 32], [16, 13], [2, 15], [-45, 26], [-85, -7], [-22, 31], [-70, 19], [-47, -12], [-25, 19], [-61, -26], [-134, -38], [-54, -27], [-28, -8], [-33, 21], [-57, 25], [-64, 7], [-6, 14], [37, 44], [26, 8], [26, -4], [49, -30], [34, -10], [-43, 45], [1, 17], [-3, 26], [-13, 11], [-13, 29], [5, 9], [17, 4], [34, -10], [82, -50], [40, 9], [22, 18], [29, 14], [-8, 7], [-70, 1], [-38, 10], [-19, 14], [-17, 25], [6, 11], [20, 10], [60, -3], [-40, 43], [-27, 24], [-3, 12], [2, 15], [3, 10], [6, 5], [69, -25], [15, -1], [-14, 16], [-30, 24], [-2, 9], [13, 7], [6, 14], [1, 11], [21, 9], [21, 1], [21, -9], [66, -46], [10, -13], [3, -17], [-3, -22], [2, -8], [26, 7], [21, -9], [10, 2], [26, 32], [17, -7], [11, -15], [3, -14], [2, -18], [-5, -39], [1, -5], [18, 22], [31, 1], [4, 11], [1, 41], [-3, 34], [-3, 7], [-101, 48], [-17, 11], [-22, 24], [5, 11], [19, 11], [30, 4], [68, -1], [7, 5], [-13, 13], [-32, 8], [-7, 7], [-4, 14], [-38, -8], [-42, 0], [-40, 8], [-1, 11], [16, 15], [33, 26], [15, 7], [46, -5], [46, 8], [37, -9], [29, -26], [42, -45], [57, -29], [5, -9], [30, -24], [60, -63], [60, -37], [3, -10], [-10, -11], [-23, -13], [5, -7], [31, -9], [21, -25], [2, -11], [-20, -78], [-10, -16], [-13, -9], [-56, 15], [14, -25], [40, -26], [9, -15], [-6, -14], [4, -4], [15, 8], [6, -8], [-3, -24], [-6, -20], [-10, -16], [3, -7], [16, 2], [14, -4], [23, -22], [19, -67], [9, -21], [7, 19], [8, 49], [8, 25], [7, 1], [7, 8], [5, 15], [11, 55], [38, 41], [18, 12], [16, 3], [9, -5], [28, -43], [17, -7], [9, 2], [12, 29], [15, 56], [3, 63], [-8, 69], [5, 49], [18, 30], [23, 9], [29, -12], [22, -18], [42, -68], [34, -36], [29, -39], [15, -12], [29, -7], [7, 3], [6, 9], [2, 15], [-6, 98], [8, 31], [12, 22], [53, 12], [28, 14], [28, 22], [22, 12], [19, 2], [19, -9], [19, -19], [31, -37], [39, -61], [50, -46], [26, -73], [5, -13], [6, -1], [7, 9], [4, 14], [1, 32], [-14, 43], [-46, 109], [-1, 20], [6, 17], [33, 1], [75, -9], [25, -17], [51, -66], [15, -16], [8, -5], [4, 9], [20, 12], [13, 15], [23, 36], [51, 66], [10, 2], [15, -5], [26, -18], [12, -13], [24, -11], [25, 4], [35, 23], [38, 14], [14, 32], [2, 15], [-31, 97], [13, 20], [68, 24], [59, 2], [14, -7], [38, -47], [25, -23], [13, -19], [3, -42], [15, -16], [29, -17]], [[55251, 78301], [-1, 0], [-19, -12], [-31, -7], [-16, 5], [-28, -54], [-8, -10], [-27, -17], [-22, -8], [-19, 7], [-7, 0], [-84, 3], [-43, 12], [-28, 21], [-19, 23], [-9, 27], [-21, 15], [-34, 6], [-27, 26], [-19, 46], [-26, 37], [-32, 27], [-26, 38], [-19, 50], [-34, 44], [-50, 40], [-15, 8]], [[54470, 78838], [44, 62], [22, 18], [26, -3], [8, 5], [2, 9], [4, 21], [3, 19], [2, 18], [-3, 10], [-12, 3], [-6, 45], [6, 17], [6, 12], [-7, 54], [2, 18], [20, 3], [16, 12], [14, 13], [4, 17], [11, 34], [-10, 42], [-58, 27], [-3, 11], [13, 12], [15, 17], [8, 13], [11, 2], [16, -7], [28, -30], [10, -5], [11, 9], [11, 2], [30, -1], [26, 7], [-6, 32], [0, 24], [-4, 19], [3, 20], [10, 16], [3, 36], [17, 25]], [[25739, 59319], [2, 61], [-23, 25], [-12, 50], [-11, 34], [3, 21], [-1, 24], [-31, 19], [-30, -14], [-17, 9], [-12, 13]], [[25607, 59561], [21, 30], [2, 18], [-7, 14], [-7, 8], [2, 34], [4, 40], [12, 94], [-4, 17], [-20, 28], [-25, 3], [-27, -9], [-13, 14], [-12, 32], [-20, 16], [-34, -26], [-37, -39], [-11, -14], [-10, 2], [-4, 29], [-2, 35], [-2, 8], [-20, 12], [-23, 9], [-11, 10], [-11, 23], [-28, 30], [-6, 22], [-37, 52], [-7, 25], [-8, 19], [-18, 23], [-14, -5], [-46, 29], [-7, 3]], [[25177, 60147], [6, 26], [15, 39], [32, 45], [2, 36], [-8, 68], [-8, 45], [4, 20], [10, 80], [8, 19], [46, 40], [4, 6], [37, 57], [40, 63], [42, 69], [47, 78], [26, 45], [12, 20]], [[25492, 60903], [27, -16], [21, 37], [12, 12], [29, 44], [9, 10], [48, 18], [23, -1], [21, -44], [16, -25], [30, 21], [26, 5], [105, -42], [42, 19], [76, 4], [35, -11], [49, 59], [31, 12], [37, 27], [-5, 29], [-9, 12], [56, -12], [83, -60], [89, 11], [32, 32], [21, 9], [91, -61], [24, -47], [19, -4], [14, 10], [4, 10], [-18, 10], [-8, 15], [72, -29], [135, -222], [3, -18], [-58, 65], [-31, -5], [-8, -10], [2, -36], [3, -17], [13, -2], [10, 10], [24, -12], [15, -24], [19, -36], [12, -40], [12, -1], [12, 24], [23, 3], [15, -26], [11, 1], [-15, 42], [-35, 41], [9, 1], [77, -74], [21, -92], [19, -21], [18, -29]], [[25994, 61277], [-44, -45], [-14, 1], [20, 35], [33, 30], [28, 14], [23, -6], [-46, -29]], [[26147, 61325], [-21, -33], [-4, 15], [10, 31], [13, 17], [12, -1], [-3, -14], [-7, -15]], [[30061, 63201], [6, -17], [13, -116], [1, -38], [-13, -56], [2, -22], [28, -52], [0, -18], [-3, -19], [-24, -49], [-18, -34], [6, -39], [15, -36], [2, -31], [-5, -41], [-22, -50], [-12, -18], [-34, -2], [-3, -7], [16, -49], [19, -56], [31, -43], [7, -41], [-8, -38], [-1, -95]], [[30064, 62234], [-23, 46], [-26, 38], [-16, 15], [-16, 10], [-123, -5], [-14, -7], [-11, -12], [-11, -6], [-34, -12], [-34, -2], [-79, 31], [-31, 16], [-31, 10], [-36, -3], [-36, -10], [-29, -22], [-21, -40], [-4, -36], [-13, -10], [-29, 59], [-27, 41], [-30, 31], [-62, 45], [-12, 27], [-5, 32], [26, 101], [28, 19], [16, 3], [35, -12], [35, -23], [31, -15], [49, -6], [27, -25], [187, -38], [35, -12], [14, 4], [12, 15], [10, 27], [12, 21], [56, 4], [11, 9], [8, 29], [0, 29], [-33, 40], [-51, 86], [-45, 103], [20, 34], [-8, 63], [8, 58], [10, 57], [-44, 49], [-53, 49], [-73, 15], [-22, 13], [-12, 36], [11, 49], [23, 28], [27, 16], [28, 12], [67, 14], [67, -16], [57, -50], [59, -40], [73, -13], [34, -14], [15, 12]], [[29776, 62659], [-5, -40], [-71, 48], [-57, 61], [2, 33], [30, 7], [28, -20], [41, -40], [32, -49]], [[29815, 63385], [12, -13], [-5, -17], [-28, 10], [-29, 19], [-9, -5], [-6, 2], [-17, 18], [15, 14], [15, 4], [17, -1], [35, -31]], [[33328, 56767], [10, -9], [40, -92], [23, -20], [4, 0], [0, 24], [21, -10], [52, -63], [77, -103], [108, -195], [31, -75], [20, -35], [33, -85], [9, -41], [-1, -166], [-28, -112], [-7, -84], [-2, -113], [-16, -64], [22, 35], [6, 101], [19, 62], [24, 67], [33, 16], [35, -28], [28, -5], [24, -20], [53, -108], [52, -86], [18, -68], [55, -34], [32, -54], [10, -47], [7, -122], [-11, -185], [3, -9]], [[34310, 52961], [-12, -8], [-10, -12], [-15, 9], [-21, -5], [-21, -12], [-19, -7], [-37, 21], [-11, 2], [-8, 9], [-15, 40], [-8, 5], [-19, -19], [-24, -13], [-12, 3], [-14, -14], [-12, -18], [-25, -78], [-12, -27], [-14, -13], [-27, 1], [-29, -3], [-21, -19], [-21, -10], [-10, -1], [-3, -42], [-5, -20], [-6, -12], [-16, -3], [-14, 1], [-9, 18], [-15, 9], [-15, 7], [-9, 10], [-7, -3], [-6, -18], [-5, -15], [-4, -28], [-22, -9], [-9, -16], [5, -52], [-2, -20], [-5, -16], [-26, -4], [-22, 2], [-12, -20], [-16, -22], [-10, -4], [-11, 1], [-15, 26], [-14, 32], [-37, 23], [-36, 18], [-24, 51], [-6, 25], [-11, 11], [-28, 61], [-16, 39], [-17, 10], [-19, 17], [0, 28], [-1, 27], [-8, 11], [-12, 7], [-4, 15], [1, 36], [2, 92], [-3, 88], [-26, 30], [-11, 21], [-20, 130], [-9, 58], [-1, 44], [7, 129], [7, 56], [20, 113], [12, 38], [1, 28], [-2, 37], [-6, 72], [35, 46], [14, 19], [3, 30], [18, 39], [8, 37], [7, 29], [-2, 15], [-8, 9], [-10, 27], [-19, 79], [-7, 16], [-6, 22], [3, 35], [7, 38], [-1, 16], [-11, 21], [-25, 34], [-20, 2], [-16, 13], [-23, 1], [-18, 4], [-10, 13], [2, 21], [4, 16], [16, 40], [10, 42], [2, 42], [3, 55], [4, 47], [3, 54], [-25, 35], [-7, 29], [-10, 25], [-11, 0], [-17, 11], [-26, -33], [-21, 6], [-14, -13], [-32, 3], [-21, 16], [-25, -11]], [[46186, 59143], [-1, -46], [16, -66], [-2, -49], [-7, -47], [-6, -18], [-9, -11], [-25, 1], [-10, -10], [-17, -18], [0, -21], [13, -21], [11, -28], [13, -23], [21, -25], [2, -29], [1, -72], [-1, -57], [-61, -41], [-47, -7], [-40, 4], [-17, -17], [-35, -43], [-42, -25], [-22, -2], [-10, -15], [-17, -44], [-46, -192], [-15, -46], [-12, -30]], [[45821, 58145], [-14, 40], [11, 76], [-12, -1], [-23, -61], [-12, -2], [2, 72], [-13, 3], [-15, -5], [-21, 37], [-2, 28], [1, 40], [13, 25], [-2, 10], [-12, 3], [-14, -6], [-8, 11], [14, 51], [49, 43], [24, 5], [26, 9], [-14, 37], [-30, 15], [-24, -10], [-12, -27], [-15, -5], [-25, 63], [1, 31], [9, 38], [14, 16], [57, 0], [22, 21], [9, 4], [8, 19], [-2, 12], [-9, 1], [-21, -25], [-69, 10], [-22, -15], [-38, -58], [-47, -31], [-34, 13], [11, 77], [-5, 10], [-10, 13], [-50, -25], [-38, 35], [-15, 43], [3, 53], [17, 36], [3, 18], [-19, 3], [-34, -22], [-77, 86]], [[45523, 58213], [-22, -8], [-10, 28], [-2, 11], [12, 10], [5, 0], [9, 21], [11, 14], [5, 5], [5, -1], [4, -46], [-5, -20], [-12, -14]], [[45584, 58227], [-3, -16], [-16, 2], [4, 16], [-4, 5], [5, 49], [2, 7], [8, -18], [1, -8], [3, -37]], [[45631, 58303], [0, -23], [-11, 4], [-4, 7], [7, 43], [11, 19], [12, -3], [4, -6], [-2, -16], [-6, -14], [-11, -11]], [[45679, 58488], [-2, -13], [-16, 11], [23, 49], [15, 8], [-1, -37], [-11, -8], [-8, -10]], [[45582, 58447], [-13, -18], [-13, 9], [-7, 16], [1, 29], [15, 41], [14, -6], [3, -71]], [[45559, 58687], [-15, -70], [-17, 7], [-13, 42], [-1, 18], [36, 6], [10, -3]], [[46307, 57055], [-3, 17], [10, 53], [-8, 28], [-28, 55], [-2, 27], [-9, 34], [-36, 71], [-35, -4], [10, 59], [-1, 79], [-11, 43], [3, 44], [-7, -2], [-11, -31], [-18, 10], [-38, 47], [-18, 46], [-3, 38], [-4, 15], [-11, -8], [-24, 1], [-71, 69], [-51, 174], [-1, 39], [7, 67], [-1, 19], [-23, -45], [-5, 30], [-18, 70], [-5, 40], [-17, 17], [-14, 4], [-10, -14], [-14, -81], [-11, 0], [-10, 18], [2, 61]], [[47780, 57697], [-6, -22], [-18, -33], [-17, -26], [-5, -28], [3, -53], [0, -119], [2, -103], [14, -38], [16, -19], [19, 4], [18, 7], [-1, -62], [-5, -69], [22, -22], [11, -21], [6, -19], [-35, -37], [-10, -22], [-4, -57], [1, -54], [46, -38], [18, -45], [8, -46], [3, -88], [-4, -20], [-12, 0], [-14, 27], [-10, 26], [-12, 0], [-24, 6], [-26, 10], [-33, -2], [-12, -5], [-8, -16], [-2, -27], [-3, -89], [11, -20], [21, -22], [14, -9], [12, 3], [9, -15], [2, -38], [-7, -28], [-11, -26], [-15, -67], [3, -25], [0, -37], [-25, -98], [-7, -19], [-33, 19], [-22, 7], [-16, -25]], [[25233, 62105], [-3, -140], [-3, -162], [-2, -119], [-3, -159], [-3, -162], [-5, -222], [-2, -143], [1, -3], [33, 7], [49, -6], [12, 0]], [[25307, 60996], [15, -12], [12, -4], [24, -32], [30, -25], [18, 50], [-9, 29], [-8, 15], [1, 14], [102, -128]], [[25177, 60147], [-6, 6], [-10, 2], [-23, -10], [-11, -2], [-9, -11], [-1, -25], [6, -40], [3, -21], [-7, -9], [-28, -25], [-11, -23], [-11, -38], [-12, -15], [-13, 3], [-9, -6], [-19, -27], [-30, -54], [-15, -40], [-1, -30], [3, -27]], [[24973, 59755], [-106, 95], [-36, 16], [-150, -2], [-64, 37], [-73, 72], [-50, 66], [-115, 182]], [[32856, 58762], [-18, -2], [7, 21], [2, 37], [10, 44], [15, 30], [15, -8], [-6, -98], [-25, -24]], [[57738, 72899], [-6, -9], [-14, 26], [0, 14], [14, 16], [7, 3], [2, -10], [0, -23], [-3, -17]], [[55725, 73953], [4, -67], [19, -12], [26, -60], [-2, -31], [-6, -10], [-43, 28], [-10, -13], [-13, 5], [-7, 34], [1, 11], [-8, 20], [-5, 9], [-17, -26], [-11, -5], [0, 24], [16, 66], [7, 11], [13, -22], [10, 8], [8, 36], [1, 36], [3, 11], [14, -53]], [[55802, 73620], [29, -56], [-23, 14], [-26, -39], [-31, 45], [-20, 46], [-4, 18], [20, 43], [19, -44], [22, -7], [14, -20]], [[55746, 74083], [-11, -5], [-9, 3], [-9, -2], [-8, -11], [1, 45], [10, 57], [11, 33], [17, 15], [7, -26], [-1, -92], [-8, -17]], [[55766, 73922], [-14, -6], [-17, 55], [-7, 38], [7, 2], [7, -5], [8, -14], [0, -15], [3, -15], [7, -19], [6, -21]], [[55577, 74557], [6, -32], [-35, 20], [-25, 29], [-21, 71], [-45, 81], [0, 24], [17, 18], [36, 12], [15, -13], [9, -13], [3, -16], [-20, -31], [-5, -14], [16, -28], [0, -11], [7, -55], [8, -20], [20, -16], [14, -6]], [[56504, 74284], [15, -62], [15, -21], [31, -25], [15, -4], [52, -45], [62, -8], [8, -13], [7, -35], [13, -27], [3, -22], [-7, -23], [9, -72], [16, -68], [23, -33], [29, -10], [28, 1], [7, -14], [-3, -59], [-12, -24], [-9, -5], [-9, 6], [-7, 14], [-8, 7], [-16, 1], [-12, 24], [-29, 33], [-5, 19], [-1, 31], [-13, 22], [-11, 43], [-11, 11], [-6, 22], [-1, 9], [-43, 6], [-35, 0], [-30, 24], [-9, 63], [-18, 17], [-13, 18], [-11, 25], [-29, 45], [-31, 39], [-30, 25], [-32, 16], [-26, -19], [-15, 4], [-3, 13], [33, 27], [44, 50], [31, 16], [15, 2], [29, -44]], [[56605, 74374], [-12, -20], [-20, 9], [-20, 65], [52, -54]], [[56635, 74399], [-13, -7], [13, 46], [23, 24], [-9, -38], [-14, -25]], [[56854, 74198], [-30, -14], [-8, 2], [7, 18], [0, 7], [-29, 33], [4, 42], [3, 11], [22, -22], [5, -37], [26, -40]], [[56881, 75238], [-35, -20], [-37, 39], [1, 23], [19, 47], [10, 14], [27, -4], [15, -32], [4, -15], [-5, -26], [1, -26]], [[56541, 73689], [-11, -14], [-12, 1], [-9, 5], [-4, 11], [5, 6], [7, 23], [6, 6], [9, -3], [5, -9], [4, -26]], [[56403, 72689], [-3, -25], [-28, 17], [-8, 26], [-2, 57], [8, 28], [5, 9], [13, -32], [27, -47], [-12, -33]], [[57548, 72272], [-10, -32], [-11, 27], [5, 31], [-13, 50], [24, 74], [0, 36], [18, 19], [-4, -62], [-14, -49], [14, -40], [7, -46], [-16, -8]], [[57505, 73132], [-28, -8], [5, 46], [-13, 36], [21, -20], [14, -24], [7, -5], [-2, -15], [-4, -10]], [[57485, 72999], [-8, -1], [10, 28], [29, 38], [43, 34], [14, 3], [24, -21], [-44, -34], [-12, -18], [-32, -4], [-24, -25]], [[57096, 73137], [-25, -22], [-17, 32], [-10, 50], [46, 72], [11, -6], [6, -19], [-1, -65], [-10, -42]], [[57021, 73195], [-22, -44], [-18, 5], [-8, 20], [12, 42], [24, 24], [11, -7], [-1, -31], [2, -9]], [[57078, 72806], [-13, -30], [-18, 11], [7, 11], [5, 15], [0, 22], [-5, 13], [3, 5], [17, -22], [4, -25]], [[57050, 72968], [-5, -9], [-21, 37], [-8, 21], [10, 18], [31, -42], [-7, -25]], [[57451, 73623], [34, -19], [9, 2], [16, -6], [5, -35], [-22, -6], [-37, -32], [-15, 7], [-19, 28], [-30, 3], [-9, 8], [16, 33], [29, 16], [23, 1]], [[57230, 73461], [-13, -2], [4, 23], [25, 40], [34, 2], [32, 20], [7, 0], [-15, -31], [-25, -30], [-49, -22]], [[57183, 73035], [-25, -4], [-8, 4], [15, 10], [11, 10], [5, 13], [25, 23], [16, 29], [18, -20], [-23, -13], [-34, -52]], [[57350, 72917], [-22, -14], [-14, -29], [-17, 21], [0, 28], [18, -9], [13, 16], [-4, 18], [15, -9], [11, -22]], [[56765, 73488], [-19, -28], [-3, 42], [12, 44], [16, 3], [6, -19], [-12, -42]], [[56787, 73354], [-16, -17], [6, 40], [-8, 21], [7, 17], [10, 15], [5, -15], [9, -24], [-13, -37]], [[56815, 73020], [0, -34], [-1, -12], [-57, -16], [5, 38], [3, 13], [19, -18], [7, 9], [3, 10], [21, 10]], [[56928, 73440], [-1, -60], [-8, 1], [-4, 9], [0, 23], [3, 36], [10, -9]], [[56942, 73594], [-9, -39], [-21, 45], [-24, 31], [-9, 27], [-14, 16], [-4, 36], [17, 15], [8, 1], [18, -44], [28, -5], [-2, -27], [8, -35], [4, -21]], [[57015, 73501], [-10, -37], [-18, 6], [-29, 40], [-10, 18], [-5, 18], [12, 2], [14, -19], [37, -10], [9, -18]], [[56866, 73111], [-5, -3], [-7, 25], [-2, 22], [3, 13], [10, 2], [13, -43], [-12, -16]], [[57248, 73858], [-27, -33], [-29, 47], [-5, 15], [21, 19], [11, 30], [-8, 36], [-31, 53], [-1, 38], [46, 16], [27, -33], [14, -3], [-5, -31], [2, -10], [2, -96], [-13, -13], [-2, -26], [-2, -9]], [[57336, 74498], [-5, -34], [38, -57], [13, -36], [5, -35], [-3, -10], [-15, 19], [-12, 6], [4, -25], [13, -21], [-22, -13], [-22, 1], [-64, 30], [-14, 32], [38, 48], [8, 19], [-27, -2], [-29, -57], [-46, 25], [-14, 23], [-4, 12], [19, 51], [32, -2], [17, 11], [21, 16], [1, 24], [50, 6], [18, -31]], [[57134, 75130], [-31, -15], [-35, 47], [34, 19], [15, -14], [11, -16], [6, -21]], [[57065, 74874], [-10, -19], [-8, -34], [-4, -47], [-16, -2], [-10, 10], [-3, 18], [-1, 23], [-7, -1], [-6, -25], [-5, -11], [-16, -2], [-18, 15], [1, 33], [-4, 38], [2, 14], [49, 3], [14, -28], [18, 16], [7, 18], [21, 11], [-4, -30]], [[57056, 73397], [-27, -3], [2, 44], [10, 11], [31, -22], [-1, -14], [-15, -16]], [[56812, 73228], [-11, -9], [-17, 13], [5, 32], [11, 13], [13, -10], [2, -14], [-3, -25]], [[57734, 72539], [-21, -12], [-6, 2], [-9, 26], [12, 65], [-11, 41], [-1, 18], [17, 24], [11, 36], [27, 40], [72, 46], [17, 5], [-1, -37], [-24, -92], [-21, -46], [6, -37], [-34, -11], [-34, -68]], [[56625, 72312], [19, -4], [26, 1], [6, 3], [16, 34], [20, 1], [9, -34], [-20, -15], [-5, -9], [4, -7], [16, -13], [21, 5], [1, -26], [4, -22], [11, -13], [11, -2], [26, 4], [25, 8], [25, 17], [26, 9], [79, -9], [28, -36], [53, -5], [50, -19], [26, 13], [45, 12], [7, -13], [-6, -82], [3, -24], [13, -11], [12, 5], [16, 27], [37, 21], [39, 0], [33, 54], [10, 3], [-6, -26], [-5, -63], [-7, -37], [-3, -29], [-22, -15], [-33, -3], [-61, 6], [-60, -10], [-113, -28], [-113, -14], [-15, 9], [0, 37], [-3, 25], [-7, 18], [-35, 15], [-33, 26], [-130, 36], [-31, 14], [-50, -8], [-18, 1], [-13, 13], [-9, 22], [-4, 69], [7, 69], [10, 18], [5, -21], [13, -9], [12, 21], [0, 31], [6, 29], [9, -12], [7, -45], [16, -12]], [[57232, 75303], [-7, 24], [-43, 43], [-100, 25], [-48, 32], [-21, -6], [-40, 36], [-28, -16], [-59, -63], [-31, 7], [-34, 38], [-22, 7], [-26, -20], [-42, -73], [-42, -36], [-38, 14], [-51, 0], [-5, -41], [10, -28], [27, -48], [-13, -37], [10, -36], [18, -7], [28, 2], [50, -47], [22, -50], [14, -54], [-30, 39], [-21, 37], [-28, 14], [-40, 32], [-25, 5], [-26, -22], [-3, -25], [29, -47], [26, -29], [14, -23], [9, -52], [-5, -17], [-10, -17], [-31, 33], [-47, 116], [-66, 23], [-11, -24], [13, -61], [9, -24], [58, -67], [-5, -14], [-8, -6], [-65, 38], [-19, 58], [-4, 73], [-59, 50], [-56, 55], [-13, 53], [12, 19], [8, 38], [-31, -7], [-19, -24], [-32, -23], [-1, -39], [5, -36], [-10, -52], [-10, -90], [6, -48], [68, -136], [23, -99], [16, -37], [35, -42], [36, -76], [15, -41], [11, -65], [-30, -41], [-18, -2], [-9, 19], [13, 44], [-2, 28], [-47, 42], [-20, -15], [-22, -27], [13, -51], [14, -34], [8, -46], [28, 4], [-38, -52], [-35, -27], [-35, -1], [-23, -5], [-7, -13], [18, -10], [15, -1], [24, -28], [68, -34], [33, -42], [32, -4], [32, -78], [56, -21], [31, -79], [43, -16], [36, -29], [11, -27], [5, -50], [2, -107], [8, -79], [0, -25], [-2, -37], [-9, -19], [-14, 0], [-26, 58], [-40, 61], [-42, 73], [-12, 13], [-10, 1], [-23, -25], [-63, -19], [-29, -26], [-11, -6], [-4, -14], [14, -15], [17, -33], [0, -45], [14, -56], [18, -14], [24, 1], [13, -10], [4, -22], [14, -26], [9, -19], [-1, -13], [-66, -37], [-13, -16], [-12, -9], [-17, 18], [-1, 44], [-22, 23], [-21, 21], [-25, 9], [-21, 30], [-14, -25], [11, -85], [24, -60], [40, -158], [18, -93], [4, -46], [-9, -75], [19, -56], [14, -57], [-15, 2], [-13, 20], [-21, 24], [-42, 92], [-15, 57], [-17, 4], [-30, -8], [-34, -122], [1, -70], [-18, 17], [-14, 22], [1, 76], [-1, 32], [-40, 104], [-19, 12], [-8, 35], [-15, 38], [-19, -8], [-16, -15], [-4, -56], [-2, -51], [-11, -38], [-43, 72], [-43, 126], [-1, 68], [31, 63], [-4, 45], [-30, 89], [-43, 57], [-24, 17], [-11, 60], [-23, 31], [-19, 15], [-4, 22], [6, 16], [45, 62], [27, 97], [13, 5], [27, -23], [31, 6], [25, 57], [21, 31], [36, -4], [80, -76], [87, -44], [43, -38], [25, -38], [13, -8], [20, -5], [-1, 28], [-6, 25], [17, 14], [46, -1], [9, 14], [8, 21], [-9, 24], [-16, 12], [-16, 3], [-11, 8], [-17, -8], [-28, 19], [-14, 16], [-8, 16], [-47, 32], [-45, 54], [-10, -31], [-19, -16], [-25, -3], [-73, 35], [-45, -27], [-24, -6], [-19, -1], [-23, -12], [-26, -7], [-23, 50], [-9, 39], [-7, 7], [-1, -37], [-7, -29], [-33, -16], [-20, 23], [-15, 68], [-18, 87], [-33, 70], [-27, 18], [-3, 39], [3, 30], [32, 8], [50, -32], [11, 6], [11, 15], [-2, 33], [-7, 29], [-14, 2], [-10, -4], [-31, 6], [-39, -16], [-19, 15], [-6, 19], [-33, 46], [-29, 62], [-46, 41], [-31, 126], [-25, 55], [-28, 40]], [[55555, 74717], [6, 0], [11, -6], [19, -22], [21, -5], [12, 15], [7, 13], [4, 21], [2, 26], [3, 8], [16, -3], [5, 6], [0, 23], [-10, 28], [-10, 35], [0, 16], [8, 7], [13, 15], [6, 19], [14, 9], [19, 2], [22, 8], [15, 20], [2, 19], [9, 55], [5, 27], [10, 24], [5, 33], [10, 31], [21, 13], [19, 15], [14, 40], [8, 34], [0, 20], [-12, 35], [-9, 33], [3, 43]], [[56365, 75654], [30, -6], [37, -2], [23, 36], [37, 3], [17, 5], [28, -8], [28, 1], [35, 15], [33, 25], [26, -2], [10, 4], [6, 5], [7, 34], [48, 2], [17, -3], [27, -1], [28, 18], [8, -2], [14, -49], [8, -14], [15, -13], [34, -37], [6, 10], [14, 12], [41, -17], [39, -28], [33, -42], [36, 12], [40, 21], [27, 6], [28, 3], [17, 8], [38, -10], [40, 22], [19, 20], [6, 29], [-3, 50], [-9, 49], [-10, 19], [-3, 19], [5, 18], [6, 12], [26, 11], [34, -16]], [[50329, 55350], [-22, -22], [-16, -33], [-12, -50], [-16, -55], [-55, -29], [-22, -1], [-114, -1], [-108, -109], [-61, -39], [-38, -61], [-51, -44], [-36, -53], [-74, -25], [-122, -83], [-38, -33], [-38, -58], [-63, -68], [-24, 1], [-49, 63], [-37, 32], [-90, 49], [-67, 18], [-33, 21], [-8, 4]], [[49135, 54774], [7, 23]], [[49142, 54797], [19, 1]], [[49161, 54798], [20, -7], [14, 18], [22, 2], [6, 18], [2, 46], [0, 37], [7, 16], [2, 44], [-11, 96], [-7, 11], [-39, 14], [-3, 19], [-7, 21], [-8, 49], [-8, 74], [-14, 92], [-27, 151], [-6, 54], [-5, 54], [-1, 66], [6, 24], [-1, 33], [-2, 34], [18, 77], [37, 94], [7, 34], [7, 24], [1, 34], [7, 110], [17, 132], [11, 51], [7, 27], [9, 44], [3, 21], [33, 52], [16, 14], [3, 20], [-5, 23], [2, 15], [8, 8], [12, 6], [9, 21], [-14, 164], [-11, 163], [-1, 14], [-7, 23], [-6, 67], [-12, 39], [-16, 12], [1, 37], [16, 63], [4, 37], [-8, 11], [-1, 28], [5, 47], [-2, 28]], [[49251, 57304], [-3, 31], [-17, 71], [-4, 51], [9, 29], [-1, 65], [-9, 100], [-1, 63], [6, 26], [-3, 25], [-12, 24], [-1, 23], [10, 23], [-1, 17], [-13, 13], [-11, 31], [-10, 48], [2, 78], [19, 144], [2, 12], [22, -1], [0, -6], [68, 2], [77, 1], [92, 2], [83, 2], [4, 6], [14, 8], [84, -15], [53, 8], [22, -5], [17, -10], [36, 6], [20, -3], [14, -36], [6, 0], [8, 15], [15, 18], [15, 13], [11, 28], [6, 22], [10, -5], [13, 2], [10, 18], [3, 27], [64, -29]], [[52115, 79258], [-14, 8], [-10, 38], [3, 58], [15, 76], [4, 56], [-7, 35], [9, 54], [25, 71], [16, 75], [9, 78], [12, 52], [23, 36], [56, 100], [5, 8], [-2, 50], [-15, 7], [-22, 15], [-56, 18], [-52, 11], [-24, 14], [-21, 38], [-13, 1], [-25, -14], [-32, -9], [-22, 8], [-15, -2], [-8, -7], [-4, 6], [-6, 33], [-12, 9], [-18, 7], [-12, -3], [-8, -16], [-12, -12], [-12, 4], [-35, 75], [-9, 17], [-3, 15], [-8, 28], [-22, 27], [-21, 9], [-10, -3]], [[51699, 80714], [1, 11], [15, 53], [52, 49], [-5, 48], [-1, 30], [-13, 19], [-25, 8], [-7, 13], [-3, 14], [19, 29], [-23, 24], [-10, 24], [-31, 30], [-4, 11]], [[51999, 82535], [-13, 26], [-27, 28], [6, 59], [9, 45], [27, 57], [22, 15], [96, 9], [105, -4], [44, -84], [-16, -44], [25, -20], [13, 7], [9, 38], [6, 42], [9, 13], [33, -32], [12, -21], [0, -69], [12, 93], [-9, 66], [6, 63], [14, 34], [12, 21], [77, -23], [86, 12], [32, -25], [73, -123], [24, -20], [31, -6], [-42, 26], [-89, 149], [-26, 19], [-41, 5], [-26, 15], [-16, 23], [-4, 20], [1, 150], [-16, 22], [-20, 8], [-12, -10], [-25, -1], [-5, 34], [6, 26], [51, 17], [33, 23], [2, 41], [-22, 32], [-25, 58], [-30, 56], [-3, 64]], [[52408, 83469], [52, -1], [13, -3], [78, -30], [19, -21], [24, -1], [44, 20], [33, 8], [12, -12], [18, -5], [4, 0]], [[52705, 83424], [2, -10], [40, -16], [17, -24], [19, -37], [2, -54], [-24, -38], [-20, -24], [76, 9], [8, -22], [11, -24], [41, 17], [103, -70], [63, 34], [16, 2], [14, -57], [-16, -57], [-55, -61], [13, -38], [17, -8], [52, 8], [82, -37], [17, 11], [67, 86], [26, 18], [88, 14], [16, 33], [35, 33], [23, 36], [55, 70], [56, -13], [33, -13], [37, -7], [33, -74], [83, -81], [77, 7], [27, -77], [12, -96], [24, -30], [20, -19], [63, -21], [2, -1]], [[54113, 81139], [-3, -9], [-9, -14], [-12, -2], [-18, 10], [-12, 13], [3, 34], [-8, 3], [-10, 20], [-4, 23], [-11, 9], [-39, 10], [-13, 6], [-10, -5], [-8, -15], [5, -15], [8, -14], [21, -22], [-2, -9], [-47, -21], [-29, -23], [-27, -12], [-28, -23], [-55, -26], [-40, -7], [-8, -6], [-15, -44], [-10, -9], [-10, 4], [-7, 8], [-10, -6], [-9, -15], [-11, -6], [-8, 1], [-16, -39], [-46, -11], [-5, -20], [-9, -23], [-6, -5], [-21, 9], [-29, 5], [-16, -13], [-20, -7], [-24, -2], [-26, -25], [-27, -44], [-14, -39], [-8, -14], [-13, 36], [-16, 26], [-11, 13], [-10, 0], [-2, -6], [0, -19], [10, -32], [13, -21], [2, -16], [8, -29], [19, -32], [30, -25], [20, -25], [15, -35], [0, -10], [-4, -14], [-7, -13], [-6, -18], [-17, -35], [5, -15], [14, -19], [12, -23], [15, -37], [21, -66], [14, -27], [19, -28], [18, -21], [28, 1], [30, -41], [33, -58], [24, -27], [17, -8], [14, -22], [12, -30], [5, -18], [11, -12], [30, 2], [38, -48], [23, -35], [13, -28]], [[53837, 79934], [-3, -11], [-2, -35], [0, -38], [-3, -19], [-17, -26], [-9, -6], [-5, -5], [-52, 34], [-4, -6], [-4, -4], [-14, -99], [-9, -18], [-15, -18], [-30, -17], [-20, -7], [-17, -8], [-51, -41], [-23, -25], [-15, -31], [0, -18], [25, -52], [29, -55], [0, -47], [-13, -36], [-3, -14], [9, -5], [16, -2], [13, -6], [6, -25], [-2, -44], [-5, -41], [-4, -17], [-13, -2], [-25, 18], [-19, 21], [-8, 12], [0, 15], [4, 10], [-7, 19], [-24, 17], [-25, -8], [-19, -11], [-12, 0], [-13, 17], [-20, 13], [-27, 8], [-16, 9], [-4, -5], [2, -36], [-5, -16], [-130, -21], [-40, -19], [-28, -25], [-22, -11], [-5, -16], [-21, -20], [-24, -6], [-6, 6], [-15, -9], [-26, -9], [-17, 3], [-8, 16], [-16, 25], [-7, 18], [1, 11], [-37, 2], [-23, 14], [-49, -4], [-12, 6], [-2, -6], [-8, -71], [-9, -30], [-16, -30], [-20, -17], [-16, -3], [1, 22], [4, 27], [-12, 6], [-17, 3], [-8, 8], [2, 20], [-4, 12], [-7, 14], [-18, 18], [-36, 27], [-25, 14], [-10, -14], [-18, -15], [-28, 5], [-7, -6]], [[53808, 83169], [7, -39], [-8, -19], [-31, 32], [-32, 0], [-18, -51], [-14, -2], [-49, 46], [-7, 23], [-2, 18], [7, 65], [-1, 20], [15, 22], [2, 32], [27, 34], [24, 1], [8, -28], [11, -20], [40, -22], [6, -10], [4, -14], [-19, -27], [-6, -14], [6, -23], [30, -24]], [[53948, 82874], [-12, 2], [-34, -6], [-34, 9], [-7, 34], [6, 34], [-14, 22], [-13, 14], [-2, 19], [2, 20], [59, -54], [48, -48]], [[53134, 83189], [-43, -1], [-16, 23], [-17, 6], [9, 29], [12, 10], [41, -19], [13, -36], [1, -12]], [[52307, 83402], [-6, -12], [3, 82], [30, 86], [13, -2], [-13, -23], [-4, -16], [-5, -33], [2, -17], [70, -5], [-8, -15], [-71, -10], [-11, -35]], [[52385, 83359], [-11, -14], [-26, 2], [-15, 13], [5, 14], [14, 11], [11, 2], [18, -7], [4, -21]], [[61530, 75758], [53, 108], [16, 65], [1, 39], [0, 49], [-27, 102], [-24, 144], [-25, 151], [-19, 45], [-81, 52], [-19, 59], [-62, 77], [-87, 33], [-17, 14], [-76, 96], [-59, 62]], [[62897, 75973], [-7, -20], [-16, -38], [-13, -19], [-14, -3], [-14, -8], [-5, -20], [0, -26], [2, -19], [4, -7], [14, -6], [14, -54], [22, -28], [34, -31], [31, -36], [15, -33], [-3, -23], [-10, -50], [-25, -41], [-22, -10], [-7, 3], [-14, 13], [-28, 32], [-30, 25], [-24, -8], [-15, -10], [-31, 12], [-35, 21], [-19, 22], [-8, 16], [5, 28], [-81, 50], [-40, 14], [-17, -15], [-60, -76]], [[62500, 75628], [-7, -8], [-46, -10], [0, -7], [10, -16], [-2, -5], [-77, -2], [-25, -10], [-68, 13], [-23, -6], [-19, -12], [-47, -13], [-32, -16], [-41, -9], [-43, 0], [-14, -5]], [[45343, 59368], [-2, 49], [-15, 111], [21, 48], [22, 29], [15, -23], [5, -45], [12, -31], [39, -20], [40, 14], [24, -6], [-1, 25], [8, 33], [48, 15], [50, 9], [52, 20], [41, -1], [12, 6], [-3, 8], [-36, 10], [-78, -23], [-80, -7], [-60, -60], [-24, 6], [-25, 60], [-9, 74]], [[53692, 53088], [-1, -40], [-22, -99], [-11, -76], [-2, -81], [6, -65], [10, -46], [7, -51], [-5, -35], [-11, -15], [8, -18], [16, -4], [27, 15], [42, 27], [55, 39], [36, 21], [60, -13], [32, -15], [16, -28], [18, -116], [8, -17], [15, -50], [12, -59], [2, -30], [-1, -22], [-12, -32], [-14, -47], [-5, -29], [-11, -21], [-14, -21], [-40, -8], [-6, -13], [-12, -50], [-21, -43], [-9, -40], [-9, -53], [2, -67], [-4, -96], [-5, -64], [11, -23], [48, -16], [9, -13], [13, -40], [16, -38], [43, -23], [17, -29], [14, -32], [2, -26], [-10, -104], [-10, -99], [4, -76], [4, -73], [5, -105], [-2, -65], [-13, -39], [0, -31], [6, -37], [-11, -103], [-7, -17], [-20, -20], [-10, -27], [-3, -44], [-11, -59], [-10, -22], [0, -27], [10, -21], [0, -30], [-20, -37], [-11, -28], [-26, -14], [-30, 14], [-7, 21], [7, 32], [-2, 25], [-11, 27], [-16, 69], [-14, 15], [-7, -28], [-25, -53], [-42, -67], [-30, -6], [-55, 21], [-47, 32], [-21, 79], [-14, 65], [-20, 76], [-22, 36], [-24, 23], [-10, 1], [-34, -42], [-10, -16], [0, -36], [3, -33], [5, -16], [5, -21], [-1, -33], [-6, -44], [-2, -49], [-106, -47], [-19, 17], [-13, 22], [-16, -4], [-46, -25], [-17, 18], [-17, 12], [-7, -10], [-1, -21], [8, -114], [-3, -44], [-10, -57], [-6, -38], [29, -11], [10, -18], [10, -29], [13, -27], [1, -16], [-15, -30], [-6, -37], [8, -28], [19, -30], [28, -32], [14, -20], [-2, -19], [-13, -40], [-5, -33], [-9, -31], [2, -28], [13, -26], [-2, -23], [-8, -18], [-18, 4], [-14, -3], [-13, 8], [-42, 90], [-9, 3], [-60, -70], [-15, -28], [-12, -41], [-17, -89]], [[53091, 49587], [-27, 51], [-24, 95], [-27, 58], [-58, 94], [-15, 69], [-66, 153], [-95, 152], [-69, 133], [-10, 29], [12, -3], [66, -66], [9, 7], [7, 15], [-28, 34], [-27, 28], [-26, 17], [-26, -2], [-14, 28], [-9, 43], [-5, 36], [-11, 38], [-37, 79], [-9, 30], [-19, 41], [12, 6], [39, -40], [3, 16], [-3, 23], [-39, 38], [-22, 2], [-5, 27], [3, 30], [-28, 115], [-29, 85], [-4, 41], [78, -186], [11, -4], [13, 2], [33, 21], [-6, 25], [-15, 26], [-14, -12], [-19, -2], [-9, 11], [-5, 19], [19, 90], [-8, -4], [-6, -16], [-10, -8], [-16, -5], [-39, 49], [-34, 130], [-9, 27], [-9, 46], [-9, 18], [-39, 186], [15, -14], [18, -53], [35, 11], [13, 31], [12, -1], [12, 7], [15, 29], [45, 128], [12, 169], [-4, 100], [-7, 100], [15, 32], [6, -21], [3, -36], [7, -26], [16, -23], [29, -7], [46, -36], [16, -24], [4, 47], [53, 40], [-16, 14], [-47, -15], [-64, 59], [-21, 38], [-20, 72], [-20, 38], [1, 34], [46, 31], [12, -4], [5, -37], [12, -15], [5, 5], [2, 31], [0, 86], [-14, 122], [5, 23]], [[52664, 52437], [12, 9], [11, 16], [8, 3], [16, -3], [8, -29], [4, -15], [15, -7], [13, -15], [11, 4], [10, 17], [13, 4], [42, 0], [38, -1], [75, 0], [76, -1], [75, 0], [57, 0], [0, 69], [0, 108], [-1, 127], [0, 122], [0, 113], [-1, 133]], [[53146, 53091], [3, 38], [4, 16], [-1, 22], [58, 2], [106, -10], [46, 1], [13, -1], [58, 6], [47, -8], [20, -10], [18, -4], [56, -6], [73, 7], [25, -2], [14, -18], [6, -36]], [[52633, 76500], [-7, -84], [5, -25], [10, -18], [5, -19], [8, -225], [-2, -18], [-34, -91], [-7, -26], [-2, -113], [-6, -30], [-12, -30], [-21, -96], [-19, -43], [-51, 53], [-30, 22], [-14, 25], [-10, 17], [6, 23], [14, 23], [2, 19], [-32, 21], [-15, 14], [0, 24], [11, 38], [-5, 32], [-18, -2], [-15, 5], [-1, 17], [10, 21], [14, 27], [-1, 30], [-16, 13], [-15, 25], [-6, 33], [12, 23], [18, 15], [-13, 34], [-10, 1], [-7, 7], [6, 16], [14, 24], [21, 71], [28, 33], [50, 22], [14, 9], [12, 25], [14, 16], [16, -2], [16, -9], [9, -11], [8, 11], [6, 31], [-4, 27], [2, 75], [9, 42], [15, 3], [13, -24], [-1, -20], [5, -49], [1, -32]], [[52081, 77054], [-15, -10]], [[52049, 77034], [-32, -21], [-23, -21], [-88, -127], [-41, -38], [-8, -22], [-8, -42], [-24, -36], [-22, -17], [-52, -18], [-53, -38], [-23, 16], [-62, -1], [-38, 46], [-74, 29], [-24, 67], [-33, 4], [-22, -2], [-13, 10], [-4, 23], [0, 22], [-23, -10], [-18, 0], [-11, -9], [-8, -10], [-10, 7], [-6, -3], [1, -13], [-22, -3], [-23, 8], [-61, 35], [-9, 5], [-42, 13], [-17, 14], [-14, 35], [-11, 10], [-6, 7], [-39, -17], [-14, -27], [-21, -32], [-146, -155], [-27, -64], [-31, -96], [-2, -44], [13, -142], [30, -75], [4, -18]], [[50473, 76326], [3, 13], [7, 18], [0, 11], [-9, 16], [-39, 18], [-18, 4], [-12, -12], [-9, -15]], [[49501, 76847], [45, 17], [41, 73], [39, 263], [28, 311], [20, 58], [26, 17], [-21, 42], [-13, -21], [-5, -23], [-7, -12], [15, 285], [11, 105], [19, 109], [39, -43], [32, -44], [17, -39], [21, -127], [15, -27], [24, -26], [-9, 29], [-17, 22], [-25, 170], [-16, 48], [-25, 40], [-80, 85], [-8, 17], [-4, 32], [27, -1], [23, -16], [-3, 18], [-7, 19], [-10, 69], [-9, 161], [1, 28], [-4, 34], [-26, 7], [-20, 2], [-22, 13], [-110, 95], [-37, 98], [-39, 72], [-9, 32], [1, 32], [20, 67], [-18, 43], [-17, 8], [-15, 21], [14, 35], [11, 23], [22, 6], [30, -8], [28, -20], [21, -5], [-64, 54], [-105, -18], [-23, 7], [-19, 12], [-7, 40], [15, 18], [13, 34], [-15, 23], [-20, 9], [-31, -1], [-29, -7], [-7, 14], [17, 37], [-15, 14], [-20, -7], [-29, -7], [-28, 11], [-26, 42], [-17, 0], [-12, -5], [-18, 16], [-19, 4], [-13, -5], [-18, 24], [-109, 49], [-47, 6], [-43, -22], [-24, 7], [-18, 32], [-14, 52], [-70, 41], [14, 27], [32, 6], [37, 19], [14, 23], [-29, 28], [-22, 7], [-9, 10], [-9, 24], [13, 12], [9, -6], [26, -4], [45, 6], [-16, 25], [-18, 6], [-8, 6], [-36, 3], [-17, -9], [-37, 4], [-9, 27], [-3, 23], [11, 51], [53, 46], [131, 51], [56, -7], [40, 9], [47, 31], [20, 28], [67, 16], [63, -29], [59, -109], [28, -37], [68, 64], [102, -2], [21, -36], [8, 30], [19, 36], [15, -16], [8, -22], [107, 6], [17, 6], [-29, 26], [-23, 62], [-5, 229], [-30, 64], [-34, 102], [-16, 60], [-1, 21], [5, 30], [42, -1], [32, -8], [62, 23], [30, -16], [-2, -47], [9, -60], [11, -28], [15, -33], [50, 3], [54, -19], [68, -3], [99, -34], [42, 20], [41, 41], [78, 27], [7, 14], [-45, -6], [-42, 26], [-5, 29], [5, 25], [16, 58], [120, 92], [85, 28], [89, 50], [45, 52], [30, 68], [10, 14], [12, 13], [-12, 24], [8, 256], [9, 46], [17, 38], [27, 29], [40, 32], [148, 44], [22, 17]], [[50701, 81276], [3, -27], [11, -35], [7, -19], [-6, -25], [5, -21], [20, -37], [25, -35], [22, -23], [7, 3], [16, 6], [28, 23], [24, 7], [13, -17], [7, -10], [15, -40], [4, -41], [7, -34], [12, -14], [44, -5], [33, -13], [9, -11], [11, -76], [6, -11], [9, 9], [8, 12], [11, 2], [19, -5], [26, -1], [26, -8], [36, -44], [-1, -14], [-7, -25], [-3, -20], [6, -8], [10, -20], [-2, -24], [-10, -17], [-3, -14], [0, -9], [3, -7], [8, -6], [53, -9], [49, 9], [31, 24], [5, 25], [9, 29], [18, 25], [13, 8], [12, -10], [-20, -102], [14, -26], [2, -39], [6, -34], [17, 1], [21, -6], [15, -13], [18, -20], [25, -19], [18, -6], [6, -16], [15, -18], [22, -37], [20, -25], [10, 0], [19, 10], [28, 6], [22, -1]], [[49672, 78285], [-10, -50], [-18, 46], [-25, 41], [-5, 37], [0, 10], [29, -27], [29, -57]], [[62549, 44368], [-17, -5], [-8, 15], [-5, 36], [5, 35], [1, 28], [-14, 49], [14, 28], [12, -32], [6, -2], [18, -23], [-5, -42], [1, -13], [-8, -42], [0, -32]], [[65499, 39550], [-40, -17], [-27, 6], [-54, 49], [-15, 33], [-21, 91], [5, 32], [17, 57], [38, 23], [41, -9], [18, -15], [21, -66], [28, -68], [-4, -80], [-7, -36]], [[33103, 60192], [-2, -33], [-7, -6], [-11, 27], [-45, -4], [-7, 25], [-1, 11], [22, 42], [-26, 11], [-10, 18], [-22, 87], [2, 26], [9, 13], [15, 2], [28, -28], [20, -40], [7, -1], [3, -11], [-4, -29], [12, -24], [5, -17], [12, -69]], [[32964, 61192], [-32, -6], [-22, 5], [-5, 41], [11, 35], [-8, 42], [5, 25], [11, 17], [18, -22], [3, -32], [11, -29], [51, -61], [-43, -15]], [[32891, 61063], [-22, -26], [-11, 8], [-14, 50], [-9, 138], [7, 22], [5, 9], [30, -17], [12, -19], [13, -13], [-7, -25], [4, -103], [-8, -24]], [[32991, 60996], [-15, -2], [-7, 5], [-2, 34], [12, 24], [7, 6], [10, -27], [3, -22], [-8, -18]], [[34956, 54930], [20, 30], [27, 152], [19, 54], [20, 7], [109, -126], [51, -11], [103, -68], [38, -88], [86, -145], [45, -45], [1, -39], [-10, -60], [29, 53], [45, -84], [13, -41], [14, -76], [-5, -49], [-6, -25], [-1, -19], [14, 27], [7, 21], [3, 51], [10, 63], [15, 1], [12, -38], [24, -163], [9, -33], [4, -52], [-2, -23], [2, -22]], [[35652, 54182], [-9, -12], [-23, -27], [-11, -37], [-6, -34], [-14, -24], [-14, -30], [-4, -24], [-13, -19], [-3, -32], [-32, -112], [-13, -50], [-19, -54], [-11, -20], [-16, -32], [-8, -36], [0, -39], [-11, -45], [-6, -40], [-10, -23], [-28, -124], [-1, -43], [-7, -26], [-19, -59], [-13, -36], [-23, -27], [-25, -29], [-9, -31], [-17, -17], [-12, -1], [-20, 12], [-28, 5], [-13, -3], [-7, 16], [-9, 36], [-13, 25], [-9, -9], [-19, -25], [-21, -15], [-15, 5], [-33, 17], [-15, 9], [-4, 16], [-5, 11], [-7, -5], [-10, -19], [-13, -20], [-19, -26], [-40, -48], [-11, -17], [-11, 10], [-17, 9], [-18, 1], [-39, 30], [-22, 22], [-10, 28], [-12, 11], [-7, 8]], [[34402, 78779], [-6, -5], [-19, 8], [9, 18], [7, 5], [9, 2], [4, -5], [-1, -13], [-3, -10]], [[34370, 78823], [-24, -25], [-9, 14], [2, 17], [13, 39], [-1, 11], [-14, 76], [2, 13], [4, 5], [21, -16], [3, -21], [-10, -46], [7, -31], [9, -23], [-3, -13]], [[1066, 44162], [-4, -4], [-5, 22], [7, 34], [6, 12], [6, -26], [-10, -38]], [[543, 43595], [-16, -4], [-16, 7], [-9, 33], [4, 14], [10, -7], [10, -24], [17, -11], [0, -8]], [[32497, 62251], [-32, 0]], [[32465, 62251], [3, 13], [14, 14], [11, -2], [4, -5], [0, -20]], [[32546, 62140], [-4, -1], [-3, 5], [-3, 9], [-2, 8], [1, 6], [2, -3], [18, -5], [-2, -7], [-3, -7], [-4, -5]], [[7926, 42247], [-5, -4], [-6, 10], [-2, 16], [2, 26], [13, -17], [6, -11], [-8, -20]], [[8385, 41736], [-9, -15], [-11, 11], [-5, 14], [-2, 15], [2, 19], [26, -3], [8, -8], [-9, -33]], [[7942, 42120], [-11, 0], [-10, 9], [2, 59], [3, 12], [15, -20], [13, -52], [-12, -8]], [[8522, 41653], [40, -27], [7, -44], [-8, -29], [-21, 7], [-10, 16], [-14, 52], [-39, -12], [-27, 11], [-15, 67], [0, 31], [6, 19], [29, 20], [36, -15], [13, -38], [3, -58]], [[11382, 46258], [42, -30], [13, 3], [-13, -29], [-42, -16], [-14, -15], [-16, 10], [-9, 34], [39, 43]], [[11372, 46122], [-20, -45], [-1, 48], [8, 6], [7, 0], [6, -9]], [[11486, 45785], [-10, -9], [-1, 61], [13, -12], [5, -9], [-2, -17], [-5, -14]], [[11091, 46710], [-27, -14], [-13, 3], [-10, 47], [3, 29], [5, 9], [46, -11], [4, -22], [-1, -20], [-7, -21]], [[11090, 46413], [-6, -11], [-11, 35], [-2, 14], [20, 18], [11, -9], [-12, -47]], [[10886, 41557], [2, -11], [-11, 1], [-3, 4], [1, 20], [7, 25], [6, 21], [11, 20], [21, 19], [11, 8], [3, -5], [-4, -2], [-35, -41], [-10, -29], [-5, -20], [1, -6], [5, -4]], [[11234, 46693], [-18, -5], [-3, 29], [6, 15], [8, 7], [13, -9], [8, -12], [-1, -11], [-13, -14]], [[10921, 41255], [3, -21], [-6, 10], [-22, 20], [-2, 17], [27, -26]], [[10880, 41365], [2, -16], [-10, 11], [-10, 29], [-17, 36], [-4, 15], [13, -14], [9, -21], [17, -40]], [[12140, 41160], [-5, -12], [-1, 12], [-7, 6], [-11, 12], [-15, 14], [-8, 3], [-4, 8], [6, 4], [9, -6], [12, -13], [15, -13], [9, -15]], [[11952, 41277], [0, -11], [-26, 55], [10, -4], [16, -40]], [[11526, 39828], [-8, -11], [3, 15], [-6, 32], [-6, 5], [6, 9], [9, -25], [2, -25]], [[10413, 42571], [-5, -7], [7, 46], [7, 6], [-9, -45]], [[10155, 42269], [15, -28], [-20, 19], [-25, 8], [9, 5], [15, 0], [6, -4]], [[10119, 42260], [-11, -3], [-27, 34], [11, 0], [15, -21], [12, -10]], [[9708, 42709], [-2, -26], [-5, 25], [-17, 40], [-7, 18], [8, -3], [23, -54]], [[9587, 42436], [1, -10], [-6, 1], [-10, 29], [-4, 25], [-6, 29], [-9, 21], [-1, 19], [0, 30], [10, -46], [9, -37], [8, -31], [8, -30]], [[95611, 40180], [31, -36], [34, 15], [42, -57], [108, -172], [37, -37], [23, -14], [16, -28], [16, -40], [20, -28], [9, -26], [2, -36], [8, -22], [37, -57], [22, -50], [32, -26], [13, -30], [17, -14], [18, -31], [30, -24], [68, -88], [53, -84], [26, -52], [29, -46], [36, -37], [34, -42], [17, -99], [-9, -35], [-20, -18], [-18, -1], [-17, -12], [-56, 64], [-14, 9], [-15, -4], [-8, 14], [-6, 21], [-35, 24], [-32, 37], [-9, 26], [-5, 32], [-8, 19], [-45, 28], [-31, 31], [-22, 44], [-34, 31], [-54, 63], [-27, 20], [-24, 31], [-65, 115], [-23, 21], [-20, 51], [-55, 120], [-27, 50], [-29, 44], [-22, 52], [-17, 61], [-40, 88], [-5, 38], [2, 38], [-10, 25], [-16, 15], [-8, 26], [1, 35], [5, 18], [40, -60]], [[96539, 38811], [-9, -22], [-11, 5], [-8, 8], [-6, 12], [6, 44], [24, -22], [4, -25]], [[94430, 40718], [-4, -12], [-2, 92], [8, 34], [5, -71], [-7, -43]], [[96669, 39498], [13, -10], [22, 1], [-5, -98], [-32, -16], [-11, 1], [-7, 21], [-18, 14], [1, 33], [-18, 76], [31, 11], [17, 20], [0, -18], [2, -22], [5, -13]], [[96262, 39919], [-15, -5], [18, 52], [1, 33], [7, 63], [-1, 22], [12, -3], [12, -18], [-14, -16], [-5, -28], [0, -34], [6, -7], [-9, -37], [-12, -22]], [[96499, 39653], [-15, -4], [-20, 41], [-39, 21], [-17, 36], [-11, 43], [22, 11], [22, 58], [-15, 22], [-26, 3], [3, 23], [42, 27], [18, -16], [8, -18], [-2, -92], [19, -29], [20, -65], [-1, -18], [-8, -43]], [[69217, 23554], [23, -4], [13, 6], [62, 76], [16, 2], [-2, -59], [16, -26], [-20, -6], [-38, 2], [-9, -33], [39, -42], [19, -6], [15, 0], [29, 10], [23, 15], [36, 36], [22, 14], [41, 0], [21, 34], [10, 10], [24, -1], [21, -13], [13, -31], [7, -37], [-5, -37], [-15, -36], [-26, -22], [6, -26], [-7, -13], [-13, -1], [-12, 6], [-16, 31], [-20, 16], [-48, -1], [-22, -2], [-3, -23], [-12, -18], [-12, -10], [-16, 4], [-3, -10], [9, -24], [21, -31], [36, -22], [21, -5], [3, 42], [26, 4], [23, -12], [16, -30], [-13, -10], [-12, -16], [-3, -21], [-23, -23], [-13, -2], [-44, 11], [-26, 25], [-6, 18], [-16, 7], [-18, -23], [-19, -5], [-37, 19], [-35, 31], [-22, 12], [-33, 8], [-19, -71], [-26, -30], [-33, -3], [-16, 6], [-9, 28], [2, 29], [5, 29], [11, 29], [6, 32], [-2, 30], [-12, 22], [6, 40], [-12, 30], [4, 23], [20, 16], [-9, 13], [-10, 4], [-7, 18], [-6, 22], [7, 41], [12, 39], [-2, 45], [19, 42], [17, 47], [12, 19], [15, 3], [7, -13], [3, -26], [-6, -17], [14, -7], [4, -55], [-9, -22], [-1, -22], [-19, -46], [5, -37], [37, -16]], [[69244, 23583], [-17, -5], [-5, 19], [1, 25], [-10, 20], [-5, 22], [4, 20], [28, 3], [28, -7], [8, -35], [-21, -48], [-11, -14]], [[64398, 25092], [-20, -5], [-18, 11], [-11, 32], [23, 27], [12, -19], [9, -20], [5, -26]], [[55552, 86607], [9, 0], [3, 5], [15, -4], [23, -22], [4, -12], [16, -6], [5, -13], [-18, -39], [-11, 0], [-8, 4], [-15, -4], [-8, -7], [-3, -16], [0, -34], [-65, -7], [-15, 10], [-20, 77], [4, 20], [14, 8], [12, 2], [1, -41], [18, 4], [5, 27], [1, 20], [-4, 9], [-12, 8], [-7, 13], [10, 21], [18, 9], [16, -28], [12, -4]], [[55461, 86513], [2, -13], [-11, 3], [-8, -4], [-6, -16], [-12, 5], [-5, 23], [9, 34], [22, 2], [9, -34]], [[55725, 86428], [-2, -13], [-23, -3], [-10, 12], [-21, -2], [-3, 6], [8, 12], [17, 8], [22, -3], [12, -17]], [[57721, 86714], [-10, -2], [-26, -20], [-40, -5], [-17, -14], [-61, 42], [-11, 3], [-36, -11], [-34, -31], [-64, -9], [-32, -10], [-20, -14], [-4, 33], [9, 43], [14, 29], [1, 18], [-10, -1], [-21, -42], [-11, -49], [-21, -25], [-48, -10], [-47, 39], [-23, 0], [14, -28], [10, -31], [-1, -17], [-25, 3], [-28, -19], [-25, -27], [-11, 0], [-17, 38], [-30, -18], [-26, -24], [-52, -7], [-31, -31], [-55, -22], [-30, 1], [-69, -25], [-23, -40], [-20, -14], [-29, 12], [-88, -19], [-84, -25], [-36, 1], [-36, 11], [-38, -35], [-40, -47], [-45, -16], [-16, 6], [13, 24], [29, 25], [21, 35], [2, 28], [-13, 12], [-19, 3], [-24, 30], [-23, 64], [-13, 3], [-6, -17], [-7, -49], [-7, -14], [-12, -11], [-15, -12], [-14, -5], [-51, 1], [-7, 24], [0, 11], [9, 32], [-7, 6], [7, 26], [12, -2], [14, 4], [7, 13], [0, 16], [-20, 4], [-1, 11], [18, 45], [2, 12], [-7, 3], [-11, -5], [-73, 14], [-90, 57], [-22, 3], [-14, 51], [-21, -6], [-32, -30], [-24, 22], [-25, 15], [-7, 24], [0, 34], [-2, 41], [-7, 47], [-5, 68], [5, 53], [20, 39], [8, 25], [9, 64], [3, 74], [-6, 26], [2, 17], [16, 0], [-4, 14], [-7, 8], [-8, 17], [7, 9], [19, 0], [2, 6], [2, 8], [-15, 43], [-2, 21], [-21, 62], [-23, 60], [-36, 43], [13, 71], [14, 64], [-3, 31], [-5, 37], [-44, 41], [-7, 58], [-10, 63], [4, 38], [7, 29], [14, 29], [73, 92], [4, 48], [50, 4], [-23, 42], [-6, 24], [-1, 29], [71, 19], [27, -16], [62, 20], [55, 38], [-1, 20], [-8, 18], [-12, 35], [8, 10], [21, -7], [-10, 17], [2, 18], [22, -7], [36, 51], [1, 39], [63, 21], [71, 79], [33, 25], [32, 18], [69, 80], [29, 3], [15, 54], [58, 72], [17, 9], [27, 64], [71, 75], [45, 95], [25, 33], [8, 36], [28, 3], [25, 27], [54, 18], [53, -5], [22, -12], [21, 4], [-2, 32], [-15, 20], [12, 19], [28, 14], [-2, 32], [-7, 20], [-23, 25], [12, 58], [2, 63], [11, 73], [-29, 39], [-112, 65], [-21, -2], [-24, 8], [-26, 50], [11, 43], [2, 16], [-11, -1], [-16, -21], [-36, -23], [-46, 18], [-23, -4]], [[56109, 86599], [-20, -3], [-29, 29], [-3, 11], [11, 6], [-8, 23], [3, 10], [22, -18], [12, -21], [-12, -5], [20, -22], [4, -10]], [[55893, 88272], [3, -11], [17, 3], [21, 20], [16, -9], [-2, -28], [-10, 1], [-3, 4], [-14, -16], [-2, -9], [-16, -7], [-29, 28], [-18, 45], [42, 0], [-4, -11], [-1, -10]], [[56159, 86618], [35, -13], [15, 5], [17, -30], [-29, -20], [-2, -24], [12, -14], [4, -22], [-29, 0], [-13, 18], [-6, 23], [-13, 16], [-18, 13], [9, 16], [5, 24], [13, 8]], [[55958, 86710], [-4, -27], [-19, 3], [-19, -5], [-15, 27], [-9, 45], [3, 9], [12, 10], [9, -24], [42, -38]], [[56064, 86486], [-28, -20], [-10, 5], [3, 33], [16, 15], [28, 2], [-9, -35]], [[56007, 86467], [-24, -6], [-15, 17], [6, 12], [17, 14], [18, -2], [4, -16], [-6, -19]], [[56902, 89280], [-42, -19], [-33, 12], [-1, 37], [21, 18], [37, 7], [52, -18], [7, -10], [-29, -7], [-12, -20]], [[99999, 42529], [-42, -77], [-15, -39], [-13, -44], [-36, -47], [-15, -63], [1, -63], [36, 66], [40, 54], [12, 11], [13, 0], [-1, -19], [-6, -18], [-5, -48], [11, -45], [-30, 5], [-29, -4], [-35, -25], [-34, -11], [-13, -1], [-13, 9], [-8, 13], [-6, 29], [-6, 5], [-28, -1], [-40, -59], [-14, -49], [-16, -3], [-18, 11], [-23, -38], [-26, -14], [-12, 32], [-7, 40], [-10, 29], [-29, 7], [4, 36], [8, 15], [7, 21], [5, 24], [14, -16], [14, -9], [16, 18], [17, 1], [17, 53], [26, 33], [37, 26], [37, 19], [19, 3], [18, 11], [32, 50], [21, 25], [24, 15], [22, 9], [20, -8], [17, 5], [42, 35], [0, -9]], [[99521, 41836], [0, -26], [8, -11], [8, -2], [21, -48], [31, -42], [19, -32], [1, -28], [-6, -29], [8, -51], [4, -54], [14, -86], [-20, -16], [-30, -2], [-7, -15], [-11, 8], [-25, -6], [-25, -28], [-23, -38], [-27, 0], [-30, -8], [-30, 5], [-21, 21], [-38, 22], [-49, 19], [-21, 15], [-17, 25], [-16, 63], [-3, 31], [3, 30], [15, 10], [12, 15], [1, 19], [6, 14], [7, 5], [3, 9], [-5, 32], [-1, 29], [29, 53], [31, 45], [56, 42], [34, -4], [52, 33], [17, 15], [16, -10], [9, -24]], [[0, 42174], [30, 49], [9, 7], [10, -45], [-12, -49], [-30, -43], [-7, -22], [0, 103]], [[99999, 42071], [-21, -21], [-8, 21], [10, 50], [19, 52], [0, -42], [0, -60]], [[99579, 40913], [0, -25], [-36, -16], [-12, 20], [-8, 4], [-21, -36], [-6, -15], [-2, -11], [-6, -6], [-39, -17], [-17, 17], [12, 12], [14, 23], [14, -3], [15, 22], [14, 33], [21, 8], [14, 13], [24, -10], [19, -13]], [[281, 41487], [-8, -8], [-6, 2], [-7, 9], [-4, 16], [9, 14], [13, -16], [3, -17]], [[344, 41339], [-3, -10], [-15, 17], [-6, 12], [16, 9], [8, -3], [0, -25]], [[486, 41501], [-16, -6], [-14, 25], [9, 26], [13, -7], [7, -25], [1, -13]], [[290, 41893], [-7, -20], [-6, 7], [8, 33], [1, 15], [-12, 17], [-1, 12], [3, 8], [15, -20], [9, -15], [1, -8], [-2, -15], [-9, -14]], [[407, 40802], [-3, -5], [-8, 6], [-6, 8], [-1, 8], [3, 10], [6, 6], [3, -2], [-2, -3], [-3, -4], [0, -11], [5, -6], [4, -1], [2, -6]], [[56, 40932], [0, -17], [-4, 1], [-5, 8], [-2, -4], [-2, -5], [-1, -12], [-1, -7], [-4, 3], [0, 11], [1, 9], [2, 12], [7, 11], [9, -10]], [[99231, 41965], [-15, -9], [8, 45], [8, 15], [5, 3], [9, 3], [-4, -32], [-11, -25]], [[99839, 41839], [-10, -16], [-4, 79], [9, 0], [7, -8], [4, -20], [-6, -35]], [[99818, 41415], [-2, -5], [-24, 46], [0, 19], [5, 16], [9, 15], [9, -26], [7, -44], [-4, -21]], [[99673, 41630], [-14, -10], [-8, 35], [11, 35], [12, 4], [6, -36], [-7, -28]], [[99999, 42315], [-4, -1], [0, 11], [-99995, 19], [16, 28], [12, 5], [-8, -27], [0, -14], [-20, -21], [99999, 0]], [[0, 42538], [9, 15], [6, 0], [-3, -13], [-12, -11], [0, 9]], [[99199, 44639], [-10, -6], [-18, 5], [-4, 9], [6, 2], [11, 6], [14, -3], [3, -6], [-2, -7]], [[98507, 39346], [-2, -7], [-8, 2], [-2, 13], [5, 7], [7, -4], [0, -11]], [[358, 39937], [0, -1], [-1, 0], [-2, 2], [-2, 4], [0, 4], [0, 4], [1, 0], [2, -4], [1, -4], [1, -5]], [[60145, 60055], [5, 1], [38, 28], [37, 5], [36, -20], [23, -5], [11, 10], [10, 26], [9, 41], [15, 23], [20, 5], [26, -47], [43, -125], [11, -7], [7, 3], [21, 100], [17, 78], [31, 144], [18, 83], [16, -24], [17, -42], [18, -20], [20, -12], [10, -2], [12, -17], [44, -103], [15, -24], [20, -2], [86, 33], [51, 60], [7, 24], [14, 0], [17, -27], [7, -25], [11, -34], [20, -5], [49, 24], [23, 14], [21, -12], [26, -9], [16, 0], [38, -34], [47, 11], [22, -2], [22, -15], [37, -53], [47, -65], [68, -47], [14, -19], [33, -74], [51, -142], [67, -136], [73, -107], [39, -75], [26, -91], [26, -83], [26, -35], [24, -29], [26, -63], [18, -52], [24, -60]], [[61771, 59024], [-27, -82], [-37, -110], [-42, -127], [-13, -32], [-37, -77], [-7, -22], [-7, -56], [0, -101], [5, -130], [4, -119], [21, -14], [23, -9], [27, 16], [31, 13], [40, 8], [43, 24], [26, 20], [27, -2], [24, -21], [12, -19], [17, -6], [21, 1]], [[56756, 85178], [2, 23], [37, 113], [7, 89], [13, 13], [4, 12], [-6, 29], [-38, 18], [-15, -3], [-14, -30], [-14, -22], [-34, -14], [-29, 23], [-67, 32], [-18, 41], [-4, 42], [-35, 40], [-15, 48], [6, 33], [32, 22], [9, 19], [-40, -3], [-9, 5], [-2, 17], [-18, 58], [16, 23], [7, 22], [-13, 19], [4, 22], [10, 22], [-6, 50], [40, 27], [40, 19], [83, 10], [-8, 46], [34, 2], [57, 56], [56, -10], [82, 38], [157, 0], [22, 22], [-4, 22], [0, 24], [30, -7], [49, 4], [186, -46], [45, 0], [63, -47], [34, -13], [101, 0], [154, -21], [31, 32], [3, 9]], [[56282, 85611], [20, -14], [18, 4], [18, 10], [40, -9], [92, -71], [8, -19], [-54, -8], [-13, -22], [-13, -15], [-15, -5], [-27, -30], [-35, -29], [-8, -17], [-64, 3], [-35, -11], [-29, -33], [-11, -62], [-21, -49], [-21, -18], [-22, -3], [-6, 19], [3, 18], [46, 69], [10, 23], [-23, 10], [-20, 24], [-42, 28], [-8, 22], [10, 2], [10, 7], [11, 19], [5, 21], [-34, 64], [18, 10], [21, -2], [22, -19], [24, 22], [11, 3], [17, -8], [17, 42], [40, 14], [20, 13], [20, -3]], [[56367, 85729], [-23, -28], [-13, 11], [-7, 14], [-30, -65], [-33, -11], [-19, 13], [2, 24], [-19, 63], [-29, 19], [-40, 1], [-30, 26], [113, 18], [12, 30], [23, 32], [17, 3], [15, -7], [2, -25], [4, -10], [51, -13], [20, -41], [8, -50], [-24, -4]], [[56484, 85570], [-23, -6], [-55, 41], [13, 27], [15, 11], [47, -17], [6, -42], [-3, -14]], [[60724, 62214], [84, -333], [34, -196], [30, -206], [23, -308], [21, -157], [34, -78], [23, -146], [21, -6], [14, -40], [25, -138], [18, -51], [9, 44], [-1, 25], [-7, 43], [7, 54], [14, 33], [31, -44], [18, -34], [5, -68], [7, -37], [33, -80], [28, -23], [37, -6], [30, -17], [25, -29], [46, -81], [104, -71], [85, -216], [49, -151], [163, -227], [28, -110], [15, -106], [34, 5], [59, -117], [17, -89], [48, -32], [9, 52], [23, -43], [9, -67]], [[61976, 59163], [-31, -26], [-34, -24], [-4, 1], [-12, -31], [-16, -84], [-17, -25], [-10, -2], [-53, 79], [-8, 4], [-11, -15], [-9, -16]], [[61132, 61107], [9, -56], [-27, 21], [-5, 12], [12, 22], [3, 13], [8, -12]], [[61150, 60884], [11, -30], [8, 3], [7, 10], [4, 21], [44, -42], [-3, -29], [-26, -1], [-30, 12], [-28, -4], [-33, 12], [-8, 48], [21, -23], [11, 6], [2, 6], [-15, 33], [-21, 6], [1, 26], [10, 10], [6, 12], [-13, 36], [24, -9], [15, -21], [10, -25], [3, -57]], [[52426, 54008], [7, -3], [41, 2], [12, -30], [-1, -45], [-43, -131], [-8, -55], [-17, -46], [-14, -4], [-49, 27], [-9, 17], [-3, 22], [5, 52], [4, 16], [23, 10], [8, 9], [13, 56], [4, 51], [10, 39], [17, 13]], [[52664, 52437], [2, 13], [-25, 35], [-18, 3], [-16, 11], [13, 90], [17, 80], [25, 61], [13, 14], [4, 30], [20, 99], [25, 80], [-8, 81], [6, 136]], [[52722, 53170], [7, -4], [1, -13], [2, -19], [9, -16], [31, -27], [91, 0], [54, 0], [80, 0], [85, 0], [64, 0]], [[25607, 59561], [-7, -8], [5, -58], [-16, -35], [-14, -25], [-26, -7], [-44, -2], [-66, 28], [-48, 39], [-26, 0], [8, -13], [21, -8], [27, -27], [-8, -8], [-99, 57], [-114, 112], [-68, 18], [-78, 30], [-46, 71], [-35, 30]], [[56986, 70077], [21, -70], [43, -12], [142, 62], [157, -62], [86, -24], [133, -54], [81, -95], [23, -12], [58, 2], [38, -56], [152, -27], [81, -62], [46, -50], [28, -15], [24, 2], [33, 19], [42, 35], [45, 48], [94, 125], [33, 22], [22, -6], [27, 2], [11, 33], [14, 23], [8, 27], [15, 31], [48, 9], [98, 54], [-11, -25], [-89, -61], [38, -8], [39, 21], [45, 13], [8, 26], [6, 49], [9, 6], [30, -9], [92, -74], [23, -2], [65, 41], [13, 9], [21, -23], [48, -93], [-17, 2], [-51, 80], [-4, -40], [-29, -70], [36, -30], [30, -11], [16, -39], [10, -35], [29, 15], [21, 47], [-11, 27], [-8, 27], [10, 1], [20, -23], [58, -89], [20, -19], [22, 3], [48, 26], [13, -4], [63, 33], [8, -25], [10, -24], [51, 27], [80, 0], [66, 29], [76, 71], [6, 11]], [[59695, 68823], [-15, -26], [-32, -93], [-33, -296], [-47, -231], [-5, -144], [-8, -52], [-23, -73], [-27, -72], [-49, 37], [-79, 126], [-46, 120], [-49, 77], [-47, 103], [-13, 73], [1, 48], [-21, 115], [-15, 55], [-57, 123], [-16, 65], [-13, 29], [-12, 41], [-21, 160], [-23, 101], [-25, -28], [4, -43], [-22, -59], [-14, -68], [11, -56], [46, -85], [10, -37], [11, -80], [-2, -110], [7, -37], [35, -81], [13, -48], [7, -42], [12, -38], [34, -71], [50, -134], [47, -91], [35, -44], [14, -44], [3, -113], [-2, -55], [30, -101], [11, -52], [29, -42], [13, -48], [12, -78], [18, -231], [26, -56], [77, -303], [66, -192], [32, -144], [48, -174], [95, -383], [56, -118], [22, -66], [41, -51], [44, -74], [-42, 7], [-10, -5], [-15, -12], [-7, -45], [-3, -37], [5, -194], [11, -98], [37, -188], [28, -56], [14, -36], [18, -27], [88, -63], [52, -136], [115, -170], [11, -47], [0, -11]], [[27687, 49891], [6, 8], [40, 29], [17, 29], [20, 26], [18, 41], [11, 39], [28, 180], [26, 114], [-5, 54], [-21, 74], [-5, 109], [2, 33], [-3, 25], [-14, -45], [4, -160], [-13, -72], [-17, -18], [-12, 13], [7, 117], [-13, -22], [-21, -79], [-34, -59], [-1, -19], [-9, -25], [-26, 23], [-20, 24], [-65, 132], [-43, 28], [-25, 46], [-6, 19], [-3, 27], [26, 27], [28, 37], [2, 82], [0, 65], [-20, 109], [9, 144], [-5, 56], [-23, 119], [17, 60], [60, 44], [20, 29], [13, 95], [14, 56], [27, -22], [21, 2], [-28, 21], [-24, 85], [-3, 40], [44, 116], [24, 30], [28, 62], [25, 93], [6, 147], [-10, 105], [-8, 111], [15, 28], [36, 15], [30, 36], [15, 33], [36, -5], [41, 51], [66, 26], [91, 58], [20, 52], [-9, 92]], [[28094, 52681], [9, -12], [25, -44], [16, -43], [26, -27], [21, -22], [55, -88], [37, -44], [40, -41], [57, -42], [36, 7], [8, -32], [7, -34], [13, -19], [21, -17], [12, -5], [4, -9], [12, -122], [8, -17], [29, -20], [35, -7], [14, 4], [31, -34], [23, -16], [25, -12], [17, -3], [8, 5], [3, 12], [14, -2], [21, -16], [30, -3], [19, 15], [2, 25], [2, 43], [7, 15], [21, 25], [11, -5], [57, -54], [11, -19], [15, -38], [26, -55], [29, -36], [44, -15], [42, -58], [50, -40]], [[27741, 50130], [-5, -22], [-27, 2], [-7, 7], [0, 25], [6, 81], [7, 34], [22, 32], [18, 16], [23, -3], [25, -29], [-29, -55], [-16, -8], [-6, -7], [-11, -73]], [[28080, 52564], [-15, -4], [-7, 28], [19, 32], [6, 6], [-3, -62]], [[24907, 51398], [-15, -1], [-43, 56], [3, 55], [17, 37], [56, 18], [23, -34], [-2, -66], [-19, -48], [-15, -9], [-5, -8]], [[25161, 51318], [-33, -24], [-11, 11], [-7, 11], [-2, 15], [19, 35], [17, 20], [16, 41], [29, 24], [9, -6], [5, -8], [2, -14], [-9, -33], [-18, -23], [-17, -49]], [[24604, 51577], [-28, -10], [-24, 20], [-10, 31], [-2, 46], [2, 15], [52, 16], [17, -38], [0, -57], [-7, -23]], [[24882, 51071], [-11, -1], [-16, 24], [12, 45], [13, -11], [9, -12], [5, -18], [-12, -27]], [[24646, 51857], [18, -37], [9, -106], [56, -112], [7, -62], [-5, -29], [2, -11], [27, -44], [18, -47], [-30, -108], [-62, -46], [-67, 2], [-13, 12], [-18, 41], [-4, 37], [11, 35], [34, 54], [53, 48], [6, 37], [-21, 35], [-14, 71], [-34, 50], [-16, 152], [-11, 8], [-23, -21], [-11, 18], [-2, 10], [25, 35], [5, 24], [36, 12], [15, -20], [9, -38]], [[24840, 51650], [-13, -17], [-52, 20], [-16, 33], [13, 46], [11, 18], [31, -17], [32, -51], [-6, -32]], [[30061, 63201], [12, 10], [8, 34], [11, 31], [14, 17], [17, 10], [32, -1], [44, -27], [13, 1], [43, 24], [35, 14], [34, -16], [13, -21], [28, -33], [14, -10], [43, 1], [12, -3], [37, -55], [30, -22], [18, -1], [32, 21], [16, -1], [18, -47], [4, -67], [15, -61], [24, -39], [115, 16], [25, -32], [-8, -27], [-17, -14], [-54, 6], [-24, -3], [-5, -26], [0, -25], [32, -6], [31, -12], [32, -20], [33, -13], [36, -9], [36, -14], [61, -49], [66, -109], [18, -25], [12, -34], [-6, -43], [-24, -69], [-13, -22], [-20, -14], [-13, -28], [-13, -49], [-8, -4], [-9, 2], [-16, 28], [-12, 42], [-32, 39], [-38, -5], [-56, 24], [-34, -12], [-34, -2], [-35, 12], [-35, 4], [-35, -15], [-34, -25], [-12, -17], [-22, -39], [-12, -15], [-82, -20], [-24, 29], [-22, 40], [-32, 5], [-46, -30], [-28, -11], [-12, -14], [-3, -14], [0, -56], [-7, -33], [-45, -127], [-25, -90], [-10, -28], [-12, -6], [-23, 52], [-14, 19], [-17, 9], [-7, 27], [0, 39], [-5, 38], [-10, 29], [-16, 20]], [[32977, 60627], [-26, -13], [-11, 100], [-18, 72], [3, 45], [3, 17], [38, -28], [12, -33], [7, -89], [-8, -71]], [[61976, 59163], [4, -27], [47, -114], [15, -56], [16, -102], [-9, -56], [-12, -37], [-18, -33], [-62, -81], [-69, -52], [-44, -103], [-33, 7], [5, -39], [12, -5], [19, 8], [38, 30], [34, 14], [37, 1], [33, -13], [23, -38]], [[41679, 99979], [267, -35], [141, -40], [30, 1], [191, -15], [182, -19], [302, -51], [42, -16], [-32, -14], [-75, -9], [-386, -16], [-700, -21], [-401, -39], [-127, -2], [-11, -59], [54, -3], [89, 8], [314, 59], [117, 9], [219, -5], [285, -22], [114, 8], [205, -6], [239, 17], [283, 37], [77, -82], [104, -81], [83, 9], [70, -5], [24, -26], [39, -12], [80, 6], [245, -23], [168, -42], [63, -19], [30, -28], [18, -22], [-27, -28], [-105, -49], [-133, -45], [-179, -34], [-207, -22], [-1588, -73], [-54, -17], [-31, -44], [21, -57], [74, -9], [173, 32], [300, 31], [221, -2], [527, -26], [155, -68], [82, -105], [183, 24], [39, 18], [29, 31], [22, 33], [18, 36], [19, 24], [21, 13], [45, 11], [105, 13], [274, 13], [66, -4], [48, -49], [10, -28], [3, -38], [-1, -45], [-6, -55], [-24, -54], [-76, -94], [-61, -52], [-66, -37], [-126, -84], [-44, -23], [-138, -99], [-35, -45], [-2, -34], [24, -6], [40, 31], [15, 23], [26, 23], [205, 62], [44, 17], [133, 74], [86, 28], [70, 29], [37, 20], [206, 146], [107, 43], [112, 0], [20, -73], [135, -12], [59, 3], [94, -18], [41, -14], [70, -8], [73, -17], [63, 18], [19, 12], [62, 54], [83, 47], [77, 59], [26, 15], [41, 13], [42, 5], [115, 28], [29, 2], [62, -9], [273, -5], [150, -14], [208, -40], [145, -21], [67, -20], [97, -41], [79, -43], [37, -13], [-2, -13], [-27, -19], [-195, -66], [-64, -45], [-185, -83], [-90, -29], [-98, -11], [-109, -2], [-71, -12], [-10, -12], [50, -34], [22, -25], [-3, -22], [-53, -32], [-20, -8], [-192, -24], [-97, -41], [-126, -5], [-89, 5], [-123, -44], [48, -36], [44, -16], [137, -32], [1, -19], [-66, -38], [-89, -44], [-105, -31], [-40, -5], [-50, 8], [-46, -2], [-101, -14], [-97, -2], [-173, 20], [-93, 23], [-49, 8], [-62, -2], [-24, -9], [-98, -56], [-48, -38], [-31, -39], [-13, -42], [5, -46], [12, -32], [19, -17], [23, -10], [41, -6], [89, 6], [35, -3], [11, -10], [19, -29], [-3, -28], [-17, -39], [-12, -45], [-9, -52], [5, -29], [36, -6], [17, 2], [19, -9], [23, -21], [17, -22], [11, -23], [-6, -19], [-23, -15], [-52, -17], [-128, -33], [-13, -10], [-10, -21], [-7, -30], [-16, -28], [-23, -25], [-22, -15], [-42, -6], [-54, -1], [-61, -14], [-144, -84], [-2, -9], [54, -27], [-2, -24], [-67, -101], [-18, -50], [-14, -68], [-24, -58], [-33, -47], [-33, -55], [-31, -61], [5, -47], [41, -33], [56, 26], [69, 86], [74, 38], [81, -12], [70, -17], [90, -34], [76, -21], [65, -28], [26, -23], [27, -33], [1, -20], [-48, -12], [-16, 4], [-119, 54], [-58, 14], [-77, -16], [-67, -25], [60, -99], [65, -45], [117, -21], [62, -22], [44, -28], [35, -14], [47, 6], [64, 28], [88, 1], [40, -13], [28, -26], [13, -47], [-3, -70], [-9, -52], [-16, -35], [-32, -47], [-27, -9], [-37, 3], [-35, 9], [-32, 17], [-49, 13], [-98, 14], [-98, 31], [-56, 8], [-117, -4], [-127, -20], [-5, -25], [-182, -89], [-37, 1], [-50, 30], [-71, 30], [-41, 0], [-62, -38], [-15, -14], [1, -14], [45, -32], [18, -7], [24, -6], [80, -8], [36, -8], [33, -100], [52, -61], [23, -13], [19, -5], [65, 3], [83, 20], [28, -16], [61, -20], [36, -6], [43, 1], [49, -7], [67, -57], [-26, -72], [42, -57], [67, -59], [15, -21], [7, -39], [1, -26], [5, -24], [9, -21], [9, -42], [9, -62], [-2, -51], [-15, -39], [-27, -29], [-42, -18], [-34, 5], [-26, 27], [-37, 29], [-48, 31], [-80, 3], [-117, -90], [-52, -5], [-42, -9], [-46, -39], [-66, -24], [-59, 9], [-103, 46], [37, -30], [54, -36], [33, -19], [25, -4], [27, 4], [39, 15], [88, 41], [23, 6], [20, -3], [16, -12], [19, -35], [21, -58], [-3, -49], [-26, -41], [-23, -26], [-18, -12], [0, -9], [49, -10], [69, 53], [22, 66], [32, 76], [56, 25], [64, -25], [52, -71], [72, -131], [31, -14], [39, -31], [17, -39], [-4, -45], [-9, -33], [-12, -21], [-15, -13], [-27, -8], [-50, -7], [-111, 14], [-58, 0], [7, -45], [-117, -39], [-133, -15], [-125, 30], [-104, 47], [34, 65], [20, 72], [-51, 48], [-11, 1], [18, -74], [-15, -28], [-57, -35], [-40, -15], [-3, -10], [19, -8], [13, -15], [6, -23], [-7, -23], [-19, -24], [-11, -19], [-2, -16], [18, -20], [38, -22], [41, -11], [191, -5], [77, -13], [182, -53], [8, -17], [-31, -96], [-17, -92], [-35, -17], [-191, -4], [-62, -14], [-90, -42], [-87, -51], [-45, -1], [-178, 45], [-68, 29], [-147, 84], [-110, 128], [-51, -53], [-30, -26], [-32, -13], [-31, -2], [-30, 9], [-34, 20], [-56, 47], [-68, 46], [-47, 22], [-1, -6], [27, -27], [41, -32], [103, -92], [37, -23], [-4, -16], [-65, -15], [-79, -31], [-39, -24], [-60, -56], [-20, -9], [-90, -14], [-29, 3], [-67, 32], [-99, 20], [-59, 18], [-82, 33], [29, -36], [157, -55], [17, -17], [-32, -33], [-20, -12], [-37, -3], [-56, 7], [-56, -1], [-58, -10], [-24, -12], [8, -15], [13, -14], [20, -12], [18, 0], [44, 38], [33, 2], [88, -9], [89, 29], [64, 13], [48, 3], [175, 44], [37, 50], [58, 20], [131, 15], [126, -8], [65, -6], [53, -47], [70, -34], [59, -37], [69, -13], [40, -50], [111, -57], [71, -12], [44, -27], [4, -114], [5, -49], [-19, -136], [-57, -31], [11, -72], [-15, -58], [-57, 22], [-58, 38], [-139, 59], [-130, 38], [-50, 35], [-59, 26], [-81, 109], [-52, 135], [-23, 67], [-44, 4], [-57, -18], [-49, -19], [-24, -32], [-168, -45], [-61, -30], [-35, 0], [-125, -45], [50, -22], [23, -3], [51, 12], [31, 16], [114, 44], [92, 7], [33, 19], [70, 26], [48, 8], [7, -7], [5, -12], [33, -165], [-14, -44], [-38, -19], [-80, -31], [-21, -15], [23, -27], [76, 25], [50, 27], [26, -10], [43, -41], [49, -21], [123, -64], [59, -35], [82, -34], [93, -47], [24, -17], [85, -24], [18, -8], [36, -83], [29, -10], [85, -5], [-15, -32], [-83, -72], [-43, -22], [-10, -15], [4, -25], [2, -42], [17, -78], [20, 72], [13, 34], [19, 10], [17, 2], [58, 32], [58, -17], [15, -81], [8, -76], [-5, -66], [6, -101], [-2, -35], [14, -29], [14, -124], [14, -37], [-29, -33], [-88, -14], [-35, 16], [-87, -6], [0, 30], [-5, 33], [0, 24], [-6, 21], [-4, 122], [-25, -31], [-1, -24], [-7, -25], [-15, -132], [-22, -32], [-70, 8], [-69, -5], [-38, 5], [-129, 60], [-50, 54], [-44, 82], [-28, 76], [-10, 71], [-31, 57], [-51, 45], [-61, 36], [-70, 28], [-62, 35], [-53, 44], [-58, 33], [-64, 25], [-90, 10], [-133, -4], [-89, 27], [-22, -2], [-21, -14], [16, -40], [103, -18], [79, -5], [105, 3], [64, -10], [24, -23], [16, -42], [9, -59], [-21, -47], [-76, -52], [-39, -25], [-117, -47], [-39, -10], [-97, -4], [-75, 5], [-98, 23], [-55, 5], [-115, 3], [-27, -8], [30, -25], [49, -14], [34, -17], [4, -32], [-13, -48], [-13, -33], [-21, -25], [-75, -47], [-31, -15], [-141, -50], [-10, -10], [33, 2], [89, 17], [26, 0], [146, -43], [116, 2], [236, 40], [19, -1], [16, -6], [15, -15], [16, -23], [-19, -23], [-54, -22], [-84, -22], [-36, -15], [-35, -22], [-64, -53], [-19, -56], [68, -21], [30, 27], [36, 59], [33, 35], [76, 24], [94, -12], [72, 14], [148, 58], [26, 4], [217, -34], [197, -65], [103, -25], [138, -14], [246, 7], [22, -11], [-8, -23], [-14, -20], [-41, -27], [-50, -18], [-31, -5], [-27, -13], [-59, -13], [-15, -10], [21, -45], [-10, -7], [-52, -1], [-88, -29], [-72, 2], [-15, -5], [14, -10], [14, -21], [16, -32], [-9, -22], [-32, -13], [-24, -4], [-85, 18], [-14, -3], [13, -13], [7, -20], [2, -28], [-21, -23], [-43, -18], [-81, -51], [-35, -15], [-74, -12], [-15, -7], [30, -39], [-4, -16], [-49, -42], [-76, -27], [-10, -14], [-7, -38], [-6, -15], [-20, -22], [-71, -42], [-51, -21], [-25, -17], [-31, -28], [-40, -16], [-47, -1], [-45, -11], [-74, -30], [-51, -10], [-163, -53], [-76, -8], [-66, -19], [-137, -50], [-64, -16], [-45, -19], [-49, -5], [-80, 12], [-43, 1], [-27, -8], [-24, -15], [-40, -42], [-34, -4], [-112, 34], [3, -15], [29, -36], [-1, -26], [-67, -26], [-36, -7], [-52, 11], [-70, 28], [-90, 59], [-109, 89], [-53, 30], [4, -29], [12, -28], [20, -27], [5, -20], [-13, -12], [-16, -6], [-20, 0], [-3, -7], [33, -43], [25, -44], [-2, -41], [-31, -39], [-26, -23], [-22, -7], [-130, -98], [-37, -13], [-16, -12], [-14, -18], [-38, -81], [-15, -25], [-30, -32], [-13, -6], [-4, -13], [6, -21], [-9, -34], [-22, -49], [-76, -133], [-61, -125], [-27, -41], [-20, -17], [-12, 6], [-30, -3], [-15, -22], [-13, -40], [-15, -30], [-16, -21], [-122, -89], [-32, -17], [-28, 11], [-34, -4], [-70, 47], [-12, 17], [-45, 39], [2, -20], [8, -11], [6, -17], [16, -20], [34, -105], [-27, -22], [-25, -25], [-63, -42], [-68, -70], [-25, -19], [-5, 57], [3, 17], [-39, 27], [1, -19], [-4, -19], [-27, -74], [-8, -13], [-14, 3], [-30, -14], [-30, 7], [-26, 33], [-11, 18], [-47, -48], [-23, 1], [-4, -40], [-22, -37], [-30, -16], [-41, 1], [-25, -21], [-55, 23], [-13, 44], [44, 60], [12, 25], [-8, 30], [11, 39], [84, 125], [57, 63], [-3, 12], [-77, 13], [-68, 22], [-66, 8], [-29, -8], [46, -36], [66, -35], [-33, -34], [-27, -36], [-29, -97], [-19, -40], [-72, 46], [-33, 16], [21, -51], [63, -48], [4, -16], [0, -57], [-121, -50], [-125, -8], [-91, -14], [-152, -18], [-59, 0], [-5, -19], [149, -89], [22, -16], [-21, -30], [-31, -19], [-48, -65], [-25, -23], [-63, -31], [-115, 35], [-59, -16], [-57, 11], [-1, -38], [17, -27], [17, -69], [38, 6], [48, 21], [38, -52], [24, -87], [43, -45], [19, -34], [8, -33], [-27, -32], [-55, -46], [-62, -8], [4, -36], [-27, -26], [-56, 7], [-26, 18], [-28, 9], [-112, 10], [113, -70], [40, -32], [18, 19], [39, 5], [58, -18], [-10, -118], [26, -95], [3, -21], [-62, -57], [-1, -54], [-36, -15], [-40, 4], [-2, -59], [-27, -36], [5, -23], [8, -20], [-25, -38], [-22, -45], [-31, -39], [-17, 4], [-50, -3], [-60, 3], [-49, 52], [-20, 17], [-23, 11], [9, -33], [14, -20], [45, -37], [82, -46], [-2, -33], [-22, -14], [-52, -89], [-18, -1], [-23, -23], [-72, 7], [-30, 9], [-88, -5], [-30, 7], [-26, -3], [24, -25], [51, -23], [57, -23], [87, -17], [-3, -32], [-22, -27], [13, -39], [-10, -29], [-4, -34], [-20, -78], [23, -54], [26, -26], [-3, -35], [12, -55], [-38, -50], [-33, 2], [-45, -11], [-16, -22], [73, -20], [-7, -38], [-19, -46], [-21, -100], [-42, -172], [-20, -171], [-91, -141], [-32, -3], [-8, -6], [-45, 7], [-69, 33], [-54, 10], [-36, 1], [-5, -16], [30, -27], [46, -10], [37, -18], [66, -16], [23, -31], [16, -33], [-3, -19], [0, -21], [12, -117], [-31, -40], [-24, -37], [-82, 5], [-15, 13], [-79, 38], [5, -18], [57, -52], [20, -26], [-13, -5], [-23, -2], [-33, -18], [-58, 10], [3, 26], [11, 27], [-27, -4], [-29, -14], [-18, 5], [-14, -1], [-8, 13], [-12, 53], [14, 27], [48, 69], [15, 37], [-13, 16], [-34, -39], [-36, -63], [-16, -38], [-22, -8], [-55, 20], [-158, 88], [5, 53], [-2, 45], [46, 5], [34, 20], [30, 23], [33, 43], [31, 71], [-4, 6], [-90, -91], [-56, -30], [-27, -6], [-14, 14], [-44, 29], [-29, 13], [-67, 22], [-12, 11], [-19, 9], [-27, 93], [35, 113], [23, 32], [15, 38], [9, 50], [-6, 22], [-20, -8], [-9, -17], [1, -27], [-11, -18], [-80, -43], [-79, -35], [-38, -33], [-24, -26], [-19, -25], [-29, 2], [-41, -5], [-27, -16], [-41, 10], [-26, 24], [-32, 3], [-35, -12], [-25, 1], [2, -16], [16, -41], [-27, -3], [-52, -1], [-26, 11], [-20, 16], [-17, 22], [10, 28], [83, 52], [38, 30], [-24, 10], [-80, -9], [-14, 7], [-53, -4], [2, 77], [-13, 19], [-1, 9], [-18, 21], [-18, 6], [-11, 7], [-90, 18], [-12, 43], [-6, 44], [-17, 55], [-43, 14], [-24, 24], [19, 24], [8, 31], [-20, 14], [-13, 22], [2, 14], [-16, 38], [-5, 30], [18, 27], [51, 32], [17, 13], [9, 14], [58, 23], [-50, 16], [-31, 3], [-23, -8], [-21, -31], [-19, -20], [-77, -7], [-11, 11], [-5, 43], [4, 34], [32, 47], [-37, 23], [-33, 8], [-39, 22], [-35, 23], [-30, 27], [-29, 31], [-10, 4], [11, 34], [6, 27], [1, 58], [-12, 25], [26, 50], [36, 54], [78, 82], [-83, -39], [-68, -86], [-15, -4], [-5, 16], [-26, 55], [-19, 15], [-9, 17], [-39, 29], [-17, 23], [-24, 44], [-34, 52], [-48, 103], [-78, 119], [-20, 67], [25, 84], [-27, 58], [74, 27], [106, 31], [55, 25], [32, 7], [68, 5], [22, 25], [-37, -6], [-25, 3], [-2, 12], [9, 21], [6, 27], [-13, -5], [-66, -46], [-97, -37], [-76, -21], [-13, 1], [-26, -13], [-16, -3], [-11, 3], [-27, 36], [-8, 23], [49, 63], [36, 86], [48, 56], [33, 7], [57, -3], [20, -5], [-7, 33], [3, 16], [46, 20], [53, 8], [38, -6], [24, -39], [31, -72], [41, -24], [-2, 34], [-21, 45], [-8, 68], [-27, 29], [-22, 14], [-61, -7], [-36, 50], [-9, 19], [0, 24], [-37, 72], [-12, 36], [-19, 47], [-10, 3], [13, -60], [17, -42], [24, -93], [12, -38], [-16, -29], [-31, -30], [-27, -17], [-64, -21], [14, 46], [8, 45], [-32, -16], [-30, -33], [-10, -45], [-20, -41], [-57, -101], [-23, -56], [-21, -27], [-24, -8], [-21, 22], [-18, 51], [-9, 41], [-1, 104], [3, 49], [-10, 65], [-31, 153], [-7, 54], [-52, 29], [-1, 9], [-14, 31], [-10, 31], [9, 12], [12, 8], [78, 46], [58, 51], [70, 80], [28, 25], [102, 19], [45, 3], [-1, 14], [-15, 6], [-68, -4], [-92, -32], [-16, -12], [-40, -50], [-31, -27], [-87, -62], [-56, 0], [-58, 74], [-65, -14], [-44, 5], [-13, 11], [-10, 102], [36, 119], [-38, 1], [-8, 5], [-20, 27], [-13, 8], [9, 14], [94, 56], [141, 111], [61, 43], [37, 19], [29, 21], [34, 47], [11, 20], [20, 16], [40, 19], [44, 28], [72, 63], [9, 23], [-15, 5], [-34, -21], [-68, -58], [-49, -32], [-166, -145], [-71, -52], [-38, -34], [-30, -32], [-32, -23], [-33, -14], [-71, -10], [-35, -12], [-21, 9], [-10, 69], [7, 40], [-3, 40], [18, 58], [26, 40], [11, 22], [5, 16], [55, 42], [30, 18], [21, 42], [121, 15], [31, -1], [16, 5], [13, 13], [-12, 9], [-36, 7], [-97, -2], [-89, 8], [-40, 7], [-20, -4], [-32, 12], [-35, 23], [-55, 86], [22, 110], [2, 53], [69, 46], [37, 15], [53, 35], [71, 59], [84, 36], [43, 7], [36, -6], [131, -51], [68, -10], [60, 13], [75, -18], [132, -74], [25, 11], [-7, 18], [-148, 78], [1, 23], [38, 6], [40, 22], [-22, 14], [-98, -12], [-29, -18], [-95, -10], [-49, 16], [-45, 8], [-67, 33], [-56, -11], [-35, -13], [-62, -13], [-23, -8], [-122, -106], [-51, -22], [-37, 7], [26, 69], [7, 27], [0, 30], [11, 40], [62, 77], [40, 84], [16, 53], [31, 6], [42, -8], [126, -34], [105, -40], [77, -11], [51, -1], [22, 13], [17, 22], [7, 15], [5, 32], [6, 12], [17, 13], [34, 49], [11, 34], [-11, 20], [-24, -2], [-45, -13], [-6, -6], [1, -10], [-44, -54], [-47, -12], [-110, -18], [-50, -1], [-89, 25], [-13, 9], [-9, 19], [-109, -5], [-33, -5], [-26, 2], [13, 32], [34, 35], [48, 114], [41, 29], [80, 27], [84, -4], [145, -88], [44, -8], [40, 7], [96, 30], [18, 12], [34, 36], [40, 63], [-2, 15], [-61, -35], [-33, -10], [-28, 0], [26, 115], [10, 87], [9, 22], [82, -7], [111, 12], [26, 19], [0, 9], [-45, 11], [-21, 25], [-38, -8], [-50, -16], [-62, 2], [5, 37], [46, 79], [5, 36], [18, 72], [1, 37], [24, 36], [72, 25], [31, 16], [1, 16], [-43, 64], [11, 18], [34, 16], [13, 11], [-9, 8], [-31, 7], [-49, -14], [-53, -7], [-47, 21], [-37, 10], [-24, -3], [-63, -36], [-23, -1], [-27, 10], [-183, 31], [-22, 11], [-65, 54], [-54, 36], [-72, 39], [-93, 30], [-114, 20], [-68, 19], [-34, 27], [-58, 59], [-44, 50], [-8, 24], [26, 30], [26, 22], [50, 18], [85, -6], [46, -8], [50, -17], [38, -3], [79, 4], [80, -10], [48, -12], [63, -25], [172, -106], [72, -37], [32, -4], [129, -39], [20, 0], [53, 19], [6, 12], [-18, 11], [-57, 10], [-67, 43], [-42, 34], [-4, 57], [5, 32], [10, 15], [8, 48], [-39, 29], [-27, 9], [-72, 43], [-6, 10], [34, 5], [34, -3], [73, -21], [38, -3], [28, 8], [3, 9], [-44, 24], [-56, 44], [-115, 6], [-75, -5], [-48, 15], [-51, 24], [-32, 7], [-67, -16], [-34, -1], [-31, 5], [-30, 76], [8, 23], [24, 10], [18, 25], [12, 26], [40, 25], [217, 56], [55, 42], [-2, 7], [-37, -8], [-48, -19], [-31, -4], [-128, 24], [-20, -5], [-52, -35], [-70, -38], [-32, 2], [-44, 23], [-7, 16], [-3, 19], [48, 26], [15, 14], [31, 38], [-2, 18], [-52, -10], [-7, 17], [1, 30], [-5, 37], [-13, 37], [-43, 57], [-18, 14], [-15, 21], [-33, 77], [10, 19], [29, 14], [5, 7], [-69, -12], [-7, -13], [13, -20], [9, -26], [6, -32], [9, -29], [25, -31], [20, -16], [33, -43], [14, -48], [-4, -25], [-26, -26], [-40, -27], [-13, -23], [-5, -23], [-32, -21], [-19, 8], [-16, 1], [18, -37], [12, -39], [-14, -38], [-38, -24], [-20, 0], [-41, -19], [-103, -10], [-36, 4], [-66, 20], [-78, 10], [-31, 26], [-40, 47], [-21, 42], [0, 38], [11, 27], [22, 17], [27, 109], [38, 88], [96, 91], [27, 33], [9, 17], [0, 14], [-15, 8], [-118, -112], [-73, -12], [-21, 25], [6, 45], [13, 11], [59, -5], [23, 25], [-37, 38], [-39, 10], [-9, 9], [40, 29], [93, -2], [21, 20], [34, 22], [37, 40], [14, 34], [3, 29], [-8, 23], [-1, 23], [7, 24], [-10, 26], [-26, 28], [-57, 28], [-17, -31], [-18, -13], [-25, -3], [-24, 13], [-24, 5], [-24, 12], [-24, 3], [-10, 10], [-6, 26], [-1, 34], [28, 16], [39, 13], [26, 23], [17, 34], [3, 38], [-12, 40], [-32, 37], [-58, -36], [-23, -9], [-6, 26], [-8, 19], [-24, 25], [-33, 18], [-31, 13], [-1, 19], [7, 21], [14, 24], [18, 52], [20, -5], [16, 5], [-9, 42], [-16, 36], [-19, 20], [-1, 9], [-4, 10], [-14, 25], [-16, 19], [-29, 52], [-20, 19], [-26, 11], [-28, 0], [-45, -13], [-83, -16], [-66, -8], [-11, 4], [33, 20], [49, 21], [64, 14], [19, 34], [-7, 29], [2, 28], [-17, 30], [17, 16], [58, 16], [27, 3], [26, 21], [-74, 50], [-77, 33], [-20, 14], [-17, 22], [-15, 30], [-24, 31], [-33, 31], [-48, 30], [-125, 54], [-42, 38], [-40, 57], [-19, 25], [-21, 18], [-87, 43], [-10, 18], [89, 50], [9, 20], [-36, 61], [-38, 44], [-41, 16], [-60, 8], [-56, 20], [-50, 31], [-51, 23], [-76, 22], [-126, 56], [-195, 59], [-87, 35], [-52, 13], [-68, 3], [-132, 33], [-111, 10], [-69, -4], [-22, 5], [-51, 33], [-79, 19], [-41, -7], [-51, -36], [-62, -35], [-32, -4], [-49, 32], [-24, 22], [-23, 8], [-23, -8], [-43, -29], [-41, -21], [-61, -25], [-49, -12], [-63, -3], [-16, -9], [-24, -1], [-32, 8], [-31, 17], [-28, 24], [-25, 14], [-22, 2], [-50, -13], [-63, -37], [-29, -9], [-24, 3], [-30, 12], [-59, 30], [-33, -3], [-24, -10], [6, -25], [56, -59], [50, -42], [-42, -5], [-368, 57], [-46, 14], [-68, 34], [-56, 21], [-96, 54], [-74, 30], [-24, 22], [-6, 16], [23, 22], [149, 72], [56, 14], [116, 18], [27, 11], [9, 8], [-30, 16], [-151, -6], [-135, 11], [-117, 28], [-21, 10], [-19, 17], [-20, 26], [5, 28], [28, 32], [16, 22], [5, 11], [-147, -77], [-60, -28], [-48, 9], [-34, 13], [-16, 14], [1, 16], [5, 11], [10, 7], [-78, 33], [-35, 25], [-4, 26], [28, 27], [27, 19], [27, 12], [72, 11], [263, 20], [188, -19], [64, 64], [43, 21], [127, 21], [195, 3], [138, -12], [64, -15], [88, -33], [5, 10], [-21, 30], [-2, 25], [36, 43], [16, 27], [-11, 29], [-38, 29], [-69, 38], [-36, 3], [-41, -9], [-49, -21], [-102, -53], [-49, -11], [-80, -3], [-44, 7], [-43, 8], [-67, 28], [-25, 5], [-29, -12], [-35, -30], [-34, -21], [-32, -12], [-30, -5], [-43, 2], [-173, 47], [-40, 21], [-2, 31], [-53, 30], [-60, 5], [-8, 11], [77, 46], [57, 19], [-10, 6], [-82, 1], [-56, -25], [-32, -4], [-74, -1], [-77, 13], [-33, 11], [-34, 25], [-38, 14], [-115, 21], [-26, 12], [-25, 19], [-94, 55], [-57, 40], [-8, 22], [66, 49], [3, 12], [-28, 21], [-12, 15], [10, 22], [57, 47], [22, 13], [103, 28], [104, 40], [37, 9], [34, 3], [136, -3], [42, 10], [36, 20], [58, 20], [123, 30], [272, 46], [18, 6], [1, 8], [-24, 24], [-5, 12], [55, 21], [126, 33], [86, 16], [55, 2], [45, 7], [63, 21], [35, 4], [214, 8], [95, -12], [46, 1], [30, 8], [40, 24], [74, 59], [38, 36], [37, 56], [48, 88], [35, 85], [24, 83], [18, 51], [13, 18], [44, 23], [47, 18], [79, 16], [-7, 7], [-34, 12], [-31, 5], [-29, -3], [-53, -18], [-69, -13], [-67, 2], [-48, -5], [-44, -17], [-71, -14], [-48, 3], [-86, 25], [-43, 5], [-110, -3], [-32, 10], [-28, 17], [-23, 25], [-16, 32], [2, 34], [40, 60], [15, 16], [107, 68], [66, 31], [66, 24], [48, 13], [45, 7], [43, 14], [80, 47], [82, 40], [102, 75], [50, 20], [173, 32], [47, 1], [40, -9], [38, -16], [106, -74], [9, 2], [-19, 28], [-39, 84], [7, 34], [61, 37], [25, 6], [64, -2], [103, -11], [70, -13], [52, -20], [63, -13], [32, 1], [23, 9], [33, 32], [43, 54], [17, 66], [-8, 78], [-13, 58], [-16, 36], [9, 30], [52, 36], [48, 26], [114, 38], [92, 9], [55, -2], [72, -18], [100, -10], [91, -34], [146, -78], [97, -39], [81, -18], [79, -29], [117, -64], [62, -27], [36, -10], [32, -1], [-12, 18], [-56, 37], [-85, 42], [-191, 75], [-104, 53], [-94, 60], [-69, 36], [-126, 35], [2, 14], [151, 50], [278, 44], [313, 33], [105, -3], [184, 14], [18, 22], [39, 9], [172, 30], [49, 0], [76, -15], [80, -27], [37, -24], [51, -42], [25, -59], [-4, -186], [1, -36], [10, -13], [35, 20], [42, 38], [37, 26], [29, 41], [20, 56], [12, 41], [-49, 46], [-2, 76], [24, 41], [69, 0], [284, -140], [111, -31], [127, -75], [149, 8], [137, -9], [60, 3], [30, 11], [-42, 32], [-195, 85], [-88, 67], [-62, 84], [-15, 45], [47, 8], [217, -1], [327, -39], [418, -133], [205, -45], [369, -154], [111, -23], [45, -5], [34, 19], [21, 21], [1, 27], [-18, 35], [-10, 39], [-3, 46], [25, 89], [60, 30], [26, 33], [-24, 59], [-70, 41], [-271, 105], [-1, 13], [55, 14], [81, 8], [671, -25], [116, -10], [50, -9], [21, -11], [28, -6], [144, 15], [-3, 26], [-18, 16], [-779, 45], [-145, 16], [-74, 1], [-77, -12], [-158, -6], [-73, 2], [-95, 54], [86, 64], [72, -1], [137, -25], [82, 35], [129, 29], [128, 10], [278, 63], [52, 5], [65, -3], [143, -16], [57, -15], [65, -33], [38, -10], [45, -2], [61, -15], [89, 48], [81, 52], [92, 33], [131, -19], [83, -25], [75, -30], [107, -16], [182, -102], [34, 0], [16, 8], [17, 19], [6, 28], [22, 38], [-16, 14], [-152, 42], [-29, 17], [-29, 26], [0, 22], [28, 18], [30, 8], [98, -8], [32, 6], [31, 15], [37, 27], [29, 7], [66, 1], [101, -18], [88, -1], [32, 8], [5, 17], [8, 11], [10, 5], [321, 1], [79, 4], [63, 13], [76, 2], [66, -8], [83, -17], [81, 1], [122, 27], [115, 13], [634, -4], [208, -16]], [[35352, 92133], [93, -47], [98, -32], [9, -15], [8, -22], [2, -12], [-3, -11], [-6, -10], [7, -12], [21, -16], [2, -19], [-25, -31], [-34, -35], [-183, -72], [-64, -13], [-160, -49], [-49, 2], [-11, 2], [-30, 22], [-42, 20], [-19, 16], [-17, 23], [7, 14], [30, 5], [44, 0], [65, 16], [-18, 15], [-17, 9], [-12, 19], [-27, -3], [-20, 11], [-38, 7], [-101, 7], [-66, 19], [-20, 11], [-17, 20], [-15, 28], [22, 109], [15, 27], [34, 9], [84, -24], [11, 11], [-92, 40], [-33, 23], [-10, 19], [-6, 28], [0, 16], [4, 16], [8, 17], [23, 22], [92, 35], [102, -12], [175, -43], [22, -10], [54, -37], [103, -113]], [[35829, 91907], [-43, -20], [-9, 5], [-9, 15], [-22, 70], [-7, 34], [5, 41], [-8, 29], [39, 35], [32, 5], [43, -8], [72, -35], [-5, -11], [-16, -18], [-44, -24], [-15, -53], [-3, -27], [2, -20], [-12, -18]], [[35129, 92765], [-26, -4], [-75, 29], [-12, 11], [-5, 14], [3, 16], [24, 30], [45, 43], [32, 8], [20, -27], [20, -37], [2, -18], [-1, -22], [-5, -19], [-9, -15], [-13, -9]], [[34717, 93773], [-39, -39], [-32, -23], [-70, -66], [-12, -3], [-18, 9], [-15, 18], [-26, 4], [-9, 11], [-4, 9], [-12, 6], [-18, 3], [-30, -7], [-27, 7], [-21, 29], [38, 20], [24, 17], [91, 6], [25, -7], [16, 0], [25, 4], [54, 21], [8, 10], [48, -12], [4, -17]], [[30092, 96385], [-99, -5], [-97, 22], [-34, 17], [2, 27], [14, 9], [53, 9], [44, 2], [29, -4], [70, -16], [50, -16], [33, -5], [-9, -24], [-56, -16]], [[37537, 99126], [-56, -10], [-118, 61], [-186, 61], [-164, 40], [-154, 107], [-12, 38], [21, 33], [135, 5], [108, 15], [274, -66], [138, -56], [46, -45], [-7, -92], [-25, -91]], [[42935, 92696], [10, -34], [1, -16], [-2, -14], [-6, -9], [-13, -9], [25, -22], [7, -15], [2, -12], [-16, -24], [-110, -31], [-31, -15], [-38, -37], [-47, -31], [-16, 0], [-18, 33], [-74, 24], [-139, -13], [-162, -30], [-58, -14], [-29, 7], [-9, 12], [0, 15], [19, 47], [8, 12], [37, 15], [25, 41], [-8, 44], [10, 62], [25, 10], [64, -22], [41, -5], [73, -3], [99, 8], [79, 25], [144, 71], [25, -1], [19, -25], [13, -12], [43, -20], [7, -12]], [[44815, 98989], [-29, -18], [-73, 7], [-94, 52], [-62, 43], [-5, 50], [32, 22], [50, 4], [69, -43], [71, -58], [41, -59]], [[45107, 97825], [-117, -66], [-174, 5], [-103, 31], [-30, 45], [40, 51], [125, 41], [156, 25], [142, -15], [20, -51], [-59, -66]], [[44723, 96758], [-37, -20], [-25, 61], [-22, 81], [-5, 92], [57, 45], [29, 11], [20, -11], [-5, -40], [0, -82], [19, -55], [-31, -82]], [[44838, 95646], [-32, -16], [-108, 239], [0, 87], [7, 66], [49, 5], [42, -36], [20, -137], [22, -208]], [[44999, 95280], [22, -61], [10, -56], [35, -35], [73, 5], [29, -66], [-53, -26], [-214, 10], [-88, -5], [-61, 41], [2, 71], [8, 71], [61, 41], [51, -36], [62, 26], [63, 20]], [[45012, 96567], [-54, 0], [-20, 15], [13, 27], [75, 85], [25, 7], [37, -9], [11, -44], [-24, -44], [-63, -37]], [[39713, 89591], [-43, 0], [-14, 45], [4, 50], [49, 15], [26, -34], [-10, -50], [-12, -26]], [[37148, 86855], [-32, -70], [-32, 15], [-16, 31], [-31, 15], [-34, -4], [-1, 12], [110, 74], [53, 20], [-4, -31], [-10, -27], [-3, -35]], [[35645, 92658], [-37, -2], [-86, 11], [-7, 6], [-1, 13], [12, 37], [38, 5], [45, -20], [49, -29], [6, -13], [-19, -8]], [[48160, 87445], [-6, -22], [-7, 1], [-26, 26], [-21, 15], [-7, 13], [-6, 21], [12, 2], [14, -4], [36, -20], [10, -20], [1, -12]], [[48139, 87237], [5, -18], [-6, 2], [-19, 20], [-33, 48], [-11, 39], [-2, 18], [8, -2], [7, -16], [31, -11], [8, -8], [0, -19], [10, -23], [2, -30]], [[48003, 87637], [25, -22], [9, -16], [-14, -15], [-18, -4], [-21, 3], [-34, 17], [-12, 38], [24, -1], [28, 7], [13, -7]], [[48158, 87688], [-7, -77], [-12, 0], [-20, 22], [-15, 4], [-5, -11], [1, -14], [8, -9], [24, -52], [2, -15], [-3, -7], [-23, 15], [-57, 67], [-44, 110], [60, 18], [43, -29], [48, -22]], [[48220, 87706], [-13, -42], [-20, 7], [-5, 4], [-5, 11], [3, 31], [-1, 45], [22, -37], [19, -19]], [[53491, 83977], [0, -58], [-7, -17], [-10, -11], [-28, -11], [-24, -17], [-22, -29], [-7, -41], [16, -30], [31, -16], [8, -58], [-26, -28], [-64, -28], [-7, -68], [2, -54], [-1, -39], [-5, -54], [-52, -24], [-34, 82], [0, 33], [-11, 38], [-1, 33], [-12, 52], [-50, 14], [-19, 2], [-27, -9], [-6, 3], [-33, 72], [6, 79], [-17, 40], [-3, 18], [1, 20], [-14, 16], [-18, 9], [-8, 44], [20, 11], [48, -5], [15, 3], [13, 9], [39, 73], [-1, 16], [4, 21], [42, 8], [19, -28], [-3, -46], [2, -57], [26, -16], [10, -3], [10, 43], [8, 21], [10, 12], [4, 39], [-6, 24], [-13, 17], [48, 49], [50, 38], [29, 2], [29, -9], [27, -13], [15, -11], [8, -18], [-18, -43], [-5, -23], [12, -77]], [[52408, 83469], [-3, 48], [-6, 34], [-18, 51], [27, 12], [-5, 100], [-10, 52], [-75, 53], [-60, 51], [14, 174], [6, 46], [-23, 91], [3, 105], [9, 164], [19, 7], [14, -1], [53, -30], [22, -3], [15, -26], [18, -11], [13, 28], [5, 48], [42, 62], [30, 23], [20, 11], [20, -25], [16, -28], [4, 61], [12, 117], [-40, 19], [-33, -16], [-32, -74], [-29, -94], [-47, -8], [-37, -27], [-34, 28], [-22, 24], [0, 35], [5, 22], [39, 76], [54, 73], [53, -1], [39, 23], [24, 3], [72, -5], [38, 16], [33, 34], [73, 141], [41, 59], [82, 21], [76, 68], [22, 1], [-36, -51], [-6, -19], [-4, -30], [25, -66], [-5, -40], [2, -78], [-24, -41], [-28, -87], [-12, -13], [-2, -101], [3, -25], [-4, -92], [28, -38], [29, -20], [99, 1], [10, -16], [13, -29], [-9, -49], [-11, -36], [-28, -31], [-37, -23], [-23, -1], [-31, 44], [-15, -14], [-15, -23], [-26, -119], [-12, -81], [-6, -7], [-15, 12], [-25, 1], [-31, -19], [16, -17], [17, -30], [-7, -15], [-28, -16], [-24, -32], [-11, -25], [-31, -29], [-19, -37], [9, -46], [4, -40], [9, -45], [-8, -35], [-38, -51], [-14, -45], [32, 1], [21, -10], [12, -13], [12, -19], [-8, -23], [10, -59]], [[52956, 83876], [12, -30], [14, -64], [23, -72], [-10, -30], [7, -38], [-7, -41], [-44, -46], [-51, -2], [-52, 22], [-74, 44], [-6, 24], [-10, 13], [-20, 74], [1, 92], [37, 11], [81, 43], [18, -6], [20, -23], [23, -1], [32, 32], [6, -2]], [[53155, 83462], [50, -36], [33, 2], [22, -14], [6, -23], [2, -51], [-24, -15], [-26, 5], [-36, -19], [-117, 83], [2, 69], [4, 27], [56, 7], [28, -35]], [[52981, 83381], [-12, -3], [-17, 46], [-2, 15], [20, 30], [12, 34], [33, 52], [19, 61], [7, -1], [-8, -55], [-43, -151], [-9, -28]], [[53485, 83505], [-10, -9], [-43, 7], [-48, -40], [-18, 12], [7, 26], [5, 9], [16, 11], [11, 16], [4, 25], [10, -14], [30, -5], [14, -8], [12, -12], [10, -18]], [[53518, 83868], [-26, -24], [-6, 1], [-9, 34], [14, 20], [8, 17], [6, 0], [8, -19], [5, -29]], [[52912, 83437], [-19, -6], [-21, 12], [-35, 48], [-4, 12], [18, -8], [23, -25], [18, -5], [25, -21], [-5, -7]], [[52794, 83459], [-29, -8], [-14, 14], [-28, 5], [-9, 89], [2, 5], [14, -6], [47, -41], [16, -45], [1, -13]], [[52946, 83976], [-5, -11], [-17, 11], [-2, 37], [6, 34], [-7, 30], [8, 19], [25, -45], [7, -21], [-9, -25], [-6, -29]], [[53070, 84822], [-12, -13], [-38, 19], [17, 26], [42, 13], [24, -4], [-27, -27], [-6, -14]], [[54190, 83537], [-10, -10], [-46, 17], [-56, 40], [9, 78], [14, 34], [102, -88], [1, -33], [-14, -38]], [[54709, 79837], [-7, 13], [-13, 48], [-14, 6], [-19, 4], [-14, 7], [-31, 28], [-16, 8], [-18, 2], [-18, -16], [-13, -19], [-41, 0], [-45, 9], [-65, 63], [-16, 1], [-18, -3], [-28, 15], [-55, 41], [-26, 9], [-16, -5], [-14, -9], [-11, -2], [-6, 14], [-20, 16], [-21, 2], [-6, -10], [-6, -90], [-7, -32], [-28, 1], [-10, -15], [-22, -44], [-5, -41], [-38, 8], [-18, 7], [-16, -6], [-18, -23], [-49, 2], [-39, 13], [-17, 52], [-18, 21], [-22, 18], [-8, 4]], [[59445, 72041], [-11, -4], [-17, 16], [-10, 5], [-10, -15], [-11, -11], [-10, -5], [-8, -2], [-14, -11], [-17, 3], [-25, 9], [-14, -22], [-3, 3], [-2, 55], [-9, 23], [-11, 13], [-16, -6], [-22, 2], [-16, 10], [-31, -16], [-26, -17], [-18, -17], [-14, 1], [-24, 16], [-18, 17], [-2, 14]], [[59086, 72102], [17, -6], [30, 12], [13, 56], [4, 65], [50, -19], [52, -9], [42, -4], [41, 11], [126, 69], [36, 41], [23, 14], [38, 34], [40, 19], [-25, -39], [-145, -174], [-10, -52], [7, -35], [20, -44]], [[59445, 72041], [5, -11], [8, -33], [-32, -10], [-31, -3], [-18, 4], [-17, -1], [-51, -95], [-28, -32], [-33, -19], [-33, -11], [-17, -1], [-15, -12], [-10, -22], [0, -22], [-5, -17], [-18, 4], [-8, 34], [-13, 15], [-32, -8], [-16, 1], [-52, 33], [-16, 13], [-10, 28], [-27, 101], [-4, 75], [25, -19], [23, 23], [23, 38], [27, 15], [16, -7]], [[27267, 65185], [73, -26], [59, 7], [28, 16], [-3, -16], [26, -40], [10, -3], [38, 20], [99, 8], [10, -11], [18, -39], [25, -24], [26, -18], [28, -5], [27, 8], [26, -4], [32, -37], [10, -5], [28, 10], [-8, -34], [48, -49], [36, -95], [25, -39], [28, -35], [23, -24], [25, -11], [79, 5], [18, -3], [17, -14], [15, -5], [9, 5], [151, -149], [48, -79], [30, -41], [63, -59], [25, -13], [14, 7], [-3, 14], [-18, 33], [-3, 12], [24, -11], [43, -67], [12, -24], [21, -23], [22, -17], [-11, -26], [-17, -3], [-34, 11], [27, -43], [5, -31], [12, -3], [19, 35], [11, 29], [48, -75], [25, -34], [-6, -20], [-2, -20], [28, 18], [11, -2], [10, -11], [12, -32], [26, -7], [27, 1], [55, -27], [51, -54], [49, -11], [49, -2], [24, -28], [11, -39], [-12, -27], [-7, -28], [18, -35], [-39, -15], [-6, -21], [2, -23], [8, -12], [23, 11], [33, -10], [51, -8], [35, 7], [71, -24], [21, -13], [42, -44], [19, -30], [42, -79], [35, -31], [31, -8], [11, 5], [10, -8], [9, -11], [8, -35], [-5, -37], [-17, -29], [-10, -22], [-44, -2], [-62, -10], [-60, -32], [-29, -26], [-14, -17], [-31, -15], [-2, 13], [0, 17], [-8, 31], [-7, -28], [-12, -21], [-19, -17], [-73, -1], [-29, 23], [-30, 17], [-109, 16], [-27, -1], [-73, -18], [-73, -9], [-31, -11], [-30, -16], [-59, 0], [-70, -18], [-70, -4], [45, 131], [95, 125], [17, 27], [13, 35], [3, 26], [-4, 23], [-23, 39], [-4, 29], [-7, 19], [-33, 17], [-33, 10], [-35, 0], [-73, 13], [-39, 1], [-33, 27], [-55, 96], [-26, 26], [-13, 22], [-10, 24], [-13, 140], [-11, 68], [-17, 58], [-25, 45], [-27, 15], [-101, -38], [-24, 5], [-23, 13], [-154, 91], [-63, 50], [-26, 25], [-22, 35], [-23, 58], [-25, 52], [0, -21], [-4, -14], [-129, -6], [-20, 12], [-13, 14], [-10, 21], [-7, 42], [-12, 35], [-4, -38], [-6, -34], [-17, -20], [-20, -3], [-24, 46], [-104, 10], [-9, 8], [-34, 44], [-30, 56], [29, 19], [60, 26], [13, 18], [8, 21], [-5, 33], [-12, 24], [-13, 14], [-13, 9], [-18, 4], [-232, 5], [-13, -17], [-21, -37], [-41, -46], [-28, -49], [-10, -25], [-12, -18], [-29, -30], [-24, -46], [-30, -21], [-16, 13], [-16, 0], [-11, -12], [-13, -5], [-59, -6], [-9, -11], [-8, -34], [-10, -64], [-9, -21], [-30, -8], [-28, -18], [-58, -62], [-15, -9], [3, 45], [-3, 44], [-16, 2], [-19, -7], [-15, -13], [-29, -32], [-14, -9], [-14, 17], [3, 21], [95, 79], [11, 6], [17, -6], [17, 3], [13, 22], [-16, 105], [6, 71], [22, 55], [45, 83], [21, 27], [219, 174], [22, 9], [142, 35], [22, 12], [66, 51], [69, 21], [73, -16]], [[28425, 64488], [-11, -18], [-13, 26], [-8, 2], [-11, 10], [-21, 29], [-5, 29], [17, 2], [23, -5], [39, -16], [-4, -34], [-6, -25]], [[28326, 64680], [-6, -10], [-15, 22], [-22, 9], [-13, 33], [-12, 13], [-1, 12], [20, 9], [14, -4], [16, -26], [9, -46], [10, -12]], [[28158, 64834], [38, -13], [13, 8], [13, 2], [13, -5], [19, -48], [-16, -6], [-13, 0], [-10, 8], [-34, 3], [-23, 14], [-12, 12], [-6, 14], [18, 11]], [[28367, 64589], [-10, -2], [-27, 24], [-9, 20], [10, 27], [2, 30], [4, 1], [4, -35], [22, -15], [1, -8], [13, -30], [-10, -12]], [[27066, 64269], [-26, -31], [-55, -43], [-30, -1], [-30, 16], [-20, 36], [-12, 35], [1, 17], [19, -28], [16, -14], [13, 9], [10, 16], [-31, 114], [2, 25], [24, 62], [65, -19], [11, -11], [10, -40], [14, -31], [17, -83], [2, -29]], [[27958, 64898], [1, -15], [-49, 42], [-21, 44], [-8, 10], [13, 1], [55, -72], [9, -10]], [[55279, 77689], [-18, -2], [-29, 10], [-14, 18], [-2, 19], [0, 17], [-9, 29], [-23, 29], [-49, 5], [-18, 9], [-18, 11], [-20, 8], [-19, -1], [-22, -8], [-40, 13], [-13, -17], [-20, -20], [-18, 0], [-34, 46], [-10, 3], [-30, -23], [-12, -1], [-9, 7], [-40, 18], [-18, 3], [-14, -8], [-23, 9], [-58, 61], [-35, -46], [-73, 11], [-21, -31], [-25, -60], [-20, -29], [-17, 11], [-20, 26], [-36, 67], [-18, 13], [-21, 3], [-18, -8], [-10, -14], [-7, -98], [-7, -87], [0, -53], [40, -48], [47, -83], [15, -10], [7, -27], [11, -70], [12, -79], [24, -52], [22, -37], [26, -33], [33, -52], [27, -56], [7, -21], [52, -75], [51, -76], [46, -27], [7, -14], [0, -59], [5, -22], [30, -61], [62, -90], [7, -21], [2, -15], [-4, -12], [-16, -12]], [[54884, 76577], [-13, 13], [-58, 88], [-55, 56], [-63, 104], [-84, 41], [-58, 46], [-34, -7], [-39, -14], [-23, -1], [-17, 9], [-12, 28], [2, 22], [-2, 28], [-34, 46], [-46, 44], [-43, 56], [-87, 151], [-18, 49], [17, 9], [13, 0], [15, 10], [24, 0], [28, -10], [-25, 32], [-31, 32], [-80, 127], [-24, 59], [-3, 65], [6, 88], [-14, 63], [-62, 82], [-23, 43], [-45, 25], [-21, -2], [-12, -32], [-9, -71], [-40, -93], [-14, -41], [-21, -52], [-18, -4], [-11, 5], [-33, 88], [-32, 68], [-4, 31], [-3, 40], [-24, 144], [17, 20]], [[54625, 76610], [51, -16], [38, 8], [34, -10], [21, -19], [5, -9], [-28, -1], [-31, 8], [-35, -19], [-31, 10], [-12, 12], [-8, 15], [-4, 21]], [[54776, 76685], [-20, -6], [-123, 4], [-36, 12], [-40, 31], [-9, 9], [41, 9], [37, -9], [12, -22], [101, -18], [37, -10]], [[54662, 76768], [-44, -1], [-38, 10], [-19, 18], [2, 15], [6, 25], [42, -3], [65, -18], [15, -21], [-4, -9], [-25, -16]], [[54230, 77224], [5, -20], [-35, 38], [-13, 26], [-3, 11], [46, -55]], [[54113, 77751], [-34, -12], [-16, 22], [-4, 18], [-29, 6], [-17, 25], [-3, 11], [24, 28], [13, 45], [16, -27], [20, -51], [11, -14], [19, -51]], [[54119, 77625], [7, -25], [-26, 23], [-23, 9], [-5, 17], [3, 14], [5, 14], [18, -2], [3, -14], [18, -36]], [[54218, 77382], [-7, -16], [-18, 29], [-16, 20], [-12, 23], [-23, 30], [-8, 34], [-34, 69], [-6, 19], [18, -28], [14, -18], [12, -4], [30, -44], [30, -57], [35, -49], [-8, -2], [-7, -6]], [[54219, 77143], [4, -8], [-1, -6], [-14, 8], [-4, -2], [-68, 126], [-7, 24], [24, -29], [66, -113]], [[54269, 77173], [19, -43], [-18, 9], [-18, 27], [-11, 28], [28, -21]], [[54024, 77568], [-2, -22], [-17, 28], [-9, 51], [-21, 82], [-3, 23], [11, 23], [0, 23], [-15, 72], [12, 11], [8, 2], [3, -50], [7, -29], [20, -35], [-4, -58], [4, -83], [4, -18], [2, -20]], [[54891, 76479], [37, -39], [-111, 51], [13, 5], [12, 1], [49, -18]], [[55143, 76286], [-51, 54], [-48, 61], [-93, 94], [-67, 23], [-91, 76], [-59, 27], [23, 6], [26, 0], [140, -101], [-16, 27]], [[54907, 76553], [20, 10], [17, -7], [11, -33], [22, -22], [35, -38], [22, -29], [50, -53], [12, -7], [25, -15]], [[49135, 54774], [-37, 15], [8, 19], [36, -11]], [[48465, 57848], [17, -38], [22, -26], [34, 3], [24, -15], [21, -30], [14, -65], [15, -47], [7, -67], [24, -35], [19, -17], [26, -48], [27, -25], [27, 6], [13, -26], [21, -18], [20, -1], [18, 56], [24, 22], [61, 45], [23, 20], [25, 13], [58, 4], [54, -13], [27, -11], [18, 8], [18, -27], [18, -56], [14, -18], [15, -19], [12, -44], [13, -44], [7, -19], [16, -44], [14, 0], [14, 18], [6, 14]], [[49161, 54798], [-2, 12], [-11, 4], [-29, 26], [5, 83], [-13, 4], [-11, -11], [-20, -101], [-10, -17], [-146, 52], [-31, 42], [-38, 9], [-66, -5], [-54, -12], [-16, -25], [137, 15], [15, -3], [7, -16], [-173, -33], [-67, -19], [-19, 5], [-15, 32], [-72, 4], [-15, -11], [-8, -23], [28, 5], [44, 1], [12, -18], [-139, -24], [-97, -45], [-41, -33], [-135, -110], [-83, -52], [-22, -20], [-37, -53], [-48, -34], [-54, -64], [-33, -14]], [[26978, 56492], [-19, 64], [-26, 61], [-23, 37], [-2, 88], [-9, 48], [-34, 44], [-30, 30], [-21, -6], [13, -50], [34, -65], [3, -25], [-1, -33], [-23, 5], [-21, 14], [-26, 4], [-17, 20], [-36, 77], [26, 66], [8, 43], [-1, 90], [-6, 43], [-28, 67], [-44, 72], [-61, 60], [-29, 47], [-73, 37], [-27, 24], [-22, 45], [-3, 33], [8, 50], [-20, 63], [-86, 125], [-48, 46], [-11, 26], [-7, 9], [7, -86], [21, -52], [55, -48], [15, -28], [6, -37], [-32, -70], [-16, -18], [-5, -38], [-10, -12], [-11, 22], [-45, 110], [-86, 53], [-16, 32], [-32, 101], [-14, 91], [5, 61], [35, 96], [11, 41], [-2, 26], [1, 37], [-13, 26], [-33, 35], [-21, 27], [6, 14], [38, 37], [2, 33], [0, 11]], [[26766, 58131], [7, -23], [8, -36], [3, -46], [36, -155], [28, -86], [62, -158], [26, -29], [45, -127], [16, -21], [9, -37], [46, -31], [13, -23]], [[56657, 45580], [-11, -11], [-6, -30], [-1, -23], [-19, -18], [-38, 4], [-38, 17], [-27, 5], [-18, -4], [-67, -57], [-22, -7], [-73, 4], [-41, 12], [-30, 2], [-20, -18], [-26, -42], [-22, -22], [-10, 2], [-6, 18], [-9, 24], [-2, 63], [-11, 69], [7, 36], [21, 27], [8, 53], [-7, 81], [0, 56], [6, 33], [-8, 79], [-22, 126], [-30, 102], [-39, 79], [-25, 76], [-12, 72], [4, 173], [12, 153], [9, 121], [-2, 203], [-27, 132], [-6, 142], [15, 152], [3, 104], [-10, 53], [-7, 8], [-9, 5], [-66, 5], [-89, 7], [-78, 2], [-84, 2], [-14, 20], [-6, 35], [0, 35], [17, 108], [-2, 9], [-30, 2], [-81, -18], [-54, -17], [-34, -6], [-59, -29], [-37, -62], [-12, -78], [1, -64], [-2, -47], [-17, -49], [-14, -56], [0, -30], [-8, -149], [-55, -20], [-55, 0], [-13, 1], [-68, 36], [-25, 0], [-22, -19], [-42, -18], [-39, -13], [-40, -45], [-11, -4], [-27, 23], [-37, -2], [-38, -11], [-17, -5], [-12, 14], [-35, 111], [-46, 149], [-25, 94], [-10, 24], [-16, 32], [-22, 61], [-9, 58], [4, 55], [-13, 73], [-29, 93], [-20, 89], [-9, 85], [-2, 72], [4, 60], [-5, 45], [-16, 28], [-9, 37], [-7, 15], [-13, 34], [-29, 38], [-33, 20], [-70, 0], [-93, 1], [-84, -3], [-93, -3], [-94, -3], [-26, -6], [-72, -2], [-58, 10], [-21, 6], [-38, 5], [-59, 1], [-32, -4], [-77, 0], [-7, -1], [-12, -11], [-33, 15], [-32, -5]], [[53630, 48464], [-19, 17], [-39, -11], [-19, -13], [-31, -48], [-46, -25], [-17, 2], [-12, 8], [-27, 53], [-20, 50], [-8, 28]], [[53392, 48525], [12, 7], [36, 11], [27, 5], [6, 14], [4, 156], [1, 159], [-10, 21], [-9, 12], [-1, 11], [14, 20], [20, 23], [6, 11], [22, 42], [43, 97], [33, 24], [30, 25], [5, 10]], [[53631, 49173], [4, 19], [14, -2], [4, -9], [7, -20], [12, -29], [21, -34], [22, -37], [11, -5], [17, 19], [21, 28], [30, 20], [7, 19], [4, 40], [2, 44], [3, 51], [6, 7], [11, 5], [20, -15], [9, -15], [16, 0], [10, 14], [19, 25], [25, 10], [25, 24], [25, 31], [12, 3], [12, -40], [11, -29], [2, -17], [-11, -34], [-12, -45], [10, -55], [3, -54], [-1, -32], [9, -13], [6, -7], [9, 8], [17, -2], [21, -17], [21, 2], [20, 20], [37, 81], [54, 141], [44, 88], [36, 36], [24, 43], [12, 48], [21, 33], [43, 26], [32, 29], [33, 97], [44, 174], [12, 156], [7, 94], [-4, 326], [-3, 107], [7, 58], [16, 40], [44, 85], [30, 70], [23, 81], [44, 186], [19, 60], [8, 26], [27, 50], [37, 43], [47, 38], [73, 129], [59, 130], [-8, 157], [13, 129], [32, 166], [11, 174], [-11, 184], [4, 151], [31, 175], [13, 65], [4, 106], [-1, 169], [39, 232], [37, 138], [41, 155], [15, 94], [21, 125], [-3, 100]], [[55169, 53846], [-4, 116], [10, 158], [-3, 94], [-15, 81], [7, 51], [30, 21], [36, 81], [66, 212], [71, 104], [49, 32], [52, -3], [33, -19], [16, -33], [39, -50], [62, -66], [46, -83], [26, -83], [20, -46], [25, -15], [40, 6], [45, -19], [48, -47], [29, -17], [10, 12], [23, -7], [52, -38], [42, 21], [61, -16], [143, -68], [7, 11], [4, 3], [12, 27], [31, 137], [26, 85], [12, 31], [31, 45], [35, 11], [35, -4], [28, -19], [26, -23], [29, 0], [30, 22], [44, 40], [46, 26], [40, 29], [65, 50], [26, 23], [33, 10], [91, -46], [59, 30], [24, -9], [51, 33], [10, 22], [32, 111], [35, 33], [52, -17], [30, -17], [98, -48], [127, -49], [38, -8], [15, -5], [13, 7], [42, 63], [14, 9], [12, -1], [80, -51]], [[58059, 50276], [0, -22], [1, -24], [13, -30], [25, -60], [19, -56], [1, -49], [-4, -82], [-1, -48], [2, -64], [0, -121], [-1, -86], [3, -44], [30, -106], [13, -118], [7, -86]], [[53692, 53088], [67, -1], [66, -2], [73, 1], [70, 1], [55, -3], [26, 25], [25, -38], [12, -9], [5, 3], [9, -27], [31, 3], [5, -6], [3, -33], [29, 1], [14, -8], [12, 1], [17, 19], [12, -6], [22, -25], [15, -21], [22, 7], [51, -4], [39, -20], [39, -57], [26, -33], [23, -48], [9, 9], [8, 13], [5, 6], [-1, 41], [-13, 71], [-5, 59], [3, 49], [10, 35], [17, 22], [2, 33], [0, 4]], [[54495, 53150], [19, 79], [19, 78], [22, 92], [19, 75], [-2, 37], [1, 56], [4, 62], [-1, 37], [6, 25], [13, 93], [7, 53], [12, 25], [17, 17], [25, 1], [66, 11], [62, 24], [21, 11], [38, 39], [15, 2], [13, -15], [75, -45], [20, -17], [8, 2], [11, -3], [17, -1], [18, 6], [10, -6], [14, -29], [9, 3], [12, 21], [23, 22], [43, 25], [7, -11], [15, -54], [16, -19]], [[53631, 49173], [-7, 9], [-21, 39], [-25, 61], [-10, 9], [-13, -1], [-22, -22], [-22, -35], [-39, -33], [-32, -18], [-3, -22], [-8, -39], [-11, -23], [-28, -8], [-11, -34], [-25, -66], [-16, -30]], [[53338, 48960], [-4, 13], [-10, 16], [-21, 51], [-20, 63], [-5, 29], [-6, 17], [-1, 64], [-30, 75], [-77, 135], [-8, 40], [-65, 124]], [[62354, 44883], [14, -79], [0, -60], [-6, -19], [-13, 12], [-23, 48], [-43, 46], [20, 4], [12, -4], [12, 4], [8, 26], [1, 16], [11, 12], [7, -6]], [[62163, 44753], [19, -35], [-54, 15], [-8, 31], [-1, 24], [20, -5], [24, -30]], [[62073, 44987], [-5, -8], [-25, 33], [-15, 8], [-21, 53], [8, 184], [7, 24], [5, 10], [12, 3], [14, -23], [-4, -119], [19, -79], [12, -63], [-7, -23]], [[31423, 52547], [-53, -26], [-4, 4], [-3, 15], [1, 109], [0, 124], [-9, 51], [-24, 81], [-31, 108], [-9, 31], [-14, 18], [-16, 2], [-11, -7], [-16, -20], [-15, -22], [-28, -65], [-29, -76], [-17, -17], [-16, -7], [-15, 2], [-12, 21], [-13, 41], [-14, 55], [-18, 18], [-7, -17], [-6, -32], [-4, -32], [12, -41], [10, -32], [-18, 1], [-56, 0], [-66, 0], [-65, 0], [-58, 0], [-55, 0], [-21, 3], [-21, 18], [-20, 9], [-10, -1], [-20, -18], [-24, -3], [-17, -17], [-14, 2], [0, -95], [0, -135], [-1, -144], [15, 11], [13, -1], [10, -10], [27, 8], [14, -4], [14, -4], [13, -1], [8, -11], [11, 2], [12, 13], [13, -8], [15, -20], [10, -31], [8, -37], [9, -20], [-1, -35], [0, -28], [-3, -24], [4, -15], [2, -16], [0, -9], [-5, -4], [-11, -3], [-12, -3], [-8, 1], [-6, 14], [-6, 2], [-9, -2], [-9, 9], [-8, 18], [-14, 18], [-15, -8], [-11, -9], [-11, -11], [-9, -12], [-10, 3], [-13, -9], [-10, -14], [-14, -10], [-15, -6], [-18, -5], [-17, -2], [-19, -4], [-1, -76], [-2, -148], [-1, -99], [0, -90], [7, -33], [34, -70], [26, -37], [22, -41], [23, -17], [9, -16], [6, -25], [3, -27], [3, -23], [-3, -24], [-5, -23], [2, -24], [8, -19], [2, -24], [6, -23], [3, -23], [7, -16], [8, -12], [11, -19], [2, -17], [-2, -21], [0, -15], [11, -35], [3, -25], [-5, -29], [-5, -101], [-12, -116], [-8, -88], [-12, -143], [-15, -167], [-18, -204], [-17, -201], [-18, -195], [-15, -176], [-17, -194], [-10, -117], [-5, -20]], [[28094, 52681], [-8, 40], [-38, 57], [19, 74], [46, 56], [60, -44], [7, 87], [-22, 76], [4, 144], [7, 29], [16, 39], [20, 26], [12, 8], [21, -13], [13, 29], [49, -13], [15, 12], [10, 20], [12, 14], [15, 35], [9, 40], [7, 16], [17, -6], [1, 18], [9, 23], [30, 53], [-1, 23], [-8, 51], [2, 19], [17, 6], [21, 15], [10, 48], [14, 42], [15, 63], [17, 4], [9, 72], [22, 64], [46, 189], [-13, -4], [-11, -26], [-13, 3], [-14, 15], [4, 85], [-8, 10], [-23, -65], [-19, 67], [-2, 40], [8, 40], [-1, 27], [-31, -20], [2, 25], [19, 26], [9, 27], [17, 29], [7, 44], [4, 69], [7, 74], [-5, 36], [-9, 31], [-8, 137], [2, 80], [-4, 62], [-8, 54], [-37, 69], [59, 80], [21, 60], [-27, 124], [-35, 105], [-1, 62], [10, -8], [11, 2], [11, 132], [-3, 41], [-19, 67], [-24, 1], [-21, 83], [-13, 19], [-9, 52], [-34, 102], [-27, 53]], [[28507, 56830], [8, -12], [23, -83], [37, -53], [38, -87], [16, -59], [12, -11], [11, -22], [-5, -16], [-12, -17], [-3, -35], [8, -19], [8, -12], [22, 8], [12, 40], [-8, 178], [-13, 89], [-15, 27], [-13, 35], [9, 27], [24, 12], [31, 31], [115, 170], [39, 159], [30, 58], [34, 37], [41, -9], [33, 20], [10, 51], [-9, 69], [-13, 41], [12, 61], [13, 91], [-1, 76], [16, 46], [-6, 18], [-23, -37], [-18, -16], [10, 30], [33, 76], [16, 115], [13, 48], [46, 67], [10, 32], [34, 50], [56, 108], [22, 30], [108, -69], [34, 4], [-6, -13], [-16, -4], [-23, -19], [-6, -41], [15, -44], [17, -12], [14, 28], [14, 80], [22, 88], [6, 92], [15, 32], [24, 11], [41, -18], [32, -19], [33, -3], [101, 14], [164, 240], [77, 52], [47, 50], [31, 99], [8, 74], [22, 28], [24, 0], [11, 18], [3, 23], [57, 64], [33, 8], [28, -1], [65, -56], [29, -98], [5, -68], [-40, -74], [-10, -32]], [[28301, 53307], [-7, -13], [-14, 23], [-5, 29], [8, 21], [12, -7], [5, -18], [1, -35]], [[82828, 65953], [-10, -34], [-16, 5], [0, 25], [-4, 7], [5, 23], [3, 7], [18, -20], [4, -13]], [[83850, 69983], [-23, -16], [-72, 49], [-51, 55], [-31, 65], [-4, 28], [35, -5], [35, -24], [8, -36], [14, -11], [9, -21], [65, -49], [10, -15], [5, -20]], [[83970, 69103], [-4, -12], [-34, 33], [-37, 7], [-13, 29], [-2, 46], [39, -2], [48, -41], [11, -21], [-8, -39]], [[83936, 68939], [-1, -11], [-24, 37], [-11, 7], [5, 21], [16, 5], [13, -47], [2, -12]], [[84000, 69062], [-2, -27], [-8, 4], [-10, 47], [6, 12], [14, -3], [0, -33]], [[83283, 66507], [-21, -27], [-13, 13], [0, 36], [7, 32], [-8, 23], [7, 28], [16, 8], [5, -17], [9, -10], [3, -9], [0, -18], [-9, -30], [7, -16], [-3, -13]], [[80662, 63993], [10, -20], [28, 14], [5, -25], [-1, -12], [-9, -29], [-23, 22], [-23, -5], [-16, 2], [-5, 14], [13, 28], [21, 11]], [[83680, 68021], [-24, -13], [-9, 0], [0, 42], [20, 39], [8, -13], [5, -21], [0, -34]], [[81542, 64979], [3, -27], [-22, 41], [-6, 2], [-11, 15], [-6, 25], [17, 1], [16, -30], [9, -27]], [[81330, 64286], [-6, -11], [-8, 20], [-2, 30], [-6, 16], [14, 21], [6, 22], [15, -4], [7, -7], [-14, -23], [-3, -10], [-3, -54]], [[81289, 64308], [-27, -12], [-6, 2], [10, 30], [24, 21], [-1, -41]], [[78093, 64266], [3, 8], [-6, 72], [1, 17], [-3, 6], [-11, 6], [-17, -11], [-51, -47], [-44, -87], [-20, -19], [-20, -8], [-24, 15], [-27, 10], [-37, -22], [-19, 10], [-9, 18], [-7, 27], [4, 34], [-2, 25], [-16, 13], [-17, 11], [-10, 32], [-5, 36], [4, 47], [3, 50], [-9, 23], [-26, 12], [-64, 23], [-57, 12], [-24, -6], [-19, 6], [-11, 9], [-6, 16], [0, 22], [9, 52], [11, 51], [26, 73], [2, 51], [-2, 59], [13, 79], [23, 59], [11, 18], [-3, 26], [-9, 24], [-13, 13], [-21, 16], [-34, 4], [-45, 16], [-54, 35], [6, 67], [0, 42], [-7, 34], [-11, 24], [-6, 22], [10, 60], [-13, 65], [-14, 27], [-15, 33], [-2, 37], [7, 34], [37, 73], [0, 17], [-9, -1], [-10, -2], [-50, -26], [-6, 16], [-18, 10], [-37, 2], [-43, -5], [-54, -26], [-50, -45], [-22, -32], [-20, -19], [-15, -7], [-19, 14], [2, 45], [34, 82], [4, 56], [-10, 49], [-1, 38], [-12, 25], [-17, 12], [-9, 28], [0, 80], [15, 83], [24, 26], [15, 13], [4, 16], [-8, 57], [1, 37], [15, 72], [14, 54], [28, -9], [12, 13], [13, 19], [15, 33], [10, 38], [12, 90], [8, 13], [35, -15], [10, 11], [19, 52], [18, 64], [26, 20], [18, 2], [9, 21], [-1, 31], [-17, 50], [-8, 39], [2, 24], [26, 15], [6, 29], [-4, 63], [11, 75], [6, 89], [2, 66], [0, 50], [-3, 53], [-4, 96], [-11, 84], [2, 32], [-2, 102], [-7, 86], [-14, 16], [-26, 28], [-15, 5], [-12, -10], [-5, -30], [-11, -28], [-15, 6], [-6, 29], [-10, 37], [-30, 175], [-4, 50], [-5, 51], [-10, 25], [-11, 14], [-25, 59], [-13, 25], [-6, 4], [-14, -4], [-13, 0], [-11, 29], [-9, 36], [-10, 18], [-17, 9], [-17, -3], [-10, -31], [-7, -18], [-12, -41], [-21, -58], [-10, -21]], [[75453, 67833], [-1, 24], [3, 70], [-10, 17], [-31, 17], [-35, 23], [-17, 25], [-9, 8], [-13, -4], [-21, -26], [-20, -30], [-16, -3], [-16, 15], [-16, 18], [-53, 26], [-24, 4], [-42, -5], [-35, 6], [-5, 8], [0, 14], [5, 29], [3, 27], [-4, 16], [-35, 20], [-33, 14], [-34, 5], [-23, -10], [-23, -22], [-18, -39], [-27, -17], [-32, -29], [-16, -28], [-24, -58], [-34, -72], [-31, -71], [-16, -68], [-21, -43], [-22, -31], [-16, -85]], [[71610, 72290], [-21, -9], [-42, -5], [-14, 1], [-21, 1], [-42, 19], [-57, 25], [-58, 35], [-32, 28]], [[70705, 73169], [-4, 5], [-8, 15], [-34, 46], [-1, 12], [52, 45], [31, 18], [16, 13], [3, -2], [8, -22], [20, -13], [14, 3]], [[84544, 74886], [-3, 5], [-23, -51], [-45, -48], [-96, -10], [-30, 34], [-11, -24], [-9, -31], [-25, -11], [-39, -2], [-22, -21], [-12, -23], [-54, -8], [-20, -31], [-34, -11], [-140, -135], [-30, -57], [-29, -66], [-21, -34], [-18, -23], [-16, -10], [-17, -23], [-16, -3], [-17, 11], [-19, -4], [-12, -28], [10, -36], [-5, -16], [-37, -19], [-55, -13], [-23, -24], [-8, -14], [-12, -7], [-12, 47], [-4, 62], [23, 15], [20, 8], [116, 86], [-14, 64], [10, 28], [26, 45], [17, 23], [-10, 8], [-75, -15], [-44, 1], [-22, 5], [7, 39], [-4, 38], [-5, 15], [38, 44], [18, 11], [13, -1], [-1, 27], [-11, 40], [12, 52], [79, 61], [19, 55], [31, 51], [58, 128], [4, 22], [16, 60], [3, 24], [-26, 35], [-11, 49], [-78, 89], [-7, 76], [-7, -3], [-12, -53], [-10, -18], [-36, -1], [-18, 20], [-100, 13], [-25, -34], [-23, -53], [-22, -38], [-23, -20], [-19, -35], [-81, -206], [-31, -16], [-144, -124], [-72, -49], [-56, -87], [-19, -52], [-17, -58], [-10, -88], [-51, -107], [-18, -23], [-18, -9], [-23, 3], [-21, -7], [-35, 10], [-43, -34], [-48, -29], [-42, 73], [-30, 19], [-48, -21], [-23, -33], [-47, -162], [-17, -93], [1, -38], [27, -116], [31, -64], [69, -74], [147, -51], [34, 18], [37, 0], [39, -48], [24, -80], [3, -55], [0, -19], [9, -16], [5, -27], [-15, -23], [-12, -12], [-10, -84], [0, -94], [12, -31], [32, -44], [49, -36], [45, -8], [86, 17], [35, 57], [-2, 24], [1, 32], [76, 83], [43, 74], [-7, 19], [-8, 13], [8, 8], [23, 5], [106, 76], [83, -62], [47, -72], [47, -13], [33, -36], [37, -32], [49, -2], [41, -7], [13, 30], [13, 19], [14, -4], [17, -38], [47, -30], [43, 2], [30, 11], [18, -14], [-26, -49], [4, -79], [-20, -25], [-19, -40], [11, -26], [10, -12], [-1, -32], [-17, -18], [-32, -48], [-19, 1], [-9, 9], [-6, 18], [-4, 27], [-12, 18], [-31, 7], [-33, -6], [-73, -71], [-71, -57], [-75, -45], [-25, -28], [-18, -8], [-30, 22], [-19, -2], [-4, -14], [24, -40], [6, -31], [-3, -23], [-13, -11], [-20, 18], [-18, -25], [-8, -42], [0, -99], [-12, -22], [-33, -12], [-35, -32], [-13, 15], [-5, 17], [4, 46], [-4, 22], [-16, -1], [-25, -13], [-18, -31], [-6, -18], [24, -58], [23, -6], [6, -13], [-19, -29], [-45, -42], [-8, -36], [-13, -34], [-19, -27], [-13, -28], [-15, -15], [-25, -17], [-31, -68], [-23, -65], [-27, -32], [-21, -109], [-38, -58], [-14, -94], [10, -58], [41, 1], [21, -21], [44, -76], [52, -49], [53, -28], [66, -71], [19, -29], [15, -61], [29, -174], [20, -86], [2, -46], [31, -85], [33, -146], [37, -127], [8, -99], [-13, -46], [1, -59], [37, -55], [85, -63], [13, -18], [17, -31], [0, -95], [13, -31], [12, -18], [51, -41], [21, -33], [23, -54], [6, -48], [3, -65], [-29, -2], [-23, 7], [-91, 84], [-24, 3], [-33, -12], [-48, 16], [-51, 93], [-36, 28], [-39, 15], [-93, -81], [-24, 6], [-7, -9], [-11, -14], [44, -17], [43, 26], [42, 39], [60, -21], [10, -35], [10, -59], [42, -40], [33, -18], [41, -52], [41, -83], [86, -95], [35, -90], [13, -59], [12, -83], [-30, -27], [-26, -4], [-41, -13], [-30, -29], [-31, -52], [-86, -82], [-17, -51], [-11, -44], [-21, -22], [-54, 21], [-50, -2], [-56, -60], [-14, -24], [9, 4], [9, 8], [25, -9], [40, 32], [38, -98], [76, 16], [71, 82], [27, 1], [23, -13], [25, -32], [69, -142], [37, -16], [37, -33], [20, -4], [18, -10], [-49, -52], [-64, -113], [-28, -27], [-19, -30], [51, 15], [37, 54], [18, 13], [15, -12], [7, -67], [-14, -205], [-18, -3], [-17, 56], [-20, 17], [-18, -11], [-33, 0], [-13, -25], [-11, -36], [20, -7], [40, -62], [4, -33], [-11, -22], [-28, 9], [34, -46], [-9, -48], [-11, -19], [-20, -12], [-12, -42], [18, -69], [18, -89], [2, -43], [-28, 18], [-43, -54], [-23, -4], [-16, 71], [-19, -11], [-13, -21], [-18, -77], [-21, -69], [-19, -19], [-22, 5], [-18, -2], [5, -18], [19, -23], [0, -27], [-41, -84], [-7, -33], [1, -28], [-21, -34], [11, -57], [-6, -40], [-19, -54], [-19, -36], [-24, -58], [-29, -33], [-39, -122], [-11, -61], [-3, -63], [-13, -21], [-20, -28], [-24, 14], [-1, 42], [-10, 4], [-6, 27], [-2, 35], [3, 28], [-10, -8], [-6, -33], [-16, -27], [-16, 11], [-18, 22], [1, -32], [9, -31], [4, -32], [24, -6], [17, -37], [13, -55], [2, -21], [10, -25], [1, -21], [-23, -20], [-29, -36], [-35, -63], [-29, -42], [-26, 0], [-15, 5], [-23, 24], [-26, 10], [35, -85], [19, -15], [24, 3], [23, 32], [33, -3], [8, -49], [-9, -55], [-18, -72], [-3, -62], [22, -88], [1, -27], [-9, -13], [-26, 23], [-21, 29], [-22, -7], [-22, 12], [-23, -10], [-10, -21], [7, -34], [20, -28], [12, -43], [-14, -15], [-58, 10], [-14, -8], [-17, -47], [11, -71], [-13, -43], [-24, -11], [-32, -35], [-19, -8], [1, -15], [14, -16], [8, -21], [-18, -72], [-26, -23], [-42, 12], [-32, -17], [-28, 31], [-30, 1], [-20, -39], [-2, -45], [-20, -4], [-11, 3], [-15, -3], [2, -24], [8, -21], [41, -10], [7, -30], [2, -47], [-43, -80], [-18, -54], [-27, 1], [-20, -43], [-11, -60], [-14, 12], [-31, -9], [-10, -28], [8, -12], [1, -20], [-13, -67], [-14, -18], [-6, 27], [-4, 42], [-11, 3], [-18, -39], [-22, -28], [-18, -11], [-14, 26], [-34, 13], [-13, -112], [-29, -40], [-13, -13], [-23, -4], [15, -15], [5, -29], [-9, -28], [-23, -6], [-13, -22], [-5, -100], [-14, -35], [-35, -2], [-26, 23], [-8, -19], [-4, -17], [-14, -18], [-26, -5], [-59, -45], [-26, 13], [-32, 17], [-23, -17], [-7, -34], [-10, -26], [-32, 0], [-26, 32], [-26, 24], [-29, -20], [-22, -42], [-27, -14], [-5, -26], [-12, -13], [-29, 5], [-11, 65], [-16, 9], [-16, -32], [-6, -26], [-8, -19], [3, -53], [-16, -1], [-21, 32], [-23, 6], [-20, -30]], [[81740, 64827], [-11, 8], [-11, 6], [-18, 0], [-7, -8], [-13, -5], [-9, -16], [-1, -2]], [[81670, 64810], [-23, 11], [-29, 44], [-20, 73], [-26, 39], [-12, 35], [-4, 62], [-5, 29], [2, 33], [7, 29], [-28, -15], [-20, -27], [4, -34], [-5, -32], [-31, -16], [2, -14], [2, -14], [24, -43], [5, -36], [10, -20], [19, -56], [-1, -110], [11, -31], [-4, -30], [-7, -42], [-1, 0], [-6, 12]], [[81534, 64657], [-9, -2], [-3, -14], [-1, -13]], [[81521, 64628], [-1, -1], [-16, -9], [-14, -8], [-11, -11], [-17, -32], [-33, -8], [-16, 76], [-23, -51], [-6, -104], [-9, -18], [-14, -15], [-26, 37], [-23, -25], [-18, -25], [-8, -22], [-13, -25], [-25, 24], [-21, 36], [5, 27], [-2, 17], [-10, 14], [-10, -2], [5, -35], [4, -67], [-10, -19], [-14, -15], [-31, 12], [-21, 25], [-26, 21], [-22, 4], [-5, -42], [-15, -35], [-13, -4], [-14, 6], [-18, -37], [-8, -27], [-22, -29], [-58, -13], [-21, -29], [-27, 5], [-21, -7], [-13, 2], [-10, 15], [-13, 0], [-5, -47], [-33, -20], [-30, -5], [-33, -62], [-24, -37], [-17, -4], [-13, 13], [-7, 56], [-6, 6], [-4, -52], [-6, -43], [-12, -24], [-38, -54], [-11, -54], [7, -49], [51, -12], [7, -27], [-5, -22], [-13, -19], [-3, -28], [55, -88], [2, -34], [-9, -19], [-10, -41], [-29, -35], [-62, -18], [-51, 18], [-16, 40], [1, 28], [13, -8], [14, 3], [-4, 26], [-6, 15], [-24, 23], [-19, 62], [4, 51], [-11, 40], [-11, 34], [-12, 20], [-6, 25], [12, 78], [-7, 45], [22, 56], [6, 63], [39, 22], [3, 60], [-29, 2], [-19, 44], [-5, -18], [-15, -2], [-26, 84], [-8, 11], [-12, 2], [6, -90], [-30, -33], [-25, -15], [-35, -6], [-20, -10], [-18, 8], [4, 27], [10, 33], [-9, 27], [-20, 20], [-30, -1], [-21, 6], [-20, -2], [-8, 12], [-19, 42], [-17, 26], [-7, 26], [7, 31], [-6, 18], [-32, 2], [1, -43], [3, -52], [9, -39], [-6, -22], [-16, -15], [-17, 42], [-8, 10], [-9, -2], [-6, -41], [-15, -37], [-28, 4], [-22, -23], [-26, -10]], [[80802, 63359], [13, -26], [9, -37], [8, -68], [4, -63], [-28, -40], [-25, -16], [-50, -154], [-11, -48], [-8, -21], [-3, -21], [1, -21], [-13, -74], [-12, -91], [-7, -37], [-14, -28], [-19, -15], [-11, -2], [-11, -8], [-27, -49], [-30, -38], [5, -17], [0, -16], [-13, -18], [-14, 3], [-42, -14], [-16, -28], [-16, -51], [-6, -7], [-25, -12], [-20, -5], [-33, 36], [-16, 11], [-44, 15], [-43, 24], [-30, 28], [-61, 69], [-7, 123], [-11, 67], [0, 24], [4, 206], [4, 22], [8, 20], [27, 46], [31, 37], [44, 76], [33, 35], [27, 50], [-16, -2], [-12, 6], [12, 43], [12, 23], [14, 12], [29, -9], [27, 9], [19, 38], [19, 8], [71, -12], [49, 17], [24, 35], [12, 2], [36, -10], [14, -37], [-1, 25], [1, 23], [7, -2], [47, -45], [0, 55], [3, 15], [15, 23], [7, -1], [19, -44], [17, -26], [23, -13]], [[81534, 64657], [6, -13], [0, -1], [-13, -11], [-4, -3], [-2, -1]], [[81740, 64827], [1, -2], [6, -22], [-2, -24], [11, -12], [3, -23], [-12, -13], [-1, -28], [-6, -17], [-36, 30], [-29, 16], [-27, -6], [-9, 18], [-2, 18], [31, 32], [2, 16]], [[81730, 64637], [-7, -9], [-19, 42], [-1, 14], [15, 2], [16, -19], [0, -17], [-4, -13]], [[81665, 64637], [-33, 0], [-7, 5], [-4, 13], [12, 22], [45, 30], [-11, -32], [-2, -38]], [[19644, 36209], [-43, -18], [2, 32], [11, 27], [31, -16], [15, -3], [-16, -22]], [[28110, 32461], [-50, -12], [-2, 3], [3, 10], [11, 18], [14, 21], [3, 1], [5, -2], [6, -4], [15, -14], [4, -10], [-1, -8], [-8, -3]], [[30691, 41759], [5, -66], [38, -87], [12, -99], [9, -13], [52, -49], [1, -12], [-8, -18], [-7, -24], [5, -34], [9, -46], [4, -42], [5, -44], [6, -68], [4, -61], [13, -90], [3, -56], [0, -34], [10, -33], [20, -39], [28, -39], [22, -47], [16, -31], [21, -26], [15, -23], [6, -16], [2, -13], [-6, -13], [-25, -61], [-34, -92], [0, -12], [33, -66], [5, -27], [0, -37], [-11, -45], [-35, -14], [-8, -12], [-1, -15], [8, -19], [-1, -44], [13, -49], [-7, -16], [-13, -23], [0, -22], [4, -24], [14, -20], [54, -69], [4, -9], [-1, -7], [-21, -46], [-2, -28], [1, -47], [3, -30], [7, -12], [27, -14], [34, -105], [32, -98], [0, -85], [3, -98], [21, -78], [3, -62], [6, -70], [25, -43], [10, -85], [2, -45], [-1, -29], [19, -92], [2, -79], [-5, -57], [1, -32], [2, -22], [17, -20], [7, -13], [24, -5], [35, -2], [61, 21], [46, 20]], [[31334, 38697], [52, -104], [-22, -140], [-36, -224], [-28, -174], [-5, -23], [-5, -34], [-60, -49], [-88, -71], [-44, -38], [-57, -48], [-13, -39], [-17, -22], [-18, -27], [-6, -30], [-17, -19], [-15, -68], [0, -52], [9, -35], [17, -15], [6, -43], [5, -30], [12, -23], [-3, -19], [-10, -14], [-18, -8], [-12, -43], [-15, -105], [-2, -38], [16, -96], [9, -51], [23, -187], [4, -51], [-32, -71], [-13, -43], [-5, -38], [0, -30], [3, -28], [27, -87], [31, -79], [15, -41], [0, -55], [-7, -31], [-17, -12], [-36, -21], [-16, -32], [-16, -5], [-16, 25], [-17, -6], [-21, -22], [-8, -53], [-19, -92], [-16, -25], [-12, -70], [-21, -100], [-10, -60], [-5, -44], [-22, -28], [-25, -56], [-19, -55], [-7, -15], [-15, -5], [-10, -49], [-36, -74], [-9, -85], [-13, -46], [-2, -82], [-20, -151], [-4, -33], [-20, -26], [-27, -58], [-8, -43], [12, -128], [15, -128], [1, -61], [-6, -82], [-4, -36], [10, -14], [17, -10], [6, -31], [-13, -22], [-5, -40], [-14, -44], [-40, -17], [-14, 16], [-5, -15], [2, -31], [-9, -37], [-21, -100], [-13, -90], [-8, -39], [3, -33], [7, -19], [0, -18], [-11, -21], [-11, -35], [-11, -5], [-12, 10], [-13, -21], [-3, -43], [-7, -54], [-3, -64], [-5, -81], [16, -56], [21, -101], [16, -25], [17, 2], [14, -20], [8, -24], [-11, -42], [-18, -7], [-2, -24], [6, -53], [6, -52], [18, -25], [7, -70], [17, -23], [-2, -89], [17, -105], [18, -30], [8, -14], [-5, -46], [-15, -36], [-3, -58], [6, -43], [18, -40], [14, -4], [20, 16], [21, -19], [3, -35], [3, -31], [-11, -41], [-12, -76], [-3, -75], [3, -114], [6, -89], [1, -56], [1, -25], [-7, -17], [-19, -9], [-16, -4], [-13, -14], [-3, -28], [-11, -47], [-11, -35], [-19, -51], [-12, -53], [-10, -35], [1, -24], [-7, -46], [-8, -39], [-15, -129], [-20, -27], [-17, -13], [-8, -18], [6, -35], [18, -10], [6, -29], [-3, -44], [12, -41], [-1, -50], [11, -93], [-10, -62], [3, -53], [0, -52], [-15, -41], [-29, -8], [-16, -38], [-28, -41], [-3, -33], [-5, -30], [-11, -11], [-18, 0], [-14, -5], [-20, -38], [-22, -21], [-5, -32], [2, -38], [-11, -23], [-15, -44], [-9, -48], [9, -44], [10, -78], [2, -34], [-13, -65], [-10, -42], [10, -53], [8, -30], [-8, -66], [-6, -41], [5, -76], [20, -85], [19, -75], [2, -88], [5, -70], [9, -76], [19, -29], [15, -26], [-3, -36], [-11, -44], [-15, -33], [-38, -11], [-30, -30], [-25, -21], [-19, -25], [-13, -26], [-7, -29], [5, -127], [-3, -47], [-13, -67], [-12, -53], [-5, -16], [-1, -24], [-2, -22], [-14, -5], [-18, 10], [-11, -6], [-8, -18], [7, -41], [7, -73], [9, -31], [-2, -24], [-4, -53], [-12, -42], [-17, 0], [-10, -18], [-5, -30], [5, -39], [22, -31], [7, -21], [-3, -27], [-17, -11], [-10, -22], [-9, -49], [-13, -55], [-13, -41], [-3, -56], [19, -60], [-2, -59], [-2, -171], [-1, -58], [5, -97], [-7, -26], [-4, -25], [19, -71], [21, -113], [5, -45], [-3, -31], [-28, -27], [-23, -11], [-13, 19], [-10, -8], [-10, -33], [-12, -27], [-5, -27], [13, -34], [7, -66], [-15, -29], [-10, -31], [4, -41], [4, -74], [-9, -123], [12, -44], [14, -21], [43, -25], [32, -12], [9, -41], [-4, -33], [-15, -16], [-24, -14], [0, -53], [20, -51], [23, -36], [5, -32], [-1, -34], [-16, -28], [22, -60], [10, -41], [-10, -32], [-15, -47], [-12, -23], [0, -26], [-5, -52], [-1, -51], [4, -31], [137, -24], [31, -9], [18, -31], [-3, -38], [-17, -40], [-11, -76], [-27, -13], [-27, 20], [-29, -7], [-26, -5], [-36, -2], [-48, -10], [-30, 11], [-2, -28], [8, -48], [64, -15], [60, -28], [18, -51], [24, -58], [25, -36], [1, -58], [-39, -61], [-5, -43], [-51, -13], [-15, -25], [-7, -84], [6, -66], [20, -23], [13, -43], [-15, -51], [-34, -35], [-19, -33], [12, -27], [15, -42], [5, -23], [8, -62], [10, -87], [-1, -42], [-9, -32], [-34, -49], [-24, -23], [-4, -61], [-2, -45], [2, -41], [15, -33], [-1, -33], [-20, -7], [-18, -16], [-17, -58], [-50, -60], [-17, -27], [1, -46], [-20, -65], [-16, -57], [-13, -53], [2, -56], [28, -24], [23, -54], [9, -69], [-17, -79], [-40, -30], [-23, -33], [-7, -25], [6, -83], [-2, -38], [-6, -37], [-10, -28], [-22, -31], [-38, -28], [-32, -19], [-14, -21], [-17, -48], [-15, -52], [3, -65], [-90, -8], [-6, -48], [-20, -38], [-6, -69], [20, -66], [9, -56], [-16, -67], [6, -69], [2, -54], [32, -61], [20, -76], [11, -63], [6, -50], [8, -30], [13, -34], [6, -39], [20, -13], [35, 37], [25, 25], [17, 9], [51, -6], [31, 23], [14, -3], [19, -13], [14, -27], [11, -62], [7, -69], [-9, -71], [-14, -16], [-5, -20], [5, -43], [16, -31], [-1, -43], [-17, -99], [-12, -41], [21, -46], [18, -40], [37, -31], [30, -43], [21, -35], [-5, -49], [14, -14], [56, -1], [84, -2], [131, -2], [128, -3], [145, -3], [69, -39], [62, -35], [79, 0], [78, -41], [58, -27], [35, -11], [36, -10], [5, -38]], [[30988, 21683], [-157, 54], [-35, 30], [-30, 3], [-57, -36], [-32, -88], [-16, -25], [-40, -23], [-40, -5], [-134, -85], [-48, -7], [-33, -23], [-32, -32], [-12, -70], [5, -42], [-36, -152], [-9, -84], [0, -44], [10, -70], [-13, -120], [-25, -26], [-59, -34], [-41, 24], [-69, 22], [-50, 46], [-63, 33], [-21, 20], [-56, 92], [-6, 31], [-4, 39], [30, 56], [16, 4], [46, -2], [39, 9], [25, -30], [6, -65], [-10, -34], [-10, -22], [3, -16], [28, 23], [14, 145], [94, 72], [31, 42], [30, 66], [5, 18], [2, 25], [-20, 20], [-44, 27], [-142, -137], [-64, -36], [-42, -39], [-50, -71], [-9, -21], [-11, -46], [-5, -52], [-49, 24], [-76, 74], [-15, 28], [15, 38], [23, 31], [2, 107], [6, 38], [16, 30], [29, 33], [14, 7], [12, -14], [2, -25], [48, 2], [93, 94], [38, 3], [51, -22], [57, 13], [11, 10], [11, 22], [-42, 26], [-41, 13], [-115, 10], [-25, -10], [-34, -51], [-11, 13], [-7, 25], [-39, 18], [-19, -4], [-18, -24], [3, -37], [-10, -41], [-36, -39], [-25, -64], [1, -49], [-1, -26], [-9, -14], [-19, -16], [-60, 11], [-34, 52], [-13, 35], [-38, 39], [83, 47], [29, 27], [27, 61], [20, 39], [-14, 27], [-17, 0], [1, -43], [-18, -36], [-38, 17], [-57, -52], [-35, 14], [-56, -16], [-28, 28], [-6, 36], [10, 38], [-10, 63], [-16, 15], [-16, -4], [-7, 38], [-17, 66], [-8, 18], [-8, 31], [9, 7], [19, -8], [17, -20], [26, -3], [57, -43], [24, 10], [13, 10], [5, 36], [0, 34], [10, 0], [32, -43], [21, 4], [36, -12], [19, 5], [34, 16], [54, 48], [27, 49], [14, 7], [16, -6], [12, -15], [0, -34], [12, -32], [17, -26], [5, -31], [-3, -32], [-31, -43], [-6, -16], [11, -16], [12, 8], [18, 21], [10, 30], [2, 16], [1, 22], [-1, 27], [-25, 76], [-3, 18], [0, 35], [28, 32], [8, 25], [2, 48], [-15, 33], [-61, 77], [-101, 76], [-12, -8], [-8, -14], [10, -10], [13, -5], [90, -63], [24, -37], [15, -10], [19, -24], [-5, -36], [-91, -34], [-72, -76], [-55, -46], [-37, 17], [-18, 47], [-19, 60], [-28, 35], [-16, -4], [-13, 7], [-11, 18], [-21, -15], [-49, 42], [-13, 18], [35, 58], [39, -22], [9, 165], [-12, 37], [-51, 41], [-24, -5], [-34, 5], [-23, 19], [-26, 8], [-22, 11], [-29, 25], [-34, 14], [-47, 104], [-20, 55], [-11, 60], [72, 2], [42, 10], [10, 25], [-15, 47], [-20, 38], [15, 36], [21, 27], [22, -12], [56, -61], [9, -41], [39, -126], [10, -12], [4, -11], [82, -71], [11, 1], [-5, 59], [23, 81], [23, 26], [11, 0], [1, 13], [-22, 34], [11, 44], [-7, 1], [-19, -28], [-40, -140], [-24, -26], [-33, 64], [-18, 45], [-10, 17], [4, 71], [65, -14], [-22, 23], [-77, 42], [-19, 20], [-14, 7], [-25, 49], [-32, 41], [55, 74], [27, 52], [88, -27], [17, 16], [-15, 38], [-17, -12], [-27, 24], [-43, 72], [2, 36], [7, 67], [17, 14], [36, 14], [41, -22], [17, -17], [16, 8], [-16, 49], [-27, 19], [-29, 35], [3, 39], [9, 33], [8, 35], [5, 50], [-3, 39], [8, 17], [13, 8], [1, 15], [-26, -3], [-9, -49], [-3, -45], [-19, -35], [-7, -41], [-5, -48], [-10, -55], [-23, 21], [-13, 21], [-5, 15], [3, 28], [-6, 175], [-1, 147], [11, 114], [32, 45], [14, 13], [13, -6], [20, 1], [14, 16], [-45, 28], [-28, -16], [-20, -22], [-37, 17], [-7, 58], [-21, 51], [-4, 65], [2, 93], [51, -8], [42, -18], [110, 2], [90, -90], [40, 12], [-2, 18], [-30, 22], [-19, 51], [-11, 14], [-6, 31], [-1, 35], [-23, 129], [-9, -3], [-9, -44], [-18, -74], [-26, -36], [-40, -15], [-40, -8], [-34, 14], [-8, 31], [1, 35], [-15, 17], [-39, 16], [-11, 8], [-13, 32], [19, 49], [15, 29], [18, -6], [18, -13], [23, -38], [22, -7], [25, 30], [5, 21], [-16, 13], [-14, 5], [-23, 16], [-44, 58], [22, 59], [52, 68], [16, 16], [-14, 57], [16, 63], [-16, 51], [-29, 56], [-39, 12], [-8, -16], [-2, -23], [6, -17], [-3, -12], [-9, 0], [-50, 12], [-33, 37], [-54, 34], [-7, 26], [-6, 39], [19, 67], [-10, 1], [-35, -52], [-53, -27], [-40, -9], [-17, -20], [-7, -18], [11, -10], [22, -2], [17, -65], [-4, -25], [-8, -16], [-19, -4], [-38, 45], [-20, 51], [0, 40], [14, 54], [61, 74], [17, 31], [36, 34], [48, 78], [41, 43], [-20, 36], [-21, 53], [2, 75], [84, 30], [37, -13], [47, 3], [26, 18], [18, 3], [40, 21], [17, 29], [4, 22], [0, 20], [-4, 23], [-7, 62], [7, 21], [17, 24], [22, 8], [10, -2], [27, -22], [-6, -32], [-10, -39], [-22, -153], [-11, -35], [-17, -30], [12, -62], [-18, -44], [-76, -47], [-10, -2], [6, -17], [44, 4], [34, 10], [34, 39], [11, 60], [14, 117], [18, 17], [22, 3], [11, -27], [-4, -62], [0, -60], [-28, -176], [-35, -71], [-4, -19], [2, -22], [27, 3], [21, 38], [15, 49], [15, 68], [-2, 49], [5, 30], [6, 100], [11, 50], [-1, 71], [-19, 26], [-26, 16], [-7, 43], [14, 86], [50, -3], [48, 59], [31, 21], [18, -5], [62, -56], [12, -1], [-2, 21], [-9, 14], [-25, 19], [-45, 60], [-61, 10], [11, 78], [12, 72], [30, 9], [49, 24], [94, 107], [17, 81], [4, 91], [-45, 23], [-48, 60], [-39, 31], [-35, 40], [7, 59], [5, 97], [43, 21], [20, 132], [-29, 102], [7, 76], [38, 64], [6, 45], [11, 49], [33, 5], [1, 27], [-3, 49], [-22, 58], [-1, 80], [21, 94], [33, -6], [6, 4], [-23, 57], [-19, 63], [3, 25], [18, 21], [21, 12], [23, -32], [33, -103], [5, 27], [-13, 104], [-11, 130], [-35, -17], [-31, 9], [-12, 20], [-12, 30], [11, 35], [11, 27], [23, 33], [49, 12], [35, 42], [11, 87], [-11, -9], [-19, -76], [-32, -26], [-16, 4], [-19, 14], [-38, 67], [-21, 15], [-20, 2], [-17, -17], [-44, -117], [-19, -20], [-78, -9], [-28, 14], [-31, 17], [3, 29], [10, 31], [17, 16], [1, 17], [-24, 5], [-28, 32], [-13, 41], [-5, 73], [-25, 116], [-5, 83], [17, 59], [38, 232], [12, 119], [20, 104], [0, 68], [52, 63], [20, 38], [45, 211], [6, 114], [-71, 346], [-11, 66], [-3, 82], [17, 136], [2, 52], [-15, 75], [-40, 122], [-1, 62], [17, 64], [-16, 80], [8, 49], [9, 39], [63, -21], [29, 10], [15, 23], [12, 65], [6, 103], [4, 44], [5, 64], [31, 26], [11, 61], [26, 84], [26, 238], [27, 58], [27, 68], [-11, 100], [18, 46], [15, 34], [14, 61], [19, 58], [46, 83], [11, 101], [35, 176], [7, 112], [11, 76], [-3, 71], [21, 86], [20, 73], [7, 40], [46, 97], [8, 76], [-17, 52], [0, 81], [-13, 112], [30, 41], [12, 31], [39, 179], [-3, 70], [11, 87], [-25, 103], [-4, 231], [-14, 179], [-23, 188], [2, 105], [-15, 131], [0, 76], [11, 171], [74, 108], [15, 121], [9, 163], [-3, 119], [-8, 54], [-36, 87], [-10, 157], [7, 41], [31, 44], [21, 61], [11, 95], [23, 75], [9, 181], [18, 144], [10, 50], [30, 63], [5, 17], [5, 48], [-2, 113], [5, 70], [23, 136], [3, 63], [26, 141], [6, 101], [12, 53], [-5, 60], [8, 134], [-18, 76], [-4, 44], [22, 137], [16, 34], [24, 64], [11, 72], [2, 45], [-32, 227], [-4, 78], [7, 180], [11, 116], [-3, 93], [3, 48], [6, 60], [21, 72], [5, 52], [-7, 21], [-26, 27], [-21, 66], [-2, 65], [7, 47], [2, 67], [31, 13], [17, 37], [16, 70], [20, 169], [9, 209], [12, 125], [8, 63], [7, 130], [12, 85], [2, 78], [-2, 60], [-30, 304], [0, 112], [13, 174], [0, 244], [-2, 57], [-12, 54], [-3, 72], [-18, 127], [-17, 253], [0, 134], [-7, 114], [-16, 30]], [[30936, 21513], [-1, -171], [0, -169], [-1, -157], [0, -158], [0, -152], [-1, -156], [-2, -175], [-2, -130]], [[30929, 20245], [-41, 0], [-12, -13], [-66, -19], [-112, 29], [-28, 27], [-38, 58], [-13, -16], [-36, -25], [-36, -19], [-30, -2], [-28, 24], [-6, 12], [-6, 3], [-60, -34], [-66, 34], [-53, 21], [-84, 12], [-59, 43], [-109, -4], [-19, 14], [-7, 42], [6, 20], [23, 11], [6, 24], [24, -6], [30, -31], [9, 1], [20, 29], [30, 26], [11, 3], [54, -32], [22, 4], [32, 14], [5, 12], [5, 22], [9, 13], [28, 6], [27, -12], [3, -38], [-4, -41], [36, -11], [43, 1], [30, -15], [4, 25], [-48, 65], [-20, 40], [-26, 24], [-35, 12], [-28, 75], [1, 66], [-3, 64], [62, 36], [-14, 55], [21, 41], [25, 16], [24, -153], [18, -54], [-23, -11], [-47, 1], [27, -76], [43, -25], [37, -56], [1, -41], [20, -18], [50, -1], [34, 8], [16, 27], [19, 9], [33, -34], [57, -25], [15, -17], [11, -30], [0, -31], [3, -16], [17, 8], [23, 42], [12, 15], [14, 7], [8, 10], [1, 12], [-42, 31], [-220, 141], [-28, 56], [-18, 71], [1, 73], [16, 23], [39, 29], [72, 41], [84, 58], [10, 11], [-1, 37], [-10, 25], [-33, 18], [-35, 4], [-33, -1], [-33, -8], [-60, -39], [-34, 2], [-32, 21], [-24, 42], [-13, 57], [0, 36], [5, 33], [15, 35], [19, 14], [18, -2], [17, 8], [10, 12], [8, 16], [-3, 13], [-6, 12], [-27, 24], [-10, 23], [-23, 38], [12, 10], [41, 6], [28, -26], [26, -30], [16, 0], [15, 13], [33, 38], [28, 49], [25, 56], [21, 34], [23, 3], [69, -105], [24, -4], [80, 57], [9, -3], [28, -29], [8, -12]], [[31366, 20072], [-8, -22], [-17, -29], [-24, -23], [-23, -6], [-16, 12], [-9, 20], [-4, 21], [-5, 11], [-9, 2], [-11, 0], [-14, -8], [-29, -29], [-13, -8], [-9, -2], [-84, 22], [-8, 9], [-10, 19], [-11, 59], [-35, 52], [54, 29], [65, 0], [125, -22], [49, -5], [39, -50], [6, -30], [1, -22]], [[29507, 26874], [-21, -12], [-19, -3], [-20, 9], [-35, -1], [-34, 22], [-32, 32], [-9, 19], [3, 26], [24, 61], [22, 116], [15, 166], [-12, 63], [1, 26], [6, 31], [2, 33], [-1, 32], [3, 30], [24, 64], [4, 29], [0, 31], [11, 64], [-3, 21], [-9, 18], [7, 16], [85, -47], [56, -11], [3, -49], [11, -38], [7, -68], [8, -16], [-4, -49], [-26, -21], [2, -45], [15, -42], [-22, -16], [-23, -9], [-6, -11], [-17, -10], [-20, -23], [6, -21], [26, -48], [29, -33], [16, -49], [21, -51], [-10, -33], [-19, -46], [-31, -31], [-27, -19], [3, -76], [-10, -31]], [[29312, 23532], [2, -85], [-4, -85], [-11, -104], [2, -21], [12, -5], [4, -13], [-4, -55], [-7, -42], [-13, -35], [-7, -41], [-7, -9], [-30, -7], [-17, 4], [-13, 47], [-4, 29], [1, 38], [-16, 51], [-1, 19], [6, 34], [14, 16], [2, 52], [6, 15], [15, 21], [2, 9], [-1, 8], [-5, 1], [-61, -64], [-5, -18], [-3, -24], [-1, -84], [-10, -49], [-10, -9], [-28, -2], [-37, 5], [-42, 44], [-27, -12], [-6, 54], [14, 44], [51, -4], [8, 77], [-16, 18], [-18, 32], [-10, 28], [9, 21], [30, 31], [15, 3], [15, -17], [36, 13], [-2, 49], [-32, 22], [7, 37], [41, 35], [24, 36], [2, 41], [-10, 40], [3, 16], [20, 34], [29, 16], [13, -2], [26, -24], [24, -3], [5, -7], [5, -26], [15, -193]], [[29025, 23753], [-32, -1], [-7, 103], [36, 149], [3, 56], [-12, 43], [-5, 35], [3, 14], [47, 30], [14, -32], [18, -83], [33, -119], [-1, -114], [-18, -28], [-58, -29], [-21, -24]], [[29337, 21357], [5, -5], [10, 1], [16, -9], [58, -11], [52, -27], [27, -26], [35, -7], [29, -33], [13, -8], [15, -2], [39, -60], [2, -7], [44, -47], [2, -7], [-25, -3], [-51, 22], [-25, 1], [-19, 7], [-4, 4], [-4, 27], [-5, 13], [-49, 63], [-21, 14], [-35, 12], [-40, -8], [-28, 8], [-9, -3], [-40, 50], [-40, 42], [-17, 50], [-25, 38], [-1, 11], [12, 9], [27, -22], [27, -37], [15, -14], [10, -36]], [[29287, 23852], [-6, -14], [-34, 9], [-59, -15], [-25, 52], [-11, 83], [-8, 18], [-14, 47], [-8, 31], [-15, 48], [-6, 51], [-3, 16], [13, 30], [62, 29], [22, 48], [19, -6], [-5, -98], [11, -33], [22, -28], [3, -11], [4, -35], [11, -53], [13, -26], [4, -15], [0, -13], [-5, -19], [15, -96]], [[29743, 21035], [8, -46], [4, -9], [20, 7], [34, 4], [57, -17], [6, -6], [24, -51], [19, -22], [28, -47], [-28, -32], [-17, -45], [-1, -23], [-11, -13], [-17, -14], [-26, -27], [-31, -3], [-31, -14], [-15, -12], [-8, -1], [-10, 7], [-11, 13], [-4, 15], [22, 14], [28, 50], [5, 52], [-30, 9], [-18, -7], [-14, 0], [-15, 16], [-9, -24], [-4, -24], [4, -36], [-3, -11], [-10, -7], [-26, 14], [-26, 24], [-2, 14], [6, 48], [-1, 25], [-5, 37], [-3, 3], [-10, 0], [-31, -7], [-31, 46], [-16, 49], [-57, 14], [44, 69], [67, 10], [22, -35], [74, -24], [-4, 37], [1, 13], [10, 16], [6, 2], [9, -12], [14, -5], [7, -11], [6, -23]], [[29216, 22102], [11, -112], [9, -16], [28, -8], [31, -57], [1, -16], [-37, -96], [-8, -69], [-43, 5], [-19, 68], [-27, 66], [-10, 77], [-15, 66], [27, 38], [26, -8], [1, 50], [25, 12]], [[30638, 20207], [223, -57], [68, 35], [55, -1], [16, -48], [-55, -49], [-5, -16], [8, -13], [57, -8], [14, -16], [13, -20], [-11, -31], [-1, -14], [6, -14], [42, -46], [18, -24], [9, -23], [3, -40], [-1, -32], [-9, -4], [-21, 10], [-20, 18], [-18, 46], [-12, 10], [-36, 9], [-35, 22], [-28, -1], [-25, 10], [-23, -9], [-8, 16], [-10, 30], [0, 14], [12, 48], [0, 13], [-7, 1], [-26, -10], [-11, 7], [-29, 35], [-11, 7], [-29, 3], [-17, -62], [-1, -16], [17, -39], [33, -61], [-17, -1], [-47, 19], [-13, 11], [-14, 31], [-28, 18], [-10, 11], [-3, 13], [-1, 40], [-6, 6], [-40, -11], [-8, 10], [-3, 17], [-6, 9], [-26, 16], [-2, 9], [11, 12], [7, 28], [10, 104], [51, -22]], [[30169, 20718], [62, -46], [40, 0], [0, -28], [5, -49], [-6, -20], [-16, -20], [-9, -29], [-7, -5], [-45, 35], [-47, 48], [-24, -9], [-31, 12], [-25, -3], [-16, -27], [-36, -14], [-7, 54], [-33, 51], [-33, 41], [18, 63], [22, 10], [20, 21], [81, -22], [42, -19], [45, -44]], [[29518, 26270], [-14, -25], [-22, -4], [-33, -29], [-4, -25], [-1, -30], [23, -37], [11, -43], [14, -64], [10, -61], [-1, -19], [2, -31], [17, -50], [1, -22], [-1, -22], [-7, -41], [-5, -5], [-17, -4], [-1, -25], [-4, -8], [-46, -3], [-23, 12], [2, 74], [-29, 30], [-20, 49], [-23, 85], [-19, 27], [-22, 67], [-33, 58], [38, 36], [-6, 64], [22, 22], [33, 23], [25, -18], [22, 6], [10, 16], [-3, 65], [7, 52], [25, 26], [26, 3], [10, -29], [13, -28], [32, -23], [-1, -29], [-8, -40]], [[29726, 26048], [-68, -46], [-33, 15], [-13, 34], [-7, 29], [-7, 48], [12, 26], [24, 37], [10, 24], [4, 28], [-2, 27], [4, 25], [14, 9], [50, -28], [52, -43], [18, -29], [3, -23], [-22, -52], [-15, -42], [-24, -39]], [[29155, 25984], [-7, -9], [-9, 3], [-7, 18], [-5, 31], [10, 12], [7, 0], [9, -17], [4, -26], [-2, -12]], [[29082, 22649], [-7, -53], [-23, 5], [-7, 13], [-4, 34], [-7, 16], [9, 34], [7, 37], [-2, 29], [34, -2], [41, -7], [11, -8], [-12, -25], [-12, -16], [-25, -9], [-3, -48]], [[29137, 23711], [-3, -46], [-41, -88], [-35, -52], [-32, -41], [-21, 0], [-17, 20], [19, 33], [24, 32], [-8, 42], [-7, 13], [-10, 4], [-17, 22], [5, 33], [10, 15], [14, 12], [12, -7], [54, 23], [17, 18], [32, 4], [4, -37]], [[29135, 24286], [-20, -7], [-3, 19], [-18, 31], [16, 21], [31, 21], [24, -2], [22, -17], [3, -19], [-38, -25], [-9, -14], [-8, -8]], [[29258, 26723], [-39, -10], [-9, 17], [0, 15], [7, 12], [20, 7], [13, -9], [7, -15], [2, -12], [-1, -5]], [[29546, 26024], [-9, -7], [-8, 1], [-8, 20], [-3, 26], [-18, 39], [-5, 18], [0, 22], [10, 32], [16, 9], [10, -2], [13, -37], [3, -40], [4, -42], [-5, -39]], [[29289, 22305], [-1, -48], [-8, -15], [-8, -5], [-20, 15], [-11, 1], [-18, -25], [-16, -13], [-23, 3], [-31, 17], [-27, -72], [-13, -25], [-27, -33], [-3, 39], [17, 60], [8, 40], [16, 60], [31, -22], [44, 22], [41, 41], [34, 1], [12, -23], [3, -18]], [[29151, 22870], [-54, -46], [-16, 19], [-39, 0], [10, 50], [4, 37], [6, 14], [2, 32], [12, 58], [32, -19], [24, -6], [33, -19], [36, -12], [10, -51], [-34, -23], [-26, -34]], [[29497, 26597], [6, -29], [-13, -4], [-19, 5], [-10, -23], [-5, -4], [-45, 20], [-7, 9], [1, 29], [48, 3], [31, 19], [4, -3], [9, -22]], [[29405, 21928], [-9, -6], [-30, 14], [-16, 12], [-24, 30], [-3, 31], [-11, 38], [7, 0], [25, -15], [10, -11], [13, -24], [40, -34], [5, -10], [-1, -13], [-6, -12]], [[29357, 25523], [-15, -26], [-27, -12], [-27, 20], [-32, -9], [-3, 43], [12, 36], [24, 43], [18, 58], [-2, 81], [14, 18], [8, 29], [31, 18], [7, -61], [-8, -107], [20, -64], [3, -21], [-4, -24], [-19, -22]], [[31229, 19648], [-10, -1], [-25, 11], [-36, 4], [-5, 5], [0, 8], [4, 9], [20, 7], [60, -6], [8, -4], [2, -7], [-10, -19], [-8, -7]], [[31535, 20029], [-22, -25], [-16, 1], [-6, 9], [-1, 12], [3, 12], [7, 11], [16, 14], [5, 2], [24, -14], [-10, -22]], [[30280, 20237], [13, -37], [4, -6], [35, -15], [15, 9], [37, 4], [23, 14], [32, 7], [38, -90], [-4, -28], [-30, -30], [-20, -6], [-19, 9], [2, 15], [-4, 13], [-13, 17], [-12, -1], [-19, -13], [-10, 2], [-19, 14], [-35, 10], [-7, 13], [0, 19], [-7, 9], [-36, 31], [-23, 25], [-20, 4], [-7, -3], [-7, -13], [-17, -11], [-5, 2], [-6, 9], [-3, 14], [7, 29], [11, 3], [49, -6], [30, -13], [27, 0]], [[31308, 19713], [-10, -4], [-7, 10], [-12, 8], [-46, 16], [-1, 10], [5, 14], [9, 12], [18, 13], [14, 32], [7, -3], [6, -13], [11, -44], [14, -32], [-2, -11], [-6, -8]], [[56349, 58133], [-11, 4], [-25, 16], [-29, 13], [-36, 11], [-35, -26], [-37, -33], [-12, -25], [-10, -14], [-16, 2], [-15, -4], [-9, -24], [-13, -26], [-54, -54], [-11, -19], [-7, -20], [0, -21], [5, -44], [0, -55], [-12, -44], [-13, -30], [-16, -11], [-14, -6], [-8, -19], [-28, -100], [-12, -19], [-25, 3], [-71, -150], [-7, -45], [-25, -62], [-33, -70], [-29, -34], [-3, -13], [-8, -13], [-18, -16], [-62, -85], [-75, 4], [-33, -34], [-32, -15], [-47, -16], [-14, 2], [-61, -7], [-70, 2], [-27, -12], [-26, -32], [-19, -29], [-3, -9], [3, -12], [0, -9], [49, -70], [12, -34], [-12, -33], [-6, -5], [-1, -2], [-8, -26], [-29, -79], [-44, -93], [-22, -26], [-10, -17], [-11, -62], [-8, -9], [-30, -8], [-60, -6], [-83, -20], [-50, -7], [-31, 5], [-43, -42], [-16, -11], [-10, -4], [-43, -41], [-36, -64], [-12, -12], [-51, -27], [-20, -44], [-9, -4], [-32, 58], [-23, 53], [-10, 53], [-2, 17], [-6, -3], [-17, -23], [-16, -27], [-7, -51], [-52, -35], [-45, -30], [-20, -37], [-31, -18], [-40, 7], [-31, 16], [-31, 5]], [[54299, 56177], [15, 46], [6, 35], [1, 42], [-2, 29], [-18, 14], [-12, 23], [-26, 133], [-27, 138], [-38, 135], [-41, 86], [-30, 53], [-9, 7], [-15, 16], [-11, 16], [-55, 92], [-56, 102], [-15, 47], [-28, 70], [-32, 72], [-16, 33], [-8, 59], [22, 54], [23, 67], [29, 45], [37, 3], [61, -18], [67, -7], [65, 14], [17, 10], [17, -1], [35, -15], [61, 3], [32, 27], [-34, 47], [-37, 74], [-34, 81], [-21, 73], [-19, 95], [-18, 116], [-11, 152], [2, 85], [6, 61], [18, 100], [-12, 58], [2, 47], [-1, 70], [-6, 36], [-24, 115], [-5, 13], [-21, 80], [-9, 134], [-24, 89], [-39, 43], [-21, 52], [-8, 91], [-15, 25], [-61, 32], [-50, 0]], [[54495, 53150], [-13, 54], [-8, 63], [-4, 73], [2, 19], [-5, 22], [0, 4], [-7, 55], [7, 38], [-5, 40], [-16, 39], [-14, 30], [-8, 27], [-7, 12], [-15, 4], [-21, 14], [-27, 59], [-27, 57], [-34, 74], [-27, 63], [-33, 78], [-31, 72], [-19, 69], [-7, 40], [9, 4], [13, 1], [6, 7], [0, 19], [-14, 54], [-6, 70], [-12, 42], [-35, 66], [-35, 49], [-11, 26], [-6, 36], [-13, 231], [-6, 65], [-10, 29], [-8, 13], [-3, 16], [1, 41], [5, 37], [-1, 14], [10, 32], [0, 213], [-5, 11], [-6, 18], [-10, -1], [-11, 2], [-11, 31], [-9, 39], [3, 28], [9, 23], [11, 20], [13, 17], [39, 34], [11, 17], [7, 21], [4, 29], [23, 109], [33, 109], [15, 23], [14, 72], [20, 89], [8, 41], [6, 41], [10, 33], [37, 54], [28, 96]], [[43008, 61604], [-27, -11], [-12, 5], [-3, 46], [-6, 30], [1, 14], [63, 59], [21, -10], [16, -47], [-11, -26], [-42, -60]], [[43487, 60488], [-17, -53], [-36, 4], [-19, 22], [-22, 66], [0, 52], [8, 44], [-1, 39], [3, 10], [11, -6], [2, -26], [34, -64], [12, -13], [25, -75]], [[43086, 61530], [-22, -13], [-14, 1], [-21, 21], [7, 22], [22, 24], [15, 5], [12, -43], [1, -17]], [[43634, 61196], [23, -11], [8, 4], [15, -2], [16, -30], [3, -33], [-8, -40], [-30, -33], [-18, 4], [-21, 30], [12, 60], [0, 51]], [[43247, 60400], [-21, -22], [-15, 10], [-15, 23], [-7, 33], [6, 28], [29, 33], [17, -11], [10, -51], [-4, -43]], [[43309, 61418], [11, -17], [4, -12], [-17, -7], [-42, 22], [-11, -13], [-11, -48], [-21, 72], [2, 27], [4, 8], [30, -19], [51, -13]], [[43642, 61439], [-9, -30], [-11, 44], [-6, 10], [-3, 62], [16, 19], [8, 1], [0, -64], [5, -42]], [[43560, 60562], [-8, -2], [-11, 26], [2, 36], [-1, 9], [10, 39], [20, -4], [6, -28], [0, -59], [-18, -17]], [[13151, 83022], [26, -34], [61, 22], [11, -4], [12, -13], [12, -28], [14, -42], [3, -46], [-5, -17], [-11, -18], [-98, -73], [-2, -7], [2, -7], [9, -7], [19, 1], [77, 18], [5, 13], [5, 57], [11, 31], [0, 23], [-7, 55], [1, 22], [54, 5], [33, 20], [35, 38], [8, -1], [-5, -68], [-5, -21], [-33, -84], [-19, -73], [-9, -73], [-2, -120], [-8, -41], [-15, -25], [-93, -43], [-48, 2], [-43, 40], [-20, 27], [15, 33], [10, 2], [30, -7], [24, -12], [10, 0], [-2, 7], [-66, 63], [-49, 28], [-14, 32], [-1, 24], [-4, 14], [-38, 86], [-8, 34], [-5, 48], [0, 49], [10, 80], [4, 8], [16, -1], [27, -9], [66, -8]], [[13402, 82485], [28, -53], [8, -48], [-3, -56], [-45, -22], [-23, 17], [-11, -3], [-15, -17], [19, -7], [26, -28], [23, -36], [32, -6], [44, -25], [-33, -45], [-5, -26], [41, -72], [4, -18], [13, -4], [30, 6], [4, -6], [0, -15], [-19, -42], [2, -8], [17, -7], [32, 0], [8, -41], [-30, -38], [-55, 49], [-25, 48], [-14, 45], [-17, 25], [-52, 57], [-78, 121], [-21, 18], [-20, 48], [-6, 23], [1, 15], [7, 9], [24, 5], [0, 24], [-90, 42], [-10, 8], [-12, 30], [7, 4], [49, -5], [53, 14], [33, 11], [13, 13], [27, 17], [11, -1], [28, -20]], [[14667, 81013], [138, -72], [138, -35], [102, -42], [62, -13], [22, -9], [15, -15], [17, -36], [29, -85], [23, -55], [46, -94], [37, -67], [8, -27], [-8, -8], [1, -16], [28, -65], [52, -59], [41, -28], [86, -45], [53, -45], [16, -30], [23, -30], [9, -21], [19, -76], [35, -73], [36, -139], [7, 11], [4, 42], [4, 9], [8, 5], [7, -17], [6, -36], [23, -87], [-7, -26], [-7, -2], [-31, 11], [-10, -15], [-15, -32], [-10, -13], [-6, 6], [-90, 31], [-55, 29], [-72, 45], [-87, 47], [-50, 33], [-41, 33], [-29, 29], [-5, 24], [1, 11], [56, 77], [23, 42], [9, 31], [5, 34], [-3, 41], [-3, -3], [-5, -40], [-8, -34], [-10, -28], [-6, -9], [-67, -14], [-54, 4], [-27, -33], [-8, -4], [-15, 11], [-33, 44], [-47, 36], [5, 9], [31, 19], [16, 26], [-3, 5], [-11, -2], [-10, 6], [-19, 34], [-10, 10], [-23, -16], [-10, -1], [-9, 23], [13, 53], [1, 13], [-24, -20], [-8, 7], [-7, 17], [-7, 7], [-19, -3], [-21, 15], [-7, -6], [-3, -23], [-7, -6], [-31, 39], [-8, 1], [-15, -29], [-5, -2], [-9, 13], [-4, 71], [2, 21], [4, 7], [28, 16], [79, 18], [7, 13], [-60, -7], [-15, 10], [-17, 24], [-17, 0], [-9, 8], [-10, 18], [-25, 64], [-17, 17], [-29, 10], [-15, 12], [-6, -5], [-6, -19], [-9, -11], [-19, -7], [-19, 5], [-14, 18], [-8, 22], [-4, 25], [8, 33], [0, 14], [-3, 15], [-7, 12], [-9, 10], [-5, -5], [-1, -20], [-5, -14], [-17, -11], [-13, 19], [-9, 27], [-11, 19], [-57, 0], [-27, -25], [-13, -2], [-13, 6], [-2, 13], [12, 35], [-3, 47], [-3, 12], [-27, 7], [-4, 12], [15, 57], [9, 11], [12, 4], [53, 4], [17, -8], [26, -34], [-1, 13], [-9, 39], [-2, 24], [18, 26], [-17, 8], [-63, 6], [1, -17], [5, -24], [-37, -21], [-28, -4], [-26, 4], [-21, 12], [-37, 51], [-23, 51], [1, 27], [13, 29], [16, 19], [39, 18], [51, 1], [57, -23], [143, -104]], [[10833, 91964], [39, -9], [126, -19], [119, 11], [221, -61], [137, -114], [111, -57], [45, -38], [72, -34], [169, -75], [53, -7], [98, -36], [61, 5], [104, -9], [71, -28], [140, -79], [29, -7], [8, 6], [-49, 78], [-8, 7], [-56, 29], [-67, 14], [-5, 6], [-12, 27], [4, 11], [14, 5], [50, -1], [29, 5], [4, 11], [-21, 2], [-25, 11], [-30, 18], [-17, 17], [61, 115], [21, -11], [32, 26], [58, -17], [10, 10], [7, 58], [9, 14], [16, 11], [80, 10], [99, -10], [11, 5], [-10, 39], [-1, 16], [6, 35], [6, 18], [12, 10], [46, -8], [15, -17], [15, -30], [16, -17], [49, -17], [6, -11], [-19, -45], [-19, -24], [-41, -62], [-3, -16], [63, 28], [71, 38], [60, 22], [51, 4], [36, 12], [22, 21], [16, 22], [31, 70], [21, 12], [87, -4], [21, 2], [13, 7], [-2, 8], [-19, 11], [-25, 3], [0, 5], [9, 12], [14, 6], [42, 8], [29, -25], [19, -2], [63, 28], [98, 74], [39, 21], [34, 3], [29, -13], [22, 4], [29, 41], [12, 23], [17, 19], [73, 43], [46, 10], [29, -8], [33, -18], [28, -7], [37, 5], [27, -2], [13, 8], [47, 50], [15, 0], [14, -14], [24, -36], [0, -18], [-31, -44], [-225, -126], [-69, -54], [-34, -20], [-36, -11], [-69, -9], [-27, -11], [-46, -10], [-109, -17], [-21, -9], [-14, -10], [-39, -66], [-18, -22], [-38, -33], [-41, -20], [-58, -7], [-36, -31], [-42, -60], [-33, -42], [-39, -36], [-42, -46], [-11, -25], [13, -32], [7, -10], [42, -18], [16, 4], [-15, 17], [-35, 25], [-5, 9], [9, 7], [166, -19], [36, 19], [12, 16], [-2, 9], [-45, 3], [-10, 15], [-7, 29], [-2, 23], [4, 17], [10, 22], [49, 35], [52, 15], [40, 20], [22, 19], [60, 32], [23, 27], [13, 20], [2, 10], [-11, 7], [9, 18], [43, 16], [20, 1], [61, -15], [11, -12], [-6, -31], [8, 2], [24, 39], [13, 13], [14, 3], [13, -5], [14, -13], [8, -38], [1, -63], [3, -25], [16, 43], [11, 20], [59, 93], [40, 51], [46, 50], [65, 37], [152, 61], [85, 17], [43, 15], [21, 13], [14, 17], [24, 19], [4, -2], [-9, -39], [-6, -12], [-56, -24], [-5, -19], [6, -29], [9, -19], [13, -9], [23, 6], [33, 23], [41, 34], [89, 86], [8, 16], [22, 69], [51, 31], [92, 35], [22, 22], [-80, 19], [-17, 13], [-3, 8], [15, 19], [-36, 20], [-14, 12], [1, 36], [11, 25], [24, 24], [14, 5], [36, -15], [30, -18], [104, -85], [42, -42], [25, -33], [58, -102], [26, -59], [21, -61], [21, -44], [20, -27], [100, -107], [52, -45], [44, -28], [49, -22], [57, -16], [38, -2], [60, 46], [1, 29], [-26, 50], [-27, 35], [4, 21], [35, 40], [-3, 14], [8, 42], [24, -8], [10, 1], [13, 15], [17, 29], [22, 24], [27, 19], [7, 12], [-26, 9], [-16, 0], [-12, 4], [-8, 8], [11, 9], [57, 22], [11, 22], [19, 14], [23, 5], [15, -6], [16, -17], [1, -28], [-7, -46], [-2, -37], [18, -87], [16, -19], [63, -25], [-4, -22], [-72, -91], [-16, -23], [-7, -17], [2, -14], [13, -12], [24, -9], [63, -3], [18, 8], [122, 3], [22, 6], [19, 18], [28, 44], [31, 14], [10, 12], [19, 52], [10, 61], [9, 26], [14, 16], [19, 5], [48, -6], [22, 5], [88, -5], [88, 4], [92, -11], [58, -12], [54, -20], [104, -46], [41, -26], [145, -113], [43, -23], [79, -22], [274, -49], [34, -13], [72, -51], [50, -30], [59, -29], [73, -25], [144, -37], [24, -13], [26, -3], [30, 5], [132, -22], [35, 1], [25, -4], [31, -15], [45, -6], [-2, 11], [-51, 59], [2, 9], [21, 1], [64, -10], [15, 17], [21, -1], [49, -8], [53, -18], [56, -28], [68, -24], [104, -60], [57, -50], [55, -62], [29, -43], [6, -24], [11, -12], [17, 0], [7, -9], [-16, -53], [-9, -14], [-12, -9], [-49, -11], [-136, 13], [-25, -43], [-76, -37], [-13, -16], [-4, -11], [6, -38], [-10, -12], [-62, -43], [-2, -12], [40, -18], [43, -30], [34, -7], [43, 4], [54, -11], [65, -25], [45, -12], [25, 2], [35, -4], [44, -12], [59, -4], [129, 1], [39, -8], [54, -4], [105, 1], [19, 1], [33, 21], [22, 6], [38, 1], [108, 14], [38, 0], [34, 11], [45, 23], [27, 4], [10, -14], [19, -6], [27, 2], [52, 23], [120, 71], [43, 0], [32, 22], [8, 0], [8, -9], [30, -52], [9, -8], [20, -4], [20, -27], [20, -39], [16, -11], [113, -2], [39, -11], [12, -11], [13, -31], [7, -60], [5, -22], [16, -33], [11, -9], [10, 9], [28, 84], [10, 13], [18, -4], [6, -5], [28, -62], [40, -46], [100, -84], [16, -31], [6, -23], [-6, -21], [-17, -18], [-27, -15], [-37, -11], [-34, 4], [-32, 19], [-10, 1], [11, -17], [66, -70], [17, -28], [16, -18], [14, -10], [13, -15], [12, -21], [55, -56], [16, -27], [62, -84], [30, -33], [23, -19], [8, -1], [-5, 15], [-79, 111], [-41, 70], [-5, 17], [-3, 26], [-2, 85], [6, 13], [28, 11], [35, -39], [13, -5], [9, 2], [5, 10], [20, -9], [36, -29], [12, 0], [-27, 54], [-19, 27], [-7, 19], [18, 28], [-10, 14], [-45, 41], [-24, 42], [-21, 65], [-2, 25], [3, 26], [-3, 22], [-29, 43], [-31, 30], [-24, 35], [-5, 19], [3, 50], [19, 21], [36, 29], [9, 30], [-16, 31], [-3, 14], [10, -2], [70, 15], [18, -5], [26, 6], [35, 19], [28, 9], [36, -2], [20, 5], [24, 8], [13, 9], [22, 36], [12, 6], [37, -4], [21, -8], [9, 3], [-1, 50], [7, 18], [37, 37], [39, 4], [25, 10], [30, 20], [21, 19], [21, 29], [9, 38], [-7, 11], [-44, 15], [-26, -8], [-59, -27], [-61, -34], [-24, -33], [-6, -41], [-12, -18], [-47, 17], [-21, 0], [-25, -7], [-27, -16], [-29, -25], [-42, -4], [-56, 15], [-33, 5], [-34, -26], [2, -20], [15, -28], [-15, -17], [-82, -6], [-21, 4], [-44, -12], [-17, 3], [-12, 13], [-89, 58], [-9, 11], [22, 47], [82, 126], [9, 8], [152, 22], [91, 23], [169, 69], [32, 6], [108, 46], [45, 12], [41, -8], [60, -24], [32, -21], [22, -26], [18, -37], [23, -81], [8, -69], [14, -26], [51, -48], [26, -18], [16, -6], [14, 11], [9, 2], [7, -4], [7, -31], [9, -3], [30, 4], [32, -12], [5, -10], [-7, -37], [9, -16], [40, -34], [37, -12], [44, -6], [81, 6], [68, 16], [51, 26], [42, -29], [84, -71], [50, -51], [41, -23], [84, -29], [19, -15], [31, -2], [43, 12], [48, -5], [54, -21], [37, -9], [127, 40], [20, 2], [47, 19], [31, 6], [36, 0], [27, 5], [17, 13], [68, -1], [122, -14], [84, -17], [49, -23], [41, -12], [32, -3], [31, 4], [30, 11], [32, 20], [68, 11], [11, 5], [-1, 11], [-14, 17], [-39, 32], [-27, 31], [-5, 20], [1, 24], [8, 14], [16, 4], [26, -15], [34, -34], [98, -126], [24, -17], [13, -17], [90, -45], [42, -9], [50, 29], [22, 17], [11, 17], [0, 17], [4, 24], [-5, 14], [-13, 20], [-36, 26], [-59, 34], [-53, 10], [-48, -14], [-55, -29], [-23, 12], [-68, 81], [-17, 31], [0, 8], [31, -9], [2, 9], [-19, 40], [-12, 13], [-39, 62], [-5, 18], [24, 5], [11, 7], [15, -1], [70, -37], [35, 17], [83, 23], [-33, 36], [-7, 35], [3, 8], [27, 5], [53, -29], [25, -4], [19, 11], [19, 1], [21, -10], [19, -15], [37, -43], [17, -26], [20, -39], [7, -6], [97, -3], [54, 35], [-1, -12], [-12, -27], [-68, -105], [1, -13], [36, 6], [17, 8], [10, 13], [9, 29], [6, 9], [101, 49], [29, 8], [-18, -53], [-37, -188], [-8, -65], [-8, -23], [-40, -72], [1, -25], [43, -61], [8, -17], [4, -50], [8, -9], [36, -1], [37, 16], [44, 11], [7, -11], [-24, -60], [1, -6], [42, 16], [19, 2], [8, -3], [31, -31], [3, -23], [0, -35], [-3, -24], [-11, -14], [-13, -6], [-16, -4], [-14, 2], [-44, -5], [-26, 6], [-25, 19], [-18, 5], [-21, -15], [-34, 3], [-37, 41], [-15, -4], [-5, -6], [0, -9], [17, -27], [132, -143], [20, -29], [4, -43], [3, 0], [12, 43], [-8, 20], [-67, 83], [-9, 31], [3, 8], [18, 9], [96, -21], [38, 4], [25, 15], [13, 18], [9, 99], [17, 63], [-10, 57], [-26, 90], [-21, 54], [-47, 53], [-5, 20], [53, 163], [9, 14], [12, 6], [42, 2], [30, 14], [47, -19], [26, -5], [33, 17], [72, 69], [28, 21], [36, 40], [43, 59], [48, 43], [76, 40], [47, 32], [10, 12], [-44, 2], [-10, 6], [-9, 30], [4, 57], [-1, 31], [-5, 28], [-9, 25], [-14, 23], [-13, 13], [-11, 4], [-8, -2], [-4, -8], [-12, -54], [-15, -39], [-20, -21], [-43, -14], [-72, -10], [-30, 19], [-4, 16], [10, 62], [25, 27], [66, 53], [42, 42], [1, 7], [-39, 1], [-9, 8], [-9, 52], [3, 20], [6, 22], [27, 16], [84, 20], [65, 23], [2, -8], [-52, -70], [-5, -16], [20, -16], [50, 41], [32, 34], [6, 11], [-30, 4], [-1, 14], [5, 26], [-2, 17], [-33, 22], [-40, -12], [-34, -23], [-28, -7], [-41, 0], [-30, 5], [-18, 11], [-23, 25], [-26, 38], [-33, 38], [-12, 4], [-10, -4], [-22, -37], [-9, -4], [-130, 52], [-56, 28], [-26, 22], [-34, 13], [-39, 4], [-32, 11], [-24, 16], [-19, 23], [-15, 31], [-27, 38], [-62, 77], [-16, 49], [-2, 19], [4, 49], [58, 82], [10, 24], [20, 17], [29, 11], [21, 4], [47, -11], [-28, 26], [-3, 13], [29, 45], [-6, 2], [-78, -34], [-20, 2], [-28, 21], [-52, 75], [-1, 47], [17, 65], [5, 38], [-15, 33], [6, 10], [16, 9], [7, 10], [-7, 36], [11, 20], [38, 38], [36, 33], [22, 10], [19, -2], [19, -10], [21, -19], [34, -19], [26, -5], [19, 10], [33, 71], [11, 18], [-11, 8], [-63, 0], [-28, 5], [-16, 7], [-11, 27], [9, 15], [62, 50], [29, 53], [86, 73], [87, 34], [43, 11], [34, 3], [15, -5], [18, -36], [4, -39], [47, -48], [38, -4], [24, 7], [76, -2], [18, -14], [-1, -15], [-9, -24], [6, -21], [51, -40], [47, -28], [42, -34], [63, -72], [13, -21], [10, -22], [16, -80], [2, -31], [-6, -88], [-5, -17], [-16, -20], [5, -8], [50, -23], [39, -46], [21, -15], [49, -24], [9, -9], [12, -16], [28, -66], [46, -59], [3, -13], [-10, -28], [7, -9], [18, -10], [16, 5], [14, 21], [15, 6], [17, -9], [12, -16], [17, -38], [25, -31], [-2, -10], [-12, -8], [-68, -8], [-37, 6], [-35, 15], [-25, 16], [-22, 24], [-9, -2], [-12, -20], [-25, -29], [-16, -27], [18, -12], [89, 1], [19, -8], [23, -19], [-26, -31], [-60, -53], [-129, -103], [-38, -26], [9, -8], [14, -2], [45, 5], [41, 14], [51, -6], [22, -12], [-8, -11], [14, -17], [83, -42], [52, 8], [53, 40], [41, 20], [51, -2], [14, -5], [-5, -10], [-38, -22], [-34, -25], [-3, -7], [42, 10], [94, -16], [45, -4], [34, 4], [31, -6], [29, -17], [9, -11], [-27, -6], [-25, 0], [-22, -11], [-18, -20], [-13, -26], [-8, -33], [-19, -13], [-31, 6], [-13, 9], [7, 13], [-9, 2], [-25, -10], [-20, 0], [-5, -9], [137, -104], [44, -91], [30, -38], [3, -10], [-20, -26], [-1, -19], [9, -56], [-4, -45], [-14, -78], [13, -25], [29, -22], [18, -27], [12, -10], [9, -22], [10, -14], [12, -6], [8, 8], [5, 20], [11, 19], [31, 34], [30, 54], [5, 17], [-5, 42], [4, 18], [28, 64], [9, 44], [8, 69], [15, 48], [32, 40], [56, 82], [20, 16], [22, 8], [40, -2], [28, -26], [39, -49], [49, -44], [90, -60], [25, -23], [51, -59], [21, -59], [15, -84], [13, -50], [10, -17], [5, -25], [-1, -34], [-4, -26], [-7, -19], [-11, -11], [-27, -4], [-34, 6], [-9, 8], [-18, 40], [-7, 2], [-31, -29], [-4, -16], [12, -54], [-2, -102], [3, -23], [33, -106], [55, -81], [138, -155], [8, -18], [15, -64], [7, -13], [9, -8], [11, -2], [15, 6], [51, 48], [44, 51], [31, 27], [18, 2], [18, 9], [21, 17], [13, 18], [7, 19], [9, 77], [8, 37], [21, 50], [8, 14], [107, 127], [9, 16], [45, 147], [17, 67], [2, 41], [-6, 36], [3, 30], [12, 24], [13, 16], [22, 17], [13, 24], [7, 2], [19, 0], [24, -16], [17, -3], [113, 19], [0, 9], [-66, 31], [1, 16], [5, 21], [21, 24], [26, 7], [6, 15], [0, 19], [9, 31], [-8, 11], [-62, 42], [-36, -2], [-9, 5], [-31, 35], [-11, 50], [-1, 20], [4, 33], [4, 9], [-2, 15], [-8, 20], [0, 19], [6, 16], [-4, 19], [-14, 22], [-6, 18], [15, 56], [1, 17], [-15, 24], [-10, 9], [8, 6], [25, 2], [31, -7], [36, -18], [43, 0], [52, 17], [52, 9], [91, -4], [21, -5], [90, -52], [70, -26], [32, 3], [156, -11], [68, 6], [35, -3], [68, -28], [-4, -24], [-30, -39], [-38, -8], [-34, -14], [32, -21], [92, -28], [22, -44], [6, -21], [-11, -18], [6, -10], [21, 0], [55, 16], [61, -10], [89, -35], [10, -7], [15, -27], [-2, -11], [-78, -67], [-41, -27], [-54, -27], [-1, -15], [75, -3], [58, -7], [27, -9], [14, -13], [19, -27], [3, -22], [-2, -29], [-6, -20], [-69, -59], [-31, -18], [-53, -21], [-23, -17], [-26, 3], [-28, 20], [-28, 5], [-52, -17], [-29, 1], [-13, -6], [-2, -13], [25, -37], [14, -14], [6, -11], [-11, -18], [3, -6], [8, -7], [47, -80], [10, -6], [10, 3], [20, 23], [13, 9], [5, -1], [0, -12], [-22, -70], [-2, -19], [0, -17], [11, -35], [23, -38], [30, -35], [45, -46], [60, -49], [22, -24], [33, -56], [7, -22], [-9, -59], [-24, -97], [-15, -55], [-7, -14], [-45, -39], [-26, -9], [-42, 1], [-14, -8], [-22, -31], [-30, -55], [-24, -35], [-17, -14], [-32, -17], [-50, -51], [-24, -20], [-86, -21], [-69, -68], [-28, -23], [-30, -12], [-32, -2], [-19, 11], [-10, 42], [-7, 14], [-24, 29], [-50, 83], [-22, 29], [-14, 6], [-30, -5], [-14, 3], [-33, 26], [-11, 17], [1, 7], [25, 9], [-11, 14], [-43, 37], [-18, 20], [-2, 6], [-43, 26], [-43, 7], [-53, -42], [-21, -29], [1, -9], [26, -11], [11, 6], [22, 26], [11, 8], [33, -4], [28, -18], [10, -16], [4, -11], [75, -83], [26, -17], [12, -20], [8, -33], [16, -37], [36, -61], [39, -75], [8, -30], [-20, -14], [-10, -1], [-30, 11], [-78, 35], [-9, -1], [-20, -18], [-17, -42], [-5, -4], [-42, 17], [-78, 36], [-52, 31], [-27, 26], [-32, 41], [-37, 56], [-45, 17], [-52, -20], [-76, -7], [-158, 6], [-21, -5], [-8, -7], [14, -30], [-4, -9], [-10, -6], [-3, -9], [18, -32], [27, -23], [79, -30], [52, -25], [32, -22], [10, -19], [1, -20], [-15, -41], [-8, -15], [-183, -203], [-70, -82], [-35, -50], [-32, -33], [-27, -17], [-45, -9], [-62, -2], [-81, 8], [-42, 26], [-76, 70], [-54, 41], [-23, 14], [-20, 39], [-18, 7], [-39, 7], [-39, 21], [-92, 70], [-48, 28], [-44, 15], [-39, 3], [-15, -4], [27, -36], [-12, -2], [-31, 8], [-32, 0], [-55, 26], [-55, -4], [-39, 5], [-48, 14], [-51, 7], [-82, 0], [-29, -3], [-5, -7], [40, -31], [68, -37], [-9, 32], [2, 8], [23, 11], [107, -19], [122, -42], [31, -4], [34, -15], [38, -25], [52, -51], [99, -116], [32, -29], [43, -27], [215, -40], [75, 0], [149, -11], [79, -21], [22, -15], [7, -51], [-7, -26], [-43, -79], [-27, -58], [-168, -245], [-22, -57], [-9, -34], [-30, -34], [-76, -55], [-76, -46], [-46, -10], [-41, 11], [-26, 14], [-39, 45], [-3, -4], [29, -72], [-7, -7], [-23, 9], [-53, 32], [-17, -6], [-10, -9], [-14, 0], [-18, 10], [-32, 26], [-9, 13], [-7, 40], [-6, 7], [-64, -23], [-10, -7], [26, -16], [9, -12], [25, -58], [2, -13], [-19, -8], [-61, 23], [-7, -2], [30, -59], [12, -27], [1, -15], [-39, -66], [-25, -27], [-35, -10], [-21, 6], [-24, 17], [-18, -2], [-11, -22], [-20, -15], [-29, -9], [-37, 4], [-45, 17], [-120, 62], [-37, 9], [-70, 9], [-9, 9], [1, 8], [10, 8], [-3, 7], [-15, 6], [-15, -6], [-16, -16], [-28, -5], [-40, 7], [-59, 24], [-116, 62], [-128, 53], [-74, 68], [28, -62], [-3, -20], [-14, -19], [-2, -18], [29, -44], [40, -15], [40, 1], [1, 7], [-16, 11], [-15, 16], [-7, 24], [7, 4], [36, -12], [23, -15], [177, -81], [53, -15], [40, -15], [11, -10], [-14, -20], [-71, -50], [-1, -8], [49, 4], [59, 45], [33, 20], [32, 13], [43, -22], [55, -56], [44, -32], [63, -18], [37, -19], [62, -53], [10, -27], [6, -111], [-2, -27], [-8, -27], [-14, -26], [-26, -15], [-38, -3], [-30, -11], [-65, -59], [-28, -9], [-117, 18], [-45, 16], [-21, -1], [-12, -13], [-12, -6], [-46, -5], [-8, -11], [3, -16], [9, -22], [11, -13], [18, -16], [26, -11], [53, -12], [6, -30], [-2, -10], [-18, -20], [-20, 2], [-35, 24], [-18, 1], [-15, -13], [-21, -4], [-27, 4], [-15, -10], [-3, -25], [-9, -19], [-31, -30], [-17, -22], [0, -18], [18, -12], [21, -28], [23, -45], [5, -19], [-15, 5], [-19, 18], [-24, 29], [-36, 27], [-80, 35], [-15, -1], [8, -9], [53, -36], [20, -24], [3, -17], [-45, -38], [-1, -13], [12, -11], [3, -9], [-16, -18], [-26, -16], [-51, -2], [-4, -9], [19, -19], [6, -12], [-16, -16], [-11, -2], [-58, 7], [15, -40], [9, -14], [18, -20], [32, -19], [1, -7], [-11, -16], [-19, -20], [-81, -59], [-56, -70], [-8, -22], [14, -45], [1, -12], [-15, -21], [-33, 6], [-7, -8], [8, -22], [2, -31], [-5, -42], [-24, -66], [-43, -88], [-33, -81], [-23, -73], [-16, -36], [-31, -2], [-23, -23], [16, -12], [9, -14], [7, -21], [-7, -67], [-19, -111], [-13, -89], [3, -274], [-3, -121], [-9, -67], [-14, -37], [-24, -11], [30, -10], [20, -17], [9, -26], [8, -42], [12, -19], [13, 3], [13, -4], [11, -12], [33, -59], [37, -17], [2, -33], [-15, -184], [0, -24], [17, 46], [18, 144], [23, 63], [19, 14], [77, 7], [81, -16], [31, -2], [27, 8], [28, -17], [6, -18], [8, -75], [8, -43], [48, -153], [23, -86], [29, -133], [10, -38], [59, -178], [11, -49], [5, -37], [-2, -26], [-11, -40], [-19, -54], [-18, -42], [-17, -28], [-18, -22], [-18, -14], [1, -3], [21, 6], [20, 15], [39, 37], [15, 8], [43, 5], [1, -13], [-20, -28], [4, -2], [30, 22], [64, 31], [252, 103], [59, 9], [85, -19], [69, -43], [75, -56], [79, -41], [124, -38], [37, -18], [73, -19], [34, -21], [40, -52], [65, -67], [49, -42], [54, -39], [55, -73], [88, -164], [22, -20], [54, -27], [102, -35], [151, -81], [66, -32], [43, -13], [43, -22], [43, -32], [32, -35], [23, -38], [19, -25], [35, -28], [18, -19], [2, -30], [-42, -116], [-1, -10], [42, 84], [24, 24], [19, 11], [39, -1], [59, -14], [53, 0], [44, 13], [39, 6], [31, -1], [23, 4], [14, 10], [17, 0], [68, -29], [27, -2], [99, -27], [63, 10], [11, -5], [22, -36], [19, -3], [31, 6], [31, -10], [51, -46], [23, -40], [23, -82], [2, -25], [-42, -190], [-13, -73], [-2, -65], [8, -36], [37, -62], [6, -17], [22, -91], [6, -39], [-3, -45], [-11, -75], [3, -56], [9, -85], [-3, -58], [-17, -31], [-11, -29], [-9, -54], [0, -21], [9, -40], [16, -23], [26, -25], [24, -38], [45, -92], [33, -51], [39, -75], [8, -38], [-11, -25], [-14, -17], [-32, -23], [-14, -17], [3, -4], [47, 12], [27, -1], [23, -19], [19, -36], [32, -30], [43, -25], [44, -43], [74, -100], [13, -23], [19, -52], [26, -82], [13, -54], [1, -25], [-14, -25], [-49, -46], [-50, -81], [16, 4], [32, 34], [56, 67], [30, 13], [29, -7], [45, -20], [39, -27], [35, -36], [51, -95], [55, -76], [30, -65], [-9, 41], [-20, 48], [-51, 76], [-22, 39], [-5, 19], [-2, 21], [4, 37], [10, 55], [13, 39], [16, 22], [10, 24], [6, 25], [8, 19], [44, 33], [12, -3], [9, -41], [10, -8], [21, -6], [17, -15], [14, -21], [10, -23], [6, -22], [13, -73], [9, -34], [2, 41], [11, 65], [8, 26], [27, 39], [-2, 17], [-11, 22], [-56, 97], [-1, 24], [15, 14], [11, 26], [5, 40], [12, 28], [35, 40], [30, 62], [16, 42], [12, 23], [13, 5], [-18, 17], [-4, 11], [-1, 51], [-8, 54], [-12, 25], [-34, 53], [-6, 16], [-6, 60], [4, 30], [9, 26], [-5, 24], [-32, 45], [-12, 39], [-14, 93], [-13, 118], [-14, 86], [-16, 56], [-3, 35], [9, 14], [11, 44], [10, 10], [16, -2], [1, 5], [-25, 23], [-12, 30], [1, 11], [21, 29], [-3, 12], [-16, 16], [-49, 28], [18, 10], [11, 23], [-2, 7], [-20, 10], [-22, 17], [-17, 27], [-20, 42], [-13, 34], [-12, 56], [-22, 63], [-9, 16], [-11, 10], [-12, 5], [0, 10], [13, 14], [210, 106], [18, 16], [103, 59], [48, 33], [48, 48], [66, 49], [32, 31], [21, 31], [105, 122], [44, 62], [26, 53], [37, 64], [49, 75], [31, 63], [13, 54], [16, 91], [4, 82], [3, 119], [-1, 106], [-14, 167], [-7, 53], [-15, 62], [-37, 125], [-6, 35], [-23, 57], [-74, 151], [-92, 101], [-18, 26], [-36, 30], [-56, 34], [-36, 28], [-94, 104], [-31, 13], [-11, 27], [-3, 19], [4, 50], [5, 34], [7, 26], [7, 16], [52, 77], [29, 61], [20, 34], [22, 26], [41, 34], [23, 44], [-6, 17], [-18, 19], [-4, 19], [31, 47], [4, 13], [-4, 45], [6, 10], [38, 3], [54, -64], [13, 5], [-17, 18], [-21, 43], [3, 18], [40, 47], [1, 21], [-12, 29], [-1, 24], [23, 55], [-6, 12], [-65, 11], [-11, 16], [4, 7], [31, 19], [2, 7], [-54, 125], [-9, 37], [23, 46], [26, 20], [-3, 12], [-35, 2], [-21, 7], [-21, 35], [8, 23], [8, 10], [20, 54], [20, 11], [-4, 9], [-74, -23], [-35, 19], [-35, -5], [-16, 6], [6, 19], [62, 86], [29, 47], [18, 43], [10, 28], [1, 14], [-6, 93], [3, 26], [25, 24], [37, 44], [-51, 41], [-32, 39], [-21, 20], [-16, 19], [-21, 40], [-15, 53], [-17, 106], [-3, 58], [4, 42], [7, 21], [11, 22], [47, 41], [82, 60], [64, 24], [47, -13], [90, -15], [73, -34], [222, -86], [40, -38], [-37, -33], [5, -8], [84, 62], [22, 12], [19, 3], [63, -24], [25, -4], [32, -20], [76, -66], [6, 6], [-21, 34], [12, 15], [60, 35], [62, 29], [44, 28], [47, 37], [32, 20], [16, 2], [21, -11], [56, -49], [36, -25], [29, -26], [40, -47], [16, -10], [31, -32], [41, 3], [13, -3], [4, -7], [7, -21], [4, -14], [0, -14], [-9, -42], [-30, -66], [13, -1], [18, 14], [24, 25], [19, 9], [40, -20], [38, -32], [13, -17], [15, -28], [12, -15], [12, -27], [-1, -9], [-11, -14], [-46, -22], [9, -9], [53, 14], [17, 14], [11, 24], [16, 6], [63, -41], [9, -14], [-4, -11], [-10, -13], [-27, -14], [-24, -35], [-4, -15], [17, -11], [41, -4], [0, -8], [-24, -16], [-3, -20], [53, -71], [36, -32], [21, -5], [48, -2], [39, -12], [86, -40], [51, -8], [44, 13], [29, 2], [25, -16], [8, -11], [4, -23], [0, -34], [14, -24], [28, -14], [23, 2], [31, 27], [25, 5], [9, 20], [7, 37], [8, 20], [18, 6], [15, -11], [9, -17], [16, -51], [4, -23], [-1, -20], [-8, -19], [-16, -20], [-23, -21], [-19, -31], [-22, -70], [-9, -46], [-2, -28], [1, -29], [4, -33], [9, -27], [21, -37], [1, -13], [2, -30], [-2, -14], [-12, -27], [-34, -26], [-46, -7], [-152, -1], [-41, 6], [10, -24], [43, -8], [38, 0], [145, -15], [20, -15], [17, -28], [12, -28], [12, -57], [2, -27], [-6, -31], [-15, -33], [-10, -44], [-5, -55], [8, -29], [78, -3], [15, -20], [-1, -15], [-28, -56], [-3, -15], [13, -38], [-2, -11], [-7, -11], [-8, -28], [-7, -46], [-9, -30], [-21, -22], [-11, -5], [-8, 6], [-21, 62], [-9, 9], [-8, -6], [-4, -9], [0, -14], [-4, -14], [-7, -14], [-31, -23], [-50, -16], [1, -16], [34, -9], [43, -28], [25, -4], [38, 22], [75, 71], [31, 19], [27, 7], [30, 1], [34, -5], [68, 9], [17, -7], [20, -15], [25, -25], [17, -23], [9, -23], [15, -85], [21, -23], [4, -16], [2, -25], [-1, -49], [-23, -100], [-11, -36], [-31, -50], [-36, -23], [-64, -21], [-33, -18], [-25, -25], [-1, -13], [72, 42], [79, 20], [23, 24], [17, 22], [17, 50], [32, 130], [18, 40], [25, 7], [11, -14], [26, -76], [0, -19], [-7, -16], [-42, -74], [15, 7], [43, 70], [9, 21], [5, 32], [14, 23], [5, -11], [13, -82], [0, -60], [3, -19], [-5, -56], [5, -10], [13, 49], [4, 37], [6, 26], [7, 16], [52, 50], [61, 40], [40, 36], [33, 17], [50, 17], [31, 33], [14, 50], [12, 35], [10, 20], [33, 34], [17, 2], [17, -12], [20, -26], [21, -40], [13, -30], [4, -23], [4, -78], [4, 0], [19, 60], [3, 21], [-2, 23], [-6, 22], [-20, 49], [-7, 31], [1, 18], [22, 11], [31, 4], [5, 8], [-23, 21], [-1, 11], [22, 36], [13, 1], [26, -5], [-5, 18], [0, 12], [7, 5], [42, -11], [5, 14], [36, 1], [4, 12], [-32, 18], [-30, 12], [-10, 9], [-7, 15], [-9, 35], [2, 9], [9, 0], [14, -9], [9, 18], [9, 43], [9, 18], [28, -21], [1, 9], [-23, 68], [4, 13], [35, 5], [21, -9], [55, -49], [11, 5], [-9, 14], [-28, 29], [-26, 19], [-23, 9], [-17, 16], [-19, 45], [-3, 18], [2, 24], [13, 50], [7, 11], [14, 8], [19, 5], [21, -5], [44, -33], [7, 11], [-23, 18], [-13, 16], [-6, 21], [2, 24], [19, 49], [9, 40], [39, 109], [12, 20], [12, 12], [8, 13], [31, 3], [57, -39], [18, -23], [4, -32], [-30, -45], [-51, -33], [-16, -14], [10, -9], [49, 27], [42, 12], [34, 0], [28, -53], [4, -73], [-16, -60], [21, 30], [26, 17], [22, -40], [2, -32], [12, -31], [24, -40], [25, -36], [-28, -37], [-33, -23], [7, -16], [46, -18], [6, -18], [-5, -24], [7, 1], [32, 36], [27, -5], [34, -79], [-25, -46], [-39, -21], [-30, -9], [-43, 2], [-17, -7], [8, -15], [41, -1], [63, 12], [47, 19], [20, 1], [22, -8], [7, -6], [-23, -13], [-1, -5], [8, -13], [18, -44], [-2, -10], [-17, -25], [27, -5], [38, 12], [11, -14], [23, -52], [15, -53], [-64, -73], [-32, -15], [-48, -39], [-13, -31], [-28, -39], [18, 0], [49, 64], [24, 15], [18, -4], [7, -11], [-3, -18], [16, 3], [66, 37], [28, 7], [36, 3], [3, -13], [-22, -89], [-38, -69], [-70, -42], [-24, -25], [-31, -40], [12, -7], [66, 52], [45, 21], [64, 17], [28, -3], [51, -104], [28, -10], [24, 5], [44, -30], [16, -29], [-4, -21], [-15, -13], [-7, -19], [18, -58], [-11, -33], [-32, -29], [-23, -14], [-24, -5], [-24, -25], [-10, -4], [-33, 6], [11, -15], [16, -8], [26, -4], [30, 8], [30, -1], [46, -19], [20, -23], [0, -6], [-10, -13], [-15, -42], [-10, -15], [9, -12], [23, -18], [17, -6], [23, 6], [25, -8], [82, -99], [-4, -51], [-12, -40], [5, -44], [0, -55], [-44, -15], [-148, 25], [-84, 39], [-5, 12], [24, 26], [-21, 2], [-24, -10], [-11, -10], [29, -41], [77, -36], [35, -44], [38, -4], [11, -8], [21, -25], [-6, -9], [-39, -3], [-30, -30], [19, -17], [69, -16], [49, -4], [25, -17], [-20, -19], [-58, -22], [-2, -33], [43, -14], [38, 8], [16, -3], [11, -80], [7, -17], [-41, -14], [-1, -16], [28, -13], [45, -10], [15, -15], [3, -24], [9, -12], [26, -3], [29, 30], [17, 25], [25, -9], [1, -31], [30, -36], [10, -6], [9, -51], [24, 45], [17, -9], [20, -2], [-7, -44], [-11, -34], [15, -22], [12, -32], [33, -43], [-9, -21], [-38, -45], [-20, -72], [-5, -24], [-20, -41], [-26, -40], [16, 4], [60, 73], [36, 25], [78, 13], [19, 20], [29, 9], [18, -23], [1, -42], [24, -14], [24, 14], [22, -12], [-13, -26], [-71, -108], [-21, -44], [-6, -31], [24, 43], [90, 97], [9, 14], [20, 42], [18, 27], [48, -10], [25, -19], [11, -55], [19, -59], [30, -65], [78, -32], [28, -6], [49, 23], [7, 30], [38, 10], [27, -4], [9, -59], [29, -31], [28, -26], [27, -14], [40, -6], [22, -28], [0, -12], [-22, -30], [-22, -45], [-38, -31], [-53, -1], [-72, -20], [-3, -17], [-16, -19], [-39, -20], [-21, -14], [-35, -72], [-20, -31], [-24, -6], [-34, 3], [-22, -6], [-16, -14], [-10, -19], [-7, -7], [-45, -20], [-82, -55], [-44, -2], [-26, 7], [-21, -5], [-14, -15], [-39, -27], [-12, -16], [-7, -19], [-5, -38], [-5, -14], [-7, -8], [-33, 8], [-37, 25], [7, -27], [58, -44], [17, -25], [-16, -21], [-37, -34], [-4, -18], [15, -10], [-6, -15], [-20, -16], [2, -7], [2, -6], [51, 23], [45, 50], [29, 50], [14, 14], [58, 19], [34, 22], [49, 39], [54, 58], [58, 76], [74, 59], [91, 42], [66, 22], [42, 1], [2, 7], [-37, 14], [-32, 2], [-39, -10], [-12, 24], [2, 10], [12, 17], [33, 15], [161, -21], [55, -17], [60, -137], [14, -44], [4, -32], [-6, -20], [-24, -24], [-69, -48], [-9, -12], [-1, -7], [30, -9], [9, -14], [15, -52], [31, 34], [58, 83], [48, 38], [40, 11], [47, 5], [17, -1], [6, -27], [25, -54], [23, -14], [45, -7], [40, -67], [15, -46], [14, -27], [-1, -19], [2, -15], [11, -23], [5, -19], [-3, -45], [-23, -77], [17, -71], [-7, -31], [-4, -51], [14, -33], [5, -20], [-13, -11], [-88, -28], [-35, -1], [-9, -17], [27, -5], [48, 1], [59, -17], [27, -19], [11, -27], [-3, -21], [-17, -16], [-33, 3], [-32, 15], [2, -14], [47, -35], [14, -17], [26, -22], [5, -30], [-6, -30], [-90, -120], [-73, -76], [-74, -67], [-119, -129], [-12, -6], [-21, -3], [-57, 21], [-45, -5], [-85, -25], [-24, -15], [-47, -45], [-18, -6], [-51, -9], [-47, 6], [-19, -7], [-23, -21], [-6, -12], [-7, -38], [-115, -168], [-31, -57], [-59, -60], [-65, -106], [-57, -43], [-19, -58], [-54, -36], [-100, -9], [-47, -10], [-55, 16], [-42, -25], [-62, -8], [-30, 6], [-121, -57], [-31, 54], [-23, 21], [-68, 3], [-55, 22], [-50, 4], [-48, 10], [-32, 0], [-33, -6], [-52, 2], [-29, -30], [-96, 9], [-41, 27], [-34, 6], [-44, -6], [-43, -20], [-94, 22], [-100, -19], [-87, 13], [-24, 13], [-138, -35], [-53, 20], [-48, -54], [-32, 11], [-35, -8], [-12, 11], [-23, -8], [-15, -29], [-20, -3], [-33, -52], [-56, -41], [-82, -226], [-7, -87], [-31, -59], [-27, -8], [-22, -1], [-141, -44], [-63, -34], [18, -27], [-21, -21], [-33, -8], [-36, -25], [-24, -28], [-11, -39], [-72, -64], [-84, -147], [-40, -108], [-49, -78], [-34, -30], [-25, -5], [-25, 10], [-41, 36], [-30, 4], [-76, 51], [-177, 52], [27, -19], [23, -32], [47, -8], [47, 0], [99, -63], [48, -22], [30, -19], [25, -43], [-18, -84], [-19, -69], [-24, -53], [-85, -137], [-41, -46], [-72, -163], [-74, -77], [-40, -47], [-42, -74], [-99, -56], [-37, -15], [-34, 8], [-41, -46], [-49, -28], [-15, -42], [-117, -114], [-45, -15], [-39, -30], [-11, -51], [-34, -32], [-10, -23], [-29, -72], [-53, -94], [-66, -15], [-24, -32], [-27, -53], [-39, -36], [-77, 17], [18, -22], [69, -34], [7, -51], [-34, -12], [-72, -68], [-98, -117]], [[15892, 80064], [-11, 21], [-27, 26], [-10, 0], [-11, -8], [-7, -12], [-6, -27], [-4, -8], [-4, 1], [-3, 7], [-8, 37], [2, 16], [9, 20], [-1, 7], [-20, -6], [-8, 5], [-4, 10], [1, 42], [-11, 23], [13, 10], [32, 8], [34, 1], [9, 18], [10, 43], [-24, -40], [-14, -4], [-44, 15], [-29, -2], [-4, 8], [2, 9], [6, 9], [4, 31], [7, 85], [9, 31], [3, 16], [-2, 4], [-38, -59], [-3, -19], [4, -16], [-4, -33], [-18, -10], [-10, 5], [-20, -28], [-6, -3], [-91, 50], [-10, 6], [-15, 23], [-23, 40], [-7, 34], [9, 28], [8, 14], [10, 0], [10, -10], [21, -47], [8, -29], [22, 4], [35, 37], [8, 14], [-35, -14], [-15, 1], [-15, 15], [-16, 30], [-8, 34], [0, 107], [5, 20], [17, 16], [11, 25], [-1, 11], [-10, 22], [-15, 16], [-15, 9], [-4, -3], [23, -46], [0, -18], [-26, -46], [-4, -13], [0, -45], [-3, -9], [-21, -13], [-23, -35], [-39, -12], [-36, 4], [-20, 17], [-61, 86], [-22, 36], [0, 30], [-42, 107], [0, 23], [-14, 33], [-16, 5], [-4, 32], [33, 68], [21, 58], [2, 18], [-1, 28], [-5, 62], [5, 27], [-21, -36], [-4, -26], [5, -27], [-3, -30], [-12, -43], [-21, -45], [-42, -21], [-74, 12], [-8, 6], [-5, 15], [-4, 66], [-5, -8], [-8, -35], [-7, -51], [-9, -11], [-15, -1], [-12, 8], [-9, 17], [-19, 2], [-34, -14], [-17, 6], [-19, 0], [-40, 15], [-47, 4], [-12, 11], [1, 22], [8, 11], [49, 10], [48, 23], [47, 12], [-2, 11], [-21, 4], [-108, -26], [-34, 4], [-6, 4], [-1, 26], [13, 24], [21, 23], [6, 18], [-12, 7], [-20, -5], [-9, 14], [10, 55], [-9, 55], [-13, -52], [-19, -29], [-91, -13], [-15, -15], [-12, 0], [-58, 28], [-25, 17], [-23, 25], [-42, 57], [-33, 37], [-1, 67], [7, 43], [15, 49], [59, 104], [21, 19], [18, 7], [87, 9], [65, 13], [12, 7], [-95, 7], [-85, -5], [-29, -16], [-37, -67], [-9, -28], [-10, -21], [-7, 0], [-12, 7], [-4, 9], [-6, 22], [-19, 34], [-9, 40], [-5, 59], [1, 26], [10, 34], [28, 66], [-36, -2], [4, 55], [13, 61], [34, 35], [34, 26], [31, 34], [55, 22], [18, -46], [47, -14], [13, -21], [17, -38], [20, -36], [25, -35], [7, -3], [-11, 30], [-40, 65], [-2, 23], [-10, 25], [-52, 36], [-10, 14], [-9, 36], [-4, 24], [6, 22], [53, 69], [13, 37], [0, 17], [-5, 19], [-11, 34], [-3, 0], [3, -51], [-2, -20], [-6, -22], [-8, -17], [-12, -11], [-114, -158], [-12, -9], [-42, -14], [-22, -17], [-12, -22], [-19, -58], [-25, -115], [-30, -93], [-25, 121], [-46, 92], [89, 92], [2, 14], [-8, 49], [2, 15], [8, 21], [23, 32], [-1, 3], [-26, -12], [-41, -71], [-16, -22], [-8, -3], [-1, 41], [22, 109], [18, 105], [6, 30], [16, 30], [-15, -2], [-72, -47], [-24, 29], [-20, 153], [-36, 59], [-60, 49], [-59, 22], [-13, 43], [-12, 53], [16, 62], [26, 29], [23, 14], [23, -7], [1, -22], [-15, -61], [20, -6], [81, -74], [17, -6], [34, 28], [18, -1], [44, -23], [15, -28], [42, -54], [-6, 32], [-46, 66], [-25, 22], [-45, 4], [-28, -11], [-12, 3], [-24, 17], [-21, 28], [-21, 61], [-5, 29], [1, 21], [5, 19], [9, 17], [17, 13], [26, 7], [7, 8], [-32, 35], [-15, 0], [-52, -51], [-10, -5], [-5, 10], [-4, 1], [-15, -25], [-12, -11], [-42, -79], [-7, -37], [-2, -57], [-5, -35], [-7, -14], [-50, -27], [-28, -55], [-34, 48], [-38, 45], [-25, 80], [-45, 14], [-52, 45], [-20, 41], [28, 82], [41, 63], [6, 74], [6, 16], [70, 19], [46, 37], [-47, 4], [-29, -6], [-52, -26], [-57, 51], [-29, 47], [-10, 40], [10, 34], [2, 34], [5, 47], [5, 20], [12, 26], [25, 17], [22, 54], [9, 37], [44, 111], [16, 48], [31, 67], [61, 105], [-20, -6], [-10, -9], [-9, 1], [-9, 11], [-9, 24], [-8, 35], [-5, -16], [-1, -66], [-6, -57], [-11, -39], [-30, -80], [-18, -31], [-12, 29], [10, 50], [17, 40], [3, 54], [-16, 65], [-10, 53], [-4, 40], [-1, 36], [3, 33], [7, 35], [11, 39], [-1, 4]], [[19495, 97148], [49, -34], [17, 1], [21, -6], [10, -9], [29, -43], [6, -21], [2, -27], [-5, -23], [-10, -19], [-27, -11], [-62, -8], [-87, 11], [-75, -14], [-35, -2], [-93, 9], [-24, 7], [-52, 26], [-40, 11], [-16, -6], [-20, -23], [-37, -28], [-23, -7], [-68, 4], [-103, 48], [-118, -14], [-123, -28], [-48, -5], [-14, 8], [-19, 21], [3, 11], [36, 32], [82, 33], [60, 19], [118, 28], [141, 15], [52, 17], [33, 23], [92, 37], [53, 16], [73, 13], [58, -1], [74, -30], [56, -15], [34, -16]], [[19317, 96833], [223, -14], [9, -3], [1, -10], [-17, -33], [-25, -24], [-119, -30], [-153, -28], [-32, -13], [2, -8], [13, -10], [25, -12], [119, 2], [29, -5], [10, -8], [6, -12], [4, -15], [0, -53], [-6, -30], [-17, -27], [-48, -20], [-86, -26], [-59, -11], [-46, 4], [-46, -3], [-202, -48], [-62, -1], [-55, 12], [-75, 46], [-78, 18], [-34, 21], [-33, 11], [-9, 16], [-3, 13], [6, 11], [14, 10], [4, 9], [-13, 25], [-6, 24], [-22, 35], [-4, 20], [0, 13], [4, 14], [15, 25], [8, 5], [46, 4], [60, 13], [139, 37], [305, 47], [93, -4], [40, 9], [75, 4]], [[17902, 96407], [21, -23], [2, -9], [-10, -9], [-33, -15], [-164, -51], [-32, -24], [12, -20], [59, -41], [60, -35], [13, -18], [-28, -17], [-55, 5], [-20, -1], [-20, -8], [6, -16], [60, -52], [20, -28], [0, -14], [-11, -14], [-26, -19], [-40, -25], [-68, -19], [-148, -26], [-5, -21], [1, -15], [-3, -38], [-6, -18], [-17, -29], [-13, -14], [-22, -9], [-32, -6], [-40, 0], [-67, 26], [-30, 16], [-42, 35], [-8, 24], [5, 28], [11, 45], [18, 46], [25, 46], [8, 29], [-10, 12], [-18, 0], [-54, -19], [-35, -7], [-27, -13], [-20, -21], [-11, -22], [-6, -43], [-10, -23], [-29, -13], [-44, 0], [-17, -7], [-8, -16], [6, -12], [43, -27], [6, -30], [-6, -18], [-46, -33], [-11, -11], [-29, -52], [-11, -13], [-24, -12], [-24, 1], [-23, 19], [-33, 36], [-22, 31], [-12, 26], [-9, 11], [-16, -8], [-19, -26], [0, -21], [4, -31], [-1, -19], [-28, -23], [4, -10], [49, -28], [6, -12], [0, -19], [-3, -9], [-20, 1], [-16, -22], [-19, -17], [-49, -33], [-69, -4], [-57, -16], [-12, 1], [-14, 26], [-15, 50], [-14, 29], [-20, 15], [-26, 58], [-12, 18], [-11, 8], [-10, 2], [-15, -12], [-33, -82], [-54, -21], [-29, -4], [-30, 2], [-74, 23], [-60, 8], [-41, -9], [-68, -34], [-27, -9], [-37, 4], [-16, 13], [-14, 21], [-1, 12], [10, 5], [17, 24], [0, 9], [-17, 14], [0, 11], [6, 7], [-2, 6], [-8, 3], [-17, -3], [-61, -16], [7, 17], [29, 37], [71, 72], [26, 21], [16, 6], [209, 24], [15, 7], [99, 97], [28, 22], [29, 18], [143, 58], [13, 14], [22, 40], [13, 10], [31, 16], [102, 82], [94, 59], [47, 37], [65, 37], [75, 16], [227, 28], [163, -37], [38, -2], [19, 10], [17, 17], [25, -7], [60, -5], [14, 4], [25, 19], [-17, 11], [-73, 19], [-5, 10], [2, 9], [26, 23], [31, 14], [90, 11], [41, -3], [43, -15], [55, -32], [127, -56]], [[19919, 95654], [35, -1], [41, 6], [46, -4], [21, -13], [15, -23], [0, -13], [-3, -10], [-6, -9], [-60, -58], [-14, -20], [19, -5], [10, 3], [59, 44], [45, 13], [34, 4], [57, -9], [22, -8], [15, -8], [9, -11], [22, -41], [16, -54], [2, 5], [1, 31], [3, 23], [55, 16], [1, 5], [-20, 13], [-16, 18], [-12, 33], [4, 12], [12, 14], [35, 28], [42, 17], [36, 4], [137, -29], [54, -25], [21, -12], [8, -9], [12, -28], [23, -78], [-1, -25], [-10, -40], [-44, -76], [-7, -51], [-44, -127], [-31, -35], [-33, -24], [-138, -43], [-104, -43], [-26, -7], [-27, -1], [-86, 15], [-99, 27], [-57, -7], [-56, -20], [-36, -6], [-33, 3], [-33, 7], [-44, 19], [23, 8], [10, 10], [-9, 10], [-46, 14], [-48, -32], [-139, -73], [-187, -25], [-58, -15], [-44, -19], [-22, -16], [-35, -38], [-53, -28], [-96, -31], [-123, -48], [-220, -49], [-138, -8], [-138, 16], [-44, 13], [-46, 21], [-93, 49], [-26, 17], [-31, 39], [18, 25], [50, 30], [75, 26], [150, 36], [135, 58], [49, 11], [130, 9], [66, -5], [48, 3], [31, 8], [47, 20], [68, 42], [50, 39], [12, 18], [-16, 17], [-25, 2], [-81, -40], [-41, -13], [-44, -1], [-61, -14], [-60, -5], [-11, 0], [-62, 39], [-33, 6], [-16, -4], [-14, -10], [-26, -28], [-16, -10], [-27, -8], [-107, -8], [-104, -14], [-23, 9], [-14, 16], [-3, 10], [-1, 33], [-7, 14], [9, 28], [12, 21], [14, 15], [71, 43], [10, 11], [-34, -2], [-80, -21], [-11, 7], [-18, 24], [-9, 2], [-11, -10], [-6, -14], [-13, -58], [-13, -30], [-32, 6], [-40, 18], [-15, 3], [-9, -6], [3, -10], [41, -50], [0, -17], [-26, -31], [-114, -51], [-44, -13], [-16, 5], [-14, 14], [-13, 22], [-29, 31], [-18, 7], [-19, 1], [-18, -7], [-17, -13], [-10, -15], [-10, -26], [-20, -21], [-13, -3], [-115, 42], [-93, 75], [-101, -11], [-46, 2], [-138, 28], [-17, 17], [-10, 22], [1, 12], [6, 12], [17, 25], [35, 37], [15, 12], [21, 10], [29, 8], [73, 4], [189, 2], [37, 5], [206, 72], [24, 12], [30, 23], [7, 10], [-1, 6], [-254, -57], [-109, -12], [-166, 9], [-31, 9], [-8, 16], [35, 42], [18, 16], [48, 15], [114, 21], [154, 19], [100, 0], [84, 15], [51, 17], [-170, -1], [-204, -8], [-30, 5], [-58, 23], [-3, 16], [23, 19], [9, 15], [-17, 33], [5, 13], [38, 27], [68, 29], [42, 5], [81, -11], [230, -10], [45, 4], [-28, 13], [-40, 9], [-178, 17], [-37, 7], [-7, 10], [-3, 15], [2, 19], [13, 20], [55, 42], [162, 35], [64, 5], [65, -3], [65, -15], [29, -14], [15, -16], [7, -16], [1, -26], [3, -11], [12, -17], [37, -42], [28, -13], [128, 24], [53, 6], [54, -8], [78, -24], [101, -75], [130, -77], [-1, -16], [-49, -26], [-10, -11], [7, -7], [50, -5], [46, 4], [45, -6], [10, -7], [16, -28], [23, -49], [27, -37], [31, -24], [31, -13], [45, -1], [46, 8], [74, -3], [381, -28], [23, 5], [16, 15], [9, 26], [4, 22], [-5, 29], [-8, 14], [-236, 94], [-21, 38], [116, 54], [8, 12], [2, 17], [-4, 21], [-15, 21], [-62, 39], [-55, 6], [-82, 38], [-12, 10], [-11, 15], [-8, 21], [1, 16], [11, 12], [80, 39], [33, 21], [100, 98], [46, 39], [33, 19], [34, 11], [74, 5], [77, -36], [17, -2], [7, -10], [-3, -17], [-10, -16], [-27, -29], [-7, -12], [2, -13], [19, -29], [6, -19], [4, -32], [3, -5], [47, -27], [42, -36], [20, -55], [-16, -19], [-35, -27], [-21, -22], [-7, -18], [5, -10], [27, -6]], [[18188, 93659], [18, -7], [32, 6], [47, 19], [60, 15], [74, 13], [19, -15], [12, 3], [22, 24], [4, 16], [-3, 18], [1, 40], [12, 23], [44, 50], [23, 18], [37, 9], [89, -6], [84, -28], [112, -28], [165, -71], [52, -30], [5, -26], [-29, -55], [-71, -79], [-57, -28], [-22, -18], [37, -12], [24, -20], [36, 29], [27, 33], [38, 27], [13, 3], [3, -6], [-7, -14], [-2, -14], [1, -13], [4, -8], [23, -4], [13, 5], [50, 38], [49, 59], [75, 38], [20, 19], [65, 16], [-1, 12], [3, 44], [-22, 19], [-77, 40], [-37, 48], [8, 37], [42, -5], [115, -4], [24, -5], [111, -62], [39, -39], [31, -19], [65, -28], [22, -23], [16, -9], [5, -10], [-5, -10], [-2, -23], [12, -8], [42, -9], [12, -9], [16, -30], [19, -50], [17, -55], [27, -103], [54, -137], [18, -86], [7, -16], [12, -11], [34, -16], [27, -22], [31, -7], [7, 2], [8, 19], [20, 31], [94, 59], [5, 9], [-11, 14], [-3, 9], [1, 7], [20, 5], [-66, 75], [-43, 71], [-27, 89], [-4, 25], [-4, 55], [-9, 15], [-15, 13], [-6, 17], [2, 21], [-3, 18], [-17, 37], [-67, 261], [0, 26], [9, 19], [24, 11], [38, 2], [13, 6], [-15, 10], [-25, 27], [-3, 13], [17, 26], [86, -11], [62, -24], [106, -55], [11, 3], [12, 28], [22, 17], [34, -6], [96, -40], [112, -71], [74, -36], [53, -48], [35, -45], [23, -35], [1, -13], [-5, -14], [5, -19], [16, -22], [8, -20], [7, -43], [15, -56], [3, -28], [99, -250], [19, -45], [12, -20], [69, -97], [37, -70], [3, -48], [5, -13], [2, -22], [-2, -30], [-8, -25], [-14, -22], [-14, -30], [-22, -67], [-1, -16], [15, -23], [97, -79], [59, -95], [28, -16], [74, -59], [81, -34], [27, -15], [26, -21], [7, -1], [16, 4], [4, 6], [1, 9], [-22, 45], [-2, 17], [11, 3], [83, -76], [45, -31], [61, -32], [105, -74], [15, -6], [57, 7], [15, -5], [10, -7], [4, -10], [2, -44], [16, -21], [90, 9], [25, -2], [16, -7], [13, -14], [20, -47], [17, -92], [1, -33], [-8, -56], [-13, -20], [-17, -7], [-48, 7], [-33, 17], [-18, 23], [-16, 48], [-7, 10], [-7, -10], [-16, -45], [-10, -19], [-13, -14], [-24, 4], [-35, 19], [-66, 50], [-23, 12], [-15, -2], [-31, -17], [-49, -31], [-20, -23], [8, -15], [6, -19], [3, -22], [-2, -17], [-6, -10], [-16, -13], [-34, -2], [-49, 9], [-39, 18], [-68, 46], [-15, 6], [-21, -10], [-8, -14], [13, -19], [34, -24], [42, -41], [11, -8], [11, 0], [4, -7], [5, -22], [-2, -38], [-21, -76], [-2, -18], [9, 4], [57, 75], [29, 21], [65, 32], [27, 24], [82, 7], [30, -13], [18, -23], [1, -10], [-21, -27], [-4, -14], [-1, -17], [2, -15], [5, -13], [14, -13], [26, 6], [8, -4], [14, -13], [9, -20], [0, -29], [-19, -62], [-34, -21], [-105, -37], [-36, -20], [-70, -14], [-26, -18], [-17, -5], [-74, 2], [-85, -11], [-98, 23], [-69, 10], [-79, 36], [-30, -9], [-31, -24], [-148, 28], [-18, 20], [6, 14], [35, 42], [2, 9], [-1, 8], [-68, 7], [-75, 23], [-75, 11], [-57, -3], [-37, 8], [-36, 19], [-19, 17], [-4, 16], [0, 17], [3, 34], [-5, 24], [-16, 18], [-34, 17], [-33, -2], [-28, -18], [-26, -35], [-50, -96], [-24, -16], [-65, -70], [-24, -17], [-117, -27], [-140, -11], [-52, -22], [-49, -40], [-60, -39], [-146, -48], [-135, -27], [-142, -12], [-105, -18], [-31, 9], [-47, -3], [-51, -27], [-57, -5], [-219, -10], [-100, -17], [-55, -5], [-44, 2], [-30, 8], [-28, 23], [-30, 37], [-60, 97], [-17, 41], [6, 70], [-4, 40], [-20, 88], [-4, 7], [-105, 33], [-70, 10], [-104, 2], [-128, -4], [-127, 10], [-68, 12], [-67, 19], [-114, 51], [-7, 5], [-8, 17], [-12, 28], [-28, 37], [-78, 82], [-31, 49], [-5, 13], [-7, 36], [-10, 59], [-3, 36], [9, 22], [7, 5], [162, 43], [284, 47], [261, 32], [118, -3], [69, -15], [70, -7], [126, -3], [160, -22], [31, 2], [72, 15], [21, 12], [113, -2], [22, 8], [20, 13], [-26, 25], [-108, 55], [-286, 97], [-70, 21], [-100, 22], [-58, 3], [-74, -12], [-28, 0], [-72, -19], [-69, -12], [-131, -12], [-189, -8], [-26, 2], [-39, 15], [-28, 4], [-185, -11], [-165, 15], [-188, 149], [-32, 46], [7, 18], [23, 20], [93, 58], [34, 13], [139, 31], [138, 38], [110, 35], [53, 12], [52, 2], [42, 11], [-9, 11], [-34, 13], [0, 18], [18, 9], [69, 9], [72, -11], [37, 3], [10, 13], [-10, 9], [-69, 21], [-331, -59], [-155, -5], [-107, -26], [-59, 1], [-70, 25], [-10, 8], [-1, 10], [22, 34], [75, 20], [38, 57], [-41, 1], [-134, -12], [-59, 5], [-79, 22], [-23, 26], [-10, 18], [-2, 23], [3, 63], [6, 34], [5, 8], [98, 105], [62, 22], [43, 33], [1, 13], [-10, 14], [-40, 34], [-17, 17], [-9, 17], [7, 25], [23, 36], [67, 57], [162, 114], [82, 48], [79, 26], [110, 55], [284, 91], [254, 92], [93, -24], [27, -19], [12, -16], [10, -23], [9, -29], [12, -63], [1, -32], [-2, -33], [-6, -29], [-9, -27], [-19, -32], [-29, -38], [-60, -65], [-7, -19]], [[16740, 94534], [2, -2], [71, 53], [44, 3], [30, -5], [10, -6], [6, -11], [3, -23], [2, -58], [4, -7], [9, 3], [16, 14], [78, 85], [33, 23], [23, 7], [96, 13], [65, 0], [71, -8], [54, -12], [88, -35], [69, -40], [63, -43], [212, -161], [90, -47], [35, -27], [15, -20], [13, -25], [4, -23], [-5, -21], [-10, -15], [-21, -13], [-130, -54], [-69, -16], [-67, -24], [-162, -84], [-111, -40], [-144, -78], [-272, -126], [-32, -25], [-15, -18], [-77, -143], [-29, -33], [-71, -34], [-89, -9], [-25, -9], [-5, -50], [-32, -82], [-15, -55], [-22, -148], [-5, -15], [-16, -28], [-28, -29], [-86, -35], [-64, -18], [-86, -15], [-21, 10], [-21, 24], [-22, 2], [-13, -4], [-114, -103], [-109, -41], [-47, -38], [-33, -18], [-27, -5], [-44, 3], [-32, 17], [-29, 27], [-22, 28], [-56, 118], [-24, 40], [-21, 20], [-55, 72], [-15, 14], [-209, 91], [-101, 51], [-25, 18], [-23, 11], [-130, -7], [-18, 2], [-4, 8], [15, 27], [6, 16], [2, 17], [-2, 27], [2, 4], [49, 27], [-8, 5], [-5, 10], [-4, 15], [5, 11], [15, 6], [17, 24], [21, 43], [15, 24], [22, 16], [38, 41], [27, 17], [23, 21], [1, 9], [-10, 8], [-3, 16], [5, 50], [-1, 25], [5, 22], [8, 17], [11, 11], [97, 37], [4, 10], [2, 12], [-3, 14], [-5, 9], [-15, 8], [-26, 2], [-23, 21], [-5, 10], [9, 29], [44, 45], [14, 22], [48, 101], [86, 63], [23, 67], [65, 72], [0, 10], [-21, 24], [-60, 17], [-29, 26], [-19, 29], [-87, 170], [-15, 13], [-5, 20], [-18, 13], [4, 12], [341, 51], [235, 16], [243, 44], [68, 2], [52, -8], [52, -23], [69, -40], [90, -39], [170, -58], [106, -12], [-42, -45], [-6, -14], [0, -10]], [[30697, 99663], [227, -10], [73, 4], [84, -26], [51, -3], [83, 5], [61, -6], [226, -6], [47, -10], [-1, -11], [-48, -26], [-66, -25], [-423, -82], [-31, -13], [83, -4], [121, 3], [94, 9], [111, 28], [37, 2], [70, 13], [137, 38], [109, 20], [49, -9], [42, -14], [28, -2], [15, 11], [23, 30], [14, 11], [36, 7], [22, -1], [35, -14], [40, -33], [36, -23], [20, 0], [83, 26], [41, 3], [96, -9], [39, -12], [7, -12], [-25, -13], [-16, -11], [-6, -10], [14, -11], [58, -23], [83, -51], [-1, -19], [-45, -38], [1, -9], [214, 40], [217, -18], [61, -12], [23, -15], [25, -24], [27, -34], [-19, -35], [-95, -55], [-98, -43], [-58, -38], [-88, -22], [-305, -92], [-149, -30], [-85, -30], [-39, -5], [-181, 6], [-48, -16], [-26, -28], [-58, -13], [-84, -9], [-172, -7], [-39, -31], [-10, -21], [-17, -16], [-15, -8], [-492, -111], [-10, -18], [50, -8], [63, 8], [717, 134], [137, 9], [128, -10], [-14, -31], [-181, -88], [-231, -80], [-115, -61], [-291, -104], [-237, -105], [-92, -52], [-122, -95], [-42, -23], [-51, -9], [-60, 4], [-54, 14], [-72, 35], [-65, 39], [-21, 7], [13, -19], [126, -132], [-14, -25], [-232, -27], [-103, -23], [-53, -6], [-38, 4], [-36, -2], [-36, -10], [-2, -10], [32, -11], [92, -9], [206, 30], [33, -2], [52, -15], [3, -13], [-55, -42], [-166, -50], [21, -2], [48, -18], [-1, -16], [-52, -38], [-25, -12], [-160, -35], [-70, -8], [-62, 4], [-281, 77], [-99, 11], [-94, 19], [-69, -3], [-74, -22], [33, -12], [136, -21], [114, -4], [47, -9], [18, -14], [49, -51], [8, -27], [-11, -25], [-15, -18], [-18, -10], [-30, -5], [-111, 3], [-41, -6], [-48, -15], [-61, -6], [-109, 3], [-128, -22], [-67, -4], [-76, 10], [-81, 24], [-86, 12], [-145, 11], [12, -14], [51, -6], [104, -37], [50, -51], [47, -8], [96, -42], [69, -6], [72, -14], [102, 18], [68, -3], [-14, -102], [-30, -10], [-164, 0], [-79, 15], [-34, 15], [-76, 17], [-68, -10], [-62, 2], [-42, -10], [-67, 1], [-174, -18], [-92, 0], [-68, 11], [-79, 4], [-90, -4], [7, -12], [38, -4], [55, -19], [52, -29], [43, -13], [51, 7], [52, 14], [190, 23], [84, 3], [75, -10], [49, -12], [35, -15], [44, -40], [109, -5], [84, -13], [133, -58], [37, -4], [15, -15], [-28, -38], [-4, -22], [-92, -44], [-144, -12], [-158, 4], [-113, -5], [-12, -6], [78, -11], [180, -51], [69, -28], [13, -16], [-100, -61], [-87, -122], [-29, -10], [-30, -3], [-77, 2], [-98, -30], [-74, -6], [-134, 11], [-154, -1], [-13, -19], [-7, -38], [1, -57], [9, -76], [-8, -56], [-26, -35], [-32, -26], [-58, -25], [-60, -16], [-44, -5], [-75, -1], [-213, -18], [-105, 1], [-81, 8], [-83, 25], [-140, 71], [-40, 16], [-38, 9], [1, -15], [42, -40], [35, -26], [28, -11], [-7, -12], [-62, -20], [-67, -8], [-81, 0], [-2, -7], [27, -21], [35, -19], [24, -6], [61, 6], [72, 24], [44, 8], [89, -6], [35, -9], [110, -54], [16, -2], [82, 27], [118, 1], [44, -21], [16, -43], [2, -34], [-12, -26], [27, -25], [67, -25], [52, -6], [37, 14], [56, 35], [24, 8], [23, -2], [34, -25], [46, -48], [5, -56], [-38, -64], [-46, -42], [-180, -69], [-55, -27], [-43, -28], [-63, -26], [-123, -34], [-64, -6], [-140, -37], [-31, -2], [-45, 6], [-9, 18], [11, 32], [15, 30], [19, 27], [0, 23], [-39, 35], [-28, 16], [-27, 9], [-54, -5], [-30, -10], [-33, -2], [-35, 6], [-29, 15], [-59, 63], [-22, 8], [-29, -2], [-25, 9], [-23, 20], [-38, 19], [10, -15], [38, -35], [26, -36], [15, -35], [-7, -27], [-321, -16], [-138, 8], [-28, 25], [-66, 103], [-14, -183], [-241, -30], [-56, 5], [-93, 20], [-121, 50], [-50, 33], [-20, 32], [-15, 18], [-9, 3], [-30, -39], [-33, -81], [-83, 21], [-104, 20], [-38, 80], [-2, -115], [-169, 15], [-81, -4], [-23, 100], [-4, 112], [-33, -71], [14, -59], [5, -73], [-72, 21], [-157, 10], [-56, 10], [7, 96], [13, 97], [202, 96], [60, 45], [44, 18], [69, 12], [89, 7], [60, -6], [70, 6], [82, 17], [59, 5], [11, 6], [-17, 9], [-63, 62], [-23, 14], [-23, 6], [-45, 3], [-45, 27], [-25, 24], [-28, 32], [-43, 62], [-44, 69], [22, 37], [72, 30], [72, 21], [73, 11], [60, 0], [73, -16], [103, -32], [59, -36], [74, -76], [49, -61], [39, -27], [177, -50], [59, -8], [70, 4], [143, 13], [70, 14], [31, 16], [16, 23], [21, 18], [63, 41], [96, 85], [54, 68], [12, 22], [11, 28], [9, 32], [-30, -17], [-167, -167], [-35, -30], [-97, -51], [-42, -8], [-66, 2], [-89, 23], [-104, -36], [-63, 9], [-56, 25], [0, 118], [-71, 95], [78, 48], [65, 29], [115, 77], [26, 1], [84, -12], [-46, 17], [-45, 26], [-100, -7], [35, 166], [-67, -124], [-68, -65], [-42, -33], [-46, -18], [-176, -17], [43, 61], [40, 90], [-42, -34], [-99, -50], [-74, -27], [-61, -14], [-118, 4], [-59, 25], [17, 62], [0, 77], [36, 35], [54, 46], [59, 61], [40, 63], [158, 29], [153, 11], [128, 34], [63, 6], [60, -16], [244, -26], [100, -20], [44, -15], [33, -5], [34, 22], [44, 21], [152, -2], [42, 3], [39, 10], [47, 20], [56, 30], [8, 15], [-38, -1], [-39, -8], [-58, -21], [-56, -12], [-57, 2], [-115, 19], [-200, 3], [-102, 8], [-47, 9], [-27, 12], [-23, 19], [-20, 25], [10, 17], [41, 10], [35, 2], [57, -14], [63, -23], [69, -3], [-24, 21], [-88, 42], [-60, 36], [-51, 44], [-40, 43], [-87, 68], [-70, 68], [-50, 30], [-52, 15], [-160, 18], [-32, 12], [-76, 59], [-20, 100], [-34, 61], [32, 77], [54, 35], [318, -27], [135, 4], [172, -10], [92, -19], [106, -47], [94, -53], [91, -36], [83, -48], [91, -73], [54, -34], [47, -21], [62, -19], [118, -23], [103, -7], [53, 3], [57, 16], [41, 20], [-45, 6], [-119, -3], [-82, 11], [-47, 23], [-50, 31], [-79, 59], [-60, 39], [-131, 63], [-97, 62], [-78, 60], [-7, 25], [56, 18], [69, 13], [432, 40], [258, 48], [105, 56], [12, 13], [346, 78], [244, 29], [94, 5], [85, 13], [3, 7], [-74, 11], [-75, 5], [-171, 0], [-152, 9], [-46, 18], [10, 28], [14, 25], [46, 40], [49, 31], [209, 88], [140, 38], [41, 25], [-302, -57], [-106, -41], [-106, -62], [-55, -19], [-39, 5], [-35, -6], [-31, -16], [-25, -30], [-21, -44], [-19, -30], [-17, -16], [-43, -23], [-104, -44], [-242, -63], [-82, -16], [-70, -3], [-226, -35], [-68, -2], [-76, 11], [33, 31], [119, 56], [32, 25], [-77, -5], [-78, -16], [-172, -12], [-69, -23], [-66, -42], [-53, -26], [-40, -11], [-55, -6], [-202, -3], [-45, 2], [-116, 32], [-103, -11], [-43, 2], [-78, 23], [-23, 14], [3, 20], [45, 37], [53, 35], [170, 78], [109, 37], [158, 31], [369, 35], [17, 26], [-374, -29], [-318, -36], [-52, -14], [-74, -35], [-235, -129], [-70, -33], [-106, -7], [-81, 11], [-63, 16], [-109, 38], [-83, 21], [-39, 13], [-23, 14], [-18, 17], [-15, 18], [27, 16], [210, 33], [284, -6], [128, 7], [125, 20], [186, 51], [201, 71], [40, 22], [-74, 5], [-54, -5], [-131, -26], [-208, -68], [-181, -24], [-448, -13], [-142, -19], [-63, 4], [-47, 19], [-52, 34], [9, 28], [107, 31], [84, 7], [15, 7], [-119, 30], [-11, 15], [69, 34], [148, 50], [76, 15], [137, 10], [142, -5], [5, 9], [-140, 19], [-105, 4], [-138, -14], [-369, -80], [-31, 2], [-53, 14], [15, 20], [197, 85], [6, 13], [-141, -2], [-42, 4], [-40, 10], [-58, -9], [-75, -27], [-52, -12], [-31, 4], [-78, 33], [10, 27], [62, 35], [57, 25], [77, 23], [126, 29], [90, 10], [148, 0], [70, 13], [62, 22], [78, 36], [86, 25], [140, 20], [118, -6], [65, -18], [51, -31], [56, -24], [5, 19], [46, 24], [58, 10], [69, -3], [61, -12], [79, -28], [63, -13], [30, 0], [38, 16], [99, 1], [-2, 6], [-32, 17], [-40, 12], [-352, 82], [-10, 18], [119, 17], [74, 21], [35, 5], [87, 43], [57, 22], [105, 25], [43, -7], [53, -22], [51, -14], [151, -13], [65, -14], [115, -81], [46, -26], [66, -27], [39, -10], [77, -6], [8, 15], [-92, 38], [-25, 22], [11, 18], [20, 10], [28, 1], [72, -17], [192, -56], [288, -67], [110, -15], [68, -24], [62, -29], [61, -20], [11, 2], [-57, 45], [-139, 55], [-371, 94], [-147, 50], [-72, 33], [-53, 34], [-1, 19], [50, 21], [68, 17], [85, 7], [11, 7], [-78, 26], [-45, 22], [1, 16], [93, 12], [57, -4], [108, -28], [91, -13], [15, 8], [-94, 75], [-9, 17], [14, 9], [33, 10], [98, -5], [161, -37], [290, -18], [79, 3], [-12, 8], [-115, 23], [-121, 30], [-53, 18], [-39, 24], [-47, 21], [-4, 9], [75, 16], [196, -3], [182, -24], [155, 9], [97, -6], [39, -8], [70, -26], [224, -96], [23, -15], [26, -23], [27, -32], [38, -8], [74, 21], [49, 21], [-21, 20], [-124, 46], [-28, 20], [-61, 34], [-139, 59], [-37, 28], [-23, 24], [383, 22], [370, -20], [60, -14], [40, -19], [38, -30], [60, -30], [119, -46], [171, -29], [-33, 20], [-127, 51], [-58, 35], [1, 23], [10, 18], [20, 13], [144, 47], [206, 15], [24, -3], [161, -73], [76, -30], [53, -12], [2, 5], [-74, 34], [-56, 18], [-6, 12], [94, 35], [59, 9], [251, 10], [28, -3], [24, -10], [59, -39], [22, -5]], [[23476, 96654], [70, -22], [76, 11], [81, 2], [182, -10], [120, 6], [31, -3], [47, -14], [25, -18], [23, -28], [-59, -18], [-50, -89], [-7, -5], [-54, -1], [-27, -7], [-159, 13], [-438, 5], [-19, 11], [-58, 53], [-4, 21], [11, 24], [12, 16], [14, 8], [128, 39], [55, 6]], [[24016, 95061], [18, -43], [3, -18], [1, -37], [-8, -49], [-5, -9], [-7, -4], [-4, -13], [0, -21], [-7, -12], [-15, -5], [-99, -10], [-62, 2], [-91, -6], [-45, 3], [-30, 11], [-43, 22], [-91, 55], [-45, 2], [-116, 19], [-63, 58], [-24, 11], [-25, -18], [-7, 4], [-6, 12], [-7, 20], [-12, 10], [-48, -5], [-9, 6], [-2, 18], [0, 15], [9, 23], [51, 65], [25, 5], [31, 12], [17, 35], [-2, 33], [48, 49], [28, 15], [51, 34], [172, 54], [48, 4], [63, -4], [62, -17], [47, -28], [97, -70], [44, -43], [23, -43], [21, -25], [26, -54], [-9, -21], [-6, -28], [3, -14]], [[22221, 94438], [235, -123], [33, 10], [71, 6], [73, 19], [102, 15], [63, 27], [26, 8], [45, 5], [25, 0], [70, -15], [29, -11], [15, -11], [16, -19], [28, -49], [4, -18], [-1, -5], [-26, -30], [-17, -13], [-36, -12], [-30, -4], [-27, -21], [-29, 5], [-9, -19], [4, -12], [8, -6], [15, 1], [17, 8], [33, -4], [18, -13], [15, -21], [-11, -20], [-59, -27], [-87, -31], [-105, -98], [-56, -41], [-11, -13], [-6, -13], [2, -24], [2, -10], [16, -4], [51, 34], [34, 16], [33, 9], [60, 0], [25, -5], [44, -20], [41, -32], [9, -11], [-4, -11], [-17, -12], [-2, -8], [39, -15], [43, -43], [3, -26], [-19, -26], [-5, -18], [9, -8], [21, 5], [51, 29], [55, 15], [22, -2], [14, -6], [14, -40], [12, -45], [2, -37], [-9, -31], [-13, -23], [-33, -30], [-30, -11], [-16, 0], [2, -5], [35, -25], [15, -19], [6, -19], [-2, -18], [-5, -16], [-41, -57], [2, -9], [12, -3], [26, -33], [3, -78], [-93, -24], [-22, -18], [-25, -28], [-29, -22], [-67, -22], [-33, -3], [-167, 19], [-17, 11], [-11, 19], [-7, 29], [-1, 22], [2, 16], [0, 9], [-5, 3], [-19, -16], [-19, -29], [11, -33], [52, -91], [10, -39], [2, -16], [-3, -13], [-59, -53], [-34, -18], [-36, -9], [-33, 7], [-32, 22], [-24, 10], [-51, -1], [-15, 11], [-15, 22], [-35, 76], [-50, 54], [-42, 61], [-108, 89], [-56, 53], [-75, 86], [-31, 19], [-26, 8], [-51, 6], [-12, 11], [-19, 29], [-32, 22], [-11, 3], [-19, -6], [-50, -20], [-63, 22], [-14, 15], [-8, 25], [-8, 14], [-21, 13], [-18, 31], [-119, 63], [-71, 72], [-14, 26], [-2, 10], [7, 35], [17, 39], [21, 39], [14, 16], [46, 33], [37, 8], [51, -4], [27, -8], [24, -22], [11, -26], [12, -18], [38, -19], [20, -15], [30, -36], [24, -43], [21, -14], [52, -5], [53, 7], [114, 27], [5, 4], [7, 16], [13, 98], [8, 0], [39, -45], [11, -5], [16, 9], [10, 23], [-1, 10], [-24, 53], [-15, 23], [-13, 15], [-14, 4], [-31, -4], [-24, 10], [-5, 15], [4, 19], [13, 21], [14, 12], [27, 6], [32, -6], [44, -25], [28, -6], [40, 7], [-51, 15], [-70, 58], [-30, 11], [-36, -25], [-25, -9], [-47, -12], [-37, -2], [-156, 89], [-9, 9], [-11, 23], [1, 11], [16, 17], [38, 22], [58, 13], [39, 3], [34, -17], [49, -44], [43, -26], [4, 9], [-8, 26], [-20, 38], [-14, 10], [-34, 11], [-33, 26], [-15, 20], [-8, 20], [-1, 22], [7, 15], [13, 8], [120, 22], [83, -24], [53, -4], [22, 30], [-7, 6], [-28, -8], [-32, 0], [-19, 17], [-1, 9], [25, 23], [37, 10]], [[26411, 89435], [10, -7], [11, 4], [20, 29], [44, 82], [13, 7], [18, -1], [65, -52], [24, -30], [13, -41], [14, -16], [51, -21], [49, -7], [65, -21], [23, -16], [51, -78], [6, -5], [59, -32], [89, -72], [23, -10], [87, -24], [32, -17], [30, -27], [34, -49], [39, -77], [31, -123], [2, -24], [-3, -14], [-12, -16], [-50, -50], [4, -9], [48, 4], [105, 31], [65, -23], [22, -3], [5, 1], [24, 39], [25, -6], [38, -38], [24, -30], [10, -23], [-2, -13], [-25, -5], [60, -22], [53, -35], [-11, -23], [-57, -51], [-57, -45], [-67, -66], [-17, -11], [-9, 0], [-37, 12], [-54, 32], [-164, 73], [-51, 15], [-64, 9], [-9, 17], [-16, 110], [-29, 19], [-99, 23], [-29, 13], [-2, 22], [7, 38], [-14, 19], [-33, -1], [-33, -8], [-53, -26], [-25, -24], [-9, -25], [-6, -55], [-7, -26], [-18, -35], [-82, -88], [-33, -27], [-33, -7], [-13, -9], [-22, -32], [-33, -80], [-14, -23], [-21, -24], [-46, -36], [-46, -29], [-77, -33], [-42, -11], [-29, 11], [-20, 76], [-41, 223], [-7, 15], [-8, 9], [-10, 4], [-138, -29], [-76, 3], [-75, -50], [-19, -3], [-39, 1], [-27, 8], [-7, 6], [-5, 21], [2, 23], [9, 25], [34, 66], [28, 41], [13, 13], [129, 74], [31, 24], [16, 25], [0, 25], [-6, 33], [-23, 80], [-5, 73], [0, 36], [8, 55], [33, 135], [11, 66], [20, 234], [11, 67], [16, 62], [15, 37], [42, 73], [31, 30], [41, 20], [8, -2], [8, -9], [15, -31], [56, -29], [18, -28], [12, -31], [7, -40], [-7, -18], [-26, -27], [-5, -11], [1, -9], [51, -42], [38, -102]], [[22861, 95890], [3, -26], [-4, -19], [-9, -14], [-1, -17], [9, -18], [37, -45], [12, -25], [2, -25], [-2, -17], [-23, -32], [-10, -43], [-1, -22], [14, -35], [0, -16], [-26, -28], [-54, -25], [8, -13], [117, -30], [9, -7], [0, -70], [20, -76], [-8, -1], [-28, 24], [-52, 28], [-63, -53], [7, -90], [42, -40], [12, -23], [-4, -13], [-35, -6], [-12, 2], [-35, 19], [-21, 27], [-7, -1], [-6, -13], [4, -14], [24, -24], [11, -29], [-11, -8], [-36, -8], [-48, 0], [-76, -13], [-38, -2], [-36, 7], [-49, 1], [-41, -3], [-24, 6], [-23, 14], [-26, -3], [-57, -35], [-89, 11], [-80, 3], [-16, 11], [-18, 23], [-35, 70], [6, 18], [86, 9], [2, 6], [-61, 25], [-70, 18], [-32, 15], [7, 27], [-2, 7], [120, 32], [88, 62], [54, 25], [4, 12], [46, 13], [106, 7], [4, 18], [-200, -10], [-274, -35], [-85, -18], [-71, 10], [-300, -54], [-13, 0], [-31, 17], [-27, 33], [19, 22], [88, 43], [44, 37], [-5, 21], [35, 35], [56, 5], [96, -29], [49, -29], [45, -14], [39, 3], [41, 20], [-11, 3], [-69, -11], [-8, 3], [-35, 33], [-15, 20], [-10, 21], [-1, 15], [21, 28], [-79, 9], [-29, 19], [-14, 24], [3, 11], [25, 28], [67, 39], [-8, 10], [-97, -1], [-22, 5], [-42, 24], [9, 27], [39, 39], [30, 23], [19, 7], [31, 0], [73, -15], [21, -8], [56, -38], [14, -21], [-2, -21], [11, -15], [43, -22], [186, -115], [35, -27], [23, -12], [43, -9], [26, 2], [20, 8], [3, 10], [-80, 40], [-20, 22], [-17, 29], [7, 9], [24, 4], [58, -4], [69, 8], [-76, 12], [-50, 16], [-52, 1], [-64, 26], [0, 8], [16, 9], [87, 11], [17, 5], [1, 7], [-29, 18], [-26, 9], [-132, 21], [-47, 24], [-15, 11], [-4, 11], [17, 28], [71, 35], [51, 17], [89, 12], [71, -1], [40, -5], [94, -59], [45, -39], [77, 7], [-22, 40], [-15, 45], [23, 17], [64, 29], [51, -15], [66, -40], [15, -13], [75, -25], [44, -8], [23, -13], [7, -17]], [[21270, 97531], [65, -11], [77, -37], [73, -79], [4, -10], [0, -13], [-3, -16], [-9, -21], [-13, -12], [37, -15], [4, -8], [-3, -17], [4, -12], [23, 12], [19, 19], [5, 12], [4, 32], [57, 17], [60, 23], [28, 5], [47, -5], [112, -56], [43, -5], [16, -7], [14, -13], [1, -14], [-23, -32], [-9, -20], [6, -13], [58, -11], [134, 22], [117, -53], [65, -63], [47, -21], [8, -11], [-14, -11], [-13, -29], [-39, -22], [-8, -10], [21, -26], [1, -17], [-2, -22], [7, -13], [53, -14], [119, -93], [22, -26], [14, -32], [1, -11], [-17, -18], [-19, -51], [-10, -12], [-49, -10], [-88, -9], [-83, -17], [-88, 22], [-87, 34], [-26, 22], [-22, 28], [-5, 10], [-9, 44], [-4, 9], [-37, 24], [-32, 37], [-63, 3], [-147, 38], [-63, 8], [-64, -2], [-89, -15], [-17, 4], [-15, 11], [-14, 18], [-3, 14], [14, 23], [-262, -29], [-75, -35], [-105, 6], [-53, 14], [-69, 33], [-32, 29], [-30, 38], [-3, 29], [24, 20], [25, 11], [26, 4], [142, -23], [125, -11], [54, 11], [25, 32], [-30, 16], [-120, 7], [26, 17], [101, 16], [53, 26], [-10, 8], [-30, 10], [-137, -2], [-48, 9], [-3, 9], [11, 10], [77, 51], [-3, 10], [-33, 16], [-29, 22], [-11, 3], [-68, -20], [-95, -75], [-22, -11], [-22, 1], [-21, 12], [1, 16], [21, 19], [44, 58], [-4, 21], [-42, 14], [-114, -10], [-63, -1], [-9, 17], [-3, 30], [3, 29], [15, 45], [22, 35], [13, 12], [151, -7], [245, 21], [71, 2], [78, -21]], [[24476, 98578], [36, -48], [134, -115], [61, -42], [103, -51], [13, -19], [1, -8], [-3, -28], [30, -10], [88, -16], [99, -28], [18, 1], [34, 17], [42, 5], [54, -4], [26, -12], [19, -18], [8, -13], [1, -10], [-19, -19], [2, -8], [12, -8], [2, -11], [-20, -41], [5, -15], [50, -37], [45, -19], [89, -20], [58, 2], [36, -13], [1, 8], [-17, 23], [-34, 34], [-65, 18], [-9, 19], [-5, 34], [6, 22], [33, 18], [27, 6], [84, 1], [45, -8], [80, -25], [8, -14], [4, -27], [3, -54], [-2, -12], [-67, -30], [-15, -21], [17, -6], [58, -5], [90, -19], [35, -2], [35, -44], [27, -41], [-20, -52], [-26, -82], [-21, -19], [-21, -28], [15, -6], [88, 12], [18, 4], [59, 28], [86, -7], [29, -7], [15, -10], [26, -31], [22, -41], [16, 3], [40, 51], [15, 12], [20, 12], [9, -2], [40, -47], [91, -82], [31, -34], [6, -26], [-39, -29], [-30, -15], [-223, -62], [-99, -35], [-50, -28], [-25, -9], [-54, 5], [-12, -5], [-16, -44], [-18, -19], [-46, -30], [-65, -55], [-38, -24], [-68, 18], [-17, 25], [-10, 58], [-1, 24], [2, 13], [9, 20], [29, 49], [-3, 6], [-14, -5], [-45, -24], [-18, -13], [-16, -23], [-8, -38], [7, -70], [-6, -28], [-18, -14], [7, -11], [53, -15], [9, -7], [6, -12], [3, -17], [-3, -16], [-16, -25], [-30, -10], [-38, 11], [-82, 61], [-36, -3], [-9, -7], [8, -22], [25, -48], [5, -41], [-12, -33], [-23, -53], [-16, -29], [-9, -3], [-41, -1], [-35, 14], [-104, 93], [-51, 39], [-76, 78], [-19, 15], [-12, 4], [-10, -33], [20, -31], [68, -72], [41, -53], [29, -43], [4, -19], [-9, -7], [-15, 4], [-20, 16], [-62, 25], [-26, 15], [-16, 16], [-31, 13], [-45, 8], [-45, 2], [-45, -5], [-8, -8], [50, -23], [18, -12], [13, -17], [9, -19], [-17, -13], [-63, -7], [-84, 5], [-137, 17], [-136, 28], [-125, 44], [-91, 44], [-36, 23], [-11, 17], [34, 16], [119, 19], [119, 13], [-19, 11], [-217, 25], [-71, 4], [-38, -6], [-44, 4], [-34, 20], [-45, 37], [-23, 25], [3, 10], [17, 5], [99, -4], [13, 3], [-49, 19], [-157, 37], [-59, 33], [-11, 12], [-4, 13], [1, 12], [59, 25], [183, 59], [62, 9], [63, 1], [44, 16], [38, 56], [189, 20], [146, 25], [12, 7], [-109, -4], [-155, 5], [-65, 37], [-45, 7], [-49, 0], [-57, -12], [-98, -35], [-47, -9], [-107, -36], [-29, 3], [-15, 4], [-5, 7], [19, 24], [28, 17], [-5, 5], [-42, 4], [-48, -1], [-34, -6], [-122, -32], [-55, -23], [-17, -3], [-59, 38], [-95, 20], [-21, 16], [20, 63], [27, 13], [73, 11], [217, 57], [13, 11], [20, 29], [-50, -7], [-109, -27], [-90, -14], [-71, 0], [-51, 4], [-33, 8], [-40, 17], [-128, 83], [-36, 39], [-4, 36], [-9, 26], [-38, 65], [276, -40], [107, -8], [208, -2], [10, 3], [3, 11], [-4, 17], [2, 13], [7, 9], [77, 23], [12, 8], [-91, 4], [-168, -39], [-59, 0], [-67, 56], [-71, -10], [-34, 4], [-53, 14], [-26, 12], [-16, 15], [-7, 13], [2, 10], [14, 12], [62, 16], [28, 1], [73, -10], [55, 1], [-18, 17], [-79, 43], [-70, 47], [5, 80], [57, 17], [60, 2], [58, -20], [77, -2], [56, -23], [37, -44], [44, 1], [69, -8], [155, 1], [-28, 15], [-49, 14], [-109, 18], [-53, 63], [-114, 33], [-88, 17], [1, 15], [67, 79], [80, 28], [128, -10], [85, 14], [108, 28], [106, -13], [28, 2], [16, 8], [14, 17], [0, 15], [-14, 14], [-34, 17], [-135, 2], [-60, 7], [-23, 9], [-7, 14], [-4, 14], [0, 15], [4, 9], [11, 5], [33, 6], [126, 0], [76, 8], [83, -10], [173, -39], [55, -20], [60, -34], [31, -30]], [[23807, 96147], [52, -5], [44, 8], [38, -2], [56, -23], [53, -36], [40, -16], [13, -8], [5, -9], [6, -27], [0, -12], [-3, -10], [-18, -25], [-15, -30], [-30, -27], [-16, -20], [-14, -26], [31, 15], [119, 85], [77, -10], [117, 7], [141, 35], [67, 5], [67, -3], [50, -10], [108, -47], [37, -22], [14, -16], [3, -11], [-22, -18], [-67, 11], [-111, 10], [-20, 5], [-18, 0], [-12, -6], [8, -25], [22, -5], [133, -6], [436, -78], [19, -25], [-5, -11], [-16, -12], [-31, -17], [-252, -18], [-143, 16], [-120, 26], [-41, -6], [35, -35], [72, -10], [61, -21], [25, -17], [128, -13], [21, -13], [40, -34], [33, -3], [33, -24], [27, -41], [13, -5], [39, 7], [64, -36], [21, -19], [0, -14], [-15, -22], [-29, -31], [-73, -35], [-6, -11], [86, 4], [16, -5], [101, -63], [13, -1], [8, 6], [10, 23], [-4, 21], [-13, 28], [4, 21], [19, 13], [19, 7], [19, 0], [21, -8], [102, -77], [131, 37], [24, -17], [20, -30], [9, -5], [49, 61], [30, 15], [123, -73], [75, -16], [30, -15], [55, -18], [79, -6], [13, 27], [-45, 35], [26, 15], [109, 29], [58, -4], [107, 42], [66, 5], [40, 0], [133, 63], [31, 10], [23, 22], [52, -3], [141, -36], [40, 3], [150, 36], [56, 8], [55, -1], [141, -21], [105, -22], [33, -12], [-12, -29], [6, -9], [13, -7], [35, -8], [131, -1], [57, -7], [46, -28], [10, -11], [-1, -11], [-45, -30], [7, -7], [45, -6], [100, -4], [22, -7], [21, -37], [21, -52], [0, -20], [-35, -35], [-95, -46], [-106, -39], [-7, -10], [34, -18], [35, -9], [27, 2], [85, 18], [19, -1], [38, -18], [18, -17], [17, -24], [-30, -22], [-121, -27], [-72, 36], [-24, 7], [-16, -3], [9, -15], [35, -28], [11, -18], [-12, -9], [-6, -18], [1, -26], [-3, -27], [-11, -42], [-5, -2], [-263, -8], [-32, -8], [-74, -29], [-56, -15], [-36, -2], [-36, 5], [-96, 31], [-64, -6], [-25, 3], [-55, 20], [-13, 10], [-22, 27], [-16, 37], [1, 22], [7, 32], [-4, 17], [-16, 0], [-17, 6], [-52, 33], [-32, 10], [-6, -6], [10, -25], [6, -8], [34, -19], [6, -21], [-14, -55], [-5, -8], [-34, -40], [-25, -12], [-68, -1], [-105, -28], [-50, -4], [-67, 7], [-42, 12], [-27, 15], [-27, 21], [-13, 2], [-7, -46], [-13, -6], [-23, 1], [-35, 14], [-28, 33], [-9, 0], [-4, -19], [-7, -13], [-8, -6], [-74, -20], [-41, 0], [-43, 23], [-28, -2], [-36, -13], [-87, 24], [-21, 1], [18, -39], [-29, -6], [-62, 1], [-103, 13], [-64, -19], [-114, 11], [-116, 3], [-22, 9], [-15, 18], [-1, 16], [6, 23], [17, 33], [28, 45], [10, 23], [-26, 11], [-15, 15], [-13, 1], [-41, -17], [-27, -50], [-20, -14], [-9, 12], [-7, 30], [-9, 15], [-11, -1], [-11, -8], [-11, -15], [-15, -6], [-22, 4], [-7, -7], [6, -20], [2, -18], [-2, -16], [-18, -17], [-52, -24], [-31, -7], [-79, -4], [-48, 7], [-96, 29], [-53, 1], [-64, 48], [-51, 11], [3, 18], [22, 32], [-1, 9], [-69, -47], [-10, -15], [9, -34], [-10, -3], [-47, 13], [-47, -10], [-12, 3], [-32, 25], [-57, 26], [-25, 28], [-39, 90], [-20, 59], [2, 12], [29, 16], [-4, 13], [-36, 34], [-39, 28], [-12, 19], [-5, 20], [-5, 28], [-1, 21], [5, 13], [22, 42], [62, 76], [8, 14], [3, 13], [-8, 40], [-12, 40], [-12, 29], [-34, 39], [-46, 42], [-66, 73], [-48, 58], [-58, 80], [-28, 7], [-32, -3], [-70, -28], [-24, -13], [-5, -9], [-52, -2], [-148, 7], [-56, 9], [-42, -3], [-72, -20], [-77, 4], [-48, 56], [-110, 31], [-33, 17], [-22, 24], [7, 15], [63, 14], [26, 15], [12, 12], [-62, -10], [-27, 1], [-186, 77], [-57, 14], [-10, 7], [-4, 9], [0, 11], [5, 17], [55, -22], [25, -1], [39, 6], [14, 14], [-9, 7], [-64, 26], [-30, 19], [-12, 15], [12, 20], [3, 13], [21, 8], [37, 1], [48, 10], [88, 26], [59, 10], [59, -2], [142, -27], [142, -34], [89, -26]], [[23276, 97079], [66, -15], [113, 7], [41, -11], [106, -39], [32, -23], [8, -17], [0, -9], [-35, -19], [-71, -28], [-17, -22], [63, -27], [32, -24], [15, -17], [0, -18], [-42, -48], [-31, -14], [-48, 2], [-23, -5], [-60, -22], [-95, -21], [-129, -9], [-35, -13], [-65, -22], [-43, -3], [-14, 12], [-6, 18], [3, 13], [9, 15], [-21, 15], [-92, 28], [-54, 39], [-8, 13], [-2, 11], [119, 7], [52, 8], [23, 13], [4, 7], [-23, 3], [-82, 26], [-138, 16], [-7, 19], [-57, 36], [-6, 35], [-12, 10], [-39, 15], [-6, 5], [-12, 22], [-1, 12], [2, 12], [71, 23], [-10, 16], [-54, 61], [-14, 34], [2, 13], [34, 18], [47, 0], [124, -5], [59, -8], [59, -14], [65, -22], [97, -19], [31, -12], [58, -41], [7, -12], [-4, -13], [14, -12]], [[24119, 94562], [109, -27], [53, -18], [26, -12], [50, -40], [25, -12], [97, 24], [68, 8], [151, -10], [127, -34], [48, -24], [28, -23], [-7, -26], [-24, -41], [-27, -38], [-56, -61], [-47, -31], [-11, -14], [-8, -21], [-18, -29], [-50, -65], [-14, -11], [-71, -28], [25, -12], [11, -11], [-10, -29], [-45, -69], [-46, -63], [-33, -39], [-59, -55], [-32, -15], [-44, -5], [-263, 48], [-66, -1], [-176, -25], [17, -12], [64, -19], [41, -20], [55, -63], [8, -16], [3, -18], [-2, -36], [-4, -9], [-87, -97], [-29, -71], [-18, -58], [-29, -16], [-98, 24], [-32, 0], [-110, -17], [-52, 8], [8, 88], [-8, 95], [-16, 90], [-82, 161], [-9, 29], [-6, 31], [-3, 33], [0, 33], [6, 67], [0, 34], [-4, 88], [-11, 132], [-1, 47], [1, 19], [3, 14], [18, 19], [34, 13], [17, 2], [108, -40], [50, -13], [33, 0], [2, 5], [-30, 8], [-27, 18], [-46, 51], [-20, 44], [-5, 14], [-1, 16], [3, 15], [6, 15], [23, 22], [18, 10], [68, 26], [69, 15], [151, 11], [42, -8], [66, 29], [38, 6], [67, -10]], [[22933, 91959], [9, -7], [16, 6], [12, 19], [8, 4], [12, -4], [39, -34], [29, -35], [32, -25], [50, -23], [110, -73], [32, -49], [34, -77], [31, -58], [26, -41], [29, -32], [46, -36], [41, 26], [18, 7], [15, -11], [14, -27], [-7, -12], [-18, -16], [-29, -17], [-42, -2], [-20, -5], [-32, -28], [-26, -35], [-36, -11], [-67, -57], [-37, -22], [-55, -5], [-114, 44], [-71, -6], [-58, 9], [-64, 48], [-51, 26], [-97, 39], [-6, 6], [-4, 13], [-2, 20], [-5, 14], [-6, 7], [-16, -1], [-15, -14], [-30, -11], [-46, 2], [-20, 9], [-15, 12], [-8, 15], [-1, 17], [-5, 13], [-7, 9], [-16, 0], [-26, -8], [-10, -11], [5, -13], [-4, -8], [-46, 0], [-18, 8], [-34, 24], [-15, 24], [-19, 43], [2, 11], [12, 26], [16, 19], [103, 10], [48, 11], [53, 29], [61, 52], [13, 15], [1, 11], [-4, 12], [-19, 30], [-7, 20], [6, 9], [25, 1], [-13, 12], [-11, 16], [-4, 10], [1, 16], [19, 4], [24, -8], [47, -47], [18, -9], [32, -7], [-34, 32], [-35, 67], [-4, 24], [1, 13], [9, 36], [8, 14], [11, 10], [33, 21], [53, 14], [28, 2], [27, -11], [24, -23], [54, -37], [8, -15], [-1, -7], [-20, -10], [-3, -9], [8, -14]], [[33026, 78308], [9, -4], [38, 28], [20, -1], [-1, -20], [-32, -22], [-15, -17], [18, -15], [0, -10], [-22, -25], [-11, -27], [9, -26], [36, 26], [14, 0], [20, -6], [19, 8], [11, 13], [63, 99], [3, 13], [-68, -20], [-8, 13], [45, 61], [-4, 31], [23, 51], [20, 30], [15, 16], [22, 16], [15, -24], [5, -43], [37, 6], [37, -9], [26, -18], [5, -10], [0, -17], [-9, -29], [-15, -25], [30, -31], [-4, -13], [-48, -36], [-28, -35], [-25, -44], [-50, -51], [-80, -36], [-25, 0], [-30, 11], [-30, -3], [-29, -13], [-29, 1], [-13, -7], [-14, 1], [-11, 14], [-23, 41], [-12, 27], [-12, 130], [4, 68], [20, 63], [29, 43], [17, 34], [72, 200], [14, 45], [17, 39], [31, 39], [40, 64], [12, 14], [23, 6], [23, -4], [-7, -23], [2, -23], [26, -89], [0, -18], [-15, -71], [-27, -116], [-7, -63], [4, -19], [-11, -32], [-12, -25], [-47, -45], [-24, -11], [-22, -17], [-54, -58]], [[29247, 77766], [40, 22], [82, 85], [61, 30], [80, 89], [57, 17], [11, 20], [9, 73], [6, 26], [26, 73], [33, 61], [26, 84], [47, 54], [71, 45], [66, 98], [36, 30], [35, 22], [15, 40], [21, 23], [58, 46], [64, 13], [64, 38], [50, 21], [30, 36], [44, 19], [132, 104], [36, 49], [48, 99], [41, 51], [14, 54], [60, 87], [62, 116], [30, 83], [46, 45], [89, 132], [47, 52], [20, 6], [53, 47], [34, 48], [54, 49], [97, 60], [91, 72], [123, 63], [144, 93], [117, 50], [82, 7], [100, 24], [35, -3], [156, -40], [74, -50], [85, -106], [13, -27], [2, -39], [-45, 19], [-40, 1], [28, -22], [47, -65], [-3, -81], [-26, -73], [-79, -36], [-20, -29], [-16, -47], [-16, -18], [-39, -22], [-21, -30], [-62, -49], [-28, -6], [-32, 11], [-78, 47], [-47, 44], [-24, -24], [-20, -25], [-46, 8], [-21, -11], [-34, 12], [-71, -56], [20, -6], [56, 32], [19, -4], [42, -41], [100, -45], [26, -29], [25, -95], [16, -15], [35, 10], [39, 47], [32, 25], [63, 20], [-13, -31], [48, 3], [48, -42], [-18, -30], [-24, -59], [-16, -116], [-49, -78], [-64, -76], [16, -19], [19, -11], [41, 22], [28, -1], [31, -15], [-10, -59], [-11, -40], [7, -38], [18, -71], [25, -16], [10, -92], [14, -50], [-2, -40], [25, -25], [4, -41], [92, -12], [19, -16], [63, -15], [12, -12], [12, -22], [-63, -49], [51, -36], [47, -59], [38, 12], [16, -2], [42, -36], [12, -19], [6, -16], [21, 4], [31, 14], [54, -4], [59, -20], [-5, -32], [-9, -21], [46, 7], [28, -23], [10, 11], [7, 14], [57, 38], [73, 79], [9, -9], [3, -30], [10, -49], [28, -34], [33, -8], [45, 26], [18, -22], [22, -43], [20, -57], [-1, -20], [-26, -17], [-24, -26], [99, -10], [10, -11], [10, -22], [-10, -22], [-9, -11], [-18, 13], [-33, -12], [-28, -29], [-31, -16], [-20, -2], [-22, -14], [-20, -20], [-20, -6], [-65, -52], [-66, -33], [-69, -54], [-71, -34], [-73, -40], [-16, -4], [-19, 2], [-41, -40], [-21, 6], [-21, -7], [-25, 9], [-16, 16], [13, -42], [3, -39], [-6, -16], [-12, -20], [-42, 3], [-16, 14], [-20, 21], [-9, 33], [-21, 24], [-13, -33], [1, -25], [-16, -33], [-18, 57], [-34, -21], [-14, -61], [7, -17], [10, -46], [-16, -25], [-12, 7], [-25, -68], [-31, -25], [-31, -69], [-37, -53], [-11, -36], [-62, -81], [-24, 2], [-17, -2], [-26, -34], [-5, -68], [-11, 9], [-12, -2], [-6, -22], [-9, -3], [-23, 20], [-27, -11], [-21, 15], [-27, 100], [-14, 35], [-26, 12], [-6, -22], [-10, -20], [-25, 41], [-18, 153], [0, 37], [26, 129], [64, 116], [-21, 4], [-56, -81], [6, 20], [9, 20], [19, 33], [29, 31], [39, 17], [27, 3], [18, 17], [27, 30], [5, 16], [-24, -18], [-39, -18], [10, 23], [10, 13], [209, 208], [42, 34], [84, 44], [12, 28], [-12, 19], [33, -17], [-3, -23], [-5, -18], [-2, -29], [3, -28], [34, -14], [27, -52], [-13, 71], [25, 40], [96, 54], [80, 6], [25, 25], [-68, 17], [-81, -9], [-50, 19], [-70, -12], [-73, 11], [-22, -15], [-19, -34], [-23, 15], [-12, 3], [-11, 11], [24, 58], [74, 87], [46, 75], [12, 15], [10, 31], [-24, -5], [-22, -12], [-15, 34], [-27, 47], [-2, -20], [13, -57], [-51, -101], [-34, -7], [-44, -47], [-62, -41], [-73, -78], [-95, -66], [-19, -1], [-43, 55], [12, 24], [11, 34], [-11, -10], [-7, -14], [-25, -24], [21, -45], [-11, -17], [-30, -22], [-27, -32], [-25, -22], [-20, 28], [-54, -35], [-46, -9], [-10, 17], [-3, 28], [-16, 7], [-30, -8], [-11, 15]], [[34594, 81530], [-20, -58], [-14, -28], [-13, -9], [-28, -8], [-59, -9], [-25, -8], [-3, -39], [4, -20], [8, -16], [11, -4], [24, 9], [9, -1], [7, -8], [6, -15], [3, -20], [0, -25], [-4, -31], [-20, -73], [-25, -40], [-33, -33], [-7, -12], [-5, -15], [-4, -48], [-16, -38], [-52, -96], [-20, -22], [0, -17], [-8, -46], [-16, -36], [-43, -85], [-10, -30], [-5, -24], [1, -33], [-2, -15], [-10, -28], [-14, -27], [-3, -13], [6, -23], [5, -8], [1, -22], [-4, -34], [18, 22], [40, 78], [31, 47], [20, 16], [15, 21], [15, 46], [20, 44], [19, 15], [9, -9], [7, -21], [-1, -28], [-10, -33], [0, -10], [24, 24], [41, 21], [15, -3], [30, -30], [26, 3], [40, 18], [7, -8], [-7, -27], [-15, -26], [-37, -36], [-90, -72], [-28, -49], [5, 2], [20, 21], [20, 11], [21, 2], [9, -7], [-3, -14], [-3, -37], [-54, -74], [13, 3], [62, 33], [39, -46], [52, 16], [31, 16], [0, -10], [6, -20], [0, -33], [3, -5], [15, 11], [3, 12], [-1, 58], [5, 6], [10, -9], [6, -15], [2, -42], [-7, -43], [-9, -39], [-23, -57], [3, -24], [-6, -27], [5, -1], [23, 25], [1, 10], [-2, 24], [3, 11], [19, 26], [31, 31], [11, 4], [4, -7], [-2, -19], [10, 5], [20, 28], [18, 16], [17, 6], [18, 19], [19, 32], [20, 27], [21, 21], [9, 2], [-3, -35], [4, -40], [1, -34], [4, -7], [17, 36], [9, 13], [11, 6], [12, -3], [87, 13], [27, -9], [30, -24], [37, -36], [14, -33], [3, -42], [-4, -29], [-27, -37], [-24, -24], [-14, -24], [-5, -25], [-5, -15], [-16, -20], [-72, -59], [17, -2], [41, 13], [28, 3], [1, -9], [-11, -16], [-21, -17], [-2, -8], [1, -11], [22, -12], [29, 6], [24, -9], [-3, -14], [-19, -46], [-5, -28], [-26, -25], [-50, -37], [-13, -15], [3, -3], [46, 28], [24, 7], [14, 0], [17, 27], [26, 9], [26, -17], [39, 46], [14, 6], [24, -5], [15, 8], [26, 32], [20, 15], [4, -1], [4, -13], [2, -36], [-5, -32], [-6, -21], [-21, -45], [-13, -16], [-12, -6], [-21, 2], [-9, -7], [-20, -35], [-35, -36], [-22, -14], [14, -20], [5, -37], [-8, -12], [-37, -12], [-2, -6], [-13, -8], [-31, -13], [21, -6], [39, 9], [4, -6], [-5, -27], [-11, -27], [-46, -70], [0, -7], [7, -35], [9, -26], [11, -18], [26, -1], [19, 8], [27, 47], [62, 146], [55, 41], [45, 45], [11, -9], [5, -11], [-2, -11], [-23, -37], [-12, -31], [-31, -94], [-12, -45], [-6, -47], [1, -81], [4, -14], [9, -19], [19, 17], [31, 40], [20, 38], [15, 63], [10, 24], [10, -1], [10, -13], [2, -30], [8, -42], [6, -41], [-4, -46], [-5, -25], [-63, -186], [6, -33], [2, -20], [-2, -22], [-20, -89], [-19, -55], [-11, -24], [-12, -15], [-15, -5], [-13, 8], [-11, 21], [-10, 11], [-9, 1], [-17, -4], [-42, -45], [-9, -3], [-6, 6], [-8, 24], [6, 120], [4, 40], [-9, 30], [9, 52], [1, 19], [-6, 7], [-10, -4], [-17, -26], [-22, -47], [-23, -42], [-42, -57], [-18, -11], [-8, 2], [-8, 8], [-12, 24], [1, 22], [5, 29], [17, 68], [34, 101], [28, 72], [5, 31], [-7, 13], [-7, 27], [-11, 78], [-13, 64], [-16, 28], [-41, 32], [-7, -8], [-4, -43], [-48, -124], [-8, -54], [-6, -20], [-9, -14], [-21, -17], [6, 29], [22, 64], [-3, 6], [-28, -51], [-21, -29], [-26, -7], [-16, 2], [-15, -8], [-65, -121], [-3, -41], [-11, -33], [-32, -60], [-17, -21], [-24, -4], [-21, 11], [-15, -2], [-33, -19], [-38, -8], [-16, 4], [-10, 7], [-19, 24], [-2, 16], [1, 10], [10, 25], [22, 32], [18, 11], [45, 16], [33, 24], [25, 35], [12, 21], [47, 110], [60, 39], [29, 31], [21, 40], [3, 14], [-30, -20], [-15, -5], [-25, 7], [-11, 14], [-34, -4], [-47, 6], [-7, -10], [-6, -54], [-6, -28], [-7, -9], [-11, -6], [-21, -6], [-55, 19], [-11, 11], [-14, 8], [-60, -18], [-13, 2], [12, 12], [60, 40], [6, 112], [-3, 18], [-17, -16], [-28, -16], [-20, 5], [-9, 10], [-8, -9], [-19, -59], [-12, -7], [-17, -3], [-38, -21], [-73, -15], [-14, -15], [-49, 5], [-145, 33], [-52, -3], [-62, 20], [-12, 8], [-87, -3], [-26, 4], [2, 25], [-3, 6], [-25, -27], [-23, -18], [-29, -15], [-91, -26], [-49, -6], [-28, 18], [-11, 19], [-17, 59], [-12, 74], [0, 13], [6, 26], [19, 36], [87, 94], [69, 96], [30, 49], [28, 18], [46, 41], [2, 5], [-45, -5], [-32, 11], [-32, 5], [-62, -11], [-62, 0], [0, 21], [29, 40], [62, 68], [6, 1], [-19, -32], [-5, -24], [8, -16], [9, -10], [36, -4], [8, 14], [12, 73], [27, 85], [14, 61], [25, 47], [13, 7], [11, -9], [37, -11], [38, -43], [12, -3], [4, 3], [-14, 13], [-11, 20], [-5, 19], [14, 59], [16, 17], [3, 12], [-32, 0], [-26, 16], [-8, 27], [1, 47], [9, 28], [21, 37], [25, 25], [15, -6], [30, -34], [18, 10], [-3, 10], [-27, 53], [-9, 39], [1, 19], [59, 187], [29, 100], [40, 153], [9, 24], [20, 45], [9, 12], [25, 0], [16, 6], [-23, 19], [-8, 14], [-1, 15], [6, 15], [9, 12], [31, 24], [22, 40], [13, 48], [-2, 16], [-7, 16], [0, 9], [17, 10], [42, 56], [5, 11], [16, 75], [19, 33], [17, 17], [28, 21], [86, 52], [51, 46], [34, -3], [10, -32], [49, -21], [9, 23], [-12, 28], [10, 11], [40, 10], [7, -4], [12, -16], [-2, -14]], [[25947, 92747], [11, -12], [64, 16], [54, 18], [84, 45], [50, 15], [152, 0], [26, -9], [-11, -26], [-7, -8], [5, -11], [17, -16], [33, -17], [13, 16], [9, 37], [23, 153], [9, 46], [5, 44], [-1, 41], [-11, 26], [-39, 16], [-53, -3], [-28, 4], [-33, 8], [-25, 13], [-16, 17], [-31, 52], [-24, 28], [-60, 52], [-28, 17], [14, 21], [55, 23], [33, 23], [39, 65], [23, 11], [84, -9], [114, -51], [72, -44], [19, -5], [0, 8], [-18, 21], [-82, 54], [-38, 40], [-17, 29], [8, 12], [46, 13], [6, 14], [-63, 17], [-31, 0], [-26, -12], [-28, -1], [-51, 22], [-14, 13], [-30, 38], [-15, 34], [-17, 21], [-7, 16], [-3, 51], [2, 30], [7, 26], [12, 22], [33, 39], [19, 12], [35, 5], [76, -20], [203, -71], [-5, 23], [-227, 96], [-81, 24], [-20, 35], [122, 133], [111, 31], [56, 38], [91, 2], [85, -25], [1, 7], [-38, 46], [3, 12], [48, 27], [89, 32], [108, 26], [22, 13], [28, 9], [51, 9], [127, 3], [71, -3], [95, -20], [55, -35], [17, -21], [30, -69], [24, -95], [35, -40], [56, -21], [39, -24], [22, -26], [6, -32], [-10, -39], [7, -40], [25, -41], [20, -24], [42, -26], [1, -14], [-13, -16], [-28, -23], [-70, -69], [-90, -76], [-64, -66], [-3, -20], [133, 104], [42, -4], [2, -15], [-28, -50], [-33, -45], [-33, -29], [6, -11], [63, -50], [-11, -9], [-31, 5], [-12, -5], [-9, -9], [-6, -14], [0, -20], [5, -25], [-1, -18], [-6, -13], [7, -5], [18, 2], [16, 10], [27, 34], [88, 93], [57, 34], [18, 4], [52, -23], [13, 1], [-58, 72], [-5, 18], [12, 26], [7, 9], [32, 20], [26, 10], [15, -4], [24, -36], [11, -25], [19, -11], [44, 14], [28, 30], [36, -20], [54, -48], [-5, -48], [0, -49], [3, -35], [65, -65], [44, -28], [9, -1], [-2, 10], [-9, 22], [-24, 21], [-23, 34], [-20, 40], [12, 95], [34, 50], [32, -13], [43, -29], [34, -2], [53, 3], [108, -58], [58, -1], [-5, 23], [-44, 12], [-64, 31], [-101, 38], [-46, 44], [-8, 20], [1, 22], [6, 20], [10, 16], [20, 17], [97, 50], [69, 22], [51, 7], [87, -1], [100, -9], [55, -14], [62, -36], [79, -35], [28, -6], [33, 0], [38, 8], [36, -3], [114, -52], [30, -27], [18, -32], [14, -32], [8, -31], [-3, -24], [-95, -108], [-41, -18], [-28, -41], [-40, -77], [-35, -42], [-3, -8], [7, -2], [21, 19], [36, 53], [26, 46], [47, 38], [78, 45], [68, 22], [58, -2], [49, -6], [39, -11], [24, -10], [7, -7], [16, -34], [-1, -23], [-10, -26], [-19, -29], [-84, -33], [-47, -25], [-29, -10], [-87, -9], [4, -10], [65, -14], [71, 4], [-1, -16], [-34, -44], [-11, -38], [9, -31], [-1, -26], [-26, -53], [-28, -48], [10, -7], [66, 69], [18, 76], [27, 66], [31, 37], [23, 14], [74, 5], [40, 39], [35, 12], [15, 1], [29, -15], [-1, -15], [-43, -70], [-92, -112], [38, 13], [25, 27], [34, 26], [38, 40], [25, -36], [39, -27], [23, -61], [38, -29], [23, -23], [-3, 39], [-33, 77], [9, 31], [25, 16], [79, 65], [55, -22], [34, -19], [17, 5], [43, -3], [69, -10], [67, -19], [66, -25], [50, -31], [35, -34], [21, -24], [8, -14], [12, -34], [-9, -23], [-50, -53], [-27, -24], [-27, -11], [-73, 11], [-23, -7], [-24, -16], [-76, -73], [-42, -32], [-41, -20], [-10, -10], [89, 1], [24, 21], [21, 41], [39, 42], [74, 19], [103, -41], [52, 2], [39, 41], [44, 28], [17, 6], [9, -3], [33, -30], [10, -26], [0, -60], [-5, -18], [-29, -46], [-73, -68], [-47, -25], [-52, -14], [-57, -23], [-20, -19], [-20, -26], [-20, -18], [-25, -14], [33, -22], [12, 1], [13, 13], [33, 50], [24, 23], [14, 4], [14, -2], [14, -10], [14, -18], [-1, -43], [-42, -171], [7, 0], [26, 47], [74, 178], [18, 36], [36, 36], [80, 54], [63, 29], [70, 24], [37, 9], [43, -6], [28, -28], [37, -5], [46, 7], [30, -4], [33, -11], [29, -20], [48, -24], [110, -44], [14, -10], [12, -16], [12, -25], [-1, -24], [-15, -23], [-18, -15], [-22, -5], [-23, -13], [-42, -34], [-13, -6], [-66, -14], [-61, -7], [-38, -14], [-73, -37], [-101, -68], [1, -16], [40, -8], [33, 10], [45, 47], [42, 18], [66, 15], [91, 12], [39, -2], [7, -2], [5, -11], [3, -20], [-15, -26], [-17, -12], [-47, -58], [31, -15], [42, -7], [24, 16], [22, 36], [25, 19], [27, 4], [24, 9], [21, 15], [5, 9], [-30, 19], [-2, 11], [12, 28], [22, 30], [23, 19], [17, 2], [57, -21], [39, -35], [98, -107], [12, -21], [34, -79], [7, -35], [-6, -25], [-8, -15], [-10, -5], [-22, -1], [-130, 33], [-60, -4], [-26, -9], [-21, -14], [-16, -17], [-12, -21], [-23, -12], [-82, 0], [-47, -12], [-80, -28], [-28, -16], [-7, -20], [49, 4], [81, 26], [75, 8], [127, -59], [41, -9], [23, 9], [28, 2], [101, -4], [35, -7], [51, -22], [78, -49], [15, -14], [9, -15], [2, -16], [0, -39], [-8, -13], [-27, -9], [-112, 10], [-35, 9], [-42, -11], [-34, 4], [-44, 15], [-48, 28], [-72, -26], [-58, 17], [-59, -15], [-117, -62], [13, -11], [160, 53], [31, -3], [51, -20], [80, -38], [23, -16], [0, -60], [-12, -41], [-25, -45], [-37, 6], [-85, 28], [-35, 4], [-26, -4], [-34, -19], [-17, 0], [-137, 36], [-31, 2], [-3, -4], [6, -7], [125, -56], [92, -6], [57, -10], [34, -17], [16, -13], [2, -37], [30, -38], [28, -15], [18, -1], [30, 14], [30, 2], [25, -9], [31, -21], [37, -6], [33, -13], [26, -2], [71, 6], [31, -8], [8, -7], [-13, -12], [-66, -29], [-10, -28], [37, -36], [20, -28], [-1, -20], [-20, -47], [-5, -19], [6, -2], [48, 38], [7, -4], [5, -53], [6, 3], [16, 43], [-7, 58], [28, 23], [88, 18], [-15, -91], [-2, -47], [-39, -79], [-32, -25], [1, -6], [23, -10], [14, -1], [14, 13], [33, 60], [66, 64], [12, 1], [0, -23], [-9, -42], [31, -20], [29, 19], [16, 17], [37, -2], [17, -8], [5, -19], [-17, -79], [3, -19], [39, -52], [4, 3], [-8, 25], [-8, 62], [8, 28], [32, 34], [65, 50], [25, 10], [15, -7], [24, -24], [-8, -14], [-26, -15], [-19, -27], [-13, -39], [14, -21], [53, -2], [54, 32], [30, -16], [37, -42], [66, -67], [39, 18], [47, -51], [-64, -40], [20, -86], [-82, 4], [-46, -7], [-31, 8], [-34, -3], [31, -20], [59, -9], [6, -25], [46, 0], [35, 5], [63, -1], [4, 30], [41, 17], [23, 19], [20, -12], [57, -12], [77, -59], [-34, -35], [-9, -33], [-12, -28], [-6, -25], [-14, -17], [-109, -99], [18, -1], [46, 24], [91, 35], [50, 15], [36, -10], [18, 0], [16, 13], [30, -15], [62, -13], [71, 81], [43, -16], [40, -50], [86, -89], [45, -51], [15, -23], [-2, -23], [-41, -25], [-20, -5], [-55, 46], [-50, 24], [-31, -3], [-30, -18], [10, -9], [121, -71], [21, -52], [2, -23], [-81, -35], [-26, -2], [-57, 17], [-32, 31], [-28, 11], [-37, 3], [-12, -6], [41, -52], [-4, -16], [-21, -10], [-11, -25], [81, -46], [61, -46], [9, -19], [-41, -13], [-29, -4], [-62, 7], [-35, 10], [-9, -11], [35, -24], [14, -16], [10, -23], [7, -22], [1, -20], [-28, -17], [-35, -46], [-14, -48], [-31, -5], [-13, 9], [-42, -15], [-55, 21], [-20, 22], [-61, 90], [-1, -10], [15, -46], [-3, -27], [-64, -20], [0, -7], [39, -15], [48, -11], [-8, -42], [1, -181], [-11, -64], [-23, -56], [-34, -53], [-36, 35], [-15, 36], [-12, 18], [-17, 15], [-23, 7], [-23, 0], [-25, -32], [-28, 28], [-26, 33], [10, 88], [11, 44], [-4, -1], [-16, -20], [-36, -64], [-23, -79], [-31, 30], [-28, 38], [-22, 38], [-37, 43], [-36, 51], [-19, 60], [-8, 13], [-21, 50], [-8, 14], [-8, 5], [-17, 31], [6, 34], [28, 39], [26, 28], [42, 28], [50, 16], [22, 36], [28, 66], [30, 46], [33, 26], [-16, 4], [-42, -22], [-30, -32], [-35, -54], [-32, -34], [-84, -40], [-30, -8], [-36, -4], [-78, 5], [-18, 14], [9, 38], [56, 68], [-9, 5], [-20, -24], [-27, -17], [-23, -9], [-34, 3], [-41, 43], [-19, 13], [-39, 15], [-16, 14], [-66, 104], [-13, 28], [-7, 27], [-21, 23], [-35, 18], [-8, -3], [13, -23], [0, -20], [-30, -12], [-31, 4], [-33, 21], [-3, -28], [35, -51], [1, -64], [-10, -6], [-24, -4], [-16, 8], [-53, 48], [-50, 33], [-36, 18], [-4, -13], [23, -57], [27, -57], [44, -47], [69, -56], [32, -32], [-25, -46], [-22, -14], [-13, -5], [-42, 0], [-77, 25], [-37, 28], [-52, 67], [-87, 69], [-19, -1], [-61, -28], [9, -4], [40, -2], [29, -9], [69, -55], [6, -23], [-18, -25], [1, -32], [20, -39], [20, -25], [41, -18], [20, -2], [8, -11], [-25, -87], [-2, -24], [7, -10], [9, 0], [52, 35], [22, 9], [19, 2], [22, -10], [26, -22], [14, -23], [5, -23], [7, -15], [52, -24], [-5, -12], [-53, -37], [-3, -5], [11, -3], [33, -22], [31, -34], [19, -41], [4, -21], [0, -19], [4, -11], [16, -2], [7, 7], [7, -1], [9, -10], [8, -32], [19, -92], [10, -25], [5, -1], [3, 92], [9, 15], [33, -16], [47, -36], [34, -32], [4, -15], [-25, -29], [5, -13], [19, -19], [17, 7], [12, 33], [22, 32], [25, 22], [48, -18], [39, -48], [6, -16], [26, -21], [22, 11], [44, -54], [-21, -25], [-45, -36], [-5, -12], [11, 2], [87, 1], [23, -15], [5, -28], [-38, -76], [-35, 6], [-47, 2], [-24, -4], [4, -10], [65, -35], [18, -29], [25, -30], [12, -25], [-1, -11], [-10, -17], [5, -6], [44, -11], [28, 10], [34, 4], [30, -3], [3, -11], [-5, -28], [-31, -25], [9, -7], [36, 8], [17, -12], [21, -62], [25, -48], [-20, -11], [-22, -5], [3, -61], [14, -64], [1, -60], [-5, -54], [-20, -12], [-22, 1], [-8, 14], [-53, 161], [-13, 29], [-16, 25], [-56, 70], [2, -11], [14, -32], [12, -48], [16, -96], [8, -61], [-4, -23], [-11, -6], [-3, -11], [5, -17], [43, -63], [21, -38], [15, -39], [13, -26], [13, -14], [-3, -11], [-19, -9], [-32, -4], [-16, 5], [-58, 36], [-8, -11], [32, -133], [-1, -32], [-16, -11], [-20, 13], [-24, 38], [-36, 42], [-49, 46], [-47, 37], [-11, -1], [-7, -11], [-7, -2], [-9, 7], [-16, 28], [-16, 18], [-68, 62], [-7, 0], [7, -18], [6, -41], [-7, -8], [-18, 3], [-34, 18], [-23, 40], [-28, 70], [-16, 26], [-1, -17], [8, -67], [-1, -22], [-17, -6], [-8, 6], [-7, 18], [-6, 29], [-17, 23], [-25, 15], [-14, 16], [-7, 29], [-5, 6], [-45, -6], [-23, 20], [-65, 81], [-59, 88], [-38, 46], [-14, 12], [20, -57], [22, -84], [6, -39], [-10, -1], [-22, 17], [-113, 108], [-69, 51], [-39, 9], [-63, 6], [-14, -28], [34, -62], [33, -47], [32, -32], [50, -61], [46, -79], [19, -25], [62, -34], [33, -9], [34, -2], [3, -12], [-16, -23], [-4, -14], [75, -35], [28, -20], [27, -32], [15, -8], [65, -82], [16, -14], [58, -26], [19, -17], [32, -53], [20, -27], [28, -64], [21, -29], [52, -32], [22, -10], [10, -12], [-7, -29], [-6, -12], [-30, -20], [5, -28], [17, -50], [-1, -31], [-18, -12], [-37, -14], [-19, 1], [-28, 12], [-35, 20], [-70, 50], [-105, 35], [-39, 18], [-13, 17], [-20, 10], [-260, 48], [-44, 12], [-27, 15], [-25, 22], [-100, 49], [-12, 11], [-67, 85], [-49, 100], [-17, 13], [-54, 13], [-45, -8], [-30, -11], [-46, 4], [-30, 16], [-63, 45], [-64, 23], [-56, 39], [-29, 14], [3, 10], [41, 58], [-12, 0], [-73, -45], [-26, 14], [-43, 35], [-32, 35], [-66, 97], [-38, 35], [5, 8], [43, 3], [34, -3], [23, 8], [44, 39], [19, 25], [2, 14], [-37, 4], [-8, 7], [-7, 16], [-17, 21], [-27, 25], [-31, 10], [-107, -9], [-19, 11], [0, 17], [21, 47], [12, 19], [3, 10], [-4, 3], [-14, -2], [-62, -42], [-14, 3], [-24, 45], [-15, 51], [-11, 17], [-14, 6], [-51, 50], [-72, 95], [-27, 30], [-30, 27], [-21, 11], [3, 14], [46, 79], [2, 12], [-40, -4], [-59, 16], [-28, -20], [-18, -1], [-21, 11], [-12, -4], [-11, -65], [-9, -16], [-12, -9], [-11, 2], [-9, 11], [0, 15], [-9, 79], [-21, 12], [-58, 3], [-13, 6], [-14, 15], [-12, 27], [-10, 40], [-12, 22], [-13, 3], [-11, -3], [-8, -10], [-18, -6], [-28, -3], [-1, -15], [27, -28], [25, -40], [25, -52], [-15, -35], [-55, -18], [-48, -5], [-41, 7], [-32, 12], [-44, 29], [-63, -9], [-15, -76], [-13, -4], [-60, 1], [-24, -6], [-80, -42], [-25, -6], [-18, 5], [-18, -11], [-27, -24], [-37, -2], [-47, 19], [-39, 8], [-33, -3], [-33, 12], [-34, 25], [-29, 11], [-36, -2], [-9, 4], [-54, 55], [-17, 22], [-35, 68], [-7, 27], [-1, 29], [3, 21], [13, 32], [13, 76], [12, 25], [17, 23], [32, 29], [120, 51], [24, 20], [-1, 14], [-27, 62], [0, 16], [9, 9], [19, 37], [9, 10], [21, 6], [44, -19], [37, -7], [50, -3], [83, -25], [115, -49], [66, -33], [50, -50], [36, -49], [5, -25], [-16, -38], [-9, -11], [1, -13], [9, -15], [29, -21], [7, 8], [-3, 26], [6, 22], [15, 17], [1, 23], [-11, 28], [-13, 24], [-17, 21], [-74, 70], [-7, 23], [25, 11], [108, -24], [42, 6], [16, 27], [17, 19], [18, 10], [37, 4], [51, -13], [25, -2], [23, 5], [29, 15], [42, 50], [28, 11], [41, 8], [31, 1], [56, -20], [35, 0], [-3, 34], [-23, 63], [-28, 66], [-23, 22], [-57, 41], [-68, 78], [-34, 49], [-9, 24], [4, 16], [12, 24], [123, 86], [97, 86], [42, 44], [21, 31], [21, 22], [22, 14], [47, 16], [13, 22], [3, 36], [8, 32], [44, 85], [33, 23], [51, 16], [33, 20], [41, 70], [-4, 17], [-19, 13], [-14, 20], [-62, 182], [-42, 89], [-49, 76], [-45, 94], [-73, 92], [-1, 24], [13, 28], [-6, 6], [-76, -40], [-18, -2], [-29, 17], [-20, 22], [-16, 38], [1, 20], [11, 19], [15, 47], [0, 24], [-5, 22], [-6, 16], [-9, 9], [-23, 6], [-38, 2], [-13, -8], [43, -71], [-7, -17], [-54, -7], [-24, 3], [-22, 8], [-20, 14], [-63, 74], [-13, 27], [4, 20], [-5, 11], [-13, -7], [-17, 0], [-24, 7], [-5, 8], [44, 40], [3, 12], [-21, 13], [-30, 3], [-8, 12], [10, 12], [41, 22], [15, 14], [-25, 11], [-13, 1], [-28, -24], [-42, -48], [-30, -18], [-41, 22], [-27, 8], [-18, -5], [-28, -38], [-61, -27], [-109, -65], [-46, -20], [-51, 4], [-9, 13], [0, 22], [4, 18], [6, 14], [2, 18], [-4, 73], [9, 21], [17, 12], [32, 12], [81, -15], [37, 3], [27, 17], [26, 24], [27, 33], [5, 31], [-28, 50], [-10, 11], [-72, 39], [-40, 14], [-35, 6], [-26, 11], [-16, 17], [-15, 27], [-1, 18], [2, 24], [15, 17], [64, 20], [0, 5], [-53, 14], [-25, -2], [-21, -16], [-27, -37], [-16, -11], [-48, 22], [-29, 3], [-19, 11], [-11, 10], [7, 10], [24, 11], [41, 32], [3, 18], [-29, 28], [-15, 7], [-60, 10], [-72, -10], [-28, 5], [-12, 32], [-7, 37], [-4, 44], [-13, 75], [-14, 39], [-19, 4], [-88, -16], [-20, 0], [-15, 6], [-57, 50], [-24, 18], [-13, 4], [-42, 53], [-16, 10], [-19, 26], [-22, 42], [-24, 13], [-26, -16], [-26, -24], [-26, -30], [-14, -26], [-2, -21], [16, -16], [91, -28], [24, -18], [19, -30], [15, -36], [10, -43], [-1, -32], [-11, -22], [-20, -19], [-57, -30], [-58, -17], [-59, -5], [-28, 4], [-152, 59], [-27, 0], [-35, 8], [-79, 24], [-43, 3], [-76, 20], [-128, 11], [-25, -9], [34, -27], [30, -14], [25, 0], [37, -24], [48, -47], [28, -29], [22, -34], [1, -12], [-23, -23], [-178, 122], [-109, -42], [-51, -16], [-43, -3], [-54, 17], [-121, 59], [-46, 20], [-16, 3], [-106, -25], [-91, -1], [-185, 24], [-67, 17], [-18, 17], [-22, 8], [-40, 0], [-105, 19], [-97, -43], [-116, 40], [-35, 23], [-11, 16], [-33, 66], [-5, 36], [10, 32], [9, 22], [10, 12], [-64, -37], [-22, -6], [-29, -1], [-87, 13], [-14, -7], [5, -12], [23, -19], [2, -12], [-48, -8], [-73, 9], [-33, -4], [-14, -5], [-33, -30], [-14, -7], [-17, 3], [-77, 67], [-62, 43], [-73, 16], [-33, 14], [-18, 16], [-100, 137], [-14, 29], [-32, 107], [-10, 23], [-13, 15], [25, 3], [95, -13], [91, 0], [50, -8], [57, -27], [76, -19], [53, -4], [87, 7], [98, 18], [11, 14], [-63, 24], [-57, 31], [-52, 41], [-31, 17], [-53, 11], [-146, 8], [-137, 27], [-93, 37], [-77, 41], [-31, 22], [-11, 18], [-12, 54], [-13, 90], [-12, 61], [-12, 31], [-1, 27], [26, 57], [74, 63], [2, 10], [-15, 3], [-31, 16], [-10, 23], [-4, 37], [0, 32], [3, 25], [13, 33], [32, 57], [46, 71], [49, 65], [9, 22], [4, 58], [7, 43], [6, 30], [11, 22], [31, 43], [38, 41], [60, 34], [5, 13], [1, 18], [3, 13], [6, 9], [149, 110], [68, 45], [57, 29], [69, 21], [195, 43], [101, 12], [127, -3], [233, -24], [28, -17], [7, -9], [10, -24], [-7, -16], [-64, -52], [-80, -44], [-53, -38], [-88, -86], [-24, -30], [-110, -173], [-26, -28], [-15, -23], [-11, -63], [4, -22], [17, -36], [59, -79], [16, -36], [0, -34], [-7, -81], [-1, -41], [3, -39], [12, -56], [22, -73], [51, -74], [79, -74], [59, -50], [59, -36], [69, -54], [15, -26], [-32, -29], [-74, -44], [-98, -19], [-52, -18], [-65, -39], [-82, -30], [-32, -19]], [[32833, 80122], [-117, -8], [-92, 36], [-69, 17], [-67, 31], [-146, 100], [-16, 35], [-14, 43], [-28, 39], [-30, 32], [-154, 98], [-13, 34], [31, 23], [36, 10], [31, -1], [104, -38], [130, -34], [56, -26], [64, -38], [62, -47], [140, -125], [24, -10], [63, -61], [23, -46], [11, -38], [-14, -19], [-15, -7]], [[32274, 78610], [8, -8], [13, 15], [15, 47], [41, -12], [22, -21], [12, 4], [12, -2], [23, -28], [44, -22], [46, 4], [70, 13], [8, 5], [72, 11], [72, 5], [25, -12], [9, -12], [5, -14], [-41, -38], [-41, -44], [-58, -44], [-7, -21], [4, -39], [-1, -40], [11, -3], [7, -14], [-15, -13], [-59, -6], [-17, 4], [-21, 16], [-7, 39], [-25, -6], [-7, 5], [35, 32], [-16, 42], [-18, -3], [-11, 19], [1, 27], [16, 13], [5, 14], [-22, -13], [-17, -24], [-21, -9], [-22, -22], [33, -6], [-17, -17], [-17, -3], [-81, 32], [-20, 12], [-26, 34], [-19, 45], [11, 2], [3, 8], [-2, 7], [-28, 6], [-45, -2], [-25, 12], [1, 79], [-8, 22], [-28, 18], [-42, 5], [-4, 30], [13, 44], [21, 39], [16, 37], [18, 31], [46, 62], [-1, -46], [4, -40], [-30, -79], [52, -79], [6, -17], [5, -21], [-4, -19], [-8, -18], [20, -8], [6, -15]], [[27222, 88107], [11, -17], [3, -24], [-4, -32], [-7, -30], [-10, -27], [-25, -44], [-76, -77], [-28, -42], [-22, -25], [-124, -111], [-16, -6], [-16, 2], [-34, 17], [-34, 3], [-90, -45], [-4, 8], [-4, 48], [-9, 27], [-40, 57], [-2, 13], [0, 16], [3, 13], [45, 54], [101, 193], [24, 10], [49, -22], [24, -7], [17, 1], [72, 41], [68, -5], [63, 24], [29, 0], [23, -4], [13, -9]], [[27904, 87794], [22, -16], [36, -52], [14, -26], [4, -36], [-10, -48], [-5, -44], [-13, -34], [-25, -42], [-22, -50], [-20, -56], [-15, -38], [-13, -18], [-14, -10], [-14, -1], [-23, 21], [-30, 42], [-24, 25], [-31, 18], [-17, 23], [-3, 23], [-1, 76], [1, 37], [4, 32], [7, 25], [16, 34], [44, 75], [26, 29], [16, 7], [43, -6], [18, 2], [14, 9], [15, -1]], [[28979, 91199], [145, -51], [14, -19], [7, -16], [4, -19], [0, -38], [-3, -15], [-14, -36], [-1, -12], [11, -123], [-1, -67], [-10, -56], [-21, -45], [-31, -34], [-24, -20], [-105, -48], [-75, -12], [-79, -2], [-100, -13], [-46, 3], [-24, 5], [-17, 10], [-19, 30], [-23, 51], [-18, 58], [-23, 102], [0, 12], [21, 83], [29, 56], [50, 82], [57, 81], [14, 14], [26, 14], [64, 23], [54, -6], [23, 3], [29, 10], [33, 3], [53, -8]], [[27906, 94270], [47, -7], [300, 14], [63, -11], [189, -64], [48, -21], [25, -28], [21, -45], [10, -10], [69, -26], [28, -32], [10, -17], [14, -38], [31, -22], [36, -12], [11, -11], [-5, -48], [15, -22], [33, -27], [13, -18], [-26, -22], [-61, -13], [-170, 13], [-228, 31], [-133, -9], [-67, -14], [-161, -49], [-51, -8], [-51, -1], [-89, 40], [-32, 22], [-11, 16], [-21, 49], [-17, 58], [-9, 48], [-10, 37], [-31, 12], [-90, 14], [-30, 20], [-14, 17], [-13, 27], [0, 27], [7, 25], [6, 6], [11, 1], [-25, 29], [-9, 33], [-1, 46], [4, 29], [7, 13], [17, 8], [39, 5], [58, -1], [81, -33], [64, -4], [98, -27]], [[27574, 82227], [-19, -8], [-58, 16], [-24, 11], [-71, 41], [-135, 61], [-46, 31], [-10, 22], [25, 48], [13, 19], [15, 12], [143, 22], [55, -11], [65, -97], [38, -66], [15, -52], [0, -26], [-6, -23]], [[28103, 84184], [-14, -8], [-10, 1], [2, 19], [14, 38], [8, 34], [2, 28], [6, 25], [10, 22], [11, 11], [15, -1], [4, -70], [-5, -32], [-10, -28], [-14, -22], [-19, -17]], [[28073, 84254], [-23, -58], [-18, -56], [-25, -106], [-15, -3], [-13, 25], [37, 123], [1, 14], [-1, 12], [-11, 18], [-11, -21], [-52, -139], [-13, -22], [-11, -13], [-9, -2], [-22, 3], [-44, -40], [74, 165], [1, 13], [-14, 8], [-6, -5], [-60, -104], [-34, -40], [-23, 13], [-6, 10], [2, 13], [59, 104], [54, 75], [22, 48], [9, 44], [4, 33], [0, 36], [3, 10], [3, -2], [3, -14], [1, -38], [-12, -77], [-10, -38], [-12, -32], [5, -7], [22, 18], [18, 38], [15, 57], [9, 50], [10, 80], [3, -3], [4, -16], [10, -11], [15, -7], [9, -10], [6, -26], [7, -12], [23, -10], [9, -8], [6, -29], [-1, -16], [3, -9], [7, -5], [-8, -31]], [[27784, 84220], [-14, -4], [-17, 8], [9, 42], [14, 18], [36, 17], [7, 11], [11, 6], [17, 0], [19, 15], [21, 32], [7, 4], [-14, -46], [-16, -34], [-80, -69]], [[25046, 96352], [-73, -33], [-37, 1], [-212, 67], [-43, 33], [-8, 23], [-2, 32], [0, 43], [9, 30], [12, 10], [25, 10], [49, 7], [46, -4], [70, -12], [70, -19], [92, -60], [34, -28], [7, -37], [0, -22], [-5, -17], [-10, -10], [-24, -14]], [[20956, 96279], [-43, -10], [-84, 23], [-56, 10], [-45, 42], [-49, 57], [-39, 62], [-14, 37], [-28, 22], [-10, 36], [-51, 57], [8, 9], [48, 8], [77, -11], [36, -20], [47, -34], [60, -54], [18, -24], [4, -33], [11, -17], [51, -4], [63, -43], [12, -17], [13, -34], [-1, -16], [-10, -34], [-18, -12]], [[22558, 97915], [6, -75], [-6, -38], [-14, -28], [-12, -7], [-17, 0], [-76, 21], [-23, 13], [-1, 11], [-8, 21], [-50, 27], [-95, -4], [-40, 3], [-16, 8], [-10, 12], [-9, 47], [2, 17], [11, 29], [7, 7], [70, 27], [20, 2], [85, -10], [75, -1], [38, -7], [34, -17], [20, -26], [9, -32]], [[20753, 93847], [-14, -3], [-26, 14], [-39, 29], [-63, 60], [-75, 59], [-12, 36], [-19, 26], [-96, 63], [-62, 26], [-48, 13], [-7, 17], [33, 51], [37, 41], [23, 15], [70, 13], [236, 27], [54, 1], [56, -13], [78, -56], [32, -6], [20, -13], [17, -21], [9, -21], [0, -44], [-8, -64], [-11, -25], [-47, -82], [-49, -46], [-10, -29], [-20, -23], [-35, -29], [-24, -16]], [[21603, 95630], [58, -35], [3, -9], [-11, -6], [-75, -19], [-29, -15], [-25, -35], [-19, -16], [-101, -10], [-103, 1], [20, 33], [56, 56], [-44, 22], [-158, -38], [-60, 24], [51, 60], [-51, 5], [-71, 0], [-46, 36], [16, 42], [94, 24], [122, 20], [131, 31], [103, -3], [40, -14], [14, -49], [12, -59], [18, -5], [55, -41]], [[21105, 95957], [13, -3], [43, 12], [27, 2], [30, -22], [8, -14], [110, -36], [38, -16], [5, -10], [-13, -15], [-33, -20], [-31, -13], [-44, -11], [-222, -2], [-24, 5], [-14, 18], [-28, 65], [-19, 36], [-8, 24], [5, 14], [24, 13], [82, 21], [36, 0], [23, -5], [9, -11], [-3, -14], [-14, -18]], [[17131, 95379], [-79, -37], [-57, 4], [-75, 27], [-61, 10], [-21, 9], [-3, 9], [20, 26], [26, 21], [62, 41], [105, 78], [69, 30], [67, 21], [69, 47], [38, 21], [33, 2], [33, -9], [4, -13], [-35, -64], [-25, -26], [-49, -67], [-93, -112], [-28, -18]], [[18380, 96632], [-76, -19], [-51, 0], [-89, 28], [-103, 84], [-14, 30], [39, 5], [28, 9], [17, 13], [34, 15], [76, 21], [10, -8], [-2, -18], [6, -16], [28, -4], [26, -11], [53, -36], [36, -7], [13, -8], [6, -12], [22, -21], [0, -11], [-30, -22], [-29, -12]], [[13631, 83225], [-6, -1], [-3, 12], [2, 25], [9, 42], [4, 9], [36, -7], [5, -3], [1, -8], [-2, -13], [-12, -19], [-34, -37]], [[13603, 81774], [-5, -1], [-9, 12], [-7, 19], [-4, 51], [3, 20], [3, 8], [24, -32], [-5, -77]], [[13823, 82925], [-8, -21], [-20, -32], [-13, -13], [-6, 6], [-18, 4], [-19, 32], [-14, 13], [-10, 1], [-5, -12], [-1, -15], [3, -20], [-2, -9], [-6, 2], [-5, 9], [-6, 16], [-1, 17], [4, 17], [13, 24], [42, 47], [13, 9], [14, -2], [23, -22], [5, -7], [17, -44]], [[13931, 82469], [-6, -2], [-18, 7], [-60, 98], [-43, 35], [-29, 48], [-30, 31], [18, 50], [16, -6], [56, -41], [44, -39], [25, -26], [53, -110], [-4, -16], [-22, -29]], [[13829, 83540], [3, -46], [-40, -76], [-52, -38], [-11, 12]], [[14291, 82338], [13, -184], [-1, -59], [-19, -38], [-13, -65], [-15, -29], [-15, 39], [-1, 64], [-4, 51], [-5, 24], [6, 95], [-6, -7], [-18, -41], [-19, -3], [-34, 47], [-17, 38], [-3, 40], [-22, 42], [-3, 15], [2, 16], [19, 42], [7, 28], [7, 58], [7, 23], [18, -3], [31, -27], [33, -28], [30, -39], [22, -99]], [[14974, 80272], [8, -52], [-34, 9], [-12, 10], [0, 25], [6, 23], [26, -8], [6, -7]], [[15513, 80374], [4, -12], [-62, 45], [-27, 27], [-10, 19], [-6, 11], [-32, 28], [-5, 13], [7, 10], [21, -6], [35, -21], [32, -35], [43, -79]], [[14822, 80417], [-11, -2], [-18, 7], [-19, 16], [-35, 44], [-3, 10], [3, 9], [9, 7], [3, 11], [-8, 32], [27, 20], [25, -17], [11, -20], [13, -36], [6, -41], [1, -28], [-4, -12]], [[15226, 80700], [-3, -30], [-17, 49], [-28, 105], [4, 24], [12, 35], [11, 2], [18, -16], [16, -29], [3, -11], [10, -30], [5, -27], [-11, -33], [-20, -39]], [[14184, 82090], [-9, -26], [-37, 63], [-13, 18], [-28, 67], [-5, 29], [1, 17], [5, 6], [9, -4], [8, -8], [53, -74], [15, -35], [1, -53]], [[14465, 81493], [-4, -9], [-11, 0], [-18, 10], [-13, 21], [-16, 66], [2, 12], [5, 12], [25, 24], [10, -3], [3, -18], [15, -39], [5, -11], [0, -46], [-3, -19]], [[14342, 82027], [-21, -7], [7, 31], [2, 18], [-4, 17], [-3, 33], [-1, 79], [21, 49], [33, 1], [-1, -25], [-14, -111], [-7, -51], [-5, -19], [-7, -15]], [[14079, 82368], [-4, -5], [-11, 8], [-11, 15], [-19, 43], [-6, 18], [-4, 29], [3, 5], [9, -3], [5, -5], [30, -70], [8, -35]], [[14120, 82440], [-2, -4], [-28, 0], [-8, 6], [-5, 12], [-2, 19], [4, 22], [17, 42], [1, 18], [3, 8], [12, -22], [5, -19], [3, -82]], [[15712, 79927], [-11, -15], [-7, 2], [-5, 10], [-18, 102], [8, -3], [24, -31], [-5, -12], [18, -31], [4, -21], [-8, -1]], [[33392, 77153], [-37, -20], [-32, 1], [-22, 19], [-1, 8], [51, -8], [19, 5], [39, 32], [-17, -37]], [[33066, 78046], [-12, -4], [-2, 8], [-18, 24], [-1, 12], [15, 11], [32, -6], [-12, -30], [-2, -15]], [[32801, 79080], [10, -11], [18, 1], [12, -4], [-17, -21], [-33, -3], [-16, 9], [23, 110], [27, 26], [56, 71], [22, 22], [21, 9], [21, -5], [-22, -43], [-30, -2], [-28, -35], [-18, -40], [-23, -22], [-15, -27], [-8, -35]], [[32081, 79427], [-7, -42], [-25, -36], [-12, -2], [-5, 3], [6, 23], [0, 40], [20, 6], [7, -4], [16, 12]], [[32090, 79469], [-32, -30], [14, 45], [6, 11], [5, 5], [5, -4], [2, -27]], [[31590, 77357], [-14, -21], [4, 20], [17, 51], [11, 7], [-18, -57]], [[31455, 77581], [-38, -31], [15, 78], [12, 24], [15, -8], [-2, -47], [-2, -16]], [[29565, 78034], [-22, -11], [-36, 11], [-41, -15], [-11, 0], [30, 42], [46, 27], [46, 80], [13, 2], [-18, -91], [-3, -33], [-4, -12]], [[29529, 78102], [-34, -12], [-11, 5], [37, 56], [42, 13], [-34, -62]], [[30270, 78843], [-25, -5], [6, 20], [35, 36], [25, 20], [15, 0], [-24, -44], [-32, -27]], [[34573, 81059], [-9, -6], [-9, 0], [-8, 7], [-1, 11], [8, 23], [21, 12], [17, -3], [-1, -12], [-9, -19], [-9, -13]], [[34846, 80408], [-43, -34], [-10, -13], [-12, -7], [-9, 11], [-12, 35], [2, 12], [12, 2], [7, -5], [1, -11], [5, -6], [9, 0], [32, 35], [16, 5], [6, -6], [-4, -18]], [[34622, 81733], [-14, -1], [-3, 7], [6, 22], [15, 26], [20, 7], [-6, -38], [-18, -23]], [[34974, 80497], [20, -37], [11, -10], [-72, -41], [-8, -2], [-5, 4], [-1, 38], [4, 29], [5, 5], [16, -18], [17, 36], [13, -4]], [[34937, 79171], [-14, -20], [-14, 0], [2, 18], [17, 34], [8, 24], [1, 15], [3, 11], [13, 13], [11, 23], [-5, -43], [-22, -75]], [[31993, 87879], [53, -6], [33, 2], [14, -9], [13, -28], [-17, -40], [-19, -16], [-31, -4], [-50, 13], [-17, 8], [-16, 22], [7, 15], [25, 5], [4, 7], [-6, 12], [0, 10], [7, 9]], [[31046, 86544], [-25, -5], [-12, 12], [0, 35], [8, 26], [29, 55], [25, 62], [15, 14], [31, -10], [18, -17], [18, -30], [8, -22], [-7, -34], [-22, -29], [-25, -21], [-61, -36]], [[30462, 87873], [-20, -2], [-37, 4], [-40, 12], [-23, 14], [-19, 29], [-4, 33], [-38, 48], [-42, 16], [-23, 33], [24, 3], [34, -8], [49, -14], [45, -19], [64, -42], [21, -40], [21, -28], [7, -22], [-6, -10], [-13, -7]], [[31991, 87192], [-7, -7], [-6, 2], [-21, 30], [-28, 13], [-10, 12], [-84, 63], [-9, 28], [-2, 22], [28, 11], [56, 10], [49, -1], [46, -13], [9, -14], [24, -26], [-6, -30], [-2, -40], [-10, -19], [-15, -14], [-12, -27]], [[31936, 87487], [6, -5], [7, 6], [6, -5], [4, -16], [6, -12], [17, -14], [5, -11], [0, -11], [-14, -16], [-9, 0], [-66, 37], [-18, 39], [-1, 19], [7, 18], [10, 8], [13, 0], [16, -10], [11, -27]], [[30789, 85852], [-17, -42], [-23, 5], [-8, -8], [-6, -1], [10, 39], [1, 27], [-5, 27], [8, 13], [30, 1], [0, -31], [4, -11], [7, -6], [-1, -13]], [[32109, 86616], [-10, -40], [-32, 15], [-50, 30], [-20, 20], [-7, 22], [0, 30], [15, 5], [37, 3], [32, -42], [9, -6], [26, -37]], [[33057, 84123], [3, -14], [-43, 10], [-15, 9], [-1, 9], [2, 15], [8, 17], [20, 13], [11, -7], [23, -17], [3, -11], [-11, -24]], [[32849, 84996], [23, -17], [6, -63], [-44, 4], [-50, 42], [-10, 31], [1, 5], [7, 5], [13, -7], [12, 11], [13, 3], [29, -14]], [[31134, 91901], [-7, -4], [-72, 26], [-6, 21], [36, 24], [29, 12], [22, 2], [22, -4], [21, -25], [-25, -23], [-20, -29]], [[32588, 90469], [-34, -15], [-19, 19], [13, 6], [19, 23], [26, 20], [11, 17], [43, 8], [15, -1], [5, -6], [-24, -26], [-55, -45]], [[28038, 95579], [3, -34], [-20, 1], [-65, -22], [-52, -3], [-26, 10], [-17, 23], [41, 43], [47, 31], [57, 47], [47, 30], [23, -6], [22, -16], [-28, -47], [-30, -23], [-2, -34]], [[27814, 84547], [-7, -10], [-14, 11], [0, 29], [13, 22], [10, -1], [10, -12], [-3, -15], [-9, -24]], [[27856, 84974], [-4, -5], [-12, 4], [-5, -38], [-4, -3], [-9, 23], [7, 20], [-1, 14], [2, 10], [12, 23], [7, 5], [4, -2], [4, -29], [-1, -22]], [[27911, 84479], [-9, -7], [-7, 0], [7, 51], [-8, 18], [-1, 9], [4, 9], [5, 2], [11, -16], [6, -17], [2, -16], [0, -16], [-4, -11], [-6, -6]], [[27795, 82548], [-1, -17], [-18, 3], [-9, 10], [-8, 15], [-2, 12], [7, 11], [21, -7], [10, -27]], [[27949, 81769], [-12, -4], [-26, 4], [-22, 15], [-13, 18], [86, 51], [18, -6], [0, -10], [-13, -27], [-3, -18], [-6, -14], [-9, -9]], [[15730, 80003], [-4, -7], [-43, 41], [-29, 54], [-12, 32], [57, -81], [29, -26], [2, -13]], [[15284, 80661], [-7, -5], [-7, 66], [9, 23], [2, 12], [-1, 13], [15, -30], [6, -20], [2, -27], [0, -8], [-19, -24]], [[29549, 90889], [-135, -1], [-74, 4], [-29, 9], [-26, 13], [-29, 45], [-19, 45], [-1, 20], [5, 17], [7, 11], [91, 15], [74, -19], [64, -22], [83, -4], [25, -9], [9, -6], [7, -11], [9, -53], [1, -28], [-2, -21], [-60, -5]], [[28367, 88404], [24, -25], [24, 2], [14, -20], [32, -63], [3, -10], [-1, -21], [-17, -26], [-18, -13], [-37, -20], [-42, -9], [-23, 14], [-64, 58], [-59, 68], [-19, 38], [8, 16], [25, 11], [51, 11], [83, -6], [16, -5]], [[23742, 95477], [-27, 0], [-35, 12], [-10, 12], [-8, 17], [-5, 22], [-7, 18], [-10, 13], [-2, 10], [6, 9], [11, 5], [27, 2], [57, 22], [11, -2], [8, -12], [7, -31], [9, -19], [22, -34], [10, -22], [-2, -6], [-7, -6], [-55, -10]], [[27698, 86188], [-9, -2], [-2, 7], [7, 24], [12, 3], [13, 26], [12, -9], [-4, -15], [-16, -22], [-13, -12]], [[27760, 86273], [-29, -4], [13, 34], [10, 16], [12, 11], [24, 4], [16, -14], [-15, -25], [-31, -22]], [[23116, 93857], [-45, -6], [-41, 40], [-2, 38], [3, 21], [5, 18], [15, 16], [43, 18], [19, -13], [7, -17], [6, -6], [28, -14], [13, -16], [-2, -19], [-8, -28], [-10, -18], [-11, -8], [-20, -6]], [[22957, 94772], [-84, -34], [-18, 13], [-8, 12], [65, 53], [28, 14], [27, -16], [7, -13], [-3, -9], [-14, -20]], [[22702, 94394], [-80, -13], [-36, 6], [-20, -16], [-15, -7], [-44, -3], [-90, 29], [-24, 10], [-9, 9], [4, 9], [16, 9], [69, 12], [25, 10], [11, 13], [17, 11], [24, 8], [65, 8], [146, 41], [72, 5], [28, -3], [9, -11], [2, -10], [-4, -11], [-22, -28], [-30, -21], [-79, -46], [-35, -11]], [[24944, 91831], [6, -36], [-24, -49], [-8, -8], [-10, -4], [-9, 6], [-28, 38], [-8, 24], [10, 12], [22, 15], [15, 7], [20, -6], [6, 10], [8, -9]], [[24863, 91716], [-23, -6], [-14, 24], [-12, 5], [-5, 16], [-24, 3], [2, 25], [7, 12], [22, 10], [17, -4], [17, -25], [8, -20], [7, -25], [-2, -15]], [[29444, 87913], [-15, -5], [-55, 7], [-69, 27], [-35, 25], [2, 8], [15, 4], [18, -4], [29, -17], [80, -9], [25, -10], [8, -16], [-3, -10]], [[29199, 91214], [-21, -4], [-32, 36], [-66, 40], [-25, 30], [-1, 14], [2, 22], [8, 27], [23, 30], [24, 5], [35, -7], [25, -21], [27, -59], [19, -29], [5, -21], [-9, -10], [1, -10], [4, -6], [-1, -11], [-8, -16], [-10, -10]], [[28185, 86824], [-38, -6], [0, 8], [16, 24], [59, 20], [44, 6], [-10, -20], [-26, -16], [-45, -16]], [[28060, 91124], [-23, -6], [-30, 30], [0, 17], [6, 41], [55, 10], [24, -24], [11, -24], [-43, -44]], [[28700, 88360], [-29, -6], [-38, 13], [-38, 25], [-85, 80], [64, 54], [102, -63], [31, -40], [-7, -63]], [[27936, 92043], [11, -33], [7, -11], [-11, -15], [-41, -31], [-92, -13], [-46, 14], [22, -44], [4, -19], [-6, -8], [-20, 2], [-31, 13], [-19, 15], [-4, 18], [-7, 4], [-9, -10], [-8, 2], [-19, 27], [-14, 9], [-92, 16], [-4, 7], [5, 12], [14, 18], [20, 5], [52, -7], [4, 4], [4, 22], [4, 9], [36, -3], [22, 5], [13, -11], [12, -26], [17, 5], [26, -4], [28, 9], [43, 23], [33, 9], [46, -13]], [[28325, 92001], [14, -29], [3, -15], [-20, -17], [-74, -33], [-46, -28], [-22, -7], [-31, 7], [-37, -14], [-15, 2], [17, 23], [58, 67], [49, 7], [16, 14], [14, -5], [8, 12], [1, 17], [17, 13], [16, 0], [32, -14]], [[28432, 88704], [-20, -26], [-59, 9], [-8, 8], [-2, 10], [9, 12], [61, 12], [26, 1], [14, -4], [1, -4], [-22, -18]], [[26910, 90024], [28, -7], [21, 1], [4, -9], [-22, -28], [-13, -5], [-25, 20], [-18, 25], [-5, 15], [-2, 16], [4, 3], [28, -31]], [[27997, 91500], [-19, -4], [-23, 11], [-8, 19], [-4, 19], [4, 10], [10, 9], [13, 21], [18, 32], [27, 22], [60, 21], [8, 7], [27, 58], [9, 9], [30, 6], [3, 8], [-10, 14], [0, 14], [10, 15], [15, 12], [39, 10], [35, -2], [9, -4], [7, -10], [11, -27], [1, -6], [-16, -24], [-42, -36], [-26, -31], [-5, -10], [-3, -13], [-9, -15], [-31, -38], [-20, -36], [-21, -20], [-56, -19], [-43, -22]], [[28612, 91672], [-35, -7], [-26, 4], [-17, 13], [-13, 19], [-16, 46], [6, 22], [2, 38], [3, 15], [6, 7], [37, 14], [21, -2], [32, -15], [69, -4], [18, -14], [4, -8], [-1, -10], [-4, -12], [-34, -35], [-17, -24], [-12, -29], [-23, -18]], [[25857, 92230], [32, -4], [30, 5], [22, -5], [13, -16], [9, -17], [5, -18], [-12, -13], [-49, -11], [-34, 6], [-35, 15], [-17, -7], [-41, 11], [-20, 14], [-17, 21], [0, 13], [43, 14], [17, 12], [54, -20]], [[26743, 89744], [35, -23], [36, -13], [57, -6], [8, -5], [0, -11], [-8, -16], [-19, -22], [-14, 0], [-31, 15], [-12, 7], [-13, 17], [-6, 2], [-9, -6], [-2, -7], [4, -10], [-5, -2], [-39, 6], [-6, 6], [3, 18], [27, 27], [-23, 8], [-8, 10], [-35, -17], [-19, -4], [-30, 12], [-4, 60], [-3, 23], [-14, 15], [-9, 16], [-13, 12], [-27, 12], [-23, 30], [-4, 14], [3, 10], [13, 14], [79, -30], [48, -29], [46, -36], [23, -26], [2, -17], [-5, -17], [-14, -17], [11, -20]], [[25945, 90861], [-11, -1], [-19, 9], [-43, 35], [-9, 15], [-4, 17], [0, 21], [3, 20], [14, 42], [-26, 33], [-6, 19], [3, 10], [14, 26], [4, 16], [14, 22], [37, 44], [37, -10], [32, -36], [9, -24], [-3, -26], [3, -37], [8, -49], [3, -36], [-4, -22], [-14, -41], [-12, -20], [-16, -18], [-14, -9]], [[26479, 89616], [-15, -6], [-15, 3], [-13, 17], [-11, 30], [-17, 22], [-39, 28], [-7, 11], [-11, 37], [-2, 37], [-9, 34], [0, 16], [7, 25], [33, 6], [26, -10], [5, -7], [8, -14], [6, -18], [31, -47], [18, -38], [25, -78], [0, -15], [-7, -16], [-13, -17]], [[24154, 87467], [-11, -1], [-26, 29], [-5, 15], [33, 9], [23, -26], [-2, -12], [-12, -14]], [[21881, 95955], [-72, -2], [-33, 6], [-2, 11], [29, 13], [95, 22], [57, 39], [21, 5], [73, 6], [43, -1], [55, -10], [-132, -49], [-134, -40]], [[21388, 96858], [-32, -12], [-37, 7], [-6, 7], [0, 9], [3, 10], [42, 36], [38, 12], [23, 3], [18, -13], [10, -18], [-59, -41]], [[21752, 96599], [-39, -6], [-69, 3], [-83, 21], [-22, 24], [-5, 38], [1, 22], [7, 4], [51, 5], [96, 6], [78, -5], [88, -22], [36, -14], [18, -10], [22, -20], [8, -8], [5, -16], [-110, -4], [-52, -6], [-30, -12]], [[25076, 95914], [-13, -8], [-42, 4], [-14, -8], [-22, 5], [-31, 16], [-36, 32], [-41, 48], [-32, 41], [-1, 12], [10, 19], [32, 13], [76, 15], [52, 0], [48, -31], [14, -11], [8, -13], [1, -12], [-4, -11], [-22, -24], [-10, -16], [0, -17], [5, -23], [9, -16], [13, -8], [0, -7]], [[23311, 95339], [-21, -19], [-23, -1], [-30, 18], [-32, -7], [-45, -36], [-16, -22], [-12, -7], [-37, -7], [-16, 6], [-15, 19], [-14, 32], [10, 24], [35, 16], [93, 27], [26, 13], [3, 14], [6, 9], [8, 4], [62, -23], [29, -16], [22, -18], [-2, -8], [-31, -18]], [[23526, 94760], [-13, -2], [-25, 3], [-93, 26], [-16, 10], [-4, 8], [21, 9], [8, 10], [23, 12], [42, 0], [44, -29], [21, -27], [1, -12], [-9, -8]], [[16368, 95475], [-22, -3], [-24, 6], [5, 15], [54, 41], [3, 11], [0, 9], [-7, 11], [14, 15], [22, 5], [7, -5], [2, -12], [-5, -36], [-6, -18], [-10, -14], [-14, -14], [-19, -11]], [[18455, 96049], [-42, -18], [-289, 27], [-15, 9], [-8, 12], [52, 33], [64, 14], [146, 11], [51, -13], [34, -15], [19, -12], [8, -24], [-20, -24]], [[21078, 95066], [-53, -3], [-90, 18], [-54, 33], [-17, 16], [2, 8], [9, 7], [13, 22], [31, 63], [12, 17], [48, 36], [36, 10], [75, -3], [44, -19], [18, -12], [13, -15], [13, -32], [3, -21], [22, -24], [7, -14], [0, -14], [-6, -14], [-12, -13], [-29, -21], [-85, -25]], [[22162, 91478], [-9, -18], [-11, -6], [-22, -21], [-8, -3], [-13, 14], [-11, 22], [-4, 3], [-7, 0], [-14, -15], [-7, 1], [-5, 9], [-3, 19], [0, 29], [7, 43], [1, 16], [-4, 12], [3, 12], [10, 10], [12, 4], [30, -4], [23, -17], [12, -23], [23, -18], [7, -13], [-10, -56]], [[22223, 91597], [-6, -34], [-34, 9], [-15, 12], [-13, 28], [-2, 8], [3, 10], [14, 25], [9, 9], [23, -11], [10, -14], [8, -23], [3, -19]], [[22136, 92451], [-3, -5], [-60, 22], [-23, 12], [-8, 10], [-5, 19], [-3, 28], [12, 14], [27, -1], [28, -11], [44, -31], [-12, -10], [-1, -20], [5, -20], [-1, -7]], [[23468, 91920], [37, -39], [0, -19], [-5, -31], [-11, -24], [-16, -16], [-23, -8], [-29, -1], [-13, 7], [10, 24], [7, 8], [1, 21], [-5, 35], [-6, 22], [-16, 12], [-12, 1], [-3, -12], [5, -23], [-4, -30], [-13, -38], [-9, -17], [-18, 9], [-8, 14], [2, 23], [-4, 22], [4, 22], [12, 34], [17, 22], [21, 12], [26, -1], [29, -13], [24, -16]], [[21897, 91818], [-23, -5], [-4, 1], [2, 16], [-2, 8], [-6, 5], [20, 13], [3, 10], [-7, 7], [-27, 14], [-8, 13], [2, 11], [10, 10], [19, -2], [41, -18], [19, -26], [8, -20], [-13, -3], [-11, -8], [-11, -16], [-12, -10]], [[21709, 91351], [-11, -1], [-16, 10], [-90, 35], [-11, 11], [10, 15], [33, 19], [22, 19], [17, 30], [51, -16], [19, -14], [8, -12], [3, -17], [-3, -41], [-17, -9], [-15, -29]], [[20961, 91247], [-16, -2], [-28, 9], [-43, 21], [-31, 21], [-21, 23], [-3, 16], [16, 9], [24, 4], [57, -3], [28, -8], [36, -34], [7, -19], [2, -12], [-5, -11], [-23, -14]], [[20028, 90668], [-14, -48], [-6, 5], [-9, 23], [-20, 11], [-21, 25], [0, 55], [8, 25], [-2, 35], [22, 21], [16, -25], [5, -42], [-4, -20], [16, -22], [7, -5], [4, -17], [-2, -21]], [[19676, 91003], [31, -6], [23, 4], [17, -23], [7, -23], [-2, -8], [-8, -4], [-49, 26], [-18, 16], [-6, 14], [5, 4]], [[19974, 90440], [35, -5], [45, 1], [-8, -44], [-17, -29], [-14, -8], [-6, 16], [-26, 35], [-9, 34]], [[19632, 91008], [-10, -2], [-38, 34], [8, 30], [35, -31], [5, -18], [0, -13]], [[11377, 91921], [-23, -21], [-37, 22], [-9, 11], [42, 30], [19, -1], [39, -18], [14, -15], [-45, -8]], [[52722, 53170], [6, 135], [12, 113], [5, 105], [18, 93], [-9, 93], [-11, 40], [-57, 131], [26, 50], [-34, -7], [-7, 49], [-17, 58], [10, 10], [10, 32], [31, -10], [-1, 16], [-27, 49], [3, 25], [11, 27], [-6, 12], [-19, -29], [-14, 1], [-10, 19], [-8, 3], [5, -38], [-11, -33], [-10, -12], [-18, 2], [-14, 8], [-4, 19], [-13, 15], [-38, 24], [-31, 30], [-7, 80], [-12, 34], [-6, 39], [-3, 44], [5, 69], [-8, 11], [-9, 3], [-14, -3], [-13, 4], [-15, 38], [-13, 14], [8, -69], [-9, -20], [-23, 6], [-9, 26], [-2, 20], [10, 84], [-4, 2]], [[78623, 58343], [-5, -5], [-5, 0], [-5, 8], [1, 34], [3, 20], [9, 4], [2, -61]], [[78699, 58017], [-11, -22], [-16, 46], [0, 12], [27, -36]], [[79007, 57840], [-46, 75], [-90, 26], [-10, 33], [-9, 6], [-8, -43], [-50, -41], [-21, 25], [-15, 30], [2, 37], [15, 30], [24, 22], [12, 76], [-19, 97], [-16, 28], [-18, 23], [-18, -37], [-15, -61], [-16, -32], [-23, -7], [-33, 2], [-13, 93], [-4, 79], [4, 90], [5, 53], [-32, 74], [-2, 70], [-15, 37], [-4, -19], [0, -20]], [[77417, 57713], [-13, -7], [-26, -83], [-12, 42], [-7, 43], [8, 98], [-16, 186], [10, 25], [9, 13], [18, 71], [21, 70], [2, 85], [17, 61], [-4, 52], [1, 61], [4, 49], [-2, 41], [14, 42], [24, 32], [-10, 11], [-10, 23], [-31, -35], [-16, 11], [-3, 37], [4, 39], [2, 23], [12, 27], [-1, 52], [-6, 46], [9, 57], [-18, 0], [-9, 11], [5, 32], [17, 28], [-15, 53], [11, 57], [0, 71], [-8, 62], [0, 45], [-11, 79], [-6, 101], [-24, 76], [-19, 110], [-48, 144], [0, 61], [-2, 54], [-11, 27], [-14, -192], [-11, 38], [-3, 107], [-7, 50], [7, 101], [-28, 100], [-6, 73], [-19, 110], [6, 25], [25, -25], [-23, 64], [-19, -14], [-16, 69], [-3, 188], [-16, 70], [9, 71], [-18, 257], [-35, 82], [7, 72], [9, 63], [-2, 118], [8, 36], [17, 28], [-16, -10], [-13, -8], [-32, -7], [-36, -2], [-12, 86], [-18, 41], [-16, 86], [-9, 98], [6, 19], [-27, 40], [-8, 24], [-29, 64], [-33, 48], [8, -34], [9, -21], [-17, -59], [16, -99], [-14, -63], [-13, -82], [-12, -40], [-40, -84], [-32, -29], [-21, -5], [-19, 9], [-23, 44], [-5, 36], [-4, 61], [-8, 9], [-9, -7], [14, -79], [0, -37], [24, -71], [-9, -20], [-44, -38], [-15, 6], [-10, -8], [-3, -32], [-6, -18], [-69, -48], [-14, -56], [-9, -55], [-35, -80], [-46, -66], [-11, 3], [-13, 16], [2, 71], [15, 61], [-5, 64], [-3, -37], [-30, -90], [-14, -29], [-27, 8], [-38, -12], [-14, 92], [0, 34], [-3, 29], [5, 30], [-2, 25], [-9, -47], [-3, -40], [-14, -35], [-38, -39], [-1, 49], [-2, 44], [8, 39], [-1, 63], [12, 90], [-1, 31], [-3, 34], [-7, -50], [-4, -51], [-8, -16], [-13, -11], [-26, -60], [-15, -52], [-40, -50], [-20, 5], [-3, 63], [16, 225], [15, 32], [8, 39], [12, 131], [15, 50], [6, 104], [6, 18], [19, 82], [7, 150], [-8, 75], [-18, 72], [-18, 217], [-46, 176], [-4, 59], [-22, 71], [21, 5], [-43, 62], [-6, 26], [-9, 146], [2, 81], [-6, -11], [-6, -50], [-17, -21], [7, -87], [-1, -21], [-9, -33], [-36, 35], [-26, 38], [-30, 93], [-29, 104], [10, 16], [13, 2], [42, -77], [27, -16], [17, 19], [21, 33], [10, 64], [-11, 24], [-20, 13], [-13, 17], [-20, 43], [-2, 23], [-6, 28], [-20, 20], [-16, 25], [14, 45], [13, 34], [-35, -2], [-39, 58], [-9, 16], [-13, 12], [-31, 7], [-26, -17], [12, -82], [-2, -27], [-17, 4], [-36, 124], [11, 32], [15, 30], [-7, 4], [-15, -2], [14, 111], [-9, 16], [-4, -34], [-8, -34], [-30, -78], [-15, 15], [-10, 19], [14, 41], [8, 11], [5, 22], [-11, 43], [-18, 32], [-14, 53], [-7, 1], [6, -63], [-2, -91], [-32, 100], [-64, 143], [-15, 42]], [[75645, 63819], [-4, 42], [-7, 39], [-5, 42], [-1, 33], [-14, 29], [-6, 52], [-3, 52], [8, 38], [19, 40], [15, 7], [11, -18], [28, -27], [19, -24], [8, -33], [8, 4], [9, 21], [-2, 25], [-8, 68], [-3, 81], [0, 191], [-3, 22]], [[77280, 58152], [23, -100], [-3, -15], [-3, -8], [-6, 3], [-9, 54], [-17, 34], [-21, -6], [17, 44], [7, 10], [12, -16]], [[77272, 57565], [-13, -34], [-5, 2], [6, 55], [23, 41], [19, 4], [-2, -26], [-14, -31], [-14, -11]], [[77283, 58455], [-1, -13], [-2, 0], [-7, 9], [4, 55], [11, 44], [11, 66], [6, 14], [2, -35], [-7, -74], [-5, -40], [-12, -26]], [[77365, 58700], [-12, -3], [-5, 93], [3, 14], [16, -46], [24, -28], [-9, -18], [-17, -12]], [[77375, 58608], [-7, -119], [-17, 17], [-9, 0], [-10, 67], [0, 18], [-6, 44], [41, 8], [8, -35]], [[77336, 59100], [7, -16], [9, 0], [-3, -56], [-22, -69], [-13, -10], [-5, 0], [5, 101], [-9, 57], [3, 39], [24, -18], [4, -28]], [[77259, 58842], [-3, -3], [-4, 1], [-10, 10], [-10, 39], [5, 27], [4, 7], [10, -2], [4, -5], [2, -10], [-3, -22], [1, -19], [4, -23]], [[76243, 61028], [-18, -56], [-7, 84], [30, 47], [14, 44], [15, 31], [5, -37], [-14, -71], [-25, -42]], [[77103, 61205], [-10, -7], [-16, 37], [-3, 90], [13, 20], [7, 5], [11, -11], [3, -14], [2, -18], [-3, -19], [-4, -83]], [[76024, 62605], [-4, -5], [-29, 49], [-23, 62], [36, 12], [35, -13], [1, -33], [-8, -53], [-8, -19]], [[75969, 63301], [6, -79], [-19, 30], [-7, 41], [-2, 42], [22, -34]], [[76031, 63109], [32, -48], [13, 3], [19, -30], [1, -12], [-4, -24], [-9, -19], [-24, -20], [-16, 16], [-7, 52], [-19, 25], [-6, 20], [13, 29], [7, 8]], [[77372, 58157], [-6, -1], [-6, 2], [-6, 9], [14, 62], [4, -72]], [[77242, 58578], [3, -32], [-18, 34], [-3, 95], [14, -60], [6, -14], [-2, -23]], [[77240, 58980], [-2, -21], [-16, -43], [-14, 25], [-4, 13], [15, 28], [15, -4], [4, 6], [2, -4]], [[77309, 59388], [-2, -95], [-14, 46], [-2, 52], [1, 49], [3, 8], [1, -8], [8, -22], [5, -30]], [[76334, 60955], [-6, -15], [-11, 11], [-3, 6], [26, 64], [3, -24], [-9, -42]], [[75835, 63320], [4, -55], [-13, 22], [-18, 76], [1, 50], [12, -23], [14, -70]], [[50663, 58696], [-7, -33], [-21, -86], [-16, -36], [-69, -121], [-35, 14], [-71, -24], [-11, 28], [-16, 3], [-21, -4], [-8, -11], [-2, -12], [-7, -17], [-14, -48], [-10, -12], [-13, -8], [-15, 1], [-9, -6], [0, -24], [-3, -21], [-11, -10], [-4, -23], [1, -23], [-6, -10], [-14, 5], [-8, 7], [-7, -30], [-10, -20], [-6, 0]], [[57940, 77040], [-7, -139], [-27, -65], [-40, 22], [-52, -18], [-27, -73], [-16, -22], [-14, -26], [-9, -95], [-2, -156], [-19, -19], [-18, -6], [-75, -137], [43, -39], [19, -29], [32, -82], [44, -93], [9, -45]], [[81951, 54665], [32, 0]], [[81684, 54488], [31, -1], [34, 10], [35, 30], [33, 37], [28, 43], [27, 47], [27, 38], [43, 44], [15, -4], [0, -31], [-6, -36]], [[35652, 54182], [26, 99], [3, 45], [24, 2], [37, -52], [30, -75], [40, -243], [6, -225], [17, -118], [46, -245], [3, -45], [7, -55], [15, -58], [16, -96], [1, -18], [-11, -26], [16, -2], [14, -15], [9, -61], [11, -41], [21, -56], [43, -19], [33, -7], [37, -31], [27, -41], [21, -138], [-7, -87], [2, -61], [-11, -24], [-30, -40], [-7, -22], [-62, -103], [-14, -49], [-33, -65], [-33, -125], [-48, -114], [-17, -29], [-26, -7], [-16, -17], [-37, -93], [-51, -31], [-4, -54], [-29, -124], [-26, -67], [-16, -23], [-41, -122], [-5, -54], [0, -94], [-28, -57], [-28, -37], [-4, -80], [-12, -27], [-11, -18], [-58, 21], [-91, -88], [-30, -21], [98, -5], [32, -46], [69, 31], [83, 110], [32, 24], [65, 75], [27, 50], [48, 60], [10, 26], [27, 29], [15, -36], [1, -23], [-22, -44], [6, -28], [14, -36], [5, -49], [2, -37], [9, -66], [30, -88], [1, -30], [-4, -38], [14, -32], [15, -19], [51, -95], [39, 53], [25, 15], [15, 23], [33, 14], [27, -22], [51, -32], [37, 34], [75, 78], [-23, -138], [-17, -127], [-13, -51], [-13, -138], [-13, -37], [-10, -42], [17, 15], [14, 20], [18, 53], [14, 92], [55, 247], [16, 22], [45, 28], [78, 197], [31, -1], [19, -45], [19, -27], [4, 54], [27, 22], [-28, 27], [-5, 24], [-2, 40], [19, 55], [-12, 48], [40, 61], [-3, 45], [14, 38], [18, 39], [21, 19], [3, 33], [13, 14], [10, 4], [20, -37], [22, 44], [21, 17], [9, -7], [12, -20], [12, -8], [10, 4], [26, 28], [24, -46], [15, -10], [-4, 26], [-8, 23], [6, 20], [11, 12], [36, -11], [19, -20], [21, -38], [28, -3], [23, 4], [14, -21], [23, 1], [11, -33], [35, -46], [7, -31], [28, -16], [27, -19], [28, -5], [28, 5], [1, -40], [21, -11], [26, 9], [21, -48], [53, -37], [38, -56], [24, 10], [27, -15], [30, -121], [6, -87], [13, 12], [12, 39], [16, 71], [29, 23], [14, -27], [30, -44], [25, -47], [11, -31], [19, -5], [-16, -38], [16, 4], [19, 27], [17, -55], [13, -60], [2, -62], [-12, -35], [-10, -22], [-12, -44], [-13, -7], [-14, -14], [16, -32], [10, -30], [24, 82], [16, 23], [23, 13], [13, -59], [2, -55], [-38, -23], [0, -44], [-12, -24], [-7, -29], [-6, -59], [-8, -50], [-23, -218], [0, -36], [27, 38], [52, 112], [16, 118], [20, 117], [22, 37], [14, 0], [20, -13], [1, -38], [-3, -22], [-22, -58], [-9, -32], [9, -32], [50, 97], [22, 33], [19, -6], [38, 44], [76, 9], [5, 51], [16, 22], [41, -6], [82, -45], [29, -37], [43, -35], [23, -41], [96, -76], [69, -8], [34, 35], [43, -36], [23, -41], [44, -21], [45, -12], [35, 29], [88, 10], [112, 42], [66, -10], [75, -28], [54, -71], [45, -41], [27, -40], [44, -41], [94, -111], [33, -64], [58, -88], [59, -37], [32, -91], [25, -42], [61, -154], [71, -108], [47, -109], [90, -69], [35, -115], [61, -14], [26, -17], [32, -49], [44, -27], [56, 8], [63, -6], [50, 23], [120, -43], [19, -21], [24, -49], [44, -182], [26, -202], [13, -154], [30, -120], [16, -226], [14, -71], [1, -54], [12, -13], [7, -152], [-3, -61], [-11, -80], [-1, -35], [2, -23], [-5, -33], [-2, -32], [12, -72], [0, -57], [-15, -70], [-21, -181], [-53, -302], [-51, -173], [-71, -178], [-47, -93], [-18, -10], [-17, 19], [12, -50], [-11, -43], [-47, -131], [-46, -86], [-49, -150], [-4, -3], [-62, -58], [-37, -47], [-47, -85], [-43, -135], [-9, -18], [-16, 10], [0, -69], [-37, -108], [-11, -16], [0, 30], [7, 24], [3, 25], [-1, 29], [-10, -21], [-22, -82], [7, -59], [-16, -90], [-60, -257], [-75, -217], [-17, -66], [-62, -146], [-45, -70], [-12, -1], [-15, 6], [-7, 112], [-36, 68], [-10, 12], [-15, -72], [-12, -20], [-18, -4], [19, -31], [6, -36], [-19, -73], [-1, -66], [-34, -72], [-20, -53], [-10, -67], [-7, -62], [16, 17], [7, -13], [5, -19], [-3, -29], [-11, -54], [2, -134], [-4, -30], [11, -33], [12, 56], [6, -16], [-32, -359], [13, -162], [4, -183], [15, -179], [16, -160], [1, -13], [-22, -185], [-28, -183], [-17, -150], [-11, -161], [-11, -78], [-4, -79], [13, -188], [4, -35], [-34, -84], [-37, -41], [-21, -40], [-45, -151], [-25, -224], [-1, -118], [12, -249], [-9, -102], [-14, -67], [-17, -45], [-44, -53], [-39, -131], [-17, -137], [-27, -50], [-5, -76], [-21, -83], [-56, -124], [-36, -36], [-18, -34], [-11, -72], [-35, -119], [-25, -154], [6, -53], [1, -8], [9, -178], [-3, -46], [-34, -49], [-128, -91], [-34, -39], [-77, -156], [-4, -36], [3, -53], [12, -30], [-13, -33], [-15, -59], [-22, 4], [-127, 0], [-69, -19], [-36, 4], [-16, 14], [-18, 23], [-6, 30], [10, 46], [-6, 27], [-19, -1], [-20, -13], [-4, -27], [1, -20], [8, -28], [4, -35], [-8, -30], [-40, -4], [-46, -28], [-56, -12], [-45, -20], [-21, 26], [21, 13], [29, -7], [32, 21], [-7, 25], [-45, 32], [-51, -19], [-28, -39], [-61, 4], [-75, -29], [-12, -30], [2, -57], [15, -13], [14, -26], [-14, -24], [-13, -11], [-79, -27], [-73, -112], [-31, -14], [-27, -49], [-3, -42], [-8, -25], [-18, -2], [-38, 23], [-50, 1], [-35, -18], [-183, -182], [-66, -72], [-75, -148], [-126, -166], [-67, -99], [-12, -26], [-11, -1], [-21, -21], [9, -17], [14, -2], [-6, -57], [-26, -40], [-50, -103], [-11, 7], [16, 54], [-25, 2], [-36, 20], [-15, -22], [9, -54], [-14, -22], [-24, -3], [-23, 6], [-24, 39], [11, -70], [51, -18], [22, -16], [8, -27], [-40, -126], [-34, -17], [-3, -17], [18, 0], [10, -35], [-12, -141], [-16, -26], [-10, -1], [-10, -24], [14, -46], [13, -33], [-2, -65], [-5, -54], [0, -52], [17, -101], [6, -104], [7, -37], [4, -42], [-11, -39], [6, -63], [-19, -107], [10, -154], [-4, -144], [-8, -76], [-12, -59], [-29, -76], [-1, -77], [-62, -71], [-69, -99], [-63, -118], [-69, -166], [-80, -252], [-73, -360], [-89, -272], [-36, -98], [-48, -109], [-64, -128], [-86, -128], [-94, -114], [-34, -51], [-33, -73], [-8, 30], [7, 49], [-4, 37], [-1, 48], [19, 9], [28, -30], [14, 20], [11, 21], [34, 12], [65, 125], [48, 47], [28, 79], [4, 42], [-1, 85], [16, 22], [35, -8], [7, 24], [-3, 27], [6, 59], [48, 52], [22, 63], [-7, 160], [8, 7], [20, -25], [9, 11], [10, 70], [-5, 36], [-23, 10], [-79, -79], [-26, 3], [-4, 62], [-39, 29], [-15, 52], [-4, 35], [-14, 14], [1, -61], [4, -59], [34, -69], [-8, -28], [-17, -32], [-11, -71], [1, -92], [-9, 28], [-12, 16], [-5, -99], [-23, -38], [-7, -38], [6, -43], [-12, -30], [-58, -80], [-58, -55], [-13, -26], [-6, -61], [-9, -63], [-26, -55], [-21, -110], [1, -47], [7, -69], [11, -46], [-18, -31], [-23, -59], [-19, -67], [-46, -251], [-40, -151], [-31, -74], [-44, -78], [-125, -196]], [[33997, 34453], [13, 28], [44, 61], [24, 54], [5, 48], [21, 43], [38, 38], [41, 70], [47, 102], [28, 75], [9, 49], [19, 37], [26, 26], [23, 55], [20, 84], [26, 66], [35, 49], [19, 41], [4, 32], [9, 21], [15, 9], [8, 17], [-1, 25], [5, 17], [8, 10], [15, -4], [21, -15], [12, 3], [4, 21], [-5, 24], [-15, 27], [5, 30], [40, 48], [29, 18], [19, 30], [18, 47], [28, 33], [40, 18], [10, 18], [-1, 23], [8, 16], [23, 12], [13, 22], [2, 33], [7, 31], [13, 28], [15, 10], [16, -7], [15, 10], [14, 29], [17, 13], [19, -2], [10, 6], [34, 14], [18, 24], [16, 53], [13, 20], [12, -12], [21, 18], [29, 48], [5, 1], [22, 22], [22, 82], [11, 55], [-3, 45], [-7, 32], [3, 48], [7, 128], [2, 53], [12, 37], [-1, 36], [-21, 82], [-21, 71], [-12, 121], [-7, 46], [-18, 13], [-16, 40], [-20, 3], [-9, 16], [-10, 12], [-15, -3], [-12, -24], [-23, -1], [-14, -9], [-17, -21], [-16, 9], [-10, 19], [-21, 0]], [[33844, 40227], [19, 8], [7, 23], [13, 32], [17, 8], [20, 12], [7, 24], [-47, 84], [-28, 51], [17, 69], [27, 116], [27, 112], [21, 85], [5, 16], [18, 6], [-3, 44], [-1, 29], [-14, 1], [16, 105], [24, 148], [18, 113], [6, 19], [13, 5], [3, 13], [-16, 19], [-10, 35], [-20, 100], [-33, 159], [-3, 57], [-12, 35], [-20, -12], [-24, 12], [-60, 86], [-39, 47], [-13, 27], [-6, 89], [-12, 97], [-5, 121], [2, 30], [33, 91], [0, 47], [3, 40], [-1, 32], [-9, 1], [-13, -14], [-20, -11], [-12, -1], [-116, 9], [-133, 10], [-110, 8], [-96, 7], [-3, 79], [-5, 133], [-4, 94], [-6, 149], [-39, 93], [-41, 101], [-15, 25], [50, 4], [36, 2], [-7, 271], [-11, 28], [-10, 87], [-6, 49], [-18, 41], [-4, 45], [3, 30], [10, 19], [7, 46], [-5, 47], [-11, 43], [-13, 42], [-24, 26], [-36, 46], [-53, 60], [-45, 41], [-15, -5], [-79, -16], [-27, -9], [-18, 10], [-59, -1], [-24, 32], [-19, 37], [-42, 95], [-6, 47], [-16, 15], [-25, -6], [-25, 7], [-48, 39], [-44, 40], [-22, -1], [-20, 25], [-34, 61], [-16, 24], [-7, 32], [-7, 47], [-14, 10], [-18, -9], [-19, -24], [-27, 16], [-33, 44], [-21, 33], [-12, 16], [-29, 24], [-27, 5], [-42, -35], [-34, 14], [-54, 13], [-46, 25], [-17, 65], [-9, 44], [-27, 27], [-22, 33], [-26, 50], [-13, 17], [-23, 14], [-22, 17], [-2, 32], [-8, 42], [-2, 10], [-15, 51], [-7, 4], [-8, -10], [-5, -8], [-6, 10], [-2, 22], [4, 37], [-8, 38], [-21, 40], [-11, 41], [-1, 43], [-5, 29], [-8, 14], [-5, 25], [-1, 36], [6, 43], [13, 49], [-3, 76], [-19, 103], [-10, 74], [-2, 45], [3, 34], [11, 32], [23, 81], [4, 61], [-7, 69], [-1, 52], [5, 37], [-8, 47], [-16, 45], [-11, 1], [-16, -12], [-18, -38], [-22, -7], [-19, 24], [-61, -10], [-94, -24], [-38, -24], [-22, -10], [-26, -8], [-43, -44], [-106, -169], [-22, -24], [-25, -3], [-15, -24], [-23, -18], [-46, -67], [-24, -54], [-15, -48], [-18, -2], [-13, 13], [-44, -6], [-22, -17], [-24, -47], [-30, -85], [-13, -24], [-24, -26], [-28, -20], [-34, -32], [-16, -2], [-13, -5], [-12, 14], [-4, 31], [-18, 19], [-42, 10], [-63, 22], [-65, 4], [-33, -2]], [[36214, 51711], [26, -3], [37, 11], [24, 27], [28, 5], [27, -3], [92, -30], [55, -9], [20, -9], [20, -14], [14, -15], [4, -32], [-14, -51], [-10, -53], [-9, -75], [-7, -16], [-12, 4], [7, -67], [-2, -27], [-6, -26], [-15, -54], [-22, -69], [-7, -14], [-17, -24], [-14, -31], [3, -29], [7, -29], [-8, -36], [-27, -53], [-16, -13], [-14, -6], [-14, 6], [-23, 53], [-3, -42], [-6, -42], [-8, -24], [-31, 3], [-17, 23], [-28, 25], [-5, -69], [-18, -47], [-17, -15], [-27, -10], [-16, -20], [-30, 16], [-27, 31], [-16, 3], [-12, -25], [-63, -5], [-29, -26], [-18, 8], [-26, 52], [-5, 34], [-15, 70], [-14, 84], [-10, 75], [8, 66], [17, -3], [20, -9], [4, 4], [1, 21], [-4, 18], [-32, -3], [-21, 39], [-3, 60], [4, 124], [2, 26], [15, 36], [4, 31], [-3, 34], [6, 61], [13, 52], [52, 67], [59, 24], [172, -65]], [[37741, 38512], [9, -16], [-16, 2], [-18, -14], [-28, -12], [-11, 23], [24, 32], [9, 24], [6, -5], [8, -17], [17, -17]], [[36504, 36634], [-5, -7], [-18, 72], [35, 69], [12, -28], [-9, -55], [-10, -38], [-5, -13]], [[37427, 38082], [0, -30], [-11, 15], [-31, -12], [-11, 23], [42, 97], [8, -14], [6, -18], [5, -25], [-5, -16], [-3, -20]], [[37639, 50149], [-28, -56], [9, 65], [-4, 45], [3, 35], [19, 34], [6, 5], [-2, -41], [1, -13], [-4, -74]], [[39237, 44298], [-10, -12], [-2, 36], [29, 47], [4, 54], [15, -25], [4, -28], [0, -12], [-40, -60]], [[39193, 44081], [-9, -33], [-11, 5], [-5, 22], [-8, 22], [4, 18], [8, 10], [20, -2], [1, -42]], [[37532, 51083], [-18, -27], [-5, -15], [-15, 11], [3, 16], [4, -2], [5, 47], [25, -6], [1, -24]], [[36183, 51997], [12, -30], [-40, -120], [-21, -18], [-24, -3], [-31, 36], [-48, -3], [-15, 9], [-1, 52], [20, 56], [40, -3], [69, 45], [39, -21]], [[36028, 52959], [-28, -26], [-16, 10], [-15, 69], [5, 57], [20, 19], [16, -4], [6, -8], [14, -93], [-2, -24]], [[35929, 51767], [-76, -113], [-25, 37], [-6, 22], [5, 21], [-1, 9], [8, 39], [43, 32], [21, 5], [27, -10], [5, -27], [-1, -15]], [[36265, 51778], [-73, -18], [-34, 29], [8, 24], [25, 38], [30, 28], [28, 12], [28, -15], [8, -33], [-2, -32], [-18, -33]], [[35992, 51923], [-5, -85], [-50, 36], [4, 87], [24, 24], [20, 46], [7, 56], [1, 77], [8, 14], [6, 5], [6, -5], [3, -116], [2, -70], [-26, -69]], [[36068, 52069], [-30, -19], [-5, 18], [0, 72], [8, 40], [38, 11], [4, 12], [11, 7], [7, -25], [-1, -41], [-32, -75]], [[35602, 51017], [-30, -11], [38, 144], [34, 67], [1, 133], [36, 118], [34, 49], [47, 14], [26, -72], [-32, -205], [-9, -1], [-43, -108], [-48, -75], [-54, -53]], [[36531, 35848], [-19, -26], [4, 137], [10, 45], [11, 34], [14, 21], [10, -29], [-8, -67], [-25, -81], [3, -34]], [[54907, 76553], [-23, 24]], [[32597, 39035], [-4, 9], [-22, 34], [-20, 63], [-5, 29], [-3, 1], [-118, -1], [-113, -3], [-11, -13], [-17, 0], [-12, 13], [-11, -1], [-17, -13], [-15, -25], [-44, -169], [-21, -72], [-16, -65], [-12, -110], [-4, -19], [-14, 38], [-20, 102], [-9, 57], [-13, 66], [-22, 82], [-27, 25], [-16, 8], [-23, 16], [-42, 20], [-18, 4], [-119, 2], [-9, 2], [-46, -9], [-24, 6], [-25, 46], [-55, 81], [-11, 26], [-21, 17], [-13, 2], [-7, -16], [-10, -68], [-11, -61], [-12, -35], [-39, -25], [-37, -27], [-20, -7], [-11, -30], [-5, -43], [-9, -38], [-53, -58], [-12, -24], [-6, -57], [-29, -71], [-10, -27]], [[50751, 55512], [-116, -24], [-130, -39], [-55, -25]], [[25473, 62483], [-15, -65], [15, -9], [14, 7], [32, -3], [13, -71], [-4, -61], [-30, -158], [-4, -55], [-14, -81], [19, -54], [-18, -72], [-6, -46], [-1, -69], [9, -132], [-15, -190], [-25, -83], [-16, -32], [-28, -82], [-37, -25], [-51, -133], [-9, -35], [5, -38]], [[25569, 62168], [-13, -11], [11, 34], [1, 21], [16, 89], [10, -1], [3, -8], [-28, -124]], [[25596, 61879], [-21, -81], [-2, 23], [9, 60], [12, 21], [8, 22], [2, 26], [10, -13], [-3, -25], [-15, -33]], [[50701, 81276], [121, 97], [73, 50], [35, 15]], [[33474, 59378], [-8, -11], [-25, 23], [-9, 28], [-1, 88], [15, 8], [29, -70], [17, -25], [-18, -41]], [[75645, 63819], [-5, 0], [-16, 53], [-15, 58], [-39, 110], [-12, 197], [-1, 97], [-26, 114], [-18, 158], [-7, 41], [9, 51], [2, 19], [-5, -4], [-14, -26], [-17, 63], [-11, 56], [-46, 117], [-13, 52], [-1, 50], [-19, -50], [-27, -36], [-27, -54], [-18, -16], [-57, -10], [-33, 72], [-47, 175], [-7, 40], [6, 103], [-11, 97], [0, 52], [-3, 34], [-8, -8], [-4, -23], [2, -36], [-3, -31], [-41, 6], [-39, 14], [34, -51], [36, -12], [19, -46], [3, -36], [-1, -40], [-19, -29], [-17, -17], [3, -39], [21, -47], [-26, -14], [-6, -31], [-1, -43], [13, -39], [5, -29], [-3, -26], [12, -29], [18, -60], [5, -42], [-7, -60], [-10, -23], [-16, -23], [-39, -75], [-19, -86], [-16, -40], [-20, -7], [-7, 18], [-17, 22], [0, 42], [5, 33], [33, 81], [-18, -11], [-21, -23], [-31, -43], [-11, 53], [-6, 50], [0, 61], [25, 91], [-29, -45], [-8, -57], [4, -67], [-4, -47], [-11, -62], [-15, -37], [-25, -24], [-11, -37], [-17, -27], [0, 54], [-5, 71], [-18, 168], [-4, -36], [9, -104], [0, -68], [-14, -54], [-27, -57], [-21, -8], [-12, 8], [-19, 36], [-20, 51], [-4, 82], [-8, 45]], [[75319, 64616], [-30, -40], [10, 239], [22, -89], [6, -48], [-8, -62]], [[75432, 64736], [-13, -17], [-12, 14], [-16, 56], [8, 71], [5, 11], [7, -23], [11, -50], [7, -38], [3, -24]], [[75215, 64567], [-48, -20], [-25, 6], [46, 151], [-1, 68], [-7, 55], [-24, 44], [-1, 32], [-11, 43], [-5, 51], [26, 16], [21, -29], [3, -16], [4, -42], [11, -43], [36, -88], [0, -55], [-10, -132], [-15, -41]], [[75520, 64419], [-10, -47], [-5, 34], [4, 43], [4, 24], [3, 0], [6, -25], [-2, -29]], [[75541, 64232], [-17, -3], [-8, 17], [4, 24], [-5, 78], [14, 8], [7, -1], [5, -22], [3, -42], [-3, -59]], [[75178, 65070], [4, -25], [-15, 15], [-12, 17], [-7, 23], [12, 12], [18, -42]], [[64057, 66752], [-9, -44], [-9, 16], [-21, 76], [6, 53], [-10, 76], [5, 22], [26, 11], [6, -4], [-8, -24], [15, -43], [2, -70], [-3, -69]], [[28428, 65811], [1, -13], [-28, -36], [20, -26], [19, 56], [15, -46], [8, -86], [-1, -15], [1, -12], [3, -17], [1, -24], [-16, -75], [-54, 8], [-2, 63], [-8, 12], [-13, 91], [-17, 29], [-24, 74], [14, 19], [18, -6], [10, 9], [25, 7], [16, 10], [12, -22]], [[28548, 66764], [-6, -5], [-24, 58], [-19, 17], [30, 41], [13, 35], [0, 76], [7, 42], [-2, 36], [7, 37], [-9, 42], [-26, 33], [-50, 131], [-79, 32], [-41, 1], [22, 21], [21, -2], [32, -13], [39, -6], [23, -39], [22, -51], [21, -20], [8, -14], [-1, -14], [3, -14], [27, -24], [26, -39], [8, -113], [-36, -54], [-6, -164], [-10, -30]], [[29714, 64050], [-8, -42], [-30, -81], [-65, -20], [-73, -4], [-5, 22], [-2, 20], [5, 30], [0, 12], [-3, 12], [26, 13], [18, 37], [27, 7], [34, -27], [19, -1], [27, 29], [22, 63], [13, -8], [-5, -62]], [[28404, 66075], [0, -70], [3, -52], [-3, -19], [-30, -34], [-8, -20], [-28, -20], [-17, -27], [-9, 45], [-17, 27], [-2, 47], [-13, -16], [-19, 10], [-30, 35], [-19, 48], [27, 8], [5, -30], [22, 37], [-5, 19], [-4, 3], [-7, 36], [32, 94], [7, 60], [-15, 98], [14, 6], [36, -34], [16, -34], [0, -46], [16, -35], [21, -86], [27, -50]], [[28196, 67240], [34, -18], [18, 2], [11, 12], [49, -5], [41, 17], [6, -30], [-1, -16], [-86, -15], [-78, -45], [-43, -31], [-21, -3], [-15, 16], [-52, 93], [14, -10], [38, -52], [24, 10], [22, 34], [4, 26], [-4, 13], [10, 41], [29, -39]], [[28514, 66252], [-31, -12], [-23, 11], [-5, 10], [9, 16], [21, 13], [34, 1], [15, -15], [2, -7], [-22, -17]], [[29428, 64932], [6, -10], [-17, -23], [-40, 28], [-9, -2], [-8, 31], [-3, 22], [2, 21], [24, -16], [12, -30], [33, -21]], [[29325, 65707], [-22, -63], [-12, 6], [7, 78], [15, 12], [6, 0], [6, -33]], [[29387, 64639], [-20, -18], [5, 30], [37, 51], [21, 44], [11, 16], [5, 12], [16, 17], [8, 28], [-2, 24], [-17, 38], [0, 27], [6, 20], [29, 9], [-8, -29], [12, -82], [-39, -103], [-33, -31], [-31, -53]], [[28708, 66524], [46, -65], [39, -24], [42, -82], [18, -29], [4, -26], [-7, -120], [-10, -73], [2, -63], [-10, 18], [-10, 42], [-17, 24], [-5, 13], [29, 2], [3, 66], [14, 51], [-2, 54], [-34, 59], [-24, 53], [-36, 16], [-34, 52], [-20, 7], [-24, -10], [9, 31], [6, 41], [4, 8], [17, -45]], [[28982, 65351], [-12, -4], [-21, 16], [-48, 70], [-23, 6], [8, 39], [17, -14], [39, -60], [15, -30], [25, -23]], [[29211, 65031], [-2, -15], [-35, 115], [-44, 28], [-26, 28], [6, 15], [17, 7], [3, 37], [-7, 39], [-24, 80], [-13, 54], [-6, 12], [-1, 45], [27, -70], [12, -62], [18, -61], [13, -105], [35, -36], [25, -51], [2, -60]], [[29081, 65783], [2, -30], [-19, 6], [-28, -11], [-9, 0], [6, 20], [19, 27], [1, 26], [-24, 37], [-27, 92], [-13, 22], [-6, 35], [-23, 38], [5, 20], [4, 4], [16, -9], [35, -134], [2, -12], [59, -131]], [[29711, 64763], [17, -9], [9, 1], [32, -17], [19, -24], [4, -10], [-10, -21], [-29, 40], [-26, 5], [-36, -1], [-14, 8], [10, 43], [24, -15]], [[29745, 64231], [-37, -28], [-3, 33], [18, 27], [22, -32]], [[62435, 74713], [27, 9], [46, 27], [13, -13], [13, -27], [7, -23], [1, -42], [5, -7], [23, 14], [9, -17], [18, -21], [29, -20], [43, 32], [21, 8], [18, -1], [9, -10], [4, -33], [-4, -41], [-5, -22], [9, -16], [35, -40], [15, -21], [-7, -38], [26, -93], [9, -36], [10, -44]], [[62913, 74254], [-1, 53], [1, 41], [-4, 24], [-20, 33], [-1, 14], [6, 8], [16, -5], [20, 2], [10, 13], [-22, 43], [-19, 29], [-17, 19], [-3, 12], [0, 8], [3, 10], [28, 24], [3, 21], [-2, 25], [-44, 36], [-34, -14], [-30, 41], [-19, 31], [-24, 33], [-21, 19], [-20, 42], [-36, 43], [-23, 12], [1, 7], [4, 8], [9, 6], [64, -1], [7, 7], [4, 19], [9, 27], [10, 41], [-1, 34], [-63, 55], [-46, 50], [-32, 67], [-22, 61], [1, 20], [6, 19], [49, 56], [4, 15], [-1, 10], [-18, 29], [-22, 29], [-7, 22], [-14, 11], [-27, 1], [-46, 36], [-10, 4], [-2, 7], [2, 7], [33, 15], [0, 12], [-10, 16], [-19, 12], [-17, 29], [-6, 26]], [[63492, 75947], [25, -34], [45, -90], [63, -147], [15, -42], [10, -48], [9, -59], [14, -52], [64, -130], [28, -48], [45, -63], [16, -14], [21, -3], [39, -1], [35, -24], [18, -17], [18, -25], [16, -28], [17, -77], [-62, 25], [-62, -4], [-36, -16], [-34, -22], [-32, -32], [-21, -62], [-17, -142], [-25, -134], [0, -61], [12, -59], [-2, -29], [-11, -12], [-15, -25], [-19, -122], [-10, -25], [-12, -15], [-3, 15], [0, 32], [-27, 28], [-14, -32], [-10, -67], [-20, -71], [-1, -13], [5, -219]], [[62653, 75239], [3, 19], [-8, 9], [-8, 0], [-8, -9], [0, -24], [10, -5], [11, 10]], [[62506, 75476], [-6, -7], [-9, 7], [-3, 14], [1, 16], [9, 3], [7, -4], [2, -14], [-1, -15]], [[89771, 44956], [-7, -69], [-14, -55], [-1, -32], [3, -45], [22, -33], [18, -21], [10, -58], [31, -81], [-1, -56], [16, -69], [16, -137], [4, -121], [16, -80], [-10, -172], [11, -70], [15, -58], [18, -116], [13, -106], [19, -30], [38, -36], [41, 40], [28, 53], [31, 13], [43, 28], [31, -71], [17, -80], [74, -104], [42, -68], [32, -37], [30, -50], [-3, -50], [-7, -39], [7, -61], [4, -71], [-6, -86], [22, -130], [7, -103], [23, -101], [-2, -104], [-4, -40], [-3, -58], [18, -72], [17, -54], [24, -58], [33, -89], [23, -17], [20, -2], [-3, -90], [41, -179], [22, -147], [-15, -197], [-14, -114], [3, -56], [53, -137], [30, -25], [-6, -65], [-4, -101], [24, -78], [27, -58], [30, -35], [29, -28], [38, -28], [48, -12], [25, -44], [13, -35], [39, -12], [17, 7], [22, 14], [14, -24], [11, -31], [21, -86], [44, -85], [30, -14], [18, -43], [24, -11], [22, -6], [30, -33], [49, -75], [45, -13], [20, -21], [44, -83], [17, -44], [18, -66], [-22, -6], [-21, 13], [-13, -64], [29, -90], [35, -63], [41, -67], [40, -94], [10, -72], [11, -29], [13, -101], [35, -59], [2, -108], [18, -149], [19, -135], [14, -40], [17, -65], [18, 8], [14, 21], [28, -64], [15, -28], [8, 16], [-17, 123], [11, 72], [10, 9], [16, 2], [18, -58], [26, -62], [47, -55], [38, -52], [11, 2], [-4, 40], [1, 59], [15, 9], [14, -29], [25, -91], [5, -188], [0, -158], [17, -162], [24, -43], [16, -40], [28, -54], [18, -51], [23, -23], [74, -108], [20, -13], [32, -2], [40, -49], [19, -45], [43, -169], [20, -59], [43, -59], [19, -19], [29, -40], [10, -59], [3, -34], [17, -63], [25, -75], [38, -41], [34, -91], [2, -148], [18, -73], [12, -32], [27, -30], [11, -24], [-23, -195], [22, -391], [-12, -122], [22, -121], [52, -210], [12, -74], [7, -87], [34, -111], [-2, -169], [13, -80], [-3, -105], [-40, -112], [-31, -139], [-1, -118], [-20, -228], [-14, -62], [-10, -95], [-43, -230], [-2, -90], [6, -108], [-7, -103], [-11, -71], [-10, -130], [-44, -202], [-63, -150], [-4, -114], [-8, -50], [-13, -62], [-39, -69], [-23, -29], [-9, -40], [-22, 0], [0, -13], [15, -12], [-7, -21], [-58, -36], [-40, -47], [-40, -113], [-17, -60], [-21, -57], [-13, -27], [-6, -28], [-8, -72], [-21, -13], [-18, -21], [8, -68], [-9, -78], [-3, -53], [-10, -34], [-11, 12], [-10, -5], [-12, -19], [19, -5], [11, -9], [-39, -76], [-36, -78], [-10, -51], [-15, -65], [-14, -144], [-11, -83], [8, -58], [-2, -11], [-8, -4], [-5, 7], [-17, -20], [-4, -20], [7, -25], [4, -8], [-2, -12], [-6, -13], [-16, 0], [-19, -21], [-53, -213], [-23, -57], [-27, -87], [-10, -79], [-8, -86], [-10, -145], [-9, -103], [-21, -99], [-7, -71], [-3, -135], [10, -103], [-7, -54], [0, -52], [-8, -49], [-34, -11], [-28, -40], [-40, -65], [-23, -24], [-51, -18], [-99, 8], [-189, -24], [-37, -15], [-70, -45], [-68, -70], [-66, -94], [-149, -256], [-117, -28], [-22, 0], [-18, 7], [-21, -16], [0, -32], [19, -33], [14, -31], [25, 43], [11, -12], [4, -79], [1, -50], [-8, -27], [-15, -20], [-17, 13], [-2, 27], [-22, 65], [-26, 57], [-25, 18], [-14, -19], [-23, -20], [-20, 72], [-20, 63], [-28, 7], [-24, -1], [-19, 27], [-39, 43], [8, 33], [10, 35], [22, 13], [-6, 48], [-12, 39], [-30, 10], [-21, -7], [-12, -30], [-16, -54], [-64, -67], [-32, 37], [-36, 55], [18, -4], [36, 2], [30, 49], [13, 31], [15, 66], [-19, 46], [-18, 34], [-26, 30], [-98, -102], [-21, -15], [-19, -20], [34, -17], [20, 5], [21, -30], [-34, -42], [-26, -12], [-34, -25], [-63, -66], [-80, -136], [-35, -39], [-41, -32], [-56, 37], [-31, 8], [-40, 56], [-67, 38], [-63, 74], [-44, 38], [-31, 8], [-43, -16], [-73, 67], [-56, 7], [-36, -67], [-29, 5], [-18, 9], [-59, 110], [-56, 55], [-107, 28], [-66, 76], [-49, 146], [-94, 168], [-25, 61], [-12, 60], [-1, 47], [13, 90], [17, 89], [3, 50], [-35, 167], [-50, 159], [-23, 49], [-62, 106], [-57, 79], [-15, 42], [-4, 21], [27, -10], [12, 32], [19, 11], [14, -43], [17, -8], [0, 72], [10, 35], [-7, 15], [-5, 14], [-25, 16], [-28, -24], [-21, -31], [-28, -26], [-11, -28], [-29, -1], [-12, -7], [-58, -53], [-36, -1], [-57, 18], [18, 73], [23, 43], [19, 50], [30, 173], [-5, 151], [-15, 61], [-48, 125], [-22, 76], [-27, 80], [-13, -46], [-8, -49], [-26, -70], [-13, -157], [-50, -239], [-35, -3], [-30, 10], [-52, -28], [-35, -33], [-32, 0], [-18, -10], [-23, 8], [37, 187], [31, -5], [35, 7], [15, -3], [23, 2], [18, 86], [11, 96], [-7, 62], [-3, 64], [7, 73], [3, 53], [43, 174], [37, 89], [42, 72], [-5, 68], [-14, 85], [-4, 65], [20, 20], [19, 41], [-22, 187], [-14, 55], [-22, 55], [0, -71], [2, -70], [-30, -89], [-40, -64], [-26, -60], [-25, -136], [-32, -115], [-30, -43], [-27, -9], [-27, -18], [-42, -45], [-42, -39], [-30, -50], [-26, -27], [-86, -230], [-40, -76], [-8, -31], [-16, -26], [3, -37], [13, -24], [13, -102], [-8, -22], [-14, 11], [-35, 57], [-22, -21], [-18, -23], [-46, 105], [-20, 24], [-24, 42], [-26, 36], [-11, 5], [-19, -8], [2, 28], [13, 23], [11, 6], [21, -34], [24, -30], [14, -2], [6, 12], [-23, 118], [-15, 104], [-7, 30], [-19, 106], [-9, 30], [-40, 74], [-43, 88], [-11, 104], [-16, 67], [-20, 42], [-31, 38], [-85, 14], [-35, 107], [-21, 133], [16, 9], [19, 2], [7, 41], [-5, 64], [-84, 78], [-40, 83], [-34, 35], [-31, 14], [-42, -3], [-53, 3], [-126, 131], [-30, 4], [-90, -41], [-31, 7], [-137, 179], [-91, 86], [-30, 15], [-39, 15], [-32, -21], [-22, -19], [-46, -22], [-182, 14], [-156, -28], [-105, -19], [-67, -24], [-112, -107], [-133, -103], [-108, -49], [-99, -65], [-66, -19], [-84, -8], [-179, 32], [-61, -24], [-97, -120], [-29, -29], [-55, -33], [-141, -155], [-65, -33], [-42, -11], [-36, -32], [-32, -66], [-45, -183], [-27, -86], [-61, -138], [-39, -46], [-40, 6], [-44, -48], [-38, 51], [-31, 9], [-50, -4], [-174, -58], [-25, 68], [-32, 10], [-60, -3], [-90, 20], [-164, -25], [-79, -28], [-31, -25], [-58, 16], [-99, -23], [-35, -38], [-26, -35], [-51, -154], [-56, -51], [-47, -1], [-51, -12], [-105, -148], [-106, -144], [-36, -15], [-40, -24], [-52, -12], [-26, -13], [-122, 37], [-77, 4], [-97, 22], [-83, 71], [-64, 40], [-73, 155], [-44, 58], [-80, 70], [-23, -2], [-19, -19], [-33, 49], [-1, 64], [-9, 54], [1, 142], [5, 167], [29, -38], [23, -36], [49, 2], [44, 62], [25, 92], [21, 103], [-3, 110], [-15, 193], [10, 41], [15, 16], [5, 96], [4, 296], [-11, 111], [-68, 226], [-45, 197], [-32, 88], [-28, 143], [-23, 198], [-7, 100], [-7, 185], [8, 105], [-4, 61], [-28, 167], [-64, 156], [-10, 58], [0, 61], [-15, 71], [-51, 143], [-52, 123], [-9, 60], [-10, 249], [-19, 114], [-89, 287], [-104, 248], [-29, 102], [-13, 34], [8, 4], [11, -13], [13, -25], [7, -2], [6, 21], [-1, 47], [4, 26], [9, -14], [11, -53], [33, -138], [10, -70], [42, -21], [13, 18], [15, 36], [5, 97], [-21, 44], [-20, 19], [-32, 72], [-21, 115], [-33, 107], [0, 38], [15, 28], [25, -15], [23, -62], [25, -57], [-4, -100], [-4, -27], [2, -23], [9, -22], [12, -17], [13, 25], [11, 58], [7, -7], [18, -133], [14, -36], [27, -42], [24, 32], [11, 28], [-4, 94], [7, 91], [-4, 67], [-61, 177], [-56, 218], [-34, 109], [-28, 164], [-18, 56], [-24, 92], [-1, 104], [2, 71], [19, 151], [18, 79], [56, 181], [3, 78], [0, 59], [8, 90], [0, 63], [-8, 59], [-23, 100], [31, 177], [45, 226], [18, 33], [28, 31], [5, -47], [-13, -157], [19, -81], [-6, -92], [18, 15], [27, 18], [21, 48], [11, 46], [51, 184], [30, 69], [41, 50], [85, 61], [81, 80], [39, 77], [49, 66], [34, 73], [32, 49], [166, 183], [28, 34], [36, 4], [44, -6], [40, 10], [43, -42], [31, -5], [77, 46], [41, 40], [71, 89], [31, 25], [72, 28], [82, 37], [98, 154], [70, -10], [63, -15], [51, 46], [119, 28], [66, 39], [124, 102], [33, 35], [50, 73], [44, 91], [43, 123], [27, 110], [11, 57], [26, 90], [17, 71], [14, 34], [48, 48], [71, 135], [23, 28], [4, 43], [-15, 24], [-19, 15], [-13, 143], [-12, 99], [-1, 69], [5, 66], [28, 103], [19, 44], [28, 51], [25, 16], [21, 45], [34, 44], [15, 45], [21, 91], [19, 69], [15, -3], [28, -160], [19, -85], [35, -100], [32, -148], [27, -67], [13, -44], [10, -20], [3, 28], [-3, 33], [13, 112], [-6, 79], [2, 31], [6, 12], [13, -8], [25, -44], [13, -16], [9, 3], [-1, 72], [13, 45], [-5, 31], [-22, -2], [-9, 39], [-18, 44], [-21, 32], [-24, 74], [-8, 28], [10, 14], [15, -2], [13, 31], [5, 42], [-11, 69], [12, 25], [22, -7], [36, -109], [16, 11], [13, 44], [23, 12], [24, -8], [15, -31], [32, -32], [42, 4], [22, -8], [45, 6], [22, -10], [-4, 17], [-25, 20], [-27, 4], [-32, -2], [-14, 21], [-5, 55], [8, 40], [5, 17], [21, -7], [19, 2], [2, 53], [7, 48], [11, 39], [0, 37], [-12, -10], [-28, -86], [-14, 70], [-20, 53], [4, 77], [12, 76], [18, 10], [16, -12], [23, 45], [13, 34], [-3, 28], [3, 21], [16, -6], [62, -69], [12, -36], [13, 14], [4, 39], [-1, 39], [-14, -5], [-32, 3], [-7, 22], [3, 19], [-15, 46], [21, 29], [17, 2], [13, 20], [0, 27], [4, 12], [10, -17], [32, -7], [31, -35], [15, -8], [6, 19], [2, 41], [-39, 41], [-1, 40], [-17, 47], [0, 45], [24, 39], [5, 37], [15, 15], [27, 0], [19, 32], [21, 11], [6, 70], [-1, 48], [9, 12], [21, -20], [-6, -55], [0, -53], [-6, -29], [8, 2], [5, 12], [9, 35], [22, -14], [6, -37], [3, -37], [11, -12], [15, 56], [21, 15], [-1, 71], [8, 51], [2, 38], [13, 19], [3, 40], [-10, 28], [-6, 51], [18, 11], [18, -25], [13, -64], [8, -29], [11, 16], [7, 42], [22, 25], [22, -34], [24, -48], [31, 42], [28, 77], [-5, 47], [4, 49], [35, 26], [29, -19], [25, -52], [54, -39], [46, -56], [20, -36], [40, -58], [25, -60], [34, -107], [82, -131], [5, -23], [-11, -43], [-10, -56], [-12, -95], [-3, -139], [12, 10], [12, 50], [13, -10], [14, -32], [2, 31], [-9, 18], [-15, 64], [0, 34], [12, 28], [19, 32], [20, 22], [13, 18], [2, 24], [18, 23], [28, 8], [16, -4], [118, -59], [29, -60], [3, -73], [11, -26], [7, 46], [-2, 100], [10, 20], [31, -15], [22, -20], [30, -66], [6, -32], [13, -21], [4, 30], [-6, 43], [-4, 50], [6, 43], [36, 3], [23, 10], [-11, 16], [-15, 6], [-25, 40], [-17, 42], [27, 42], [-1, 10], [-25, -1], [-34, 40], [-29, 56], [22, 103], [45, 101], [25, 34], [2, 34], [12, 62], [8, 53], [2, 42], [11, 43], [28, 41], [37, 15], [18, 16], [18, 38], [16, 46], [-34, 90], [3, 50], [6, 59], [42, 43], [22, 112], [15, 17], [33, -3], [13, 10], [-2, 89], [3, 35], [14, 14], [18, -12], [11, -39], [25, -36], [9, 20], [-4, 39], [-3, 51], [23, 11], [19, 3], [1, 41], [-3, 33], [8, 14], [48, 7], [13, 34], [7, 29], [6, -16], [8, -66], [27, -38], [80, -1], [45, 27], [19, -16], [30, -13], [32, 31], [20, 24], [33, -31], [11, -32], [8, 69], [20, 24], [20, 14], [26, -12], [10, 4], [-23, 51], [1, 46], [-1, 69], [4, 62], [8, 45], [-55, 91], [-55, 14], [-40, -19], [-17, 15], [-36, 72], [-34, 27], [-2, 18], [41, 52], [16, -9], [24, -49], [14, -17], [12, 4], [7, 38], [11, 20], [20, -12], [62, -82], [34, -80], [18, 21], [31, 45], [29, -9], [17, -27], [25, -97], [20, -48], [48, -13], [24, -19], [25, -32], [33, 3], [70, -12], [65, -62], [27, -39], [32, -11], [18, -15], [34, -5], [53, 44], [24, -40], [11, -28], [48, -52], [53, -16], [37, 53], [55, 39], [38, 60], [28, 29], [27, 49], [10, -2], [-22, -46], [-2, -26], [17, -11], [-2, -14], [-23, -35], [-29, -56], [1, -34], [11, -18], [13, 8], [18, 28], [23, 16], [19, -23], [7, -80], [14, -53], [30, -7], [19, 0], [19, 74], [-10, 63], [-12, 14], [6, 23], [48, 104], [27, -3], [19, -102], [31, -53], [32, 4], [17, -14], [14, -61], [-114, -251], [-5, -28], [15, -45], [6, -53], [-37, -128], [-14, -6], [-13, 35], [-19, 22], [-18, -16], [-18, -9], [-66, -71], [0, -183], [17, -109], [-10, -71], [-19, -126], [-22, -47], [-17, -30], [-57, -172], [-18, -41], [-19, -59], [6, -56], [7, -39], [22, -44], [83, -92], [38, -64], [66, -76], [15, -53], [9, -43], [47, -49], [34, -30], [10, 8], [7, 10], [8, 0], [9, -6], [-2, -38], [-3, -21], [3, -27], [24, -34], [38, 1], [22, 8], [25, -36], [22, -24], [36, -48], [63, -58], [49, -38], [58, -140], [44, -81], [49, -59], [72, -41], [33, 7], [54, -48], [53, -22], [28, -66], [9, -50], [3, -39], [26, -92], [54, -30], [69, -92], [57, -41], [14, -24], [25, -29], [48, -1], [84, 46], [38, 47], [51, 74], [23, 128], [14, 103], [71, 212], [20, 105], [18, 140], [15, 87], [-5, 95], [16, 172], [36, 237], [13, 79], [-7, 118], [-22, 220], [10, 77], [10, 106], [-16, 77], [-16, 53], [-2, 75], [17, 140], [15, 74], [16, 96], [-9, 182], [34, 63], [13, 32], [26, 0], [12, -14], [3, 36], [-10, 34], [-4, 39], [-8, 20], [-16, 7], [-13, 21], [-19, 22], [3, 81], [33, 156], [18, 60], [11, -25], [14, -20], [2, 45], [-5, 46], [25, 152], [27, 207], [8, 188], [44, 36], [23, 47], [13, 55], [25, 0], [17, -24], [-11, -41], [-4, -31], [47, -79], [16, -60], [7, -57], [9, -54], [4, -72], [0, -115], [6, -109], [17, -34], [15, -22], [22, -3], [31, -18]], [[92521, 37009], [-7, -16], [-13, 29], [-8, 102], [6, 59], [14, 55], [3, 30], [-6, 62], [42, 71], [10, 37], [4, 48], [-15, 52], [-12, 10], [10, 29], [12, 15], [9, 6], [7, -5], [5, -102], [17, -36], [-3, -50], [-58, -259], [-16, -97], [-1, -40]], [[88751, 42296], [-21, -51], [-11, 7], [-10, -27], [-20, -13], [-12, 0], [-22, -13], [-4, 16], [4, 51], [19, 56], [18, 35], [46, 16], [36, 25], [4, -4], [26, -65], [-38, -8], [-15, -25]], [[87975, 43891], [12, -24], [13, 2], [12, 53], [7, -8], [5, -13], [4, -23], [-17, -40], [-8, -6], [-7, -23], [-12, -73], [1, -24], [11, -25], [27, -22], [13, 10], [5, -3], [-5, -36], [-11, -27], [-36, 12], [-32, -4], [-52, 26], [-27, 3], [-8, 10], [16, 21], [10, 28], [-5, 67], [4, 84], [30, 41], [14, 42], [20, 26], [13, -3], [-2, -26], [5, -45]], [[86238, 45115], [23, -14], [10, -19], [7, -21], [1, -25], [-29, -11], [-52, 37], [-51, -31], [-15, 0], [-10, 22], [8, 61], [19, -9], [16, 22], [-3, 67], [-9, 37], [27, 68], [12, 13], [12, 0], [11, -48], [2, -51], [13, -48], [8, -50]], [[86282, 45290], [37, -5], [45, 43], [21, -18], [9, 4], [33, 41], [21, 12], [15, 30], [14, -33], [32, -38], [11, -40], [13, -19], [5, -12], [-20, -42], [-3, -45], [-21, 3], [-25, -74], [-95, -124], [-85, 106], [-37, 71], [-24, 99], [-5, 82], [-10, 51], [4, 14], [5, 6], [7, -1], [25, -56], [12, -15], [16, -40]], [[81439, 36835], [-7, -24], [-54, 180], [-15, 123], [10, 22], [10, 6], [32, -170], [10, -39], [0, -40], [4, -12], [10, -46]], [[88220, 31256], [67, -14], [26, 21], [32, -17], [22, -56], [-16, -27], [-15, -4], [-49, 23], [-46, -18], [-13, -23], [-9, -51], [-40, -28], [-18, 31], [-48, 22], [-17, -32], [-34, 9], [-32, -14], [-43, 8], [-46, 57], [-14, 26], [11, 47], [16, 34], [126, 49], [67, 41], [55, -7], [15, -9], [14, -21], [-10, -38], [-1, -9]], [[90412, 29749], [-42, -38], [-15, 17], [1, 29], [3, 13], [36, 2], [17, -23]], [[90364, 29671], [10, -28], [2, -11], [-24, 22], [-39, -5], [24, 40], [20, -8], [7, -10]], [[91400, 40154], [-6, -6], [-10, 0], [-13, 11], [12, 74], [6, -39], [12, -32], [-1, -8]], [[91370, 40236], [-6, -3], [-7, 6], [5, 24], [7, 19], [10, 14], [-3, -52], [-6, -8]], [[91984, 38311], [10, -15], [8, 2], [8, -9], [-3, -38], [13, -42], [6, -30], [-10, -24], [-6, -8], [-15, 20], [-42, 121], [7, 41], [24, -18]], [[91809, 38984], [-8, -1], [-7, 10], [6, 23], [1, 32], [10, -10], [7, -45], [-9, -9]], [[91646, 39059], [-10, -18], [-6, 42], [1, 44], [10, 15], [5, -58], [0, -25]], [[92649, 36038], [-24, -158], [-7, 3], [-9, 24], [1, 91], [10, 58], [24, -10], [5, -8]], [[92622, 36108], [-6, -9], [-12, 55], [-4, 56], [5, 51], [14, 11], [10, -4], [-11, -94], [4, -66]], [[89520, 45676], [-23, -33], [-15, 18], [-4, 36], [2, 16], [19, 28], [21, -65]], [[89538, 45972], [-17, -36], [-17, 11], [-6, 20], [6, 29], [23, 5], [11, -29]], [[89490, 45994], [-7, -16], [-12, 34], [14, 40], [12, -19], [-7, -39]], [[90632, 41341], [6, -55], [12, -42], [-5, -28], [-7, -21], [-18, 19], [-12, 51], [-21, 41], [-5, 23], [25, -2], [12, 8], [5, 9], [8, -3]], [[87943, 45288], [-20, -35], [-1, 26], [10, 21], [25, 84], [11, 20], [6, 11], [5, 31], [1, 46], [14, 7], [-11, -105], [-40, -106]], [[87871, 45159], [-44, -43], [24, 58], [51, 52], [8, 12], [-2, -25], [-26, -43], [-11, -11]], [[88081, 42754], [-12, -27], [-15, 28], [-3, 29], [-12, 8], [6, 27], [6, 7], [6, 33], [16, -39], [1, -43], [7, -23]], [[88017, 42845], [-5, -4], [0, 48], [8, 24], [4, -50], [-7, -18]], [[87941, 42840], [-17, -2], [-4, 3], [-3, 25], [5, 23], [18, 6], [7, -6], [-6, -49]], [[88738, 41984], [-11, -10], [-3, 24], [14, 24], [9, 34], [19, -30], [3, -30], [-31, -12]], [[87843, 43879], [-7, -6], [-25, 11], [0, 21], [3, 15], [7, 10], [16, 41], [11, -24], [5, -49], [-10, -19]], [[86831, 45332], [-6, -9], [-22, 89], [6, 27], [-9, 46], [15, 5], [12, 34], [4, -16], [1, -63], [9, -36], [-10, -77]], [[84777, 43444], [-18, -36], [-12, 29], [7, 58], [12, 20], [10, -10], [-1, -45], [2, -16]], [[84610, 42971], [-11, -17], [-10, 5], [0, 23], [-11, 24], [6, 28], [4, 14], [9, -2], [3, -23], [12, -26], [-2, -26]], [[82068, 39868], [-17, -45], [-19, 9], [-3, 23], [13, 37], [22, 45], [7, -28], [-3, -41]], [[90289, 28348], [32, -2], [18, 14], [16, -2], [19, -33], [22, -18], [16, 3], [13, -6], [12, -24], [30, -20], [14, -13], [11, -20], [13, -16], [81, -54], [57, -26], [71, 12], [21, 15], [21, 22], [17, -20], [17, -32], [-3, 34], [6, 30], [17, 23], [20, 15], [32, -2], [31, 7], [14, 13], [14, 2], [19, -17], [19, -9], [13, 22], [21, 51], [12, 18], [55, -16], [15, 0], [27, 53], [17, -1], [51, -42], [22, -53], [-3, -97], [2, -34], [4, -34], [2, -67], [-6, -67], [-1, -52], [3, -52], [-3, -98], [8, -64], [-4, -44], [0, -21], [7, -19], [4, -22], [-3, -28], [3, -32], [-3, -27], [-11, 4], [-4, 21], [2, 26], [-2, 22], [-6, 19], [-20, 22], [6, 13], [10, 12], [-7, 29], [-13, -24], [-8, -33], [5, -11], [-8, -9], [-17, -38], [-12, -51], [-5, -50], [1, -52], [-10, -40], [-14, -39], [-3, -49], [1, -91], [11, -83], [7, -113], [-10, -15], [-30, -7], [-14, -15], [-24, 57], [-15, 58], [11, 24], [24, -14], [8, 13], [2, 16], [-2, 15], [-30, 32], [-33, 15], [-11, -19], [4, -55], [-3, -13], [-24, -21], [-12, 80], [-31, 60], [1, -29], [13, -50], [-1, -21], [-5, -29], [-13, -10], [-5, -23], [0, -32], [-5, -51], [-20, -23], [-48, 57], [-4, -19], [1, -17], [25, -33], [-12, -25], [-8, -29], [-14, -76], [-23, -64], [-11, -4], [-37, 10], [-42, 54], [-38, -6], [-62, 4], [-40, -20], [-9, 59], [-8, 21], [3, 18], [32, 13], [33, -1], [-6, 23], [-8, 8], [-15, -5], [-41, 19], [-29, -8], [-19, 28], [-34, 96], [-20, 45], [-12, 18], [-13, 9], [-9, 14], [-61, 221], [-8, 51], [-11, 129], [48, -62], [18, -39], [9, -50], [16, 61], [-3, 19], [-43, 73], [-6, 21], [-2, 25], [-10, -25], [-17, -3], [7, 51], [-6, 51], [-51, 111], [-39, 105], [-38, 130], [-3, 16], [-1, 28], [-18, 87], [-10, 65], [-4, 56], [17, 114], [3, 64], [27, -29], [63, -37]], [[89979, 28734], [-8, -2], [-6, 32], [3, 47], [-14, 45], [8, 46], [-1, 50], [5, 22], [16, 24], [3, 43], [14, 2], [25, -33], [9, -85], [-4, -51], [9, -46], [-8, -40], [-21, -32], [-30, -22]], [[91110, 28941], [50, -104], [25, -17], [8, -11], [-2, -45], [-11, -20], [20, -26], [-3, -17], [-4, 1], [-24, -35], [-29, -17], [-9, 12], [-8, 17], [-6, 23], [-37, 91], [4, 25], [-8, 38], [-18, -3], [-12, 23], [20, 22], [26, 61], [18, -18]], [[90931, 26844], [-13, -59], [-21, 10], [-22, -10], [-13, 40], [0, 10], [16, -10], [6, 13], [4, 17], [5, 4], [4, 24], [14, 29], [8, 0], [9, -38], [3, -30]], [[91139, 27240], [-15, -5], [-6, 2], [1, 30], [-2, 13], [13, 27], [20, -13], [7, -20], [-19, -17], [1, -17]], [[90953, 26934], [-17, 0], [-7, 5], [-3, 29], [-11, 12], [6, 9], [2, 18], [7, 20], [13, -22], [10, -71]], [[90217, 28509], [-10, -47], [-11, 60], [12, 8], [9, 21], [2, -3], [-2, -39]], [[91201, 28624], [26, -34], [15, -38], [-20, -31], [-14, -6], [-9, 36], [-29, -13], [-31, 3], [-23, 27], [-3, 14], [14, 14], [38, -1], [36, 29]], [[91176, 28504], [-14, -44], [-17, 28], [-2, 13], [21, 10], [7, -1], [5, -6]], [[94132, 20328], [-9, -23], [-3, 26], [17, 114], [17, 20], [-3, -60], [-19, -77]], [[79367, 45798], [-8, -41], [-14, 23], [-17, 7], [3, 30], [14, 5], [7, 1], [10, 11], [5, -36]], [[76899, 44825], [4, -2], [4, 3], [2, -4], [-7, -5], [-4, 10], [-2, 16], [-1, 15], [2, 0], [0, -6], [1, -5], [1, -9], [-1, -6], [1, -7]], [[76921, 44818], [-3, -3], [-3, 3], [-1, 1], [0, 3], [3, 1], [3, 2], [1, 5], [1, 7], [1, -7], [0, -6], [-2, -6]], [[70474, 21234], [-34, -28], [-34, 1], [-14, 21], [-22, 68], [-14, 4], [-8, 19], [-1, 8], [15, 5], [23, -19], [55, -16], [40, -37], [30, -12], [-12, -10], [-24, -4]], [[96649, 35127], [6, -6], [5, -3], [3, -5], [0, -9], [-3, -10], [-3, -4], [-1, -2], [-1, -1], [0, -3], [0, -2], [-2, 8], [-3, 6], [-3, 0], [-2, -6], [-1, 0], [-1, 6], [-1, 6], [-1, 5], [1, 5], [3, 5], [0, 4], [-2, 2], [-3, -2], [4, 9], [5, -3]], [[84331, 44685], [0, -6], [-6, 1], [0, 6], [6, -1]], [[33833, 33138], [-6, -53], [14, -228], [-8, -32], [-14, -37], [-16, -2], [-19, 6], [-13, -23], [-9, -100], [-25, -218], [4, -51], [21, -84], [7, -53], [6, -41], [5, -76], [-12, -34], [-11, -6], [-14, -19], [16, -93], [13, -43], [38, -87], [144, -122], [60, -72], [68, -97], [37, -100], [3, -83], [-54, -124], [-6, -103], [11, -73], [20, -68], [52, -88], [39, -32], [52, 4], [9, -25], [5, -21], [8, -178], [-1, -67], [-15, -61], [-100, -282], [-86, -172], [-31, -94], [-11, -102], [-27, -48], [-148, -154], [-230, -137], [-186, -71], [-42, -24], [-299, -78], [-58, -11], [-75, 7], [-61, -10], [-68, 21], [-61, 25], [-34, 61], [-41, 7], [-11, -30], [20, -78], [-9, -93], [11, -54], [24, -11], [23, -27], [21, -37], [-35, -4], [13, -29], [15, -18], [-2, -61], [-13, -148], [-34, -32], [-9, -8], [-11, -32], [-21, -142], [-7, -92], [9, -59], [41, -124], [-15, -81], [-26, -44], [-112, -90], [-45, -36], [-70, -25], [-114, -4], [-42, 6], [-97, 82], [-73, 49], [-66, 39], [-64, 23], [9, 12], [4, 21], [-18, 12], [-13, 3], [-42, -43], [-18, -43], [-5, -38], [-1, -92], [8, -76], [30, -189], [3, -103], [-14, -130], [20, -76], [24, -34], [56, -34], [21, -23], [24, 3], [7, -9], [-4, -16], [-14, -33], [1, -35], [42, -10], [43, 7], [46, 16], [11, 24], [0, 50], [-53, 9], [6, 18], [41, 21], [53, 33], [27, 7], [18, -23], [12, -21], [16, -54], [9, -71], [1, -86], [-7, -81], [-7, -28], [-14, -35], [-95, -43], [-26, 11], [-25, 61], [-8, 63], [-21, 42], [-46, 34], [-45, -10], [-45, -59], [-44, -19], [-15, -53], [110, -86], [52, -24], [17, 0], [17, -11], [-15, -32], [-16, -20], [-79, -44], [-34, -31], [-41, -60], [-57, -132], [-17, -28], [-9, -34], [-6, -91], [19, -150], [-20, -63], [12, -70], [-6, -47], [-20, -67], [-80, -106], [-14, -78], [28, -45], [-2, -40], [-9, -36], [-33, 0], [-120, 24], [-44, -39], [-41, -49], [-11, -23], [-14, -14], [-83, -26], [-16, -17], [-88, -184], [-38, -115], [-45, -112], [-12, -47], [-3, -66], [7, -59], [6, -44], [16, -56], [33, -64], [170, -260], [35, -23], [181, -28], [40, -36], [23, -58], [9, -51], [-10, -128], [-11, -41], [-20, -36], [-43, -47], [-51, -25], [14, -18], [21, 2], [46, 16], [19, -16], [15, -50], [-28, -21], [-9, -24], [-20, -38], [-105, -148], [-56, -45], [-52, -59], [-70, -61], [-27, -34], [-37, -73], [-56, -79], [-61, -170], [-2, -33], [9, -22], [-34, -298], [-12, -35], [-24, -37], [-65, -62], [-31, -7], [-41, 35], [-23, 38], [-22, 63], [-28, 66], [-1, -23], [9, -40], [-6, -42], [-70, -19], [-18, -20], [63, 9], [43, -13], [18, -15], [16, -32], [15, -38], [-12, -21], [-35, -18], [-44, -32], [-53, -58], [-29, -68], [-13, -48], [-14, -98], [-4, -64], [-22, -50], [-35, -44], [2, -11], [24, 23], [18, 7], [16, -59], [22, -119], [10, -82], [-2, -25], [-6, -33], [-45, -8], [-39, 1], [-29, -15], [15, -15], [27, 6], [37, -36], [41, 15], [19, -23], [13, -22], [63, -172], [55, -106], [27, -63], [-13, -29]], [[30936, 21513], [16, -25], [65, -118], [17, -48], [10, -56], [-26, 35], [-27, -20], [-13, -34], [-12, -36], [0, -26], [9, -23], [27, -19], [64, -7], [5, -7], [37, -141], [19, -32], [22, -25], [51, -72], [49, -77], [58, -74], [62, -57], [57, -42], [54, -53], [58, -73], [63, -54], [67, -37], [69, -32], [105, 13], [32, -4], [20, -23], [-20, -64], [-26, -51], [-35, -21], [-36, -8], [-34, 1], [-33, 10], [-31, -6], [-29, -21], [-31, -11], [-32, -2], [-31, -18], [-32, -13], [-32, 11], [-84, 51], [-55, 12], [-185, 20], [-59, 12], [-59, 18], [-31, 0], [-45, -11], [-35, 1], [-10, -11]], [[32069, 20324], [31, -13], [61, 10], [32, 0], [14, -5], [6, -7], [42, 11], [18, -1], [-5, -25], [-38, -24], [-16, 10], [-82, -2], [-36, -25], [-15, 0], [-36, -36], [-26, 23], [-7, 21], [18, 29], [18, 1], [12, 12], [9, 21]], [[32812, 29278], [3, -36], [-15, 4], [-34, 35], [-12, 33], [-2, 14], [35, -15], [16, -14], [9, -21]], [[32856, 61657], [-9, -23], [-31, 9], [-6, 29], [-1, 20], [19, 41], [22, -18], [9, -19], [6, -4], [0, -17], [-3, -12], [-6, -6]], [[32848, 61966], [-4, -15], [-23, 28], [-7, 51], [1, 11], [3, 6], [9, -10], [12, -4], [8, -17], [1, -50]], [[53392, 48525], [-4, 16], [-12, 57], [7, 54], [7, 41], [-8, 82], [-18, 74], [-20, 93], [-6, 18]], [[53261, 41906], [11, 218], [11, 96], [0, 116], [-7, 298], [-7, 41], [-5, 48], [27, 37], [14, 27], [19, 50], [13, 69], [16, 153], [58, 352], [27, 345], [35, 163], [13, 183], [96, 236], [24, 145], [50, 72], [70, 75], [51, 135], [24, 94], [28, 179], [-1, 187], [18, 250], [-4, 72], [-26, 99], [-5, 71], [-24, 70], [-27, 53], [-12, 94], [-45, 149], [-13, 99], [-21, 71], [-4, 88], [-11, 93], [-22, 92], [-22, 105], [0, 32], [14, 40], [12, 13], [-4, -20], [-8, -23], [2, -19], [84, 184], [6, 36], [-3, 41], [-1, 49], [4, 57], [-80, 340], [-64, 316], [-10, 159], [-84, 210], [-33, 137], [-19, 96], [-15, 36], [6, 18], [21, 5], [49, 22], [65, 24], [61, 56], [17, 24]], [[49383, 72064], [56, -11], [29, 5], [67, 51], [52, 69], [41, 36], [37, 75], [32, 48], [48, 52], [136, 111], [21, 1], [45, -25], [39, 8], [27, 39], [29, 93], [44, 57], [57, 58], [76, 54], [50, 51], [80, 43], [199, 28], [102, 24], [70, -5], [70, 80], [35, 26], [152, 6], [72, 58], [272, 0], [33, -19], [33, -32], [56, -75], [27, -17], [36, 16], [84, 72], [94, 37], [51, 42], [22, 62], [44, 23], [25, -47], [98, -48], [60, 13], [26, 15], [-9, 71], [63, -19], [49, -34], [51, -69], [33, -14], [60, 31], [125, 16]], [[55555, 74717], [-1, 52], [-9, 41], [-31, 99], [-102, 96], [-24, 43], [-11, 36], [-10, 35], [10, 1], [10, -9], [13, -11], [5, 18], [-6, 37], [-26, 87], [-2, 24], [13, 74], [21, 82], [-1, 99], [7, 75], [-8, 49], [-3, 60], [15, 79], [14, 20], [8, 25], [1, 85], [-31, 39], [-35, 8]], [[37300, 16980], [61, -14], [31, -21], [8, -24], [36, -9], [5, -5], [7, -14], [4, -15], [-1, -20], [-62, 48], [-86, 3], [-20, 34], [-44, -20], [-5, 13], [0, 17], [6, 24], [28, -10], [32, 13]], [[24851, 12213], [-3, -1], [-6, 0], [-4, 0], [-4, -1], [-3, -1], [-3, 0], [-1, 0], [0, 1], [-2, 2], [-3, 5], [-2, 5], [-1, 5], [1, 7], [3, 3], [0, 4], [0, 5], [1, 5], [1, 5], [0, 3], [1, 1], [2, 1], [5, 0], [3, 0], [5, -1], [3, -1], [3, -2], [4, -5], [3, -6], [0, -3], [1, -3], [0, -4], [1, -5], [1, -4], [-1, -7], [-2, -7], [-2, -1], [-1, 0]], [[0, 0], [99608, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0]], [[0, 3253], [447, 8], [89, -8], [94, -25], [207, -2], [194, -11], [50, -33], [65, -20], [137, 17], [110, 9], [89, 1], [823, -46], [843, -81], [172, -26], [154, -61], [162, 9], [957, -47], [148, 0], [586, -50], [1026, -114], [89, -4], [97, 3], [-51, 62], [-96, 56], [-129, 40], [84, 12], [184, 1], [-37, 29], [-101, 16], [-366, 19], [-1463, 144], [-32, 9], [-21, 12], [-38, 13], [-60, 14], [-223, 8], [-61, 13], [-29, 16], [15, 7], [17, -3], [340, 13], [38, 16], [2, 11], [-18, 8], [-59, 10], [-137, 48], [-44, 21], [23, 33], [28, 14], [105, 11], [31, 22], [-20, 40], [-241, 80], [-162, 29], [-107, -20], [-203, -1], [-251, -10], [-68, 11], [-70, 32], [-82, 57], [-42, 15], [-80, 47], [-106, 46], [-561, 111], [-98, 30], [-702, 175], [-29, 30], [-18, 32], [324, -71], [61, 0], [72, 18], [55, -5], [75, 18], [84, 9], [219, -55], [442, -89], [118, -31], [63, -22], [52, -7], [51, -16], [63, 9], [38, -8], [92, 5], [419, 10], [166, -8], [195, -43], [75, -71], [56, -32], [107, 25], [90, 30], [173, 25], [56, -10], [93, -37], [105, -62], [445, 17], [187, -3], [133, -28], [485, 93], [75, 20], [111, 65], [-91, 20], [-65, 7], [-25, 33], [44, 13], [140, 18], [272, 28], [161, 27], [86, 70], [369, 109], [117, 48], [108, 79], [-242, 157], [-232, 136], [74, 42], [73, 33], [35, 26], [29, 37], [-76, 45], [-71, 33], [-117, 32], [-440, 77], [-150, 33], [60, 51], [80, 39], [169, 17], [1079, 60], [1087, 74], [27, 37], [-144, 44], [-123, 11], [-45, 13], [-17, 28], [-1, 38], [-14, 6], [-46, 4], [-196, 44], [-41, 17], [-65, 41], [-17, 32], [39, 82], [60, 35], [104, 19], [75, 7], [225, -1], [88, 10], [37, 11], [-7, 39], [-25, 18], [-1, 24], [38, 14], [47, -1], [13, 29], [-26, 47], [-67, 25], [-176, 43], [-400, 65], [-155, 49], [-89, 38], [-74, 44], [-75, 21], [-52, 23], [11, 28], [-24, 44], [-29, 8], [-127, -19], [-227, 10], [-278, 41], [-192, 47], [-251, 127], [-99, 63], [73, 44], [80, 28], [334, 65], [50, 22], [68, 58], [-112, 24], [-95, -2], [-84, 16], [-342, 4], [-193, -8], [-162, 72], [-121, 71], [-34, 36], [-26, 64], [41, 94], [34, 67], [-4, 83], [9, 113], [58, 38], [45, 7], [105, -87], [90, -7], [131, 17], [83, 45], [44, 17], [81, 4], [156, -20], [71, 8], [80, -4], [251, -58], [55, -27], [30, -21], [9, -30], [31, -31], [107, -15], [299, 17], [78, -7], [212, -85], [180, -91], [62, -23], [102, -15], [36, 13], [31, 34], [97, 42], [218, 52], [52, 52], [-29, 28], [-84, 30], [-51, 10], [-28, 34], [2, 47], [17, 45], [57, 11], [104, -61], [130, -57], [45, -8], [35, 2], [65, 20], [78, 15], [149, -122], [88, -8], [110, -1], [21, 19], [-13, 32], [-18, 35], [-23, 5], [-3, 32], [48, 30], [33, 13], [-13, 22], [-53, 33], [-31, 6], [-28, 14], [9, 23], [35, 10], [49, 34], [-15, 39], [2, 51], [-20, 27], [-116, 53], [-169, 87], [-157, 39], [-350, -31], [-124, 20], [-81, 23], [-88, 30], [103, 32], [108, 22], [32, 20], [41, 40], [48, 29], [39, 8], [128, -15], [289, -108], [61, -12], [198, -49], [55, -3], [68, 11], [-55, 48], [-61, 34], [-145, 96], [16, 46], [94, 76], [245, 6], [107, 27], [139, 58], [179, 96], [154, 12], [192, 30], [65, -22], [164, -93], [103, -32], [35, -3], [37, 3], [-97, 116], [63, 14], [80, 13], [66, 29], [49, 24], [168, 111], [150, 31], [426, 48], [146, -44], [123, -5], [27, 13], [25, 59], [65, 115], [55, 41], [185, 43], [145, -2], [104, -47], [97, -31], [89, -14], [90, 1], [134, 27], [178, 9], [83, 14], [96, -26], [236, -9], [183, -37], [113, 0], [153, 36], [83, 5], [299, 58], [234, 12], [177, -26], [286, 16], [290, -12], [117, -21], [652, 13], [518, 55], [71, 19], [111, 60], [61, 55], [41, 17], [87, 6], [149, -12], [205, -41], [176, 15], [337, -23], [32, 19], [32, 104], [55, 165], [47, 49], [77, -13], [233, -94], [5, -40], [-24, -29], [-38, -11], [-11, -80], [31, -23], [52, 7], [33, -35], [-73, -60], [-52, -34], [-33, -15], [-23, -115], [-31, -38], [-4, -42], [50, 0], [50, 18], [44, 4], [140, 30], [255, 35], [84, 17], [48, 6], [31, 23], [-43, 57], [-14, 47], [26, 39], [-7, 67], [-24, 68], [49, 50], [46, -11], [79, 8], [45, -25], [69, -22], [66, -11], [63, -45], [21, -98], [-19, -100], [-65, -73], [-121, -66], [-137, -105], [29, -50], [71, 17], [309, -5], [199, 8], [125, -12], [158, -27], [125, -39], [149, -8], [93, 15], [87, -20], [339, 84], [138, 48], [79, -24], [128, 20], [71, -18], [133, 30], [84, 3], [97, -12], [296, -6], [22, -55], [90, -83], [73, -32], [93, 14], [67, 25], [106, -9], [153, 35], [153, -11], [64, 6], [29, 23], [25, 51], [-47, 28], [-134, 36], [-123, 74], [-55, 16], [-88, -9], [-41, 13], [-44, 24], [57, 29], [70, 93], [-29, 84], [-33, 18], [-81, -3], [-98, -30], [-39, 21], [-64, 11], [-25, 78], [-68, 146], [-36, 42], [-108, 38], [-93, 19], [-90, 24], [-27, 58], [17, 79], [108, 17], [104, -8], [58, -15], [67, -6], [77, -16], [50, -23], [40, -13], [75, 0], [260, 21], [35, 15], [31, 28], [55, 7], [51, -4], [74, 17], [-85, 23], [-91, 44], [-137, 53], [-115, 29], [-209, 20], [-107, -7], [-67, 11], [-239, -6], [-65, 21], [-46, 58], [-65, 138], [-18, 72], [44, 27], [29, 30], [71, 3], [103, -12], [34, -14], [25, -43], [-25, -44], [-33, -23], [20, -21], [105, -6], [52, -13], [45, -5], [97, 20], [142, 8], [71, -20], [85, -15], [125, 24], [445, -13], [54, -6], [54, -40], [46, -24], [49, 10], [145, -46], [77, -36], [79, -18], [67, -5], [75, 9], [98, 30], [81, 12], [58, -11], [123, -6], [94, -36], [73, 15], [77, 41], [244, 29], [163, -8], [298, -74], [69, -7], [136, 44], [44, 72], [-6, 81], [39, 19], [33, -9], [60, 56], [82, -5], [51, -10], [31, 36], [28, 77], [97, 6], [70, -12], [92, -49], [0, -41], [-38, -43], [-63, -107], [39, -63], [59, 6], [75, -13], [91, 27], [58, 1], [101, -93], [68, -5], [53, 5], [172, 84], [50, 9], [61, -38], [89, -89], [78, -51], [114, -32], [99, -9], [116, -42], [64, -35], [146, 0], [62, -15], [176, -72], [160, 36], [83, 33], [40, 61], [-20, 91], [-7, 92], [24, 38], [42, 7], [191, -103], [-12, 62], [-16, 47], [-49, 82], [7, 61], [41, 19], [80, -32], [96, -16], [79, -36], [155, -128], [50, -112], [105, -28], [73, 5], [83, 18], [111, 16], [86, -5], [79, 21], [24, -61], [-74, -88], [-29, -57], [24, -15], [45, 13], [37, 18], [129, -9], [104, 40], [89, 14], [84, 42], [69, -4], [53, -7], [72, -33], [69, 18], [41, -7], [56, -2], [297, 145], [67, -3], [85, 9], [107, 34], [83, 15], [68, -1], [121, 53], [193, -7], [98, 28], [191, 32], [128, 37], [228, 98], [92, 58], [100, 129], [63, 129], [70, 171], [-34, 111], [-37, 49], [-31, 54], [-73, 111], [-20, 139], [7, 131], [-26, 123], [-26, 91], [-54, 152], [-66, 99], [-77, 133], [0, 121], [-19, 95], [-46, 68], [-20, 54], [36, 11], [33, 17], [89, 21], [213, -37], [19, 54], [54, 40], [38, 50], [-13, 77], [-47, 31], [-56, 65], [26, 52], [45, 0], [22, 57], [-17, 56], [21, 70], [41, 90], [28, 33], [-51, 54], [-48, 70], [12, 54], [24, 57], [29, 80], [40, 57], [26, 20], [-7, 19], [-61, 20], [-56, 4], [-101, -36], [-16, 7], [-5, 19], [-6, 39], [10, 95], [16, 90], [14, 13], [40, 11], [38, 69], [35, 4], [22, -23], [7, -91], [12, -21], [-4, -44], [18, -15], [22, 28], [41, 14], [16, -31], [15, -15], [7, 26], [-5, 74], [-7, 30], [-5, 48], [9, 23], [10, 37], [-17, 78], [6, 29], [37, 47], [18, 9], [35, 0], [63, -31], [30, -2], [22, 14], [14, 30], [11, 98], [-27, 35], [0, 31], [16, 20], [28, 68], [42, 4], [41, -6], [40, 13], [-14, 28], [-12, 43], [45, 21], [29, 6], [77, -27], [30, -15], [28, 35], [-9, 34], [-30, 19], [-5, 30], [7, 39], [48, -20], [11, 8], [13, 34], [-8, 17], [-6, 22], [63, 5], [9, 9], [13, 27], [19, 9], [56, -1], [12, 14], [6, 30], [-31, 7], [-39, 29], [-6, 80], [9, 57], [35, 50], [42, 34], [78, -30], [60, 7], [24, -30], [33, -8], [8, 34], [-15, 30], [-10, 49], [96, 59], [31, -10], [38, 14], [-14, 45], [21, 57], [27, 8], [19, -50], [26, -10], [29, 12], [71, 58], [35, 9], [35, 3], [36, 34], [9, 40], [20, 28], [62, 38], [25, 27], [55, 95], [-10, 24], [16, 20], [163, 86], [80, 8], [133, 52], [81, 61], [51, 25], [45, 68], [55, 11], [128, 47], [96, 77], [133, 53], [62, -5], [25, -16], [16, -63], [26, -77], [40, -38], [-15, -34], [-38, 4], [-41, -8], [-9, 38], [15, 28], [-15, 25], [-37, -6], [-49, -13], [-33, -19], [-43, -41], [-34, -23], [-113, -61], [-74, -88], [-53, -93], [-32, -63], [-47, -5], [-11, -23], [19, -18], [15, -8], [35, -7], [-6, -27], [-24, -7], [3, -22], [25, -32], [5, -46], [-29, -7], [-44, 49], [-50, 5], [-39, 23], [-25, 33], [-24, -7], [-18, -47], [11, -52], [-21, -31], [-24, 14], [-9, 62], [-23, 11], [-32, 1], [-77, -67], [-28, -2], [-14, -34], [-45, -38], [-29, -31], [-71, -102], [-40, -43], [-76, -24], [-30, 3], [-18, 10], [-27, 7], [-28, 1], [-9, -27], [44, -88], [-24, -30], [-53, 2], [-26, 25], [-21, -24], [-17, -23], [-17, -34], [26, -72], [41, -32], [30, -6], [11, -27], [-65, -11], [-44, -63], [-20, -44], [-23, -38], [3, -44], [34, -66], [46, -47], [46, -4], [60, 15], [14, 13], [59, 7], [26, 46], [19, 3], [17, -8], [27, -2], [15, 30], [20, 11], [28, -8], [54, 1], [15, -27], [-17, -30], [-33, -42], [-31, 23], [-27, -4], [-15, -22], [29, -47], [-11, -42], [-24, -42], [-29, 27], [-4, 45], [-40, 27], [-39, 12], [-26, -47], [-41, -13], [-6, -54], [-17, -50], [-24, 15], [-9, 62], [-67, 50], [-35, 7], [-70, -13], [-24, 1], [-28, -11], [-20, -42], [29, -31], [10, -42], [-1, -31], [-6, -12], [-5, -26], [32, -37], [1, -50], [-25, 1], [-21, 15], [-81, 130], [-51, 58], [-22, 51], [-53, 12], [-38, 1], [-46, -21], [18, -24], [9, -36], [-28, -15], [-35, -56], [-23, -48], [-14, -10], [-18, -28], [75, -61], [11, -24], [4, -41], [-24, -22], [-56, -9], [-99, 43], [-43, 1], [-15, 30], [-22, -4], [-13, -51], [-16, -45], [-24, -30], [7, -46], [19, -11], [-15, -19], [-31, -15], [-21, -18], [46, -17], [9, -15], [2, -22], [-72, -16], [-47, -4], [-28, 18], [-26, -9], [-17, -29], [-5, -39], [5, -48], [9, -34], [7, -13], [8, -29], [-43, -74], [-5, -16], [-3, -34], [21, -31], [16, -46], [-23, -23], [-25, -47], [26, -9], [44, -2], [48, 6], [72, 41], [20, 7], [9, -16], [6, -25], [-18, -24], [-130, -68], [-24, -29], [33, -16], [67, -3], [26, -22], [-16, -24], [-24, -23], [-28, -54], [23, -20], [72, -32], [131, -42], [97, -14], [-22, 49], [-3, 60], [68, 49], [35, 16], [162, 29], [44, -1], [34, -13], [-13, -25], [-37, 9], [-65, -16], [-100, -54], [-18, -23], [7, -42], [85, -34], [27, -27], [-37, -81], [6, -52], [43, -57], [57, -65], [28, -43], [43, -25], [70, -61], [38, -61], [12, -140], [57, -116], [67, -53], [8, -46], [-22, -46], [-57, 27], [-32, -27], [-12, -49], [40, -34], [64, -42], [138, 4], [4, -46], [-32, -27], [-25, -34], [-31, -19], [-52, -12], [-13, -41], [22, -58], [72, 26], [53, 3], [55, -10], [17, -77], [65, -95], [16, -45], [-12, -43], [-40, -13], [-25, -34], [-36, -29], [-41, -16], [-76, -79], [-33, -8], [-14, -16], [65, -8], [45, -2], [97, 64], [37, -14], [24, -42], [12, -49], [-24, -42], [-169, -25], [-82, -23], [-88, -66], [101, -31], [74, 11], [37, -12], [51, -23], [56, 12], [44, 24], [33, -1], [31, -12], [4, -41], [4, -72], [7, -54], [-18, -36], [-88, -26], [-64, 1], [-2, -76], [96, -57], [60, 30], [53, -15], [0, -91], [41, -101], [36, -6], [30, 46], [38, 0], [15, -54], [-17, -91], [-29, -50], [-78, 21], [-44, 16], [-35, -34], [-58, -29], [-51, -4], [-45, 45], [-52, 34], [-83, 17], [-78, 8], [26, -39], [35, -23], [14, -69], [28, -72], [65, 19], [90, -41], [56, -43], [24, -57], [-31, -91], [-51, -34], [-32, -16], [-56, 35], [-39, 0], [-41, -16], [-14, -42], [-27, -20], [144, -3], [45, -11], [33, -38], [-52, -50], [-95, 8], [-41, -19], [-35, -36], [142, -22], [59, 12], [93, 38], [22, -38], [-37, -38], [-48, -61], [-100, -19], [-75, -1], [-98, 22], [-26, 13], [-41, 7], [3, -37], [26, -26], [66, -94], [11, -36], [-21, -50], [-58, -37], [-65, -14], [-54, 32], [-39, 91], [-50, 27], [-51, 8], [-30, -4], [3, -46], [12, -49], [-20, -35], [-44, 18], [-57, -16], [-53, -27], [-48, -30], [98, -14], [65, -3], [46, -46], [-17, -23], [-88, -10], [-86, -20], [-117, -50], [86, -21], [81, 1], [57, -5], [47, -9], [13, -27], [-29, -30], [-192, -74], [-201, -91], [-74, -29], [-77, -16], [-179, -78], [-113, -36], [-318, -55], [-497, -139], [-169, -99], [-50, -76], [-32, -11], [-95, -26], [-95, -12], [-251, -8], [-257, 37], [-208, 8], [-113, -12], [-386, 66], [-49, -3], [-60, -12], [-48, 0], [-36, 9], [-78, 4], [-263, -26], [-27, -41], [33, -76], [96, -92], [160, -162], [86, -35], [53, -37], [100, -43], [224, -2], [306, -34], [174, -31], [-6, -60], [-105, -115], [-65, -44], [-155, -80], [-213, -40], [-163, 12], [-289, 65], [-362, 60], [-538, 57], [-118, 26], [-139, 26], [-79, -27], [-60, -25], [-133, -2], [39, -23], [537, -155], [458, -113], [54, -29], [65, -20], [-6, -72], [-26, -57], [-90, -50], [-234, -3], [-293, -40], [-146, -1], [-145, 39], [-309, 113], [-189, 84], [-132, 96], [-91, 76], [-102, 75], [7, -47], [18, -47], [50, -58], [73, -63], [5, -25], [-35, -4], [-53, 30], [-45, -28], [-16, -33], [19, -44], [28, -42], [93, -94], [80, -25], [106, -57], [258, -106], [44, -36], [78, -78], [16, -59], [76, -58], [52, -9], [47, 2], [16, 50], [-3, 61], [20, 15], [74, 15], [193, -21], [821, -12], [78, -35], [31, -45], [21, -93], [-87, -112], [-59, -48], [-97, -29], [-88, -23], [-133, -9], [-275, 8], [-269, 0], [209, -54], [203, -44], [282, 8], [112, 12], [97, 21], [41, -37], [77, -78], [45, -25], [31, -26], [43, -85], [17, -50], [42, -58], [30, -49], [44, -33], [75, -15], [82, 28], [159, 13], [154, -45], [99, -14], [132, 37], [105, 52], [221, 47], [41, 20], [60, 16], [91, -4], [36, -12], [46, -51], [43, -70], [63, -35], [67, -25], [38, -3], [126, -22], [164, 21], [73, -21], [12, -40], [39, -32], [49, -11], [665, -180], [229, -35], [353, -18], [274, -2], [38, -11], [53, -35], [-105, -24], [-112, -3], [-169, 9], [-60, -5], [-129, 10], [-67, -7], [-61, 11], [-91, -25], [-166, -19], [37, -27], [62, -6], [126, -10], [172, 5], [15, -43], [-158, -10], [-336, -9], [-35, -7], [-26, -22], [50, -11], [31, -12], [16, -31], [-36, -79], [56, -55], [39, -9], [41, 8], [71, -22], [69, -30], [146, -2], [173, 40], [85, -1], [228, 25], [207, -4], [289, 48], [48, -1], [44, -6], [-80, -44], [-355, -110], [-127, -21], [-51, -14], [29, -54], [46, -56], [94, -60], [59, -89], [57, -19], [110, 41], [27, -31], [5, -61], [-29, -49], [-37, -28], [-26, -27], [-17, -36], [46, -31], [123, -19], [163, -7], [151, -1], [93, -9], [341, 194], [137, 94], [67, 39], [56, 29], [288, 119], [67, 36], [76, 53], [141, 8], [193, 86], [171, 66], [68, 13], [51, 5], [60, 14], [150, -5], [107, 11], [190, 42], [145, 27], [154, 23], [174, 4], [463, 44], [132, -19], [146, -46], [95, 1], [125, 14], [86, 18], [39, -53], [20, -69], [-42, -64], [-70, -40], [-19, -66], [95, -33], [108, 10], [206, 32], [164, 42], [45, 28], [64, -8], [109, 35], [136, 146], [171, 147], [144, 94], [93, 110], [77, 63], [86, 48], [58, 24], [132, 5], [189, 76], [275, 87], [211, -42], [223, -63], [110, 51], [87, 9], [74, 23], [74, 17], [53, 45], [71, 38], [54, 55], [271, 27], [284, 36], [38, 13], [37, -7], [98, 10], [125, 30], [172, 10], [90, -3], [82, 81], [164, 17], [175, 32], [73, 24], [57, 6], [1413, 63], [61, 31], [124, 25], [47, 61], [-190, 25], [-58, 26], [-65, 7], [-38, -9], [-164, 7], [-1303, 94], [-27, 8], [-45, 57], [9, 105], [-39, 81], [-91, 22], [-94, -2], [-119, -10], [-314, -44], [-125, -4], [-335, 68], [-221, 77], [-145, 25], [-104, 52], [-97, 40], [-7, 91], [23, 85], [187, 246], [117, 118], [78, 9], [71, 53], [73, 119], [59, 56], [135, 66], [59, 17], [212, 81], [58, 2], [95, -13], [108, 73], [329, 156], [75, 59], [91, 35], [266, 132], [238, 64], [118, 19], [144, 39], [160, 59], [139, 57], [497, 109], [298, 29], [203, 32], [144, -19], [143, 6], [123, 29], [57, 23], [83, 59], [276, -28], [178, 40], [74, 4], [78, 18], [-31, 21], [-28, 3], [-28, 28], [-37, 58], [37, 73], [28, 36], [82, 45], [43, 64], [40, 94], [135, 185], [38, 26], [86, 8], [73, -5], [83, 2], [210, -48], [39, 19], [67, 54], [56, 68], [120, 100], [23, 30], [-10, 49], [-180, -21], [-136, -33], [-131, 18], [-17, 28], [28, 21], [49, 8], [19, 34], [-45, 28], [-81, 16], [-36, 21], [3, 51], [20, 75], [44, 21], [36, 31], [96, 105], [57, 32], [164, 29], [190, -44], [44, 12], [46, 59], [-47, 90], [-36, 34], [0, 30], [100, -14], [93, -20], [109, 4], [129, 90], [181, 75], [88, 31], [78, 18], [42, 76], [62, 144], [46, 75], [-1, 45], [-14, 38], [-47, -11], [-43, -5], [-101, 38], [-125, 61], [-38, 68], [-18, 61], [39, 33], [38, 20], [41, 5], [73, -25], [93, -62], [46, -24], [53, -46], [40, 4], [47, 64], [38, 85], [32, 26], [49, 28], [54, 41], [-24, 40], [-58, 21], [-8, 24], [25, 27], [47, 6], [59, -59], [80, -39], [55, -13], [47, -32], [74, -108], [89, -179], [41, -2], [78, 16], [84, 7], [56, 51], [12, 128], [22, 58], [-8, 59], [-38, 60], [-33, 44], [6, 33], [28, 24], [37, 8], [64, 24], [99, -28], [54, -5], [81, 16], [84, 35], [86, 25], [67, -19], [29, -64], [-33, -65], [-54, -48], [-49, -59], [-13, -64], [2, -35], [47, -9], [416, 8], [55, -6], [72, 0], [78, -21], [132, 8], [118, 23], [56, 0], [97, -21], [69, -44], [143, 13], [40, 14], [39, 59], [41, 11], [48, -48], [15, -110], [22, -52], [61, -47], [60, 40], [39, 48], [94, 93], [107, 71], [82, 42], [200, 70], [99, 44], [194, 60], [250, 32], [446, 108], [147, 12], [240, 28], [123, 30], [125, 23], [77, 80], [175, -61], [60, -7], [82, 48], [90, 119], [131, -49], [75, -77], [93, -60], [208, -104], [66, -24], [138, -21], [37, 17], [65, 69], [67, 100], [42, 42], [61, 35], [69, 55], [-18, 30], [-39, 10], [-36, 16], [9, 29], [122, 7], [64, -101], [66, -33], [80, -33], [186, 26], [159, 2], [138, -20], [68, 3], [61, 76], [99, 28], [56, -34], [35, -112], [127, -31], [266, -51], [30, 13], [33, 59], [23, 72], [54, 12], [69, 39], [37, -6], [52, -47], [-18, -114], [-29, -105], [35, -85], [31, -47], [40, -8], [67, -2], [82, 6], [51, -4], [261, 42], [32, 94], [42, 107], [103, 136], [40, -10], [31, -14], [70, -67], [42, -34], [9, -49], [-46, -47], [13, -31], [46, -25], [148, -41], [48, 8], [71, 43], [72, 85], [39, 98], [61, -5], [59, -20], [41, -51], [0, -97], [57, -66], [46, -42], [120, -45], [128, -11], [90, -27], [146, 10], [71, 30], [46, 8], [80, 24], [84, 57], [52, 23], [192, 52], [145, 57], [154, 102], [150, 61], [230, 31], [64, 13], [88, -1], [217, 73], [82, 42], [46, 15], [52, 52], [28, 102], [22, 63], [-4, 61], [-20, 80], [-46, 71], [-47, 104], [21, 119], [37, 49], [96, 54], [95, 11], [108, -7], [94, -11], [8, -51], [-41, -55], [-52, -54], [-31, -23], [11, -46], [68, -7], [149, 10], [43, -42], [106, -184], [26, -87], [37, -25], [58, 12], [125, -1], [87, 13], [71, 1], [37, -9], [38, -42], [72, -49], [72, 36], [52, 17], [63, -4], [99, -57], [99, -133], [107, -67], [7, 43], [-14, 53], [44, 47], [53, 79], [77, 103], [61, 105], [15, 145], [29, 119], [49, 57], [48, 37], [75, 38], [92, 8], [88, 86], [62, 35], [130, 47], [163, 47], [114, 131], [39, 16], [58, 21], [107, 8], [173, 42], [54, 6], [91, 33], [80, 78], [58, 22], [104, -3], [88, 44], [74, 2], [68, 22], [10, 49], [-32, 33], [-1, 43], [38, 56], [30, 21], [90, -4], [75, -48], [55, -2], [14, -27], [-48, -34], [-32, -61], [55, -53], [49, -36], [59, 7], [71, 32], [70, -23], [31, -49], [0, -76], [15, -41], [49, 36], [27, 76], [-8, 97], [3, 60], [117, 97], [46, 73], [-82, 15], [-58, -10], [-32, 27], [-37, 73], [101, 61], [116, -2], [67, -52], [144, -83], [80, 2], [72, -13], [15, 26], [-27, 122], [3, 68], [-60, 38], [-17, 87], [25, 91], [71, 51], [97, 24], [208, 140], [55, 30], [137, 29], [160, 14], [199, 50], [355, -34], [95, -21], [59, -28], [57, -45], [74, -74], [107, -94], [139, -30], [39, -29], [51, -80], [-55, -52], [-45, -5], [-87, 31], [-60, 32], [-42, -13], [41, -55], [45, -34], [7, -46], [-24, -66], [-164, -130], [98, -37], [59, 30], [54, 55], [55, 25], [37, 10], [130, 2], [74, 22], [56, -16], [55, -35], [81, -35], [116, -38], [143, -147], [111, 15], [60, 32], [171, 10], [147, -65], [83, -24], [240, -20], [143, -42], [91, 50], [61, 20], [128, 10], [65, -10], [178, -54], [315, -55], [217, -29], [191, -1], [91, -24], [166, -26], [63, -20], [159, 16], [74, 21], [70, 47], [39, -11], [27, -59], [-15, -101], [29, -69], [23, -69], [33, -57], [21, -49], [-15, -41], [-46, -37], [-64, -79], [4, -69], [27, -44], [-32, -53], [24, -74], [4, -45], [-22, -36], [-50, -22], [-85, -3], [-44, -21], [-7, -55], [22, -41], [49, -22], [14, -44], [-7, -66], [-22, -56], [-45, -26], [-49, -6], [-91, 12], [-66, 37], [-42, -33], [-31, -34], [-95, -77], [-44, -52], [-41, -55], [108, -31], [79, -55], [172, 6], [55, 24], [73, 26], [39, -5], [24, -56], [-14, -89], [-3, -69], [-87, -190], [-29, -32], [-41, -52], [-48, -41], [-39, -20], [-75, -60], [-46, -109], [-50, -90], [-73, -154], [-42, -165], [-18, -99], [-28, -103], [-62, -177], [-40, -30], [-69, -72], [20, -48], [54, -5], [66, -11], [89, -37], [118, 76], [62, 48], [13, 96], [-13, 97], [38, 57], [87, 78], [205, 56], [42, 6], [68, 19], [60, 70], [53, 70], [93, 44], [77, 72], [12, 51], [32, 11], [96, 50], [25, 37], [30, 28], [21, 63], [8, 118], [24, 89], [47, 118], [38, 86], [37, 54], [99, 29], [43, 33], [57, 73], [39, 44], [-5, 90], [22, 83], [61, 50], [78, 92], [98, 13], [74, 48], [79, -33], [95, -46], [161, 14], [76, -21], [59, 25], [52, 71], [19, 87], [61, 50], [69, -1], [114, 87], [118, 77], [96, 18], [77, 60], [55, 102], [59, 79], [73, 75], [20, 133], [46, 67], [85, 59], [71, 32], [298, 100], [229, 66], [231, 82], [71, -1], [93, 45], [153, 2], [40, 4], [53, 93], [114, 86], [71, 28], [90, 74], [73, 7], [103, -13], [87, -20], [78, -1], [113, 62], [176, 10], [54, 30], [38, 26], [249, 87], [93, -17], [132, 15], [80, -4], [76, -11], [96, -3], [166, 31], [70, 20], [132, 76], [146, 18], [64, 20], [82, 17], [67, -29], [48, -27], [29, -6], [39, -5], [95, 30], [79, -8], [101, -33], [67, -27], [35, 0], [62, 24], [76, 60], [71, 24], [67, -15], [46, -25], [81, -34], [126, 5], [120, 13], [101, 28], [87, 30], [80, -46], [92, -17], [149, 81], [57, -18], [39, -21], [32, -10], [39, -68], [142, 13], [126, 57], [108, 43], [105, 28], [83, 39], [122, 148], [-2, 46], [17, 28], [26, 12], [194, -1], [60, 12], [79, 39], [137, -30], [131, -47], [34, 5], [53, 1], [93, -29], [105, -57], [93, -15], [385, -142], [218, -35], [110, -47], [28, -16], [32, -48], [58, -5], [46, 19], [61, -73], [148, -55], [154, -27], [100, 43], [170, 123], [52, 55], [-10, 122], [89, 136], [151, 67], [188, 35], [116, 30], [154, 28], [74, -29], [38, -21], [57, -25], [68, -76], [106, -172], [79, -62], [69, -5], [60, -10], [63, -39], [90, -121], [-54, -108], [-46, -40], [-196, -46], [-86, -37], [-75, -23], [-21, -90], [31, -42], [81, 21], [95, 10], [74, 18], [68, 28], [59, 40], [140, 21], [91, 34], [82, 20], [57, 35], [58, -5], [58, -34], [46, 3], [124, -11], [58, 25], [51, 2], [52, -19], [54, -26], [54, -7], [70, 16], [98, 42], [125, 46], [117, 15], [28, -1], [24, -9], [-117, -53], [-187, -72], [-100, -69], [59, -29], [352, 77], [160, 58], [142, 26], [35, 19], [116, 90], [42, 24], [125, 32], [163, 34], [124, 39], [84, 40], [63, 4], [49, -29], [63, -33], [62, 8], [76, 31], [53, 72], [31, 53], [57, 18], [73, 16], [59, -18], [96, -38], [67, -20], [58, -151], [136, -133], [49, -35], [119, 13], [128, -52], [55, 7], [52, 15], [47, -10], [70, 32], [73, 167], [67, 163], [66, 72], [40, 30], [50, 14], [77, 34], [104, 10], [77, -14], [167, -12], [136, 41], [154, -7], [76, 48], [82, 7], [111, -41], [32, -29], [61, -42], [15, -41], [16, -74], [30, -2], [103, 73], [56, 13], [106, 117], [56, -30], [127, -50], [51, -15], [100, -85], [51, 18], [42, 40], [124, -4], [116, -35], [48, -29], [59, -50], [37, -12], [29, 14], [240, -19], [104, -37], [79, -45], [278, -21], [107, -46], [64, 22], [127, -7], [52, -39], [46, -43], [101, -37], [55, 7], [78, 30], [78, 41], [78, 0], [37, -35], [13, -88], [58, 2], [64, 40], [56, -10], [20, -61], [-30, -81], [-71, -114], [-29, -95], [-59, -86], [10, -41], [59, -20], [59, 61], [132, 42], [69, 55], [119, 20], [117, -19], [83, -73], [154, -123], [6, -44], [13, -46], [-5, -41], [-23, -47], [82, -55], [73, -9], [59, 5], [247, -53], [118, 21], [106, 0], [126, 8], [97, -2], [77, -9], [91, 19], [74, 26], [36, -16], [15, -137], [5, -81], [42, -30], [44, 30], [32, 41], [195, -19], [78, -2], [74, -22], [75, -51], [72, 22], [43, 31], [58, 20], [17, 51], [7, 85], [-2, 83], [34, 15], [35, -15], [46, -39], [105, -125], [80, -81], [34, -38], [49, -31], [99, -75], [136, -31], [133, -60], [155, 4], [121, -77], [82, 60], [43, 14], [63, -16], [76, -52], [60, -12], [205, -86], [110, -30], [41, -63], [54, -60], [0, -61], [24, -77], [123, -61], [48, -59], [59, -78], [107, -293], [56, -52], [81, 5], [76, -76], [24, 11], [3, 30], [-69, 198], [-5, 107], [54, 61], [127, 17], [98, -114], [90, -69], [60, -12], [120, 3], [113, 73], [86, -26], [138, -9], [179, -43], [77, 8], [137, -18], [167, -62], [95, -23], [20, -25], [44, -41], [22, -50], [24, -46], [58, -52], [58, -9], [115, -44], [241, -136], [87, -40], [51, -29], [25, 35], [7, 72], [44, 15], [47, -107], [49, -81], [22, -71], [-51, -58], [-74, 12], [-52, 0], [-53, -96], [-22, -166], [49, 3], [36, 15], [8, -61], [-22, -51], [-44, -20], [-76, 39], [-93, 27], [-102, 10], [-99, 49], [-39, 3], [-41, -3], [53, -51], [55, -46], [125, -40], [156, -62], [4, -38], [-37, -47], [-46, -100], [-142, -86], [-83, 62], [-98, 15], [-49, -37], [-98, 4], [-194, -14], [-76, 79], [-119, 43], [4, -36], [102, -130], [109, -30], [108, -35], [26, -33], [-49, -31], [-66, 5], [-83, -61], [-158, 10], [-75, -3], [-44, -25], [-39, -9], [31, -22], [38, -60], [-54, -51], [-50, -25], [-51, 12], [-56, -20], [-27, 56], [-2, 122], [-32, 109], [-34, 4], [-54, -13], [-17, -93], [38, -161], [26, -50], [-21, -45], [-36, -14], [73, -136], [62, -93], [38, -31], [3, -46], [-30, -20], [-83, 18], [-41, -9], [-46, 6], [-77, 20], [-66, 6], [-66, -26], [-56, 2], [-50, 85], [-44, 20], [-36, -26], [-28, -101], [-57, -31], [-58, -46], [-41, -50], [-20, -198], [-34, -41], [-51, 2], [-39, -16], [-49, 16], [-64, 10], [-214, -68], [34, -35], [54, 6], [188, -11], [80, -36], [13, -89], [32, -38], [63, -41], [48, -20], [18, -30], [-20, -61], [-27, -56], [-59, -61], [17, -31], [64, -10], [27, -137], [-42, -61], [20, -51], [5, -51], [-43, -47], [-33, -24], [-11, -50], [64, -29], [47, -10], [66, -5], [45, -54], [58, -82], [42, -68], [3, -113], [41, -67], [77, -43], [-2, -45], [54, -14], [53, -4], [19, -41], [-17, -50], [-89, -61], [-37, -44], [89, -7], [92, -46], [117, 52], [62, 56], [40, 50], [30, -13], [3, -52], [36, -87], [151, -84], [84, -27], [81, -14], [71, 2], [20, -50], [-22, -46], [-56, 3], [-90, -8], [-66, 38], [-47, 33], [-412, -19], [-93, -15], [-111, -50], [-110, -24], [-169, -50], [-71, -30], [-185, 117], [-60, 86], [-25, 5], [-44, -20], [-2, -61], [86, -133], [39, -35], [0, -35], [-25, -18], [-35, 0], [-53, 26], [-99, 21], [-88, -41], [-108, -87], [23, -58], [29, -33], [-7, -39], [-121, -74], [-40, -3], [-25, -15], [30, -27], [66, -1], [7, -33], [-23, -26], [-109, -30], [7, -40], [59, -19], [77, 7], [48, -29], [0, -46], [-49, -26], [-57, -19], [-392, -118], [-57, -32], [3, -43], [137, -11], [410, 10], [27, -14], [-10, -34], [-23, -43], [23, -31], [61, -21], [2, -33], [-30, -13], [-61, -15], [-67, -4], [4, -35], [92, -31], [31, -4], [3, -118], [-3, -50], [-49, -24], [-18, -17], [-2, -40], [122, -29], [187, -127], [41, 0], [74, -24], [119, -65], [42, -39], [68, -19], [9, -32], [42, -27], [166, -88], [22, -38], [-348, -73], [-350, -54], [32, -48], [378, 5], [102, -30], [45, 9], [26, 32], [204, 38], [207, 25], [65, -18], [278, -141], [129, -53], [82, -20], [60, -5], [44, -21], [43, -45], [-10, -42], [18, -19], [29, -8], [55, -28], [63, 10], [73, 32], [51, -7], [92, -45], [-35, -35], [-20, -17], [-24, -32], [-23, -11], [-74, -7], [-41, 0], [-42, 6], [-4, -23], [51, -25], [74, -27], [480, -21], [137, -46], [135, 25], [61, -8], [51, -15], [19, -46], [69, -15], [106, -36], [148, -18], [118, 1], [145, -49], [73, -2], [45, -28], [330, -17], [49, -22], [38, -36], [78, -16], [85, -3], [464, -59], [174, -31], [40, 2], [40, -6], [125, -26], [127, -14], [61, -36], [-99894, -48]], [[37438, 6445], [36, -2], [146, 6], [146, -2], [89, -7], [26, -16], [23, -32], [26, -50], [24, -55], [27, -45], [16, -79], [25, -29], [43, -73], [6, -59], [-13, -128], [-21, -52], [-56, -50], [-64, 5], [-29, -2], [-28, -10], [-11, -7], [-4, -10], [74, -43], [9, -16], [1, -19], [-10, -13], [-10, -7], [-1573, -260], [-61, -14], [-61, -27], [-20, -23], [-20, -18], [-1219, -49], [-11, 3], [-11, 10], [-31, 50], [-6, 79], [7, 31], [61, 30], [23, 17], [103, 117], [53, 55], [25, 46], [13, -3], [47, -27], [35, -8], [68, 11], [67, 33], [29, 18], [29, -6], [5, -28], [12, -9], [162, 88], [147, 98], [144, 111], [73, 66], [18, 19], [12, 28], [-10, 28], [-13, 25], [-12, 10], [-12, 4], [-75, 18], [23, 29], [22, 35], [14, 39], [5, 47], [-3, 24], [3, 18], [34, 15], [23, 24], [16, 28], [-26, 9], [-12, 21], [23, 49], [21, 52], [21, 28], [56, 55], [163, 138], [59, 74], [17, 27], [386, 119], [63, 12], [121, 17], [56, 3], [158, -12], [74, -12], [128, -32], [189, -61], [71, -27], [71, -34], [68, -43], [67, -52], [13, -16], [6, -29], [2, -28], [-3, -27], [-18, -56], [-26, -39], [-311, -37], [-41, -15], [-22, -30], [-16, -30], [36, -11]], [[33407, 5562], [-11, -124], [1, -56], [-16, -45], [-28, -23], [-55, -39], [-40, -23], [-87, -38], [-400, 34], [-180, 31], [-75, 40], [-12, 18], [-23, 61], [-21, 19], [-159, -13], [-97, -19], [-17, -10], [-26, -38], [-14, -8], [-259, 81], [-273, 95], [-113, 49], [-39, 22], [-11, 15], [25, 19], [26, 12], [29, 9], [30, 1], [22, -7], [22, -14], [14, -51], [14, -8], [38, -14], [961, 7], [80, 2], [166, 15], [89, 21], [33, 29], [-80, 7], [-32, 22], [-27, 41], [-6, 38], [9, 28], [106, 14], [16, 10], [-28, 16], [1, 37], [63, 14], [25, 31], [124, 39], [196, -21], [47, -56], [-13, -36], [-9, -37], [-1, -57], [80, -8], [25, -21], [24, -26], [-29, -1], [-28, -6], [-23, -27], [-20, -35], [-14, -16]], [[30541, 11987], [-8, -70], [46, 25], [17, -5], [40, -26], [81, -151], [18, -48], [33, -139], [40, -105], [100, -183], [49, -100], [26, -58], [3, -78], [31, -22], [7, -32], [10, -107], [7, -124], [7, -238], [-4, -55], [-43, -89], [-18, -63], [-23, -42], [-27, -30], [-141, -125], [-17, -62], [-237, -53], [-134, -22], [-52, 24], [-53, 6], [-66, -8], [-191, -7], [-144, -18], [-19, 7], [-13, 23], [-14, 16], [-38, -3], [-31, 9], [-30, 19], [-33, 36], [-14, 21], [-8, 23], [64, 60], [33, 13], [33, 4], [67, -13], [67, -20], [147, -16], [204, -4], [56, 6], [67, 19], [62, 55], [-30, 21], [-31, 13], [-30, 3], [-30, -4], [-84, -34], [-65, -20], [-65, -12], [-69, 20], [-64, 56], [-2, 18], [220, 43], [20, 7], [40, 27], [13, 24], [6, 23], [-148, 40], [-31, -1], [-30, -7], [-67, 17], [-64, 47], [-59, 57], [-22, 5], [-21, -17], [-143, -150], [-12, -1], [-54, 11], [-68, 30], [-62, 10], [-40, -8], [-15, -12], [39, -34], [33, -30], [10, -24], [-101, -75], [-27, -10], [-43, 7], [-16, 9], [-31, 40], [-30, 10], [-65, -8], [-34, 3], [-34, 18], [-32, 26], [-30, 14], [-36, 29], [-26, 20], [-8, 29], [3, 28], [11, 16], [2, 15], [-8, 27], [5, 19], [12, 18], [54, 34], [65, 7], [63, -43], [42, -13], [19, -1], [7, 2], [5, 12], [-1, 22], [-12, 42], [-1, 29], [14, 24], [19, 9], [20, 6], [13, 3], [41, -15], [29, -16], [59, -46], [49, -32], [19, -3], [14, 11], [13, 18], [-59, 46], [-6, 30], [3, 26], [36, 15], [22, 2], [104, -27], [56, -9], [55, -3], [114, 31], [-61, 35], [-132, 30], [-25, 21], [-18, 34], [97, 31], [99, -1], [177, -40], [59, 19], [55, 58], [32, 15], [125, -5], [101, 27], [16, -3], [15, -8], [97, -97], [13, 5], [10, 19], [3, 34], [1, 34], [-3, 35], [-12, 22], [-16, -3], [-17, -10], [-28, 9], [-28, 18], [-29, 8], [-100, 11], [-71, 18], [-37, 14], [-34, 28], [-5, 31], [36, 71], [138, 76], [65, 25], [66, 6], [32, -5], [76, -32], [12, 2], [11, 8], [-73, 53], [-65, 41], [-33, 31], [-26, 12], [-109, 12], [-57, -31], [-27, -5], [-27, 3], [-160, 74], [-9, 8], [-23, 28], [-12, 21], [-7, 35], [3, 35], [5, 23], [24, 91], [13, 72], [-7, 59], [-25, 32], [-36, 22], [-33, 35], [-9, 24], [-6, 28], [-1, 36], [9, 32], [14, 34], [18, 17], [34, 17], [133, 39], [270, 49], [30, -25], [43, -52], [14, -21], [15, -104], [0, -29]], [[22752, 10418], [-23, -61], [2, -60], [68, 4], [30, 114], [64, 21], [31, -68], [-30, -55], [15, -31], [18, -22], [32, -1], [29, 33], [13, 24], [11, 26], [19, 58], [61, 54], [135, 8], [71, -34], [-48, -86], [-115, -50], [-74, -52], [25, -14], [25, -7], [23, 2], [65, 27], [160, 50], [61, 37], [22, -6], [0, -62], [21, -42], [-12, -93], [-69, -17], [-71, -8], [18, -41], [-4, -17], [-6, -13], [-178, 17], [-31, -6], [-31, -12], [-31, 3], [-62, 30], [-32, 0], [-64, -15], [-65, -6], [-93, 1], [-68, 5], [-64, 33], [-67, 9], [-75, 1], [-79, 38], [-66, 15], [-95, 39], [-25, 15], [-25, 8], [-45, -3], [-346, 59], [-51, -1], [-33, -8], [-33, 4], [-67, 28], [-14, 31], [7, 29], [15, 13], [30, 13], [480, 69], [50, 19], [37, -2], [28, -59], [42, -61], [14, 1], [14, 6], [47, 51], [86, -16], [48, 23], [33, 45], [97, 52], [61, -10], [57, -22], [27, -54]], [[16512, 9357], [49, -58], [19, -38], [11, -39], [-199, -96], [-9, -10], [-9, -50], [5, -11], [8, -8], [1, -19], [-17, -6], [-340, -38], [-159, 35], [-22, 23], [-5, 36], [19, 7], [35, 5], [-9, 16], [-22, 29], [-2, 24], [48, 61], [23, 16], [-90, 57], [-11, 13], [-12, 4], [-44, -7], [-43, 3], [15, 23], [12, 38], [38, 32], [28, 5], [28, -3], [132, -2], [130, -17], [131, -12], [215, -11], [46, -2]], [[14908, 9627], [74, -16], [25, -25], [33, -18], [33, -10], [31, -27], [18, -48], [16, -15], [49, -32], [17, -28], [-3, -14], [-93, -11], [-31, 4], [-29, -9], [-9, -17], [1, -18], [16, -13], [34, -12], [34, 2], [63, 14], [28, -3], [32, -15], [32, -2], [84, 46], [21, 8], [21, -2], [115, -54], [24, -27], [-17, -15], [-14, -22], [6, -15], [55, -22], [23, -28], [14, -11], [-3, -24], [-8, -29], [1, -33], [-28, -18], [-13, 0], [-60, 18], [-187, 10], [-60, 15], [-92, 65], [-36, 4], [-37, 16], [-57, 46], [-99, 37], [-63, 45], [2, 38], [-9, 27], [-12, 11], [-12, 6], [-36, 10], [-35, -3], [-18, -11], [-29, -28], [-32, -5], [-25, 6], [-5, 6], [-1, 74], [-27, 10], [-23, 30], [-4, 40], [10, 37], [35, 45], [40, 5], [40, -7], [41, 10], [65, 6], [74, -4]], [[5819, 5871], [-347, -22], [-141, 19], [-294, 63], [-403, 114], [-110, 36], [-72, 31], [-70, 39], [-16, 43], [10, 62], [13, 51], [21, 32], [86, 38], [43, 42], [87, 44], [25, 33], [37, 2], [70, -4], [69, -9], [65, -11], [63, -19], [144, -62], [100, -61], [144, -72], [143, -81], [80, -30], [77, -45], [74, -61], [14, -21], [31, -27], [19, -26], [19, -22], [19, -11], [15, -24], [-3, -26], [-12, -15]], [[96411, 7303], [105, -42], [275, 4], [229, -39], [21, -40], [-65, -21], [-101, -53], [-65, -17], [-55, 0], [-112, 22], [-146, -3], [-31, -31], [-71, -31], [-82, -54], [-22, 44], [-33, 42], [-82, 89], [-6, 13], [45, 17], [22, 29], [47, 39], [-5, 24], [-39, 26], [-15, 22], [26, 36], [58, 16], [75, -15], [34, -48], [-6, -21], [-1, -8]], [[41355, 5876], [38, -12], [40, 28], [-6, 26], [23, 45], [33, -49], [219, -52], [71, -50], [-29, -12], [-22, 2], [-64, -5], [-109, -43], [-117, 41], [-209, 29], [-63, 22], [-49, 68], [88, 56], [21, -6], [135, -88]], [[40573, 6151], [-32, -21], [-675, 36], [-33, 7], [9, 43], [92, 7], [52, 8], [72, 19], [53, 33], [18, 1], [317, -77], [111, -32], [13, -15], [3, -9]], [[30462, 5944], [-60, -2], [-120, 5], [-120, 20], [-31, 10], [-44, 32], [-14, 17], [-12, 21], [-1, 33], [32, 114], [59, 68], [56, 39], [174, 92], [23, 10], [159, 43], [62, 23], [97, 48], [534, 186], [122, 27], [55, -20], [31, -19], [-16, -22], [-72, -53], [-34, -32], [-87, -65], [-188, -109], [-133, -82], [-171, -113], [-40, -40], [-81, -95], [15, -42], [-27, -58], [-107, -28], [-61, -8]], [[33931, 14945], [11, -8], [9, 4], [9, 8], [9, 19], [33, 27], [31, 3], [-10, -28], [74, -50], [-6, -39], [14, -32], [-30, -10], [-24, -33], [21, -13], [12, -28], [-25, -7], [-54, 17], [-28, -4], [3, 26], [-9, 10], [-33, -5], [-14, -57], [-10, -5], [-12, 9], [9, 37], [-14, 6], [-14, -1], [-42, -27], [-12, -1], [-25, 32], [79, 42], [-33, 21], [-7, 26], [5, 36], [-29, -5], [-28, -14], [-13, -2], [-11, 12], [4, 26], [23, 43], [18, 45], [36, 22], [21, 17], [28, 8], [12, 16], [26, 1], [15, -37], [-1, -22], [-12, -24], [-6, -61]], [[34575, 15452], [17, -15], [70, 1], [16, -4], [14, -25], [9, -43], [-23, -17], [-121, 10], [-44, 22], [-22, -1], [-49, -24], [-21, -24], [-82, -32], [-23, 12], [-11, 34], [-1, 14], [8, 9], [4, 9], [-1, 11], [22, 29], [95, 44], [126, 16], [17, -16], [0, -10]], [[33895, 16179], [35, -16], [31, 11], [17, -12], [12, -33], [-1, -12], [-47, 5], [-43, -38], [-51, 8], [-7, -31], [11, -17], [-14, -14], [-44, 30], [-35, -11], [-11, -51], [-16, -10], [-8, -2], [-14, 13], [-29, 4], [-2, 7], [-18, 20], [-51, -22], [13, 26], [68, 69], [8, 21], [79, 40], [37, -9], [80, 24]], [[32450, 14706], [-27, -60], [40, 1], [28, 21], [29, 9], [25, -30], [-52, -23], [-50, -40], [-20, -21], [-22, -9], [-28, 3], [-28, -4], [-25, -39], [-26, -18], [-8, 15], [-10, 9], [-56, 14], [-26, 20], [-23, 14], [-25, 7], [13, 35], [15, 31], [85, 42], [-8, 13], [-6, 17], [67, 21], [2, 21], [-4, 24], [21, 16], [20, 24], [14, 7], [42, -3], [29, -33], [-12, -33], [26, -51]], [[32687, 14732], [-20, -23], [-16, -4], [-15, 10], [-20, -35], [-40, 11], [-16, 9], [10, 5], [7, 15], [22, 31], [38, 79], [7, 25], [-31, 41], [-5, 13], [7, 24], [11, 17], [26, 19], [34, 0], [17, -16], [0, -29], [58, -27], [-10, -56], [-22, -35], [-3, -42], [-33, -19], [-6, -13]], [[31114, 12975], [-29, -37], [-23, -11], [-21, 10], [-21, 5], [-15, -14], [-16, -58], [-19, -29], [-20, -15], [-12, 6], [-12, 0], [-19, -13], [-24, -5], [-23, 6], [-22, 37], [-32, 44], [-6, 14], [-5, 36], [1, 37], [14, 28], [73, 98], [24, 44], [21, 50], [23, 45], [44, 80], [22, 29], [111, 84], [30, 19], [33, -5], [8, -44], [-16, -22], [-53, -56], [-11, -79], [1, -29], [5, -8], [20, -10], [14, -11], [18, -24], [21, -14], [-45, -41], [-30, -21], [-21, -26], [-40, -25], [-17, -16], [26, -6], [38, -21], [10, -18], [-5, -14]], [[29526, 11154], [43, -51], [-40, -40], [-142, -75], [-83, -29], [-84, -22], [-380, -69], [-27, 0], [-26, 9], [-15, 15], [-25, 57], [3, 29], [34, 27], [35, 18], [60, 16], [229, 36], [23, 12], [19, 27], [6, 31], [8, 24], [15, 11], [16, 0], [30, -23], [55, -93], [18, 13], [16, 25], [3, 80], [16, 6], [49, -22], [30, -23], [1, 45], [21, 14], [22, -5], [22, -10], [48, -33]], [[29170, 11677], [49, -14], [72, -63], [24, -32], [7, -19], [-6, -13], [-33, -15], [-25, -77], [-50, -27], [-116, 17], [-128, 31], [-10, 6], [-11, 27], [-2, 31], [14, 39], [22, 20], [95, 24], [7, 14], [14, 39], [24, 8], [11, -3], [42, 7]], [[29346, 9735], [-40, -75], [-7, -8], [-40, -19], [14, -20], [11, -10], [7, -24], [23, -33], [28, -21], [-23, -59], [-34, -26], [-369, 160], [-28, 26], [-14, 19], [-11, 30], [-1, 30], [9, 24], [13, 14], [33, 17], [34, 1], [75, -32], [10, 5], [14, 28], [40, 1], [9, 24], [-55, 8], [-44, 24], [-29, 24], [-8, 19], [99, 33], [251, -42], [38, -14], [17, -19], [14, -26], [-36, -59]], [[24677, 9687], [-51, -14], [-46, 6], [17, 132], [26, 33], [-7, 24], [-47, 66], [-33, 75], [16, 17], [86, 27], [99, -5], [39, -32], [12, -40], [-5, -29], [-32, -53], [33, -18], [7, -36], [-7, -44], [-32, -52], [-30, -31], [-45, -26]], [[96566, 6830], [-34, -43], [-39, -19], [-123, 16], [-86, -36], [-95, -13], [-45, 19], [-20, 35], [-10, 47], [0, 17], [27, 7], [127, -33], [53, -29], [29, 1], [76, 38], [63, 48], [16, 23], [21, 8], [27, -17], [13, -52], [0, -17]], [[78050, 14010], [-121, -14], [-10, 15], [-45, 2], [-16, 12], [-6, 28], [15, 47], [24, 32], [37, 33], [18, 7], [76, 11], [55, -15], [39, -40], [11, -32], [-6, -21], [-71, -65]], [[57460, 11301], [-18, -22], [-51, 4], [-39, -21], [-31, 8], [-98, 35], [-11, 45], [-3, 20], [8, 35], [88, 73], [35, 7], [50, -10], [22, -21], [14, -41], [39, -83], [-5, -29]], [[48362, 11202], [-73, -34], [-6, 15], [-24, 20], [-48, 56], [54, 4], [49, 24], [27, -10], [6, -6], [15, -69]], [[49088, 11213], [-45, -1], [-13, 16], [-2, 11], [58, 83], [32, 21], [62, 16], [40, -5], [26, -18], [8, -33], [0, -49], [-15, -26], [-151, -15]], [[31618, 5715], [-26, -2], [-14, 4], [-14, 12], [-12, 46], [-137, 37], [-16, 21], [-9, 46], [-23, 18], [-178, 82], [-15, 17], [-10, 25], [33, 10], [70, -18], [127, -5], [28, -8], [26, -14], [142, -3], [72, -7], [40, -65], [81, -19], [11, -38], [10, -68], [-110, -50], [-25, -7], [-51, -14]], [[31316, 6075], [-48, -28], [-202, 13], [-69, 9], [-39, 15], [36, 60], [27, 20], [25, 8], [56, 33], [88, 8], [67, -6], [113, -26], [-29, -25], [-19, -9], [-18, -38], [12, -34]], [[34676, 16577], [-37, -16], [-13, 22], [-7, 37], [-19, 23], [14, 20], [199, -26], [-11, -13], [-96, -17], [-30, -30]], [[34480, 15244], [-24, -26], [-61, 39], [-16, 25], [7, 19], [98, 17], [26, -9], [12, -40], [-42, -25]], [[34100, 14650], [-24, -2], [-30, 17], [-4, 30], [0, 16], [23, 13], [14, 2], [81, 47], [36, 12], [-16, -29], [2, -26], [-13, -23], [-69, -57]], [[34427, 15507], [-55, -54], [-26, 2], [-54, 41], [-15, 21], [-3, 9], [34, 37], [97, -14], [22, -4], [1, -3], [2, -21], [-3, -14]], [[34062, 15087], [4, -10], [56, 6], [15, -15], [-31, -20], [-8, 4], [-27, -6], [-76, 15], [-18, 23], [67, 13], [18, -10]], [[32778, 11680], [-24, -4], [-24, 53], [-13, 82], [-77, 119], [-20, 62], [14, 15], [21, 5], [56, -17], [34, -23], [38, -49], [46, -44], [9, -37], [-7, -42], [-29, -11], [1, -31], [-17, -60], [-8, -18]], [[33159, 15806], [14, -7], [121, 13], [38, -40], [43, 2], [-103, -75], [-28, 22], [-9, 16], [-7, 36], [-67, -9], [-22, 7], [-27, -24], [-55, -10], [-19, 0], [-24, 26], [-1, 26], [49, -1], [38, 33], [11, 34], [19, -9], [29, -40]], [[30004, 11694], [-60, -24], [-40, 19], [-120, 36], [-50, 66], [5, 35], [23, 21], [36, 11], [73, -22], [37, -23], [96, -119]], [[23603, 9985], [-53, -3], [-15, 13], [16, 28], [128, 47], [52, 28], [8, -4], [7, -9], [22, -56], [2, -14], [-167, -30]], [[20961, 9696], [-33, -26], [-62, 6], [-48, 43], [-19, 58], [-2, 20], [13, 15], [31, 14], [120, -130]], [[16792, 9152], [-58, -6], [-18, 1], [-18, 13], [-5, 9], [30, 30], [29, 13], [9, 10], [-40, 101], [37, 3], [43, 20], [83, -2], [72, -18], [13, -15], [9, -25], [-31, -51], [-19, -18], [-108, -45], [-28, -20]], [[14620, 8857], [-42, -10], [-83, 38], [-27, 18], [-24, 31], [-19, 7], [-7, 6], [-11, 80], [25, 9], [53, -11], [102, -42], [71, -12], [24, -32], [-24, -56], [-38, -26]], [[5002, 3963], [-87, -13], [-206, 26], [-54, 21], [-30, 22], [-56, 20], [-14, 11], [0, 24], [-9, 14], [-19, 13], [-9, 13], [-17, 8], [277, -12], [108, -20], [20, -14], [195, -60], [-53, -9], [-46, -44]], [[5426, 4844], [-29, -5], [-745, 67], [-143, 22], [-34, 12], [-14, 11], [-3, 8], [6, 22], [17, 16], [185, 25], [207, -19], [250, -48], [172, -38], [89, -34], [37, -26], [5, -13]], [[95548, 8736], [-37, 0], [-22, 18], [-7, 39], [1, 13], [72, 48], [58, 12], [-31, -72], [-11, -12], [-23, -46]], [[95268, 8313], [-50, -74], [-35, 2], [-20, 14], [36, 41], [34, 18], [21, 5], [14, -6]], [[97178, 9444], [-38, -12], [-51, 37], [-12, 12], [50, 70], [-4, 23], [7, 19], [19, 14], [12, -2], [29, -77], [20, -32], [-28, -31], [-4, -21]], [[95786, 12937], [-24, -16], [-15, 5], [-15, 34], [16, 53], [-6, 69], [3, 17], [39, -39], [7, -21], [16, -32], [3, -17], [-16, -32], [-8, -21]], [[95361, 13351], [-5, -35], [-14, 8], [-20, 28], [-20, 69], [18, 7], [23, -12], [9, -34], [8, -18], [1, -13]], [[95169, 13549], [-15, -27], [-13, 3], [-58, 69], [7, 30], [-8, 25], [1, 23], [2, 8], [71, -105], [13, -26]], [[76836, 13804], [32, -15], [57, 2], [20, -22], [4, -25], [-1, -14], [-23, -21], [-150, -14], [-24, 22], [26, 61], [28, 20], [31, 6]], [[77851, 13700], [-37, -8], [-14, 15], [-2, 9], [27, 33], [33, 11], [-3, -39], [-4, -21]], [[77456, 13554], [-26, -7], [-27, 16], [-13, 31], [-3, 10], [42, 8], [56, -30], [-29, -28]], [[78721, 14144], [-17, -14], [-45, 8], [-10, 12], [-4, 55], [-3, 16], [-17, 15], [-73, 28], [-8, 40], [10, 18], [27, 4], [67, -35], [15, -27], [-2, -41], [1, -13], [21, -27], [33, -28], [5, -11]], [[75722, 13935], [-37, -8], [-38, 8], [-19, 27], [-4, 12], [15, 19], [54, 3], [38, -17], [8, -17], [2, -8], [-19, -19]], [[73839, 13275], [-48, -15], [-8, 8], [-1, 9], [-72, 55], [-12, 45], [7, 31], [59, -3], [70, -27], [37, -69], [-32, -34]], [[74039, 13382], [-32, -14], [-25, 3], [-29, 31], [12, 21], [30, 13], [38, -7], [10, -11], [26, -7], [-30, -29]], [[73702, 13472], [-30, -18], [-24, 3], [-16, 19], [-3, 12], [15, 38], [12, -2], [8, -20], [38, -32]], [[69421, 10415], [-35, -74], [-13, 2], [-15, 43], [13, 27], [16, 16], [28, -8], [6, -6]], [[69016, 10195], [-14, 0], [7, 23], [37, 41], [28, 50], [17, 8], [31, -44], [-7, -37], [-41, -27], [-58, -14]], [[70000, 11156], [-20, 0], [-25, 6], [-32, 42], [-18, 30], [-7, 31], [3, 61], [16, 30], [26, 12], [11, -28], [4, -32], [8, -21], [33, -30], [16, -25], [5, -14], [6, -29], [-5, -20], [-21, -13]], [[63484, 13373], [-46, -14], [-21, 6], [-2, 14], [-1, 13], [2, 15], [16, 12], [78, 1], [31, -10], [9, -7], [1, -21], [-3, -6], [-64, -3]], [[54506, 11516], [-18, -37], [-87, 51], [-51, 16], [-13, 9], [-12, 32], [-3, 12], [10, 20], [28, 32], [59, 26], [93, 13], [91, -10], [15, -16], [-86, -54], [-26, -94]], [[50843, 11176], [-94, -15], [-21, 17], [-11, 34], [13, 20], [123, 68], [33, -6], [11, -6], [8, -26], [-11, -41], [-14, -20], [-37, -25]], [[49179, 10821], [-30, -13], [-39, 3], [-30, 17], [-21, 34], [-5, 13], [3, 22], [-2, 11], [38, 6], [14, -14], [6, -11], [66, -68]], [[50360, 11373], [-24, -73], [-15, 2], [-15, 43], [-31, 46], [-11, 32], [-1, 43], [22, 25], [80, 16], [27, -10], [13, -55], [-45, -69]], [[49296, 11078], [30, -19], [47, 3], [45, -15], [-7, -20], [-26, -26], [-22, -56], [-22, -26], [-66, -56], [-49, -15], [-11, 31], [1, 32], [4, 25], [2, 18], [-46, 24], [-3, 33], [-9, 19], [-134, 66], [-23, 19], [10, 12], [138, 5], [81, -12], [60, -42]], [[51257, 11244], [-45, -13], [-51, 29], [-14, 20], [-15, 53], [-2, 20], [12, 13], [40, 15], [66, -6], [25, -24], [9, -43], [-8, -37], [-17, -27]], [[44275, 9281], [-13, -125], [4, -27], [11, -26], [49, -70], [4, -52], [-2, -20], [-20, -29], [-69, 7], [-22, 15], [-8, 10], [-36, 122], [-21, 29], [-32, 25], [-123, 23], [-118, -8], [29, 28], [178, 39], [45, 29], [28, 34], [13, 52], [31, 65], [49, 30], [31, 3], [16, -53], [0, -50], [-24, -51]], [[45526, 9977], [-19, -14], [-40, 1], [-38, 28], [-16, 41], [-1, 29], [17, 33], [27, 9], [15, -11], [36, -71], [19, -45]], [[46525, 10268], [-22, -13], [-37, 5], [-47, 29], [-15, 22], [-5, 20], [13, 29], [11, 8], [24, -4], [42, -37], [29, -40], [7, -19]], [[41016, 5948], [-48, -6], [-19, 15], [23, 38], [34, 33], [63, 3], [60, -22], [-6, -21], [-13, -2], [-94, -38]], [[34980, 16532], [-12, -5], [-19, 22], [-3, 13], [20, 26], [20, 35], [7, 4], [-5, -70], [-8, -25]], [[33656, 15954], [-62, -26], [-32, 27], [-7, 10], [38, 26], [20, -6], [8, -9], [23, -2], [12, -20]], [[33011, 11534], [-42, -1], [-19, 16], [-7, 10], [5, 23], [16, 21], [49, -16], [12, -41], [-14, -12]], [[33151, 12230], [-11, -16], [-35, 10], [-20, 11], [-34, 28], [19, 17], [37, -4], [30, -20], [14, -26]], [[33127, 11111], [-23, 0], [-20, 12], [-17, 35], [-5, 17], [9, 38], [16, 9], [92, 5], [28, -20], [1, -34], [-10, -25], [-71, -37]], [[33180, 10914], [-28, -4], [-38, 10], [-33, 20], [-11, 23], [16, 19], [30, 12], [47, -4], [22, -24], [5, -22], [-6, -23], [-4, -7]], [[33503, 15872], [-38, -4], [-26, 33], [-12, 23], [51, 2], [23, -9], [12, -26], [-10, -19]], [[33193, 15571], [-14, -6], [-18, 5], [0, -10], [15, -13], [-16, -5], [-19, 13], [-14, 27], [10, 25], [19, 6], [37, -42]], [[33152, 15053], [-35, -20], [-21, 6], [-33, 24], [45, 7], [4, 70], [22, 27], [43, -15], [-26, -37], [-9, -28], [9, -24], [1, -10]], [[32791, 14932], [-26, -2], [7, 31], [23, 21], [38, 14], [-24, -35], [-7, -16], [-11, -13]], [[32412, 14480], [-44, -26], [-23, 0], [27, 64], [26, 2], [41, 36], [11, -5], [-22, -30], [-16, -41]], [[32607, 15512], [-12, -2], [5, 24], [31, 62], [58, 29], [-7, -25], [-19, -31], [-56, -57]], [[31709, 13915], [-60, -22], [-31, 8], [-2, 23], [8, 31], [29, 16], [-5, 46], [18, 19], [9, 35], [38, 26], [54, -12], [-8, -45], [-1, -16], [-32, -12], [-8, -7], [-7, -30], [1, -43], [-3, -17]], [[31501, 13709], [-62, -65], [-9, 4], [-5, 7], [1, 11], [20, 24], [4, 70], [41, 26], [16, -9], [-14, -30], [9, -26], [-1, -12]], [[31288, 13309], [-13, -4], [-31, 2], [-20, 13], [26, 41], [-3, 28], [23, 11], [26, -10], [18, -35], [3, -15], [-29, -31]], [[31292, 12807], [-55, -11], [-41, 12], [1, 44], [-11, 5], [-4, 10], [52, 33], [39, 8], [47, -5], [20, -14], [7, -15], [-36, -36], [-6, -14], [-13, -17]], [[30084, 11367], [14, -17], [60, 16], [21, -17], [4, -12], [-27, -42], [-32, -28], [-37, -2], [-27, 71], [-3, 18], [27, 13]], [[29478, 9586], [-27, -11], [-17, 6], [-31, 29], [4, 23], [14, 15], [10, 17], [60, 62], [44, 7], [36, -13], [-39, -59], [-10, -41], [-44, -35]], [[23945, 9838], [-47, 0], [-31, 21], [-10, 14], [19, 21], [11, 2], [57, -36], [12, -15], [-11, -7]], [[17572, 9121], [-136, -16], [-37, 18], [-10, 22], [6, 23], [277, 125], [49, -17], [14, -8], [-83, -62], [-37, -22], [-6, -7], [20, -9], [6, -7], [-16, -17], [-47, -23]], [[13225, 8961], [-44, -32], [-86, 21], [7, 23], [78, 20], [53, -13], [-8, -19]], [[13592, 8880], [-31, -12], [-116, 29], [-68, 6], [-31, 17], [-20, 15], [-6, 14], [-32, 22], [62, 44], [49, 14], [47, -3], [10, -22], [90, -26], [70, -1], [7, -24], [-3, -34], [-28, -39]], [[9003, 7690], [3, -8], [-42, 6], [-63, 32], [-12, 11], [28, 11], [36, -10], [33, -20], [17, -22]], [[9656, 8230], [-31, -3], [-53, 14], [-140, 46], [-30, 23], [21, 23], [50, 16], [38, -5], [95, -43], [29, -31], [17, -23], [4, -17]], [[9276, 7510], [-104, -25], [-27, 7], [9, 36], [-16, 25], [-4, 12], [9, 17], [61, 0], [172, -27], [23, -37], [-123, -8]], [[8723, 7484], [-116, -7], [-64, 15], [-16, 44], [18, 9], [148, -20], [54, -11], [20, -13], [-10, -12], [-34, -5]], [[8518, 7651], [113, -8], [74, 6], [77, -14], [18, -16], [-14, -13], [-83, -4], [-40, -22], [-47, -3], [-71, 16], [-64, 35], [37, 23]], [[8550, 7294], [81, -29], [-142, 9], [-62, 41], [40, 15], [40, -3], [35, -21], [8, -12]], [[8269, 7617], [-118, -8], [-48, 16], [-12, 15], [10, 13], [183, 13], [20, -16], [6, -10], [-41, -23]], [[9253, 7922], [-57, -8], [-71, 36], [-54, 29], [-18, 25], [-3, 8], [0, 10], [16, 6], [115, -21], [72, -85]], [[9225, 7699], [-33, -46], [-87, 24], [-37, 30], [21, 39], [40, 12], [52, -14], [19, -5], [25, -40]], [[8223, 7275], [-22, -2], [-241, 44], [-47, 13], [82, 27], [54, 4], [146, -66], [39, -8], [-11, -12]], [[7241, 5741], [-51, -2], [-65, 6], [-50, 14], [-114, 20], [-29, 38], [-134, 31], [-62, 10], [21, 37], [142, -49], [175, -49], [141, -30], [26, -26]], [[8547, 7418], [-17, -9], [-121, 5], [-25, 8], [-11, 9], [-168, 13], [-76, 41], [-15, 13], [30, 20], [57, 12], [23, 16], [145, 14], [23, -8], [13, -22], [66, -43], [17, -27], [7, -18], [36, -8], [16, -16]], [[6115, 4547], [-25, -4], [-22, 31], [-108, 63], [-64, 42], [-42, 33], [-18, 23], [21, 0], [158, -70], [24, -27], [118, -48], [-42, -43]], [[32497, 62251], [-1, -14], [-3, -15], [-18, 13], [-10, 13], [0, 3]]],
  "bbox": [-180, -89.999, 180, 83.599609375],
  "transform": {
    "scale": [0.0036000360003600037, 0.001736003453784538],
    "translate": [-180, -89.999]
  }
};
},{}],"../node_modules/d3/dist/package.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dependencies = exports.devDependencies = exports.scripts = exports.files = exports.repository = exports.module = exports.jsdelivr = exports.unpkg = exports.main = exports.author = exports.license = exports.homepage = exports.keywords = exports.description = exports.version = exports.name = void 0;
var name = "d3";
exports.name = name;
var version = "5.15.0";
exports.version = version;
var description = "Data-Driven Documents";
exports.description = description;
var keywords = ["dom", "visualization", "svg", "animation", "canvas"];
exports.keywords = keywords;
var homepage = "https://d3js.org";
exports.homepage = homepage;
var license = "BSD-3-Clause";
exports.license = license;
var author = {
  "name": "Mike Bostock",
  "url": "https://bost.ocks.org/mike"
};
exports.author = author;
var main = "dist/d3.node.js";
exports.main = main;
var unpkg = "dist/d3.min.js";
exports.unpkg = unpkg;
var jsdelivr = "dist/d3.min.js";
exports.jsdelivr = jsdelivr;
var _module = "index.js";
exports.module = _module;
var repository = {
  "type": "git",
  "url": "https://github.com/d3/d3.git"
};
exports.repository = repository;
var files = ["dist/**/*.js", "index.js"];
exports.files = files;
var scripts = {
  "pretest": "rimraf dist && mkdir dist && json2module package.json > dist/package.js && rollup -c",
  "test": "tape 'test/**/*-test.js'",
  "prepublishOnly": "yarn test",
  "postpublish": "git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3/dist/d3.js d3.v5.js && cp ../d3/dist/d3.min.js d3.v5.min.js && git add d3.v5.js d3.v5.min.js && git commit -m \"d3 ${npm_package_version}\" && git push && cd - && cd ../d3-bower && git pull && cp ../d3/LICENSE ../d3/README.md ../d3/dist/d3.js ../d3/dist/d3.min.js . && git add -- LICENSE README.md d3.js d3.min.js && git commit -m \"${npm_package_version}\" && git tag -am \"${npm_package_version}\" v${npm_package_version} && git push && git push --tags && cd - && zip -j dist/d3.zip -- LICENSE README.md API.md CHANGES.md dist/d3.js dist/d3.min.js"
};
exports.scripts = scripts;
var devDependencies = {
  "json2module": "0.0",
  "rimraf": "2",
  "rollup": "1",
  "rollup-plugin-ascii": "0.0",
  "rollup-plugin-node-resolve": "3",
  "rollup-plugin-terser": "5",
  "tape": "4"
};
exports.devDependencies = devDependencies;
var dependencies = {
  "d3-array": "1",
  "d3-axis": "1",
  "d3-brush": "1",
  "d3-chord": "1",
  "d3-collection": "1",
  "d3-color": "1",
  "d3-contour": "1",
  "d3-dispatch": "1",
  "d3-drag": "1",
  "d3-dsv": "1",
  "d3-ease": "1",
  "d3-fetch": "1",
  "d3-force": "1",
  "d3-format": "1",
  "d3-geo": "1",
  "d3-hierarchy": "1",
  "d3-interpolate": "1",
  "d3-path": "1",
  "d3-polygon": "1",
  "d3-quadtree": "1",
  "d3-random": "1",
  "d3-scale": "2",
  "d3-scale-chromatic": "1",
  "d3-selection": "1",
  "d3-shape": "1",
  "d3-time": "1",
  "d3-time-format": "2",
  "d3-timer": "1",
  "d3-transition": "1",
  "d3-voronoi": "1",
  "d3-zoom": "1"
};
exports.dependencies = dependencies;
},{}],"../node_modules/d3-array/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{}],"../node_modules/d3-array/src/bisector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }

      return lo;
    },
    right: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }

      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return (0, _ascending.default)(f(d), x);
  };
}
},{"./ascending":"../node_modules/d3-array/src/ascending.js"}],"../node_modules/d3-array/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bisectLeft = exports.bisectRight = void 0;

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ascendingBisect = (0, _bisector.default)(_ascending.default);
var bisectRight = ascendingBisect.right;
exports.bisectRight = bisectRight;
var bisectLeft = ascendingBisect.left;
exports.bisectLeft = bisectLeft;
var _default = bisectRight;
exports.default = _default;
},{"./ascending":"../node_modules/d3-array/src/ascending.js","./bisector":"../node_modules/d3-array/src/bisector.js"}],"../node_modules/d3-array/src/pairs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.pair = pair;

function _default(array, f) {
  if (f == null) f = pair;
  var i = 0,
      n = array.length - 1,
      p = array[0],
      pairs = new Array(n < 0 ? 0 : n);

  while (i < n) pairs[i] = f(p, p = array[++i]);

  return pairs;
}

function pair(a, b) {
  return [a, b];
}
},{}],"../node_modules/d3-array/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pairs = require("./pairs");

function _default(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;
  if (reduce == null) reduce = _pairs.pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}
},{"./pairs":"../node_modules/d3-array/src/pairs.js"}],"../node_modules/d3-array/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"../node_modules/d3-array/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x === null ? NaN : +x;
}
},{}],"../node_modules/d3-array/src/variance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}
},{"./number":"../node_modules/d3-array/src/number.js"}],"../node_modules/d3-array/src/deviation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _variance = _interopRequireDefault(require("./variance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var v = (0, _variance.default)(array, f);
  return v ? Math.sqrt(v) : v;
}
},{"./variance":"../node_modules/d3-array/src/variance.js"}],"../node_modules/d3-array/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}
},{}],"../node_modules/d3-array/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
var map = array.map;
exports.map = map;
},{}],"../node_modules/d3-array/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-array/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"../node_modules/d3-array/src/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
},{}],"../node_modules/d3-array/src/ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function _default(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));

    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));

    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();
  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
},{}],"../node_modules/d3-array/src/threshold/sturges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
},{}],"../node_modules/d3-array/src/histogram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _bisect = _interopRequireDefault(require("./bisect"));

var _constant = _interopRequireDefault(require("./constant"));

var _extent = _interopRequireDefault(require("./extent"));

var _identity = _interopRequireDefault(require("./identity"));

var _range = _interopRequireDefault(require("./range"));

var _ticks = require("./ticks");

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      domain = _extent.default,
      threshold = _sturges.default;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      tz = (0, _ticks.tickStep)(x0, x1, tz);
      tz = (0, _range.default)(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    } // Remove any thresholds outside the domain.


    var m = tz.length;

    while (tz[0] <= x0) tz.shift(), --m;

    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin; // Initialize bins.

    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    } // Assign data to bins by value, ignoring any outside the domain.


    for (i = 0; i < n; ++i) {
      x = values[i];

      if (x0 <= x && x <= x1) {
        bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), histogram) : threshold;
  };

  return histogram;
}
},{"./array":"../node_modules/d3-array/src/array.js","./bisect":"../node_modules/d3-array/src/bisect.js","./constant":"../node_modules/d3-array/src/constant.js","./extent":"../node_modules/d3-array/src/extent.js","./identity":"../node_modules/d3-array/src/identity.js","./range":"../node_modules/d3-array/src/range.js","./ticks":"../node_modules/d3-array/src/ticks.js","./threshold/sturges":"../node_modules/d3-array/src/threshold/sturges.js"}],"../node_modules/d3-array/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, p, valueof) {
  if (valueof == null) valueof = _number.default;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
},{"./number":"../node_modules/d3-array/src/number.js"}],"../node_modules/d3-array/src/threshold/freedmanDiaconis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

var _ascending = _interopRequireDefault(require("../ascending"));

var _number = _interopRequireDefault(require("../number"));

var _quantile = _interopRequireDefault(require("../quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  values = _array.map.call(values, _number.default).sort(_ascending.default);
  return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
},{"../array":"../node_modules/d3-array/src/array.js","../ascending":"../node_modules/d3-array/src/ascending.js","../number":"../node_modules/d3-array/src/number.js","../quantile":"../node_modules/d3-array/src/quantile.js"}],"../node_modules/d3-array/src/threshold/scott.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _deviation = _interopRequireDefault(require("../deviation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  return Math.ceil((max - min) / (3.5 * (0, _deviation.default)(values) * Math.pow(values.length, -1 / 3)));
}
},{"../deviation":"../node_modules/d3-array/src/deviation.js"}],"../node_modules/d3-array/src/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}
},{}],"../node_modules/d3-array/src/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) sum += value;else --m;
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) sum += value;else --m;
    }
  }

  if (m) return sum / m;
}
},{"./number":"../node_modules/d3-array/src/number.js"}],"../node_modules/d3-array/src/median.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

var _number = _interopRequireDefault(require("./number"));

var _quantile = _interopRequireDefault(require("./quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        numbers.push(value);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return (0, _quantile.default)(numbers.sort(_ascending.default), 0.5);
}
},{"./ascending":"../node_modules/d3-array/src/ascending.js","./number":"../node_modules/d3-array/src/number.js","./quantile":"../node_modules/d3-array/src/quantile.js"}],"../node_modules/d3-array/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;

  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;

    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}
},{}],"../node_modules/d3-array/src/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}
},{}],"../node_modules/d3-array/src/permute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, indexes) {
  var i = indexes.length,
      permutes = new Array(i);

  while (i--) permutes[i] = array[indexes[i]];

  return permutes;
}
},{}],"../node_modules/d3-array/src/scan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];
  if (compare == null) compare = _ascending.default;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}
},{"./ascending":"../node_modules/d3-array/src/ascending.js"}],"../node_modules/d3-array/src/shuffle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}
},{}],"../node_modules/d3-array/src/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  } else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}
},{}],"../node_modules/d3-array/src/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _min = _interopRequireDefault(require("./min"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(matrix) {
  if (!(n = matrix.length)) return [];

  for (var i = -1, m = (0, _min.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }

  return transpose;
}

function length(d) {
  return d.length;
}
},{"./min":"../node_modules/d3-array/src/min.js"}],"../node_modules/d3-array/src/zip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transpose = _interopRequireDefault(require("./transpose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _transpose.default)(arguments);
}
},{"./transpose":"../node_modules/d3-array/src/transpose.js"}],"../node_modules/d3-array/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function () {
    return _bisect.default;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function () {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function () {
    return _bisect.bisectLeft;
  }
});
Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function () {
    return _bisector.default;
  }
});
Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function () {
    return _deviation.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function () {
    return _histogram.default;
  }
});
Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function () {
    return _freedmanDiaconis.default;
  }
});
Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function () {
    return _scott.default;
  }
});
Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function () {
    return _sturges.default;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.default;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.default;
  }
});
Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function () {
    return _median.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.default;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.default;
  }
});
Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function () {
    return _permute.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.default;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.default;
  }
});
Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.default;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.default;
  }
});
Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function () {
    return _ticks.default;
  }
});
Object.defineProperty(exports, "tickIncrement", {
  enumerable: true,
  get: function () {
    return _ticks.tickIncrement;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function () {
    return _ticks.tickStep;
  }
});
Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function () {
    return _transpose.default;
  }
});
Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function () {
    return _variance.default;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.default;
  }
});

var _bisect = _interopRequireWildcard(require("./bisect"));

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

var _cross = _interopRequireDefault(require("./cross"));

var _descending = _interopRequireDefault(require("./descending"));

var _deviation = _interopRequireDefault(require("./deviation"));

var _extent = _interopRequireDefault(require("./extent"));

var _histogram = _interopRequireDefault(require("./histogram"));

var _freedmanDiaconis = _interopRequireDefault(require("./threshold/freedmanDiaconis"));

var _scott = _interopRequireDefault(require("./threshold/scott"));

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

var _max = _interopRequireDefault(require("./max"));

var _mean = _interopRequireDefault(require("./mean"));

var _median = _interopRequireDefault(require("./median"));

var _merge = _interopRequireDefault(require("./merge"));

var _min = _interopRequireDefault(require("./min"));

var _pairs = _interopRequireDefault(require("./pairs"));

var _permute = _interopRequireDefault(require("./permute"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _range = _interopRequireDefault(require("./range"));

var _scan = _interopRequireDefault(require("./scan"));

var _shuffle = _interopRequireDefault(require("./shuffle"));

var _sum = _interopRequireDefault(require("./sum"));

var _ticks = _interopRequireWildcard(require("./ticks"));

var _transpose = _interopRequireDefault(require("./transpose"));

var _variance = _interopRequireDefault(require("./variance"));

var _zip = _interopRequireDefault(require("./zip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./bisect":"../node_modules/d3-array/src/bisect.js","./ascending":"../node_modules/d3-array/src/ascending.js","./bisector":"../node_modules/d3-array/src/bisector.js","./cross":"../node_modules/d3-array/src/cross.js","./descending":"../node_modules/d3-array/src/descending.js","./deviation":"../node_modules/d3-array/src/deviation.js","./extent":"../node_modules/d3-array/src/extent.js","./histogram":"../node_modules/d3-array/src/histogram.js","./threshold/freedmanDiaconis":"../node_modules/d3-array/src/threshold/freedmanDiaconis.js","./threshold/scott":"../node_modules/d3-array/src/threshold/scott.js","./threshold/sturges":"../node_modules/d3-array/src/threshold/sturges.js","./max":"../node_modules/d3-array/src/max.js","./mean":"../node_modules/d3-array/src/mean.js","./median":"../node_modules/d3-array/src/median.js","./merge":"../node_modules/d3-array/src/merge.js","./min":"../node_modules/d3-array/src/min.js","./pairs":"../node_modules/d3-array/src/pairs.js","./permute":"../node_modules/d3-array/src/permute.js","./quantile":"../node_modules/d3-array/src/quantile.js","./range":"../node_modules/d3-array/src/range.js","./scan":"../node_modules/d3-array/src/scan.js","./shuffle":"../node_modules/d3-array/src/shuffle.js","./sum":"../node_modules/d3-array/src/sum.js","./ticks":"../node_modules/d3-array/src/ticks.js","./transpose":"../node_modules/d3-array/src/transpose.js","./variance":"../node_modules/d3-array/src/variance.js","./zip":"../node_modules/d3-array/src/zip.js"}],"../node_modules/d3-axis/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"../node_modules/d3-axis/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"../node_modules/d3-axis/src/axis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;

var _array = require("./array");

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return "translate(" + (x + 0.5) + ",0)";
}

function translateY(y) {
  return "translate(0," + (y + 0.5) + ")";
}

function number(scale) {
  return function (d) {
    return +scale(d);
  };
}

function center(scale) {
  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.

  if (scale.round()) offset = Math.round(offset);
  return function (d) {
    return +scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? "x" : "y",
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
        format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : _identity.default : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + 0.5,
        range1 = +range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : number)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");
    path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
    text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);
      tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function (d) {
        return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform");
      });
      tickEnter.attr("opacity", epsilon).attr("transform", function (d) {
        var p = this.parentNode.__axis;
        return transform(p && isFinite(p = p(d)) ? p : position(d));
      });
    }

    tickExit.remove();
    path.attr("d", orient === left || orient == right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1);
    tick.attr("opacity", 1).attr("transform", function (d) {
      return transform(position(d));
    });
    line.attr(x + "2", k * tickSizeInner);
    text.attr(x, k * spacing).text(format);
    selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
    selection.each(function () {
      this.__axis = position;
    });
  }

  axis.scale = function (_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function () {
    return tickArguments = _array.slice.call(arguments), axis;
  };

  axis.tickArguments = function (_) {
    return arguments.length ? (tickArguments = _ == null ? [] : _array.slice.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function (_) {
    return arguments.length ? (tickValues = _ == null ? null : _array.slice.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function (_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function (_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function (_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function (_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function (_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}
},{"./array":"../node_modules/d3-axis/src/array.js","./identity":"../node_modules/d3-axis/src/identity.js"}],"../node_modules/d3-axis/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "axisTop", {
  enumerable: true,
  get: function () {
    return _axis.axisTop;
  }
});
Object.defineProperty(exports, "axisRight", {
  enumerable: true,
  get: function () {
    return _axis.axisRight;
  }
});
Object.defineProperty(exports, "axisBottom", {
  enumerable: true,
  get: function () {
    return _axis.axisBottom;
  }
});
Object.defineProperty(exports, "axisLeft", {
  enumerable: true,
  get: function () {
    return _axis.axisLeft;
  }
});

var _axis = require("./axis");
},{"./axis":"../node_modules/d3-axis/src/axis.js"}],"../node_modules/d3-dispatch/src/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var noop = {
  value: function () {}
};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function (typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function () {
    var copy = {},
        _ = this._;

    for (var t in _) copy[t] = _[t].slice();

    return new Dispatch(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

var _default = dispatch;
exports.default = _default;
},{}],"../node_modules/d3-dispatch/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dispatch", {
  enumerable: true,
  get: function () {
    return _dispatch.default;
  }
});

var _dispatch = _interopRequireDefault(require("./dispatch.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dispatch.js":"../node_modules/d3-dispatch/src/dispatch.js"}],"../node_modules/d3-selection/src/namespaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.xhtml = void 0;
var xhtml = "http://www.w3.org/1999/xhtml";
exports.xhtml = xhtml;
var _default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
exports.default = _default;
},{}],"../node_modules/d3-selection/src/namespace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespaces = _interopRequireDefault(require("./namespaces"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces.default.hasOwnProperty(prefix) ? {
    space: _namespaces.default[prefix],
    local: name
  } : name;
}
},{"./namespaces":"../node_modules/d3-selection/src/namespaces.js"}],"../node_modules/d3-selection/src/creator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = require("./namespaces");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces.xhtml && document.documentElement.namespaceURI === _namespaces.xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function _default(name) {
  var fullname = (0, _namespace.default)(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
},{"./namespace":"../node_modules/d3-selection/src/namespace.js","./namespaces":"../node_modules/d3-selection/src/namespaces.js"}],"../node_modules/d3-selection/src/selector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function none() {}

function _default(selector) {
  return selector == null ? none : function () {
    return this.querySelector(selector);
  };
}
},{}],"../node_modules/d3-selection/src/selection/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selector.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js","../selector":"../node_modules/d3-selection/src/selector.js"}],"../node_modules/d3-selection/src/selectorAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function empty() {
  return [];
}

function _default(selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}
},{}],"../node_modules/d3-selection/src/selection/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selectorAll = _interopRequireDefault(require("../selectorAll"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selectorAll.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, parents);
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js","../selectorAll":"../node_modules/d3-selection/src/selectorAll.js"}],"../node_modules/d3-selection/src/matcher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(selector) {
  return function () {
    return this.matches(selector);
  };
}
},{}],"../node_modules/d3-selection/src/selection/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _matcher = _interopRequireDefault(require("../matcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(match) {
  if (typeof match !== "function") match = (0, _matcher.default)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js","../matcher":"../node_modules/d3-selection/src/matcher.js"}],"../node_modules/d3-selection/src/selection/sparse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(update) {
  return new Array(update.length);
}
},{}],"../node_modules/d3-selection/src/selection/enter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.EnterNode = EnterNode;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._enter || this._groups.map(_sparse.default), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};
},{"./sparse":"../node_modules/d3-selection/src/selection/sparse.js","./index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-selection/src/selection/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _enter = require("./enter");

var _constant = _interopRequireDefault(require("../constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length; // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.

  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Put any non-null nodes that don’t fit into exit.


  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue; // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.

  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);

      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  } // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.


  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);

    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Add any remaining nodes that were not bound to data to exit.


  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}

function _default(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function (d) {
      data[++j] = d;
    });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;
  if (typeof value !== "function") value = (0, _constant.default)(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.

    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;

        while (!(next = updateGroup[i1]) && ++i1 < dataLength);

        previous._next = next || null;
      }
    }
  }

  update = new _index.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js","./enter":"../node_modules/d3-selection/src/selection/enter.js","../constant":"../node_modules/d3-selection/src/constant.js"}],"../node_modules/d3-selection/src/selection/exit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._exit || this._groups.map(_sparse.default), this._parents);
}
},{"./sparse":"../node_modules/d3-selection/src/selection/sparse.js","./index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/selection/join.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(onenter, onupdate, onexit) {
  var enter = this.enter(),
      update = this,
      exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove();else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
},{}],"../node_modules/d3-selection/src/selection/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(selection) {
  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Selection(merges, this._parents);
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/selection/order.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}
},{}],"../node_modules/d3-selection/src/selection/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }

    sortgroup.sort(compareNode);
  }

  return new _index.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/selection/call.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
},{}],"../node_modules/d3-selection/src/selection/nodes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = new Array(this.size()),
      i = -1;
  this.each(function () {
    nodes[++i] = this;
  });
  return nodes;
}
},{}],"../node_modules/d3-selection/src/selection/node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}
},{}],"../node_modules/d3-selection/src/selection/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.each(function () {
    ++size;
  });
  return size;
}
},{}],"../node_modules/d3-selection/src/selection/empty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return !this.node();
}
},{}],"../node_modules/d3-selection/src/selection/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}
},{}],"../node_modules/d3-selection/src/selection/attr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("../namespace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function _default(name, value) {
  var fullname = (0, _namespace.default)(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
},{"../namespace":"../node_modules/d3-selection/src/namespace.js"}],"../node_modules/d3-selection/src/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
  node.document && node // node is a Window
  || node.defaultView; // node is a Document
}
},{}],"../node_modules/d3-selection/src/selection/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.styleValue = styleValue;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function _default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name) || (0, _window.default)(node).getComputedStyle(node, null).getPropertyValue(name);
}
},{"../window":"../node_modules/d3-selection/src/window.js"}],"../node_modules/d3-selection/src/selection/property.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function _default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
},{}],"../node_modules/d3-selection/src/selection/classed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);

    if (i < 0) {
      this._names.push(name);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);

    if (i >= 0) {
      this._names.splice(i, 1);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function _default(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()),
        i = -1,
        n = names.length;

    while (++i < n) if (!list.contains(names[i])) return false;

    return true;
  }

  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
},{}],"../node_modules/d3-selection/src/selection/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
},{}],"../node_modules/d3-selection/src/selection/html.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
},{}],"../node_modules/d3-selection/src/selection/raise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function _default() {
  return this.each(raise);
}
},{}],"../node_modules/d3-selection/src/selection/lower.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function _default() {
  return this.each(lower);
}
},{}],"../node_modules/d3-selection/src/selection/append.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}
},{"../creator":"../node_modules/d3-selection/src/creator.js"}],"../node_modules/d3-selection/src/selection/insert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function constantNull() {
  return null;
}

function _default(name, before) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0, _selector.default)(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
},{"../creator":"../node_modules/d3-selection/src/creator.js","../selector":"../node_modules/d3-selection/src/selector.js"}],"../node_modules/d3-selection/src/selection/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function _default() {
  return this.each(remove);
}
},{}],"../node_modules/d3-selection/src/selection/clone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function selection_cloneShallow() {
  var clone = this.cloneNode(false),
      parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true),
      parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function _default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
},{}],"../node_modules/d3-selection/src/selection/datum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
},{}],"../node_modules/d3-selection/src/selection/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.customEvent = customEvent;
exports.event = void 0;
var filterEvents = {};
var event = null;
exports.event = event;

if (typeof document !== "undefined") {
  var element = document.documentElement;

  if (!("onmouseenter" in element)) {
    filterEvents = {
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    };
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function (event) {
    var related = event.relatedTarget;

    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function (event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).

    exports.event = event = event1;

    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}

function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;

    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }

    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function (d, i, group) {
    var on = this.__on,
        o,
        listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      capture: capture
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function _default(typename, value, capture) {
  var typenames = parseTypenames(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;

    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;

  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));

  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  exports.event = event = event1;

  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event = event0;
  }
}
},{}],"../node_modules/d3-selection/src/selection/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dispatchEvent(node, type, params) {
  var window = (0, _window.default)(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function _default(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}
},{"../window":"../node_modules/d3-selection/src/window.js"}],"../node_modules/d3-selection/src/selection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Selection = Selection;
exports.default = exports.root = void 0;

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _filter = _interopRequireDefault(require("./filter"));

var _data = _interopRequireDefault(require("./data"));

var _enter = _interopRequireDefault(require("./enter"));

var _exit = _interopRequireDefault(require("./exit"));

var _join = _interopRequireDefault(require("./join"));

var _merge = _interopRequireDefault(require("./merge"));

var _order = _interopRequireDefault(require("./order"));

var _sort = _interopRequireDefault(require("./sort"));

var _call = _interopRequireDefault(require("./call"));

var _nodes = _interopRequireDefault(require("./nodes"));

var _node = _interopRequireDefault(require("./node"));

var _size = _interopRequireDefault(require("./size"));

var _empty = _interopRequireDefault(require("./empty"));

var _each = _interopRequireDefault(require("./each"));

var _attr = _interopRequireDefault(require("./attr"));

var _style = _interopRequireDefault(require("./style"));

var _property = _interopRequireDefault(require("./property"));

var _classed = _interopRequireDefault(require("./classed"));

var _text = _interopRequireDefault(require("./text"));

var _html = _interopRequireDefault(require("./html"));

var _raise = _interopRequireDefault(require("./raise"));

var _lower = _interopRequireDefault(require("./lower"));

var _append = _interopRequireDefault(require("./append"));

var _insert = _interopRequireDefault(require("./insert"));

var _remove = _interopRequireDefault(require("./remove"));

var _clone = _interopRequireDefault(require("./clone"));

var _datum = _interopRequireDefault(require("./datum"));

var _on = _interopRequireDefault(require("./on"));

var _dispatch = _interopRequireDefault(require("./dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = [null];
exports.root = root;

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  data: _data.default,
  enter: _enter.default,
  exit: _exit.default,
  join: _join.default,
  merge: _merge.default,
  order: _order.default,
  sort: _sort.default,
  call: _call.default,
  nodes: _nodes.default,
  node: _node.default,
  size: _size.default,
  empty: _empty.default,
  each: _each.default,
  attr: _attr.default,
  style: _style.default,
  property: _property.default,
  classed: _classed.default,
  text: _text.default,
  html: _html.default,
  raise: _raise.default,
  lower: _lower.default,
  append: _append.default,
  insert: _insert.default,
  remove: _remove.default,
  clone: _clone.default,
  datum: _datum.default,
  on: _on.default,
  dispatch: _dispatch.default
};
var _default = selection;
exports.default = _default;
},{"./select":"../node_modules/d3-selection/src/selection/select.js","./selectAll":"../node_modules/d3-selection/src/selection/selectAll.js","./filter":"../node_modules/d3-selection/src/selection/filter.js","./data":"../node_modules/d3-selection/src/selection/data.js","./enter":"../node_modules/d3-selection/src/selection/enter.js","./exit":"../node_modules/d3-selection/src/selection/exit.js","./join":"../node_modules/d3-selection/src/selection/join.js","./merge":"../node_modules/d3-selection/src/selection/merge.js","./order":"../node_modules/d3-selection/src/selection/order.js","./sort":"../node_modules/d3-selection/src/selection/sort.js","./call":"../node_modules/d3-selection/src/selection/call.js","./nodes":"../node_modules/d3-selection/src/selection/nodes.js","./node":"../node_modules/d3-selection/src/selection/node.js","./size":"../node_modules/d3-selection/src/selection/size.js","./empty":"../node_modules/d3-selection/src/selection/empty.js","./each":"../node_modules/d3-selection/src/selection/each.js","./attr":"../node_modules/d3-selection/src/selection/attr.js","./style":"../node_modules/d3-selection/src/selection/style.js","./property":"../node_modules/d3-selection/src/selection/property.js","./classed":"../node_modules/d3-selection/src/selection/classed.js","./text":"../node_modules/d3-selection/src/selection/text.js","./html":"../node_modules/d3-selection/src/selection/html.js","./raise":"../node_modules/d3-selection/src/selection/raise.js","./lower":"../node_modules/d3-selection/src/selection/lower.js","./append":"../node_modules/d3-selection/src/selection/append.js","./insert":"../node_modules/d3-selection/src/selection/insert.js","./remove":"../node_modules/d3-selection/src/selection/remove.js","./clone":"../node_modules/d3-selection/src/selection/clone.js","./datum":"../node_modules/d3-selection/src/selection/datum.js","./on":"../node_modules/d3-selection/src/selection/on.js","./dispatch":"../node_modules/d3-selection/src/selection/dispatch.js"}],"../node_modules/d3-selection/src/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([[document.querySelector(selector)]], [document.documentElement]) : new _index.Selection([[selector]], _index.root);
}
},{"./selection/index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/create.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("./creator"));

var _select = _interopRequireDefault(require("./select"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return (0, _select.default)((0, _creator.default)(name).call(document.documentElement));
}
},{"./creator":"../node_modules/d3-selection/src/creator.js","./select":"../node_modules/d3-selection/src/select.js"}],"../node_modules/d3-selection/src/local.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = local;
var nextId = 0;

function local() {
  return new Local();
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function (node) {
    var id = this._;

    while (!(id in node)) if (!(node = node.parentNode)) return;

    return node[id];
  },
  set: function (node, value) {
    return node[this._] = value;
  },
  remove: function (node) {
    return this._ in node && delete node[this._];
  },
  toString: function () {
    return this._;
  }
};
},{}],"../node_modules/d3-selection/src/sourceEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _on = require("./selection/on");

function _default() {
  var current = _on.event,
      source;

  while (source = current.sourceEvent) current = source;

  return current;
}
},{"./selection/on":"../node_modules/d3-selection/src/selection/on.js"}],"../node_modules/d3-selection/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}
},{}],"../node_modules/d3-selection/src/mouse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node) {
  var event = (0, _sourceEvent.default)();
  if (event.changedTouches) event = event.changedTouches[0];
  return (0, _point.default)(node, event);
}
},{"./sourceEvent":"../node_modules/d3-selection/src/sourceEvent.js","./point":"../node_modules/d3-selection/src/point.js"}],"../node_modules/d3-selection/src/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([document.querySelectorAll(selector)], [document.documentElement]) : new _index.Selection([selector == null ? [] : selector], _index.root);
}
},{"./selection/index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/touch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = (0, _sourceEvent.default)().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return (0, _point.default)(node, touch);
    }
  }

  return null;
}
},{"./sourceEvent":"../node_modules/d3-selection/src/sourceEvent.js","./point":"../node_modules/d3-selection/src/point.js"}],"../node_modules/d3-selection/src/touches.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches) {
  if (touches == null) touches = (0, _sourceEvent.default)().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = (0, _point.default)(node, touches[i]);
  }

  return points;
}
},{"./sourceEvent":"../node_modules/d3-selection/src/sourceEvent.js","./point":"../node_modules/d3-selection/src/point.js"}],"../node_modules/d3-selection/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "create", {
  enumerable: true,
  get: function () {
    return _create.default;
  }
});
Object.defineProperty(exports, "creator", {
  enumerable: true,
  get: function () {
    return _creator.default;
  }
});
Object.defineProperty(exports, "local", {
  enumerable: true,
  get: function () {
    return _local.default;
  }
});
Object.defineProperty(exports, "matcher", {
  enumerable: true,
  get: function () {
    return _matcher.default;
  }
});
Object.defineProperty(exports, "mouse", {
  enumerable: true,
  get: function () {
    return _mouse.default;
  }
});
Object.defineProperty(exports, "namespace", {
  enumerable: true,
  get: function () {
    return _namespace.default;
  }
});
Object.defineProperty(exports, "namespaces", {
  enumerable: true,
  get: function () {
    return _namespaces.default;
  }
});
Object.defineProperty(exports, "clientPoint", {
  enumerable: true,
  get: function () {
    return _point.default;
  }
});
Object.defineProperty(exports, "select", {
  enumerable: true,
  get: function () {
    return _select.default;
  }
});
Object.defineProperty(exports, "selectAll", {
  enumerable: true,
  get: function () {
    return _selectAll.default;
  }
});
Object.defineProperty(exports, "selection", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "selector", {
  enumerable: true,
  get: function () {
    return _selector.default;
  }
});
Object.defineProperty(exports, "selectorAll", {
  enumerable: true,
  get: function () {
    return _selectorAll.default;
  }
});
Object.defineProperty(exports, "style", {
  enumerable: true,
  get: function () {
    return _style.styleValue;
  }
});
Object.defineProperty(exports, "touch", {
  enumerable: true,
  get: function () {
    return _touch.default;
  }
});
Object.defineProperty(exports, "touches", {
  enumerable: true,
  get: function () {
    return _touches.default;
  }
});
Object.defineProperty(exports, "window", {
  enumerable: true,
  get: function () {
    return _window.default;
  }
});
Object.defineProperty(exports, "event", {
  enumerable: true,
  get: function () {
    return _on.event;
  }
});
Object.defineProperty(exports, "customEvent", {
  enumerable: true,
  get: function () {
    return _on.customEvent;
  }
});

var _create = _interopRequireDefault(require("./create"));

var _creator = _interopRequireDefault(require("./creator"));

var _local = _interopRequireDefault(require("./local"));

var _matcher = _interopRequireDefault(require("./matcher"));

var _mouse = _interopRequireDefault(require("./mouse"));

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = _interopRequireDefault(require("./namespaces"));

var _point = _interopRequireDefault(require("./point"));

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _index = _interopRequireDefault(require("./selection/index"));

var _selector = _interopRequireDefault(require("./selector"));

var _selectorAll = _interopRequireDefault(require("./selectorAll"));

var _style = require("./selection/style");

var _touch = _interopRequireDefault(require("./touch"));

var _touches = _interopRequireDefault(require("./touches"));

var _window = _interopRequireDefault(require("./window"));

var _on = require("./selection/on");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./create":"../node_modules/d3-selection/src/create.js","./creator":"../node_modules/d3-selection/src/creator.js","./local":"../node_modules/d3-selection/src/local.js","./matcher":"../node_modules/d3-selection/src/matcher.js","./mouse":"../node_modules/d3-selection/src/mouse.js","./namespace":"../node_modules/d3-selection/src/namespace.js","./namespaces":"../node_modules/d3-selection/src/namespaces.js","./point":"../node_modules/d3-selection/src/point.js","./select":"../node_modules/d3-selection/src/select.js","./selectAll":"../node_modules/d3-selection/src/selectAll.js","./selection/index":"../node_modules/d3-selection/src/selection/index.js","./selector":"../node_modules/d3-selection/src/selector.js","./selectorAll":"../node_modules/d3-selection/src/selectorAll.js","./selection/style":"../node_modules/d3-selection/src/selection/style.js","./touch":"../node_modules/d3-selection/src/touch.js","./touches":"../node_modules/d3-selection/src/touches.js","./window":"../node_modules/d3-selection/src/window.js","./selection/on":"../node_modules/d3-selection/src/selection/on.js"}],"../node_modules/d3-drag/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js"}],"../node_modules/d3-drag/src/nodrag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.yesdrag = yesdrag;

var _d3Selection = require("d3-selection");

var _noevent = _interopRequireDefault(require("./noevent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(view) {
  var root = view.document.documentElement,
      selection = (0, _d3Selection.select)(view).on("dragstart.drag", _noevent.default, true);

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", _noevent.default, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = (0, _d3Selection.select)(view).on("dragstart.drag", null);

  if (noclick) {
    selection.on("click.drag", _noevent.default, true);
    setTimeout(function () {
      selection.on("click.drag", null);
    }, 0);
  }

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./noevent.js":"../node_modules/d3-drag/src/noevent.js"}],"../node_modules/d3-drag/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-drag/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DragEvent;

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function () {
  var value = this._.on.apply(this._, arguments);

  return value === this._ ? this : value;
};
},{}],"../node_modules/d3-drag/src/drag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Selection = require("d3-selection");

var _nodrag = _interopRequireWildcard(require("./nodrag.js"));

var _noevent = _interopRequireWildcard(require("./noevent.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _event = _interopRequireDefault(require("./event.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !_d3Selection.event.ctrlKey && !_d3Selection.event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {
    x: _d3Selection.event.x,
    y: _d3Selection.event.y
  } : d;
}

function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}

function _default() {
  var filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable,
      gestures = {},
      listeners = (0, _d3Dispatch.dispatch)("start", "drag", "end"),
      active = 0,
      mousedownx,
      mousedowny,
      mousemoving,
      touchending,
      clickDistance2 = 0;

  function drag(selection) {
    selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), _d3Selection.mouse, this, arguments);
    if (!gesture) return;
    (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    (0, _nodrag.default)(_d3Selection.event.view);
    (0, _noevent.nopropagation)();
    mousemoving = false;
    mousedownx = _d3Selection.event.clientX;
    mousedowny = _d3Selection.event.clientY;
    gesture("start");
  }

  function mousemoved() {
    (0, _noevent.default)();

    if (!mousemoving) {
      var dx = _d3Selection.event.clientX - mousedownx,
          dy = _d3Selection.event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }

    gestures.mouse("drag");
  }

  function mouseupped() {
    (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.drag mouseup.drag", null);
    (0, _nodrag.yesdrag)(_d3Selection.event.view, mousemoving);
    (0, _noevent.default)();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = _d3Selection.event.changedTouches,
        c = container.apply(this, arguments),
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c, _d3Selection.touch, this, arguments)) {
        (0, _noevent.nopropagation)();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        (0, _noevent.default)();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        gesture;
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, 500); // Ghost clicks are delayed!

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        (0, _noevent.nopropagation)();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id),
        s,
        dx,
        dy,
        sublisteners = listeners.copy();
    if (!(0, _d3Selection.customEvent)(new _event.default(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function () {
      if ((_d3Selection.event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;
    return function gesture(type) {
      var p0 = p,
          n;

      switch (type) {
        case "start":
          gestures[id] = gesture, n = active++;
          break;

        case "end":
          delete gestures[id], --active;
        // nobreak

        case "drag":
          p = point(container, id), n = active;
          break;
      }

      (0, _d3Selection.customEvent)(new _event.default(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), drag) : filter;
  };

  drag.container = function (_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : (0, _constant.default)(_), drag) : container;
  };

  drag.subject = function (_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : (0, _constant.default)(_), drag) : subject;
  };

  drag.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), drag) : touchable;
  };

  drag.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  drag.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };

  return drag;
}
},{"d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","./nodrag.js":"../node_modules/d3-drag/src/nodrag.js","./noevent.js":"../node_modules/d3-drag/src/noevent.js","./constant.js":"../node_modules/d3-drag/src/constant.js","./event.js":"../node_modules/d3-drag/src/event.js"}],"../node_modules/d3-drag/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "drag", {
  enumerable: true,
  get: function () {
    return _drag.default;
  }
});
Object.defineProperty(exports, "dragDisable", {
  enumerable: true,
  get: function () {
    return _nodrag.default;
  }
});
Object.defineProperty(exports, "dragEnable", {
  enumerable: true,
  get: function () {
    return _nodrag.yesdrag;
  }
});

var _drag = _interopRequireDefault(require("./drag.js"));

var _nodrag = _interopRequireWildcard(require("./nodrag.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./drag.js":"../node_modules/d3-drag/src/drag.js","./nodrag.js":"../node_modules/d3-drag/src/nodrag.js"}],"../node_modules/d3-color/src/define.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.extend = extend;

function _default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);

  for (var key in definition) prototype[key] = definition[key];

  return prototype;
}
},{}],"../node_modules/d3-color/src/color.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Color = Color;
exports.default = color;
exports.rgbConvert = rgbConvert;
exports.rgb = rgb;
exports.Rgb = Rgb;
exports.hslConvert = hslConvert;
exports.hsl = hsl;
exports.brighter = exports.darker = void 0;

var _define = _interopRequireWildcard(require("./define.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Color() {}

var darker = 0.7;
exports.darker = darker;
var brighter = 1 / darker;
exports.brighter = brighter;
var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
(0, _define.default)(Color, color, {
  copy: function (channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function () {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
  : l === 4 ? new Rgb(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
  : null // invalid hex
  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Rgb, rgb, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function () {
    return this;
  },
  displayable: function () {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;

  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }

  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Hsl, hsl, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function () {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },
  formatHsl: function () {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
/* From FvD 13.37, CSS Color Module Level 3 */

function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
},{"./define.js":"../node_modules/d3-color/src/define.js"}],"../node_modules/d3-color/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rad2deg = exports.deg2rad = void 0;
var deg2rad = Math.PI / 180;
exports.deg2rad = deg2rad;
var rad2deg = 180 / Math.PI;
exports.rad2deg = rad2deg;
},{}],"../node_modules/d3-color/src/lab.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gray = gray;
exports.default = lab;
exports.Lab = Lab;
exports.lch = lch;
exports.hcl = hcl;
exports.Hcl = Hcl;

var _define = _interopRequireWildcard(require("./define.js"));

var _color = require("./color.js");

var _math = require("./math.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// https://observablehq.com/@mbostock/lab-and-rgb
var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
      x,
      z;
  if (r === g && g === b) x = z = y;else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Lab, lab, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function (k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function () {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new _color.Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);

  var h = Math.atan2(o.b, o.a) * _math.rad2deg;

  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * _math.deg2rad;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}

(0, _define.default)(Hcl, hcl, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function (k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function () {
    return hcl2lab(this).rgb();
  }
}));
},{"./define.js":"../node_modules/d3-color/src/define.js","./color.js":"../node_modules/d3-color/src/color.js","./math.js":"../node_modules/d3-color/src/math.js"}],"../node_modules/d3-color/src/cubehelix.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cubehelix;
exports.Cubehelix = Cubehelix;

var _define = _interopRequireWildcard(require("./define.js"));

var _color = require("./color.js");

var _math = require("./math.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
      // NaN if l=0 or l=1
  h = s ? Math.atan2(k, bl) * _math.rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Cubehelix, cubehelix, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    k = k == null ? _color.brighter : Math.pow(_color.brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? _color.darker : Math.pow(_color.darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * _math.deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new _color.Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
  }
}));
},{"./define.js":"../node_modules/d3-color/src/define.js","./color.js":"../node_modules/d3-color/src/color.js","./math.js":"../node_modules/d3-color/src/math.js"}],"../node_modules/d3-color/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "color", {
  enumerable: true,
  get: function () {
    return _color.default;
  }
});
Object.defineProperty(exports, "rgb", {
  enumerable: true,
  get: function () {
    return _color.rgb;
  }
});
Object.defineProperty(exports, "hsl", {
  enumerable: true,
  get: function () {
    return _color.hsl;
  }
});
Object.defineProperty(exports, "lab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "hcl", {
  enumerable: true,
  get: function () {
    return _lab.hcl;
  }
});
Object.defineProperty(exports, "lch", {
  enumerable: true,
  get: function () {
    return _lab.lch;
  }
});
Object.defineProperty(exports, "gray", {
  enumerable: true,
  get: function () {
    return _lab.gray;
  }
});
Object.defineProperty(exports, "cubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});

var _color = _interopRequireWildcard(require("./color.js"));

var _lab = _interopRequireWildcard(require("./lab.js"));

var _cubehelix = _interopRequireDefault(require("./cubehelix.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./color.js":"../node_modules/d3-color/src/color.js","./lab.js":"../node_modules/d3-color/src/lab.js","./cubehelix.js":"../node_modules/d3-color/src/cubehelix.js"}],"../node_modules/d3-interpolate/src/basis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basis = basis;
exports.default = _default;

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1,
      t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}

function _default(values) {
  var n = values.length - 1;
  return function (t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{}],"../node_modules/d3-interpolate/src/basisClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis.js");

function _default(values) {
  var n = values.length;
  return function (t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return (0, _basis.basis)((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{"./basis.js":"../node_modules/d3-interpolate/src/basis.js"}],"../node_modules/d3-interpolate/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-interpolate/src/color.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hue = hue;
exports.gamma = gamma;
exports.default = nogamma;

var _constant = _interopRequireDefault(require("./constant.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, _constant.default)(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : (0, _constant.default)(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : (0, _constant.default)(isNaN(a) ? b : a);
}
},{"./constant.js":"../node_modules/d3-interpolate/src/constant.js"}],"../node_modules/d3-interpolate/src/rgb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgbBasisClosed = exports.rgbBasis = exports.default = void 0;

var _d3Color = require("d3-color");

var _basis = _interopRequireDefault(require("./basis.js"));

var _basisClosed = _interopRequireDefault(require("./basisClosed.js"));

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function rgbGamma(y) {
  var color = (0, _color.gamma)(y);

  function rgb(start, end) {
    var r = color((start = (0, _d3Color.rgb)(start)).r, (end = (0, _d3Color.rgb)(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;
  return rgb;
}(1);

exports.default = _default;

function rgbSpline(spline) {
  return function (colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i,
        color;

    for (i = 0; i < n; ++i) {
      color = (0, _d3Color.rgb)(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }

    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function (t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(_basis.default);
exports.rgbBasis = rgbBasis;
var rgbBasisClosed = rgbSpline(_basisClosed.default);
exports.rgbBasisClosed = rgbBasisClosed;
},{"d3-color":"../node_modules/d3-color/src/index.js","./basis.js":"../node_modules/d3-interpolate/src/basis.js","./basisClosed.js":"../node_modules/d3-interpolate/src/basisClosed.js","./color.js":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/numberArray.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.isNumberArray = isNumberArray;

function _default(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function (t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;

    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}
},{}],"../node_modules/d3-interpolate/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.genericArray = genericArray;

var _value = _interopRequireDefault(require("./value.js"));

var _numberArray = _interopRequireWildcard(require("./numberArray.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  return ((0, _numberArray.isNumberArray)(b) ? _numberArray.default : genericArray)(a, b);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = (0, _value.default)(a[i], b[i]);

  for (; i < nb; ++i) c[i] = b[i];

  return function (t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);

    return c;
  };
}
},{"./value.js":"../node_modules/d3-interpolate/src/value.js","./numberArray.js":"../node_modules/d3-interpolate/src/numberArray.js"}],"../node_modules/d3-interpolate/src/date.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  var d = new Date();
  return a = +a, b = +b, function (t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}
},{}],"../node_modules/d3-interpolate/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b = +b, function (t) {
    return a * (1 - t) + b * t;
  };
}
},{}],"../node_modules/d3-interpolate/src/object.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _value = _interopRequireDefault(require("./value.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var i = {},
      c = {},
      k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = (0, _value.default)(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function (t) {
    for (k in i) c[k] = i[k](t);

    return c;
  };
}
},{"./value.js":"../node_modules/d3-interpolate/src/value.js"}],"../node_modules/d3-interpolate/src/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function () {
    return b;
  };
}

function one(b) {
  return function (t) {
    return b(t) + "";
  };
}

function _default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators
  // Coerce inputs to strings.

  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: (0, _number.default)(am, bm)
      });
    }

    bi = reB.lastIndex;
  } // Add remains of b.


  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  } // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.


  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

    return s.join("");
  });
}
},{"./number.js":"../node_modules/d3-interpolate/src/number.js"}],"../node_modules/d3-interpolate/src/value.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _rgb = _interopRequireDefault(require("./rgb.js"));

var _array = require("./array.js");

var _date = _interopRequireDefault(require("./date.js"));

var _number = _interopRequireDefault(require("./number.js"));

var _object = _interopRequireDefault(require("./object.js"));

var _string = _interopRequireDefault(require("./string.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _numberArray = _interopRequireWildcard(require("./numberArray.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var t = typeof b,
      c;
  return b == null || t === "boolean" ? (0, _constant.default)(b) : (t === "number" ? _number.default : t === "string" ? (c = (0, _d3Color.color)(b)) ? (b = c, _rgb.default) : _string.default : b instanceof _d3Color.color ? _rgb.default : b instanceof Date ? _date.default : (0, _numberArray.isNumberArray)(b) ? _numberArray.default : Array.isArray(b) ? _array.genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _object.default : _number.default)(a, b);
}
},{"d3-color":"../node_modules/d3-color/src/index.js","./rgb.js":"../node_modules/d3-interpolate/src/rgb.js","./array.js":"../node_modules/d3-interpolate/src/array.js","./date.js":"../node_modules/d3-interpolate/src/date.js","./number.js":"../node_modules/d3-interpolate/src/number.js","./object.js":"../node_modules/d3-interpolate/src/object.js","./string.js":"../node_modules/d3-interpolate/src/string.js","./constant.js":"../node_modules/d3-interpolate/src/constant.js","./numberArray.js":"../node_modules/d3-interpolate/src/numberArray.js"}],"../node_modules/d3-interpolate/src/discrete.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
},{}],"../node_modules/d3-interpolate/src/hue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _color = require("./color.js");

function _default(a, b) {
  var i = (0, _color.hue)(+a, +b);
  return function (t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}
},{"./color.js":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b = +b, function (t) {
    return Math.round(a * (1 - t) + b * t);
  };
}
},{}],"../node_modules/d3-interpolate/src/transform/decompose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.identity = void 0;
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
exports.identity = identity;

function _default(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}
},{}],"../node_modules/d3-interpolate/src/transform/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseCss = parseCss;
exports.parseSvg = parseSvg;

var _decompose = _interopRequireWildcard(require("./decompose.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var cssNode, cssRoot, cssView, svgNode;

function parseCss(value) {
  if (value === "none") return _decompose.identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return (0, _decompose.default)(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return _decompose.identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return _decompose.identity;
  value = value.matrix;
  return (0, _decompose.default)(value.a, value.b, value.c, value.d, value.e, value.f);
}
},{"./decompose.js":"../node_modules/d3-interpolate/src/transform/decompose.js"}],"../node_modules/d3-interpolate/src/transform/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interpolateTransformSvg = exports.interpolateTransformCss = void 0;

var _number = _interopRequireDefault(require("../number.js"));

var _parse = require("./parse.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators

    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc

    return function (t) {
      var i = -1,
          n = q.length,
          o;

      while (++i < n) s[(o = q[i]).i] = o.x(t);

      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(_parse.parseCss, "px, ", "px)", "deg)");
exports.interpolateTransformCss = interpolateTransformCss;
var interpolateTransformSvg = interpolateTransform(_parse.parseSvg, ", ", ")", ")");
exports.interpolateTransformSvg = interpolateTransformSvg;
},{"../number.js":"../node_modules/d3-interpolate/src/number.js","./parse.js":"../node_modules/d3-interpolate/src/transform/parse.js"}],"../node_modules/d3-interpolate/src/zoom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
} // p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]


function _default(p0, p1) {
  var ux0 = p0[0],
      uy0 = p0[1],
      w0 = p0[2],
      ux1 = p1[0],
      uy1 = p1[1],
      w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S; // Special case for u0 ≅ u1.

  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;

    i = function (t) {
      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
    };
  } // General case.
  else {
      var d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;

      i = function (t) {
        var s = t * S,
            coshr0 = cosh(r0),
            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
      };
    }

  i.duration = S * 1000;
  return i;
}
},{}],"../node_modules/d3-interpolate/src/hsl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hslLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function hsl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hsl)(start)).h, (end = (0, _d3Color.hsl)(end)).h),
        s = (0, _color.default)(start.s, end.s),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hsl(_color.hue);

exports.default = _default;
var hslLong = hsl(_color.default);
exports.hslLong = hslLong;
},{"d3-color":"../node_modules/d3-color/src/index.js","./color.js":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/lab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = lab;

var _d3Color = require("d3-color");

var _color = _interopRequireDefault(require("./color.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lab(start, end) {
  var l = (0, _color.default)((start = (0, _d3Color.lab)(start)).l, (end = (0, _d3Color.lab)(end)).l),
      a = (0, _color.default)(start.a, end.a),
      b = (0, _color.default)(start.b, end.b),
      opacity = (0, _color.default)(start.opacity, end.opacity);
  return function (t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}
},{"d3-color":"../node_modules/d3-color/src/index.js","./color.js":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/hcl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hclLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function hcl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hcl)(start)).h, (end = (0, _d3Color.hcl)(end)).h),
        c = (0, _color.default)(start.c, end.c),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hcl(_color.hue);

exports.default = _default;
var hclLong = hcl(_color.default);
exports.hclLong = hclLong;
},{"d3-color":"../node_modules/d3-color/src/index.js","./color.js":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/cubehelix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubehelixLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function cubehelix(hue) {
  return function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = (0, _d3Color.cubehelix)(start)).h, (end = (0, _d3Color.cubehelix)(end)).h),
          s = (0, _color.default)(start.s, end.s),
          l = (0, _color.default)(start.l, end.l),
          opacity = (0, _color.default)(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;
    return cubehelix;
  }(1);
}

var _default = cubehelix(_color.hue);

exports.default = _default;
var cubehelixLong = cubehelix(_color.default);
exports.cubehelixLong = cubehelixLong;
},{"d3-color":"../node_modules/d3-color/src/index.js","./color.js":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/piecewise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = piecewise;

function piecewise(interpolate, values) {
  var i = 0,
      n = values.length - 1,
      v = values[0],
      I = new Array(n < 0 ? 0 : n);

  while (i < n) I[i] = interpolate(v, v = values[++i]);

  return function (t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}
},{}],"../node_modules/d3-interpolate/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(interpolator, n) {
  var samples = new Array(n);

  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));

  return samples;
}
},{}],"../node_modules/d3-interpolate/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "interpolate", {
  enumerable: true,
  get: function () {
    return _value.default;
  }
});
Object.defineProperty(exports, "interpolateArray", {
  enumerable: true,
  get: function () {
    return _array.default;
  }
});
Object.defineProperty(exports, "interpolateBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "interpolateBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "interpolateDate", {
  enumerable: true,
  get: function () {
    return _date.default;
  }
});
Object.defineProperty(exports, "interpolateDiscrete", {
  enumerable: true,
  get: function () {
    return _discrete.default;
  }
});
Object.defineProperty(exports, "interpolateHue", {
  enumerable: true,
  get: function () {
    return _hue.default;
  }
});
Object.defineProperty(exports, "interpolateNumber", {
  enumerable: true,
  get: function () {
    return _number.default;
  }
});
Object.defineProperty(exports, "interpolateNumberArray", {
  enumerable: true,
  get: function () {
    return _numberArray.default;
  }
});
Object.defineProperty(exports, "interpolateObject", {
  enumerable: true,
  get: function () {
    return _object.default;
  }
});
Object.defineProperty(exports, "interpolateRound", {
  enumerable: true,
  get: function () {
    return _round.default;
  }
});
Object.defineProperty(exports, "interpolateString", {
  enumerable: true,
  get: function () {
    return _string.default;
  }
});
Object.defineProperty(exports, "interpolateTransformCss", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformCss;
  }
});
Object.defineProperty(exports, "interpolateTransformSvg", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformSvg;
  }
});
Object.defineProperty(exports, "interpolateZoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "interpolateRgb", {
  enumerable: true,
  get: function () {
    return _rgb.default;
  }
});
Object.defineProperty(exports, "interpolateRgbBasis", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasis;
  }
});
Object.defineProperty(exports, "interpolateRgbBasisClosed", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasisClosed;
  }
});
Object.defineProperty(exports, "interpolateHsl", {
  enumerable: true,
  get: function () {
    return _hsl.default;
  }
});
Object.defineProperty(exports, "interpolateHslLong", {
  enumerable: true,
  get: function () {
    return _hsl.hslLong;
  }
});
Object.defineProperty(exports, "interpolateLab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "interpolateHcl", {
  enumerable: true,
  get: function () {
    return _hcl.default;
  }
});
Object.defineProperty(exports, "interpolateHclLong", {
  enumerable: true,
  get: function () {
    return _hcl.hclLong;
  }
});
Object.defineProperty(exports, "interpolateCubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixLong", {
  enumerable: true,
  get: function () {
    return _cubehelix.cubehelixLong;
  }
});
Object.defineProperty(exports, "piecewise", {
  enumerable: true,
  get: function () {
    return _piecewise.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});

var _value = _interopRequireDefault(require("./value.js"));

var _array = _interopRequireDefault(require("./array.js"));

var _basis = _interopRequireDefault(require("./basis.js"));

var _basisClosed = _interopRequireDefault(require("./basisClosed.js"));

var _date = _interopRequireDefault(require("./date.js"));

var _discrete = _interopRequireDefault(require("./discrete.js"));

var _hue = _interopRequireDefault(require("./hue.js"));

var _number = _interopRequireDefault(require("./number.js"));

var _numberArray = _interopRequireDefault(require("./numberArray.js"));

var _object = _interopRequireDefault(require("./object.js"));

var _round = _interopRequireDefault(require("./round.js"));

var _string = _interopRequireDefault(require("./string.js"));

var _index = require("./transform/index.js");

var _zoom = _interopRequireDefault(require("./zoom.js"));

var _rgb = _interopRequireWildcard(require("./rgb.js"));

var _hsl = _interopRequireWildcard(require("./hsl.js"));

var _lab = _interopRequireDefault(require("./lab.js"));

var _hcl = _interopRequireWildcard(require("./hcl.js"));

var _cubehelix = _interopRequireWildcard(require("./cubehelix.js"));

var _piecewise = _interopRequireDefault(require("./piecewise.js"));

var _quantize = _interopRequireDefault(require("./quantize.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./value.js":"../node_modules/d3-interpolate/src/value.js","./array.js":"../node_modules/d3-interpolate/src/array.js","./basis.js":"../node_modules/d3-interpolate/src/basis.js","./basisClosed.js":"../node_modules/d3-interpolate/src/basisClosed.js","./date.js":"../node_modules/d3-interpolate/src/date.js","./discrete.js":"../node_modules/d3-interpolate/src/discrete.js","./hue.js":"../node_modules/d3-interpolate/src/hue.js","./number.js":"../node_modules/d3-interpolate/src/number.js","./numberArray.js":"../node_modules/d3-interpolate/src/numberArray.js","./object.js":"../node_modules/d3-interpolate/src/object.js","./round.js":"../node_modules/d3-interpolate/src/round.js","./string.js":"../node_modules/d3-interpolate/src/string.js","./transform/index.js":"../node_modules/d3-interpolate/src/transform/index.js","./zoom.js":"../node_modules/d3-interpolate/src/zoom.js","./rgb.js":"../node_modules/d3-interpolate/src/rgb.js","./hsl.js":"../node_modules/d3-interpolate/src/hsl.js","./lab.js":"../node_modules/d3-interpolate/src/lab.js","./hcl.js":"../node_modules/d3-interpolate/src/hcl.js","./cubehelix.js":"../node_modules/d3-interpolate/src/cubehelix.js","./piecewise.js":"../node_modules/d3-interpolate/src/piecewise.js","./quantize.js":"../node_modules/d3-interpolate/src/quantize.js"}],"../node_modules/d3-timer/src/timer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.now = now;
exports.Timer = Timer;
exports.timer = timer;
exports.timerFlush = timerFlush;
var frame = 0,
    // is an animation frame pending?
timeout = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function (callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }

    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function () {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.

  ++frame; // Pretend we’ve set an alarm, if we haven’t already.

  var t = taskHead,
      e;

  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }

  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;

  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;

  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }

  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.

  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
},{}],"../node_modules/d3-timer/src/timeout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer.js");

function _default(callback, delay, time) {
  var t = new _timer.Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(function (elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}
},{"./timer.js":"../node_modules/d3-timer/src/timer.js"}],"../node_modules/d3-timer/src/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer.js");

function _default(callback, delay, time) {
  var t = new _timer.Timer(),
      total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? (0, _timer.now)() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
}
},{"./timer.js":"../node_modules/d3-timer/src/timer.js"}],"../node_modules/d3-timer/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "now", {
  enumerable: true,
  get: function () {
    return _timer.now;
  }
});
Object.defineProperty(exports, "timer", {
  enumerable: true,
  get: function () {
    return _timer.timer;
  }
});
Object.defineProperty(exports, "timerFlush", {
  enumerable: true,
  get: function () {
    return _timer.timerFlush;
  }
});
Object.defineProperty(exports, "timeout", {
  enumerable: true,
  get: function () {
    return _timeout.default;
  }
});
Object.defineProperty(exports, "interval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});

var _timer = require("./timer.js");

var _timeout = _interopRequireDefault(require("./timeout.js"));

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./timer.js":"../node_modules/d3-timer/src/timer.js","./timeout.js":"../node_modules/d3-timer/src/timeout.js","./interval.js":"../node_modules/d3-timer/src/interval.js"}],"../node_modules/d3-transition/src/transition/schedule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.init = init;
exports.set = set;
exports.get = get;
exports.ENDED = exports.ENDING = exports.RUNNING = exports.STARTED = exports.STARTING = exports.SCHEDULED = exports.CREATED = void 0;

var _d3Dispatch = require("d3-dispatch");

var _d3Timer = require("d3-timer");

var emptyOn = (0, _d3Dispatch.dispatch)("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
exports.CREATED = CREATED;
var SCHEDULED = 1;
exports.SCHEDULED = SCHEDULED;
var STARTING = 2;
exports.STARTING = STARTING;
var STARTED = 3;
exports.STARTED = STARTED;
var RUNNING = 4;
exports.RUNNING = RUNNING;
var ENDING = 5;
exports.ENDING = ENDING;
var ENDED = 6;
exports.ENDED = ENDED;

function _default(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index,
    // For context during callback.
    group: group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set(node, id) {
  var schedule = get(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}

function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween; // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!

  schedules[id] = self;
  self.timer = (0, _d3Timer.timer)(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.

    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.

    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!

      if (o.state === STARTED) return (0, _d3Timer.timeout)(start); // Interrupt the active transition, if any.

      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } // Cancel any pre-empted transitions.
      else if (+i < id) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
    } // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.


    (0, _d3Timer.timeout)(function () {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    }); // Dispatch the start event.
    // Note this must be done before the tween are initialized.

    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted

    self.state = STARTED; // Initialize the tween, deleting null tween.

    tween = new Array(n = self.tween.length);

    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }

    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    } // Dispatch the end event.


    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];

    for (var i in schedules) return; // eslint-disable-line no-unused-vars


    delete node.__transition;
  }
}
},{"d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-timer":"../node_modules/d3-timer/src/index.js"}],"../node_modules/d3-transition/src/interrupt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./transition/schedule.js");

function _default(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;
  if (!schedules) return;
  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty = false;
      continue;
    }

    active = schedule.state > _schedule.STARTING && schedule.state < _schedule.ENDING;
    schedule.state = _schedule.ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}
},{"./transition/schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/selection/interrupt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _interrupt = _interopRequireDefault(require("../interrupt.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return this.each(function () {
    (0, _interrupt.default)(this, name);
  });
}
},{"../interrupt.js":"../node_modules/d3-transition/src/interrupt.js"}],"../node_modules/d3-transition/src/transition/tween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tweenValue = tweenValue;

var _schedule = require("./schedule.js");

function tweenRemove(id, name) {
  var tween0, tween1;
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = tween0 = tween;

      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();

      for (var t = {
        name: name,
        value: value
      }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }

      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

function _default(name, value) {
  var id = this._id;
  name += "";

  if (arguments.length < 2) {
    var tween = (0, _schedule.get)(this.node(), id).tween;

    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }

    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;
  transition.each(function () {
    var schedule = (0, _schedule.set)(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function (node) {
    return (0, _schedule.get)(node, id).value[name];
  };
}
},{"./schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/interpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

function _default(a, b) {
  var c;
  return (typeof b === "number" ? _d3Interpolate.interpolateNumber : b instanceof _d3Color.color ? _d3Interpolate.interpolateRgb : (c = (0, _d3Color.color)(b)) ? (b = c, _d3Interpolate.interpolateRgb) : _d3Interpolate.interpolateString)(a, b);
}
},{"d3-color":"../node_modules/d3-color/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js"}],"../node_modules/d3-transition/src/transition/attr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _tween = require("./tween.js");

var _interpolate = _interopRequireDefault(require("./interpolate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrConstantNS(fullname, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function attrFunctionNS(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function _default(name, value) {
  var fullname = (0, _d3Selection.namespace)(name),
      i = fullname === "transform" ? _d3Interpolate.interpolateTransformSvg : _interpolate.default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, (0, _tween.tweenValue)(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}
},{"d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","./tween.js":"../node_modules/d3-transition/src/transition/tween.js","./interpolate.js":"../node_modules/d3-transition/src/transition/interpolate.js"}],"../node_modules/d3-transition/src/transition/attrTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

function attrInterpolate(name, i) {
  return function (t) {
    this.setAttribute(name, i.call(this, t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function (t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function _default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = (0, _d3Selection.namespace)(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js"}],"../node_modules/d3-transition/src/transition/delay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function delayFunction(id, value) {
  return function () {
    (0, _schedule.init)(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function () {
    (0, _schedule.init)(this, id).delay = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : (0, _schedule.get)(this.node(), id).delay;
}
},{"./schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/duration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function durationFunction(id, value) {
  return function () {
    (0, _schedule.set)(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function () {
    (0, _schedule.set)(this, id).duration = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : (0, _schedule.get)(this.node(), id).duration;
}
},{"./schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/ease.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error();
  return function () {
    (0, _schedule.set)(this, id).ease = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each(easeConstant(id, value)) : (0, _schedule.get)(this.node(), id).ease;
}
},{"./schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index.js");

function _default(match) {
  if (typeof match !== "function") match = (0, _d3Selection.matcher)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Transition(subgroups, this._parents, this._name, this._id);
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./index.js":"../node_modules/d3-transition/src/transition/index.js"}],"../node_modules/d3-transition/src/transition/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index.js");

function _default(transition) {
  if (transition._id !== this._id) throw new Error();

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Transition(merges, this._parents, this._name, this._id);
}
},{"./index.js":"../node_modules/d3-transition/src/transition/index.js"}],"../node_modules/d3-transition/src/transition/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function (t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0,
      on1,
      sit = start(name) ? _schedule.init : _schedule.set;
  return function () {
    var schedule = sit(this, id),
        on = schedule.on; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}

function _default(name, listener) {
  var id = this._id;
  return arguments.length < 2 ? (0, _schedule.get)(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
}
},{"./schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function removeFunction(id) {
  return function () {
    var parent = this.parentNode;

    for (var i in this.__transition) if (+i !== id) return;

    if (parent) parent.removeChild(this);
  };
}

function _default() {
  return this.on("end.remove", removeFunction(this._id));
}
},{}],"../node_modules/d3-transition/src/transition/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index.js");

var _schedule = _interopRequireWildcard(require("./schedule.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default(select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = (0, _d3Selection.selector)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        (0, _schedule.default)(subgroup[i], name, id, i, subgroup, (0, _schedule.get)(node, id));
      }
    }
  }

  return new _index.Transition(subgroups, this._parents, name, id);
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./index.js":"../node_modules/d3-transition/src/transition/index.js","./schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index.js");

var _schedule = _interopRequireWildcard(require("./schedule.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default(select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = (0, _d3Selection.selectorAll)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = (0, _schedule.get)(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            (0, _schedule.default)(child, name, id, k, children, inherit);
          }
        }

        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new _index.Transition(subgroups, parents, name, id);
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./index.js":"../node_modules/d3-transition/src/transition/index.js","./schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/selection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var Selection = _d3Selection.selection.prototype.constructor;

function _default() {
  return new Selection(this._groups, this._parents);
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js"}],"../node_modules/d3-transition/src/transition/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _schedule = require("./schedule.js");

var _tween = require("./tween.js");

var _interpolate = _interopRequireDefault(require("./interpolate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name),
        string1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function styleFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0,
      on1,
      listener0,
      key = "style." + name,
      event = "end." + key,
      remove;
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        on = schedule.on,
        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}

function _default(name, value, priority) {
  var i = (name += "") === "transform" ? _d3Interpolate.interpolateTransformCss : _interpolate.default;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, (0, _tween.tweenValue)(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
}
},{"d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","./schedule.js":"../node_modules/d3-transition/src/transition/schedule.js","./tween.js":"../node_modules/d3-transition/src/transition/tween.js","./interpolate.js":"../node_modules/d3-transition/src/transition/interpolate.js"}],"../node_modules/d3-transition/src/transition/styleTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function styleInterpolate(name, i, priority) {
  return function (t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }

  tween._value = value;
  return tween;
}

function _default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}
},{}],"../node_modules/d3-transition/src/transition/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _tween = require("./tween.js");

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function _default(value) {
  return this.tween("text", typeof value === "function" ? textFunction((0, _tween.tweenValue)(this, "text", value)) : textConstant(value == null ? "" : value + ""));
}
},{"./tween.js":"../node_modules/d3-transition/src/transition/tween.js"}],"../node_modules/d3-transition/src/transition/textTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function textInterpolate(i) {
  return function (t) {
    this.textContent = i.call(this, t);
  };
}

function textTween(value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function _default(value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, textTween(value));
}
},{}],"../node_modules/d3-transition/src/transition/transition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index.js");

var _schedule = _interopRequireWildcard(require("./schedule.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default() {
  var name = this._name,
      id0 = this._id,
      id1 = (0, _index.newId)();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = (0, _schedule.get)(node, id0);
        (0, _schedule.default)(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new _index.Transition(groups, this._parents, name, id1);
}
},{"./index.js":"../node_modules/d3-transition/src/transition/index.js","./schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/end.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function _default() {
  var on0,
      on1,
      that = this,
      id = that._id,
      size = that.size();
  return new Promise(function (resolve, reject) {
    var cancel = {
      value: reject
    },
        end = {
      value: function () {
        if (--size === 0) resolve();
      }
    };
    that.each(function () {
      var schedule = (0, _schedule.set)(this, id),
          on = schedule.on; // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.

      if (on !== on0) {
        on1 = (on0 = on).copy();

        on1._.cancel.push(cancel);

        on1._.interrupt.push(cancel);

        on1._.end.push(end);
      }

      schedule.on = on1;
    });
  });
}
},{"./schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transition = Transition;
exports.default = transition;
exports.newId = newId;

var _d3Selection = require("d3-selection");

var _attr = _interopRequireDefault(require("./attr.js"));

var _attrTween = _interopRequireDefault(require("./attrTween.js"));

var _delay = _interopRequireDefault(require("./delay.js"));

var _duration = _interopRequireDefault(require("./duration.js"));

var _ease = _interopRequireDefault(require("./ease.js"));

var _filter = _interopRequireDefault(require("./filter.js"));

var _merge = _interopRequireDefault(require("./merge.js"));

var _on = _interopRequireDefault(require("./on.js"));

var _remove = _interopRequireDefault(require("./remove.js"));

var _select = _interopRequireDefault(require("./select.js"));

var _selectAll = _interopRequireDefault(require("./selectAll.js"));

var _selection = _interopRequireDefault(require("./selection.js"));

var _style = _interopRequireDefault(require("./style.js"));

var _styleTween = _interopRequireDefault(require("./styleTween.js"));

var _text = _interopRequireDefault(require("./text.js"));

var _textTween = _interopRequireDefault(require("./textTween.js"));

var _transition = _interopRequireDefault(require("./transition.js"));

var _tween = _interopRequireDefault(require("./tween.js"));

var _end = _interopRequireDefault(require("./end.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return (0, _d3Selection.selection)().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = _d3Selection.selection.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  merge: _merge.default,
  selection: _selection.default,
  transition: _transition.default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: _on.default,
  attr: _attr.default,
  attrTween: _attrTween.default,
  style: _style.default,
  styleTween: _styleTween.default,
  text: _text.default,
  textTween: _textTween.default,
  remove: _remove.default,
  tween: _tween.default,
  delay: _delay.default,
  duration: _duration.default,
  ease: _ease.default,
  end: _end.default
};
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./attr.js":"../node_modules/d3-transition/src/transition/attr.js","./attrTween.js":"../node_modules/d3-transition/src/transition/attrTween.js","./delay.js":"../node_modules/d3-transition/src/transition/delay.js","./duration.js":"../node_modules/d3-transition/src/transition/duration.js","./ease.js":"../node_modules/d3-transition/src/transition/ease.js","./filter.js":"../node_modules/d3-transition/src/transition/filter.js","./merge.js":"../node_modules/d3-transition/src/transition/merge.js","./on.js":"../node_modules/d3-transition/src/transition/on.js","./remove.js":"../node_modules/d3-transition/src/transition/remove.js","./select.js":"../node_modules/d3-transition/src/transition/select.js","./selectAll.js":"../node_modules/d3-transition/src/transition/selectAll.js","./selection.js":"../node_modules/d3-transition/src/transition/selection.js","./style.js":"../node_modules/d3-transition/src/transition/style.js","./styleTween.js":"../node_modules/d3-transition/src/transition/styleTween.js","./text.js":"../node_modules/d3-transition/src/transition/text.js","./textTween.js":"../node_modules/d3-transition/src/transition/textTween.js","./transition.js":"../node_modules/d3-transition/src/transition/transition.js","./tween.js":"../node_modules/d3-transition/src/transition/tween.js","./end.js":"../node_modules/d3-transition/src/transition/end.js"}],"../node_modules/d3-ease/src/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linear = linear;

function linear(t) {
  return +t;
}
},{}],"../node_modules/d3-ease/src/quad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quadIn = quadIn;
exports.quadOut = quadOut;
exports.quadInOut = quadInOut;

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}
},{}],"../node_modules/d3-ease/src/cubic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubicIn = cubicIn;
exports.cubicOut = cubicOut;
exports.cubicInOut = cubicInOut;

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
},{}],"../node_modules/d3-ease/src/poly.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.polyInOut = exports.polyOut = exports.polyIn = void 0;
var exponent = 3;

var polyIn = function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;
  return polyIn;
}(exponent);

exports.polyIn = polyIn;

var polyOut = function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;
  return polyOut;
}(exponent);

exports.polyOut = polyOut;

var polyInOut = function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;
  return polyInOut;
}(exponent);

exports.polyInOut = polyInOut;
},{}],"../node_modules/d3-ease/src/sin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinIn = sinIn;
exports.sinOut = sinOut;
exports.sinInOut = sinInOut;
var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}
},{}],"../node_modules/d3-ease/src/exp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expIn = expIn;
exports.expOut = expOut;
exports.expInOut = expInOut;

function expIn(t) {
  return Math.pow(2, 10 * t - 10);
}

function expOut(t) {
  return 1 - Math.pow(2, -10 * t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}
},{}],"../node_modules/d3-ease/src/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleIn = circleIn;
exports.circleOut = circleOut;
exports.circleInOut = circleInOut;

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}
},{}],"../node_modules/d3-ease/src/bounce.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bounceIn = bounceIn;
exports.bounceOut = bounceOut;
exports.bounceInOut = bounceInOut;
var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}
},{}],"../node_modules/d3-ease/src/back.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.backInOut = exports.backOut = exports.backIn = void 0;
var overshoot = 1.70158;

var backIn = function custom(s) {
  s = +s;

  function backIn(t) {
    return t * t * ((s + 1) * t - s);
  }

  backIn.overshoot = custom;
  return backIn;
}(overshoot);

exports.backIn = backIn;

var backOut = function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
  }

  backOut.overshoot = custom;
  return backOut;
}(overshoot);

exports.backOut = backOut;

var backInOut = function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;
  return backInOut;
}(overshoot);

exports.backInOut = backInOut;
},{}],"../node_modules/d3-ease/src/elastic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elasticInOut = exports.elasticOut = exports.elasticIn = void 0;
var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticIn.period = function (p) {
    return custom(a, p);
  };

  return elasticIn;
}(amplitude, period);

exports.elasticIn = elasticIn;

var elasticOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticOut.period = function (p) {
    return custom(a, p);
  };

  return elasticOut;
}(amplitude, period);

exports.elasticOut = elasticOut;

var elasticInOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticInOut.period = function (p) {
    return custom(a, p);
  };

  return elasticInOut;
}(amplitude, period);

exports.elasticInOut = elasticInOut;
},{}],"../node_modules/d3-ease/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "easeLinear", {
  enumerable: true,
  get: function () {
    return _linear.linear;
  }
});
Object.defineProperty(exports, "easeQuad", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeQuadIn", {
  enumerable: true,
  get: function () {
    return _quad.quadIn;
  }
});
Object.defineProperty(exports, "easeQuadOut", {
  enumerable: true,
  get: function () {
    return _quad.quadOut;
  }
});
Object.defineProperty(exports, "easeQuadInOut", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeCubic", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easeCubicIn", {
  enumerable: true,
  get: function () {
    return _cubic.cubicIn;
  }
});
Object.defineProperty(exports, "easeCubicOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicOut;
  }
});
Object.defineProperty(exports, "easeCubicInOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easePoly", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easePolyIn", {
  enumerable: true,
  get: function () {
    return _poly.polyIn;
  }
});
Object.defineProperty(exports, "easePolyOut", {
  enumerable: true,
  get: function () {
    return _poly.polyOut;
  }
});
Object.defineProperty(exports, "easePolyInOut", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easeSin", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeSinIn", {
  enumerable: true,
  get: function () {
    return _sin.sinIn;
  }
});
Object.defineProperty(exports, "easeSinOut", {
  enumerable: true,
  get: function () {
    return _sin.sinOut;
  }
});
Object.defineProperty(exports, "easeSinInOut", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeExp", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeExpIn", {
  enumerable: true,
  get: function () {
    return _exp.expIn;
  }
});
Object.defineProperty(exports, "easeExpOut", {
  enumerable: true,
  get: function () {
    return _exp.expOut;
  }
});
Object.defineProperty(exports, "easeExpInOut", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeCircle", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeCircleIn", {
  enumerable: true,
  get: function () {
    return _circle.circleIn;
  }
});
Object.defineProperty(exports, "easeCircleOut", {
  enumerable: true,
  get: function () {
    return _circle.circleOut;
  }
});
Object.defineProperty(exports, "easeCircleInOut", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeBounce", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceIn", {
  enumerable: true,
  get: function () {
    return _bounce.bounceIn;
  }
});
Object.defineProperty(exports, "easeBounceOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceInOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceInOut;
  }
});
Object.defineProperty(exports, "easeBack", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeBackIn", {
  enumerable: true,
  get: function () {
    return _back.backIn;
  }
});
Object.defineProperty(exports, "easeBackOut", {
  enumerable: true,
  get: function () {
    return _back.backOut;
  }
});
Object.defineProperty(exports, "easeBackInOut", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeElastic", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticIn", {
  enumerable: true,
  get: function () {
    return _elastic.elasticIn;
  }
});
Object.defineProperty(exports, "easeElasticOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticInOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticInOut;
  }
});

var _linear = require("./linear.js");

var _quad = require("./quad.js");

var _cubic = require("./cubic.js");

var _poly = require("./poly.js");

var _sin = require("./sin.js");

var _exp = require("./exp.js");

var _circle = require("./circle.js");

var _bounce = require("./bounce.js");

var _back = require("./back.js");

var _elastic = require("./elastic.js");
},{"./linear.js":"../node_modules/d3-ease/src/linear.js","./quad.js":"../node_modules/d3-ease/src/quad.js","./cubic.js":"../node_modules/d3-ease/src/cubic.js","./poly.js":"../node_modules/d3-ease/src/poly.js","./sin.js":"../node_modules/d3-ease/src/sin.js","./exp.js":"../node_modules/d3-ease/src/exp.js","./circle.js":"../node_modules/d3-ease/src/circle.js","./bounce.js":"../node_modules/d3-ease/src/bounce.js","./back.js":"../node_modules/d3-ease/src/back.js","./elastic.js":"../node_modules/d3-ease/src/elastic.js"}],"../node_modules/d3-transition/src/selection/transition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("../transition/index.js");

var _schedule = _interopRequireDefault(require("../transition/schedule.js"));

var _d3Ease = require("d3-ease");

var _d3Timer = require("d3-timer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: _d3Ease.easeCubicInOut
};

function inherit(node, id) {
  var timing;

  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = (0, _d3Timer.now)(), defaultTiming;
    }
  }

  return timing;
}

function _default(name) {
  var id, timing;

  if (name instanceof _index.Transition) {
    id = name._id, name = name._name;
  } else {
    id = (0, _index.newId)(), (timing = defaultTiming).time = (0, _d3Timer.now)(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        (0, _schedule.default)(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new _index.Transition(groups, this._parents, name, id);
}
},{"../transition/index.js":"../node_modules/d3-transition/src/transition/index.js","../transition/schedule.js":"../node_modules/d3-transition/src/transition/schedule.js","d3-ease":"../node_modules/d3-ease/src/index.js","d3-timer":"../node_modules/d3-timer/src/index.js"}],"../node_modules/d3-transition/src/selection/index.js":[function(require,module,exports) {
"use strict";

var _d3Selection = require("d3-selection");

var _interrupt = _interopRequireDefault(require("./interrupt.js"));

var _transition = _interopRequireDefault(require("./transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_d3Selection.selection.prototype.interrupt = _interrupt.default;
_d3Selection.selection.prototype.transition = _transition.default;
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./interrupt.js":"../node_modules/d3-transition/src/selection/interrupt.js","./transition.js":"../node_modules/d3-transition/src/selection/transition.js"}],"../node_modules/d3-transition/src/active.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./transition/index.js");

var _schedule = require("./transition/schedule.js");

var root = [null];

function _default(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";

    for (i in schedules) {
      if ((schedule = schedules[i]).state > _schedule.SCHEDULED && schedule.name === name) {
        return new _index.Transition([[node]], root, name, +i);
      }
    }
  }

  return null;
}
},{"./transition/index.js":"../node_modules/d3-transition/src/transition/index.js","./transition/schedule.js":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "transition", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "active", {
  enumerable: true,
  get: function () {
    return _active.default;
  }
});
Object.defineProperty(exports, "interrupt", {
  enumerable: true,
  get: function () {
    return _interrupt.default;
  }
});

require("./selection/index.js");

var _index2 = _interopRequireDefault(require("./transition/index.js"));

var _active = _interopRequireDefault(require("./active.js"));

var _interrupt = _interopRequireDefault(require("./interrupt.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./selection/index.js":"../node_modules/d3-transition/src/selection/index.js","./transition/index.js":"../node_modules/d3-transition/src/transition/index.js","./active.js":"../node_modules/d3-transition/src/active.js","./interrupt.js":"../node_modules/d3-transition/src/interrupt.js"}],"../node_modules/d3-brush/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-brush/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(target, type, selection) {
  this.target = target;
  this.type = type;
  this.selection = selection;
}
},{}],"../node_modules/d3-brush/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js"}],"../node_modules/d3-brush/src/brush.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.brushSelection = brushSelection;
exports.brushX = brushX;
exports.brushY = brushY;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Drag = require("d3-drag");

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _d3Transition = require("d3-transition");

var _constant = _interopRequireDefault(require("./constant.js"));

var _event = _interopRequireDefault(require("./event.js"));

var _noevent = _interopRequireWildcard(require("./noevent.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MODE_DRAG = {
  name: "drag"
},
    MODE_SPACE = {
  name: "space"
},
    MODE_HANDLE = {
  name: "handle"
},
    MODE_CENTER = {
  name: "center"
};

function number1(e) {
  return [+e[0], +e[1]];
}

function number2(e) {
  return [number1(e[0]), number1(e[1])];
}

function toucher(identifier) {
  return function (target) {
    return (0, _d3Selection.touch)(target, _d3Selection.event.touches, identifier);
  };
}

var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function (x, e) {
    return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]];
  },
  output: function (xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function (y, e) {
    return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]];
  },
  output: function (xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function (xy) {
    return xy == null ? null : number2(xy);
  },
  output: function (xy) {
    return xy;
  }
};
var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};
var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};
var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};
var signsX = {
  overlay: +1,
  selection: +1,
  n: null,
  e: +1,
  s: null,
  w: -1,
  nw: -1,
  ne: +1,
  se: +1,
  sw: -1
};
var signsY = {
  overlay: +1,
  selection: +1,
  n: -1,
  e: null,
  s: +1,
  w: null,
  nw: -1,
  ne: -1,
  se: +1,
  sw: +1
};

function type(t) {
  return {
    type: t
  };
} // Ignore right-click, since that should open the context menu.


function defaultFilter() {
  return !_d3Selection.event.ctrlKey && !_d3Selection.event.button;
}

function defaultExtent() {
  var svg = this.ownerSVGElement || this;

  if (svg.hasAttribute("viewBox")) {
    svg = svg.viewBox.baseVal;
    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
  }

  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}

function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
} // Like d3.local, but with the name “__brush” rather than auto-generated.


function local(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;

  return node.__brush;
}

function empty(extent) {
  return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
}

function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}

function brushX() {
  return brush(X);
}

function brushY() {
  return brush(Y);
}

function _default() {
  return brush(XY);
}

function brush(dim) {
  var extent = defaultExtent,
      filter = defaultFilter,
      touchable = defaultTouchable,
      keys = true,
      listeners = (0, _d3Dispatch.dispatch)("start", "brush", "end"),
      handleSize = 6,
      touchending;

  function brush(group) {
    var overlay = group.property("__brush", initialize).selectAll(".overlay").data([type("overlay")]);
    overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function () {
      var extent = local(this).extent;
      (0, _d3Selection.select)(this).attr("x", extent[0][0]).attr("y", extent[0][1]).attr("width", extent[1][0] - extent[0][0]).attr("height", extent[1][1] - extent[0][1]);
    });
    group.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var handle = group.selectAll(".handle").data(dim.handles, function (d) {
      return d.type;
    });
    handle.exit().remove();
    handle.enter().append("rect").attr("class", function (d) {
      return "handle handle--" + d.type;
    }).attr("cursor", function (d) {
      return cursors[d.type];
    });
    group.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  brush.move = function (group, selection) {
    if (group.selection) {
      group.on("start.brush", function () {
        emitter(this, arguments).beforestart().start();
      }).on("interrupt.brush end.brush", function () {
        emitter(this, arguments).end();
      }).tween("brush", function () {
        var that = this,
            state = that.__brush,
            emit = emitter(that, arguments),
            selection0 = state.selection,
            selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
            i = (0, _d3Interpolate.interpolate)(selection0, selection1);

        function tween(t) {
          state.selection = t === 1 && selection1 === null ? null : i(t);
          redraw.call(that);
          emit.brush();
        }

        return selection0 !== null && selection1 !== null ? tween : tween(1);
      });
    } else {
      group.each(function () {
        var that = this,
            args = arguments,
            state = that.__brush,
            selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
            emit = emitter(that, args).beforestart();
        (0, _d3Transition.interrupt)(that);
        state.selection = selection1 === null ? null : selection1;
        redraw.call(that);
        emit.start().brush().end();
      });
    }
  };

  brush.clear = function (group) {
    brush.move(group, null);
  };

  function redraw() {
    var group = (0, _d3Selection.select)(this),
        selection = local(this).selection;

    if (selection) {
      group.selectAll(".selection").style("display", null).attr("x", selection[0][0]).attr("y", selection[0][1]).attr("width", selection[1][0] - selection[0][0]).attr("height", selection[1][1] - selection[0][1]);
      group.selectAll(".handle").style("display", null).attr("x", function (d) {
        return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
      }).attr("y", function (d) {
        return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
      }).attr("width", function (d) {
        return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize;
      }).attr("height", function (d) {
        return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize;
      });
    } else {
      group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
  }

  function emitter(that, args, clean) {
    return !clean && that.__brush.emitter || new Emitter(that, args);
  }

  function Emitter(that, args) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
  }

  Emitter.prototype = {
    beforestart: function () {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function () {
      if (this.starting) this.starting = false, this.emit("start");else this.emit("brush");
      return this;
    },
    brush: function () {
      this.emit("brush");
      return this;
    },
    end: function () {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function (type) {
      (0, _d3Selection.customEvent)(new _event.default(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function started() {
    if (touchending && !_d3Selection.event.touches) return;
    if (!filter.apply(this, arguments)) return;
    var that = this,
        type = _d3Selection.event.target.__data__.type,
        mode = (keys && _d3Selection.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : keys && _d3Selection.event.altKey ? MODE_CENTER : MODE_HANDLE,
        signX = dim === Y ? null : signsX[type],
        signY = dim === X ? null : signsY[type],
        state = local(that),
        extent = state.extent,
        selection = state.selection,
        W = extent[0][0],
        w0,
        w1,
        N = extent[0][1],
        n0,
        n1,
        E = extent[1][0],
        e0,
        e1,
        S = extent[1][1],
        s0,
        s1,
        dx = 0,
        dy = 0,
        moving,
        shifting = signX && signY && keys && _d3Selection.event.shiftKey,
        lockX,
        lockY,
        pointer = _d3Selection.event.touches ? toucher(_d3Selection.event.changedTouches[0].identifier) : _d3Selection.mouse,
        point0 = pointer(that),
        point = point0,
        emit = emitter(that, arguments, true).beforestart();

    if (type === "overlay") {
      if (selection) moving = true;
      state.selection = selection = [[w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]], [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]];
    } else {
      w0 = selection[0][0];
      n0 = selection[0][1];
      e0 = selection[1][0];
      s0 = selection[1][1];
    }

    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group = (0, _d3Selection.select)(that).attr("pointer-events", "none");
    var overlay = group.selectAll(".overlay").attr("cursor", cursors[type]);

    if (_d3Selection.event.touches) {
      emit.moved = moved;
      emit.ended = ended;
    } else {
      var view = (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
      if (keys) view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
      (0, _d3Drag.dragDisable)(_d3Selection.event.view);
    }

    (0, _noevent.nopropagation)();
    (0, _d3Transition.interrupt)(that);
    redraw.call(that);
    emit.start();

    function moved() {
      var point1 = pointer(that);

      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;else lockX = true;
      }

      point = point1;
      moving = true;
      (0, _noevent.default)();
      move();
    }

    function move() {
      var t;
      dx = point[0] - point0[0];
      dy = point[1] - point0[1];

      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG:
          {
            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
            break;
          }

        case MODE_HANDLE:
          {
            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
            break;
          }

        case MODE_CENTER:
          {
            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
            break;
          }
      }

      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
      }

      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
      }

      if (state.selection) selection = state.selection; // May be set by brush.move!

      if (lockX) w1 = selection[0][0], e1 = selection[1][0];
      if (lockY) n1 = selection[0][1], s1 = selection[1][1];

      if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }

    function ended() {
      (0, _noevent.nopropagation)();

      if (_d3Selection.event.touches) {
        if (_d3Selection.event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function () {
          touchending = null;
        }, 500); // Ghost clicks are delayed!
      } else {
        (0, _d3Drag.dragEnable)(_d3Selection.event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }

      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!

      if (empty(selection)) state.selection = null, redraw.call(that);
      emit.end();
    }

    function keydowned() {
      switch (_d3Selection.event.keyCode) {
        case 16:
          {
            // SHIFT
            shifting = signX && signY;
            break;
          }

        case 18:
          {
            // ALT
            if (mode === MODE_HANDLE) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
              move();
            }

            break;
          }

        case 32:
          {
            // SPACE; takes priority over ALT
            if (mode === MODE_HANDLE || mode === MODE_CENTER) {
              if (signX < 0) e0 = e1 - dx;else if (signX > 0) w0 = w1 - dx;
              if (signY < 0) s0 = s1 - dy;else if (signY > 0) n0 = n1 - dy;
              mode = MODE_SPACE;
              overlay.attr("cursor", cursors.selection);
              move();
            }

            break;
          }

        default:
          return;
      }

      (0, _noevent.default)();
    }

    function keyupped() {
      switch (_d3Selection.event.keyCode) {
        case 16:
          {
            // SHIFT
            if (shifting) {
              lockX = lockY = shifting = false;
              move();
            }

            break;
          }

        case 18:
          {
            // ALT
            if (mode === MODE_CENTER) {
              if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
              move();
            }

            break;
          }

        case 32:
          {
            // SPACE
            if (mode === MODE_SPACE) {
              if (_d3Selection.event.altKey) {
                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                mode = MODE_CENTER;
              } else {
                if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;
                if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;
                mode = MODE_HANDLE;
              }

              overlay.attr("cursor", cursors[type]);
              move();
            }

            break;
          }

        default:
          return;
      }

      (0, _noevent.default)();
    }
  }

  function touchmoved() {
    emitter(this, arguments).moved();
  }

  function touchended() {
    emitter(this, arguments).ended();
  }

  function initialize() {
    var state = this.__brush || {
      selection: null
    };
    state.extent = number2(extent.apply(this, arguments));
    state.dim = dim;
    return state;
  }

  brush.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constant.default)(number2(_)), brush) : extent;
  };

  brush.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), brush) : filter;
  };

  brush.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), brush) : touchable;
  };

  brush.handleSize = function (_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
  };

  brush.keyModifiers = function (_) {
    return arguments.length ? (keys = !!_, brush) : keys;
  };

  brush.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
  };

  return brush;
}
},{"d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-drag":"../node_modules/d3-drag/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","d3-transition":"../node_modules/d3-transition/src/index.js","./constant.js":"../node_modules/d3-brush/src/constant.js","./event.js":"../node_modules/d3-brush/src/event.js","./noevent.js":"../node_modules/d3-brush/src/noevent.js"}],"../node_modules/d3-brush/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "brush", {
  enumerable: true,
  get: function () {
    return _brush.default;
  }
});
Object.defineProperty(exports, "brushX", {
  enumerable: true,
  get: function () {
    return _brush.brushX;
  }
});
Object.defineProperty(exports, "brushY", {
  enumerable: true,
  get: function () {
    return _brush.brushY;
  }
});
Object.defineProperty(exports, "brushSelection", {
  enumerable: true,
  get: function () {
    return _brush.brushSelection;
  }
});

var _brush = _interopRequireWildcard(require("./brush.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./brush.js":"../node_modules/d3-brush/src/brush.js"}],"../node_modules/d3-chord/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.max = exports.tau = exports.halfPi = exports.pi = exports.sin = exports.cos = void 0;
var cos = Math.cos;
exports.cos = cos;
var sin = Math.sin;
exports.sin = sin;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = pi * 2;
exports.tau = tau;
var max = Math.max;
exports.max = max;
},{}],"../node_modules/d3-chord/src/chord.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _math = require("./math");

function compareValue(compare) {
  return function (a, b) {
    return compare(a.source.value + a.target.value, b.source.value + b.target.value);
  };
}

function _default() {
  var padAngle = 0,
      sortGroups = null,
      sortSubgroups = null,
      sortChords = null;

  function chord(matrix) {
    var n = matrix.length,
        groupSums = [],
        groupIndex = (0, _d3Array.range)(n),
        subgroupIndex = [],
        chords = [],
        groups = chords.groups = new Array(n),
        subgroups = new Array(n * n),
        k,
        x,
        x0,
        dx,
        i,
        j; // Compute the sum.

    k = 0, i = -1;

    while (++i < n) {
      x = 0, j = -1;

      while (++j < n) {
        x += matrix[i][j];
      }

      groupSums.push(x);
      subgroupIndex.push((0, _d3Array.range)(n));
      k += x;
    } // Sort groups…


    if (sortGroups) groupIndex.sort(function (a, b) {
      return sortGroups(groupSums[a], groupSums[b]);
    }); // Sort subgroups…

    if (sortSubgroups) subgroupIndex.forEach(function (d, i) {
      d.sort(function (a, b) {
        return sortSubgroups(matrix[i][a], matrix[i][b]);
      });
    }); // Convert the sum to scaling factor for [0, 2pi].
    // TODO Allow start and end angle to be specified?
    // TODO Allow padding to be specified as percentage?

    k = (0, _math.max)(0, _math.tau - padAngle * n) / k;
    dx = k ? padAngle : _math.tau / n; // Compute the start and end angle for each group and subgroup.
    // Note: Opera has a bug reordering object literal properties!

    x = 0, i = -1;

    while (++i < n) {
      x0 = x, j = -1;

      while (++j < n) {
        var di = groupIndex[i],
            dj = subgroupIndex[di][j],
            v = matrix[di][dj],
            a0 = x,
            a1 = x += v * k;
        subgroups[dj * n + di] = {
          index: di,
          subindex: dj,
          startAngle: a0,
          endAngle: a1,
          value: v
        };
      }

      groups[di] = {
        index: di,
        startAngle: x0,
        endAngle: x,
        value: groupSums[di]
      };
      x += dx;
    } // Generate chords for each (non-empty) subgroup-subgroup link.


    i = -1;

    while (++i < n) {
      j = i - 1;

      while (++j < n) {
        var source = subgroups[j * n + i],
            target = subgroups[i * n + j];

        if (source.value || target.value) {
          chords.push(source.value < target.value ? {
            source: target,
            target: source
          } : {
            source: source,
            target: target
          });
        }
      }
    }

    return sortChords ? chords.sort(sortChords) : chords;
  }

  chord.padAngle = function (_) {
    return arguments.length ? (padAngle = (0, _math.max)(0, _), chord) : padAngle;
  };

  chord.sortGroups = function (_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
  };

  chord.sortSubgroups = function (_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
  };

  chord.sortChords = function (_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };

  return chord;
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./math":"../node_modules/d3-chord/src/math.js"}],"../node_modules/d3-chord/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"../node_modules/d3-chord/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-path/src/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath

  this._ = "";
}

function path() {
  return new Path();
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function (x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function () {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function (x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function (x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function (x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

            if (Math.abs(t01 - 1) > epsilon) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function (x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      } // Is this arc empty? We’re done.


    if (!r) return; // Does the angle go the wrong way? Flip the direction.

    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.

    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function (x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function () {
    return this._;
  }
};
var _default = path;
exports.default = _default;
},{}],"../node_modules/d3-path/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "path", {
  enumerable: true,
  get: function () {
    return _path.default;
  }
});

var _path = _interopRequireDefault(require("./path.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./path.js":"../node_modules/d3-path/src/path.js"}],"../node_modules/d3-chord/src/ribbon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

var _d3Path = require("d3-path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultSource(d) {
  return d.source;
}

function defaultTarget(d) {
  return d.target;
}

function defaultRadius(d) {
  return d.radius;
}

function defaultStartAngle(d) {
  return d.startAngle;
}

function defaultEndAngle(d) {
  return d.endAngle;
}

function _default() {
  var source = defaultSource,
      target = defaultTarget,
      radius = defaultRadius,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      context = null;

  function ribbon() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv),
        sr = +radius.apply(this, (argv[0] = s, argv)),
        sa0 = startAngle.apply(this, argv) - _math.halfPi,
        sa1 = endAngle.apply(this, argv) - _math.halfPi,
        sx0 = sr * (0, _math.cos)(sa0),
        sy0 = sr * (0, _math.sin)(sa0),
        tr = +radius.apply(this, (argv[0] = t, argv)),
        ta0 = startAngle.apply(this, argv) - _math.halfPi,
        ta1 = endAngle.apply(this, argv) - _math.halfPi;

    if (!context) context = buffer = (0, _d3Path.path)();
    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);

    if (sa0 !== ta0 || sa1 !== ta1) {
      // TODO sr !== tr?
      context.quadraticCurveTo(0, 0, tr * (0, _math.cos)(ta0), tr * (0, _math.sin)(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }

    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  ribbon.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : radius;
  };

  ribbon.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : startAngle;
  };

  ribbon.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : endAngle;
  };

  ribbon.source = function (_) {
    return arguments.length ? (source = _, ribbon) : source;
  };

  ribbon.target = function (_) {
    return arguments.length ? (target = _, ribbon) : target;
  };

  ribbon.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;
  };

  return ribbon;
}
},{"./array":"../node_modules/d3-chord/src/array.js","./constant":"../node_modules/d3-chord/src/constant.js","./math":"../node_modules/d3-chord/src/math.js","d3-path":"../node_modules/d3-path/src/index.js"}],"../node_modules/d3-chord/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "chord", {
  enumerable: true,
  get: function () {
    return _chord.default;
  }
});
Object.defineProperty(exports, "ribbon", {
  enumerable: true,
  get: function () {
    return _ribbon.default;
  }
});

var _chord = _interopRequireDefault(require("./chord"));

var _ribbon = _interopRequireDefault(require("./ribbon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./chord":"../node_modules/d3-chord/src/chord.js","./ribbon":"../node_modules/d3-chord/src/ribbon.js"}],"../node_modules/d3-collection/src/map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.prefix = void 0;
var prefix = "$";
exports.prefix = prefix;

function Map() {}

Map.prototype = map.prototype = {
  constructor: Map,
  has: function (key) {
    return prefix + key in this;
  },
  get: function (key) {
    return this[prefix + key];
  },
  set: function (key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function (key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function () {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function () {
    var keys = [];

    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));

    return keys;
  },
  values: function () {
    var values = [];

    for (var property in this) if (property[0] === prefix) values.push(this[property]);

    return values;
  },
  entries: function () {
    var entries = [];

    for (var property in this) if (property[0] === prefix) entries.push({
      key: property.slice(1),
      value: this[property]
    });

    return entries;
  },
  size: function () {
    var size = 0;

    for (var property in this) if (property[0] === prefix) ++size;

    return size;
  },
  empty: function () {
    for (var property in this) if (property[0] === prefix) return false;

    return true;
  },
  each: function (f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map(object, f) {
  var map = new Map(); // Copy constructor.

  if (object instanceof Map) object.each(function (value, key) {
    map.set(key, value);
  }); // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
      var i = -1,
          n = object.length,
          o;
      if (f == null) while (++i < n) map.set(i, object[i]);else while (++i < n) map.set(f(o = object[i], i, object), o);
    } // Convert object to map.
    else if (object) for (var key in object) map.set(key, object[key]);
  return map;
}

var _default = map;
exports.default = _default;
},{}],"../node_modules/d3-collection/src/nest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _map = _interopRequireDefault(require("./map"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array.sort(sortValues);
      return rollup != null ? rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = (0, _map.default)(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function (values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });
    return result;
  }

  function entries(map, depth) {
    if (++depth > keys.length) return map;
    var array,
        sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map.entries();else array = [], map.each(function (v, k) {
      array.push({
        key: k,
        values: entries(v, depth)
      });
    });
    return sortKey != null ? array.sort(function (a, b) {
      return sortKey(a.key, b.key);
    }) : array;
  }

  return nest = {
    object: function (array) {
      return apply(array, 0, createObject, setObject);
    },
    map: function (array) {
      return apply(array, 0, createMap, setMap);
    },
    entries: function (array) {
      return entries(apply(array, 0, createMap, setMap), 0);
    },
    key: function (d) {
      keys.push(d);
      return nest;
    },
    sortKeys: function (order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    },
    sortValues: function (order) {
      sortValues = order;
      return nest;
    },
    rollup: function (f) {
      rollup = f;
      return nest;
    }
  };
}

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return (0, _map.default)();
}

function setMap(map, key, value) {
  map.set(key, value);
}
},{"./map":"../node_modules/d3-collection/src/map.js"}],"../node_modules/d3-collection/src/set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _map = _interopRequireWildcard(require("./map"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Set() {}

var proto = _map.default.prototype;
Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function (value) {
    value += "";
    this[_map.prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set(); // Copy constructor.

  if (object instanceof Set) object.each(function (value) {
    set.add(value);
  }); // Otherwise, assume it’s an array.
  else if (object) {
      var i = -1,
          n = object.length;
      if (f == null) while (++i < n) set.add(object[i]);else while (++i < n) set.add(f(object[i], i, object));
    }
  return set;
}

var _default = set;
exports.default = _default;
},{"./map":"../node_modules/d3-collection/src/map.js"}],"../node_modules/d3-collection/src/keys.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var keys = [];

  for (var key in map) keys.push(key);

  return keys;
}
},{}],"../node_modules/d3-collection/src/values.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var values = [];

  for (var key in map) values.push(map[key]);

  return values;
}
},{}],"../node_modules/d3-collection/src/entries.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var entries = [];

  for (var key in map) entries.push({
    key: key,
    value: map[key]
  });

  return entries;
}
},{}],"../node_modules/d3-collection/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "nest", {
  enumerable: true,
  get: function () {
    return _nest.default;
  }
});
Object.defineProperty(exports, "set", {
  enumerable: true,
  get: function () {
    return _set.default;
  }
});
Object.defineProperty(exports, "map", {
  enumerable: true,
  get: function () {
    return _map.default;
  }
});
Object.defineProperty(exports, "keys", {
  enumerable: true,
  get: function () {
    return _keys.default;
  }
});
Object.defineProperty(exports, "values", {
  enumerable: true,
  get: function () {
    return _values.default;
  }
});
Object.defineProperty(exports, "entries", {
  enumerable: true,
  get: function () {
    return _entries.default;
  }
});

var _nest = _interopRequireDefault(require("./nest"));

var _set = _interopRequireDefault(require("./set"));

var _map = _interopRequireDefault(require("./map"));

var _keys = _interopRequireDefault(require("./keys"));

var _values = _interopRequireDefault(require("./values"));

var _entries = _interopRequireDefault(require("./entries"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./nest":"../node_modules/d3-collection/src/nest.js","./set":"../node_modules/d3-collection/src/set.js","./map":"../node_modules/d3-collection/src/map.js","./keys":"../node_modules/d3-collection/src/keys.js","./values":"../node_modules/d3-collection/src/values.js","./entries":"../node_modules/d3-collection/src/entries.js"}],"../node_modules/d3-contour/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
},{}],"../node_modules/d3-contour/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a - b;
}
},{}],"../node_modules/d3-contour/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring) {
  var i = 0,
      n = ring.length,
      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];

  return area;
}
},{}],"../node_modules/d3-contour/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-contour/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring, hole) {
  var i = -1,
      n = hole.length,
      c;

  while (++i < n) if (c = ringContains(ring, hole[i])) return c;

  return 0;
}

function ringContains(ring, point) {
  var x = point[0],
      y = point[1],
      contains = -1;

  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i],
        xi = pi[0],
        yi = pi[1],
        pj = ring[j],
        xj = pj[0],
        yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
  }

  return contains;
}

function segmentContains(a, b, c) {
  var i;
  return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}
},{}],"../node_modules/d3-contour/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"../node_modules/d3-contour/src/contours.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _ascending = _interopRequireDefault(require("./ascending"));

var _area = _interopRequireDefault(require("./area"));

var _constant = _interopRequireDefault(require("./constant"));

var _contains = _interopRequireDefault(require("./contains"));

var _noop = _interopRequireDefault(require("./noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []];

function _default() {
  var dx = 1,
      dy = 1,
      threshold = _d3Array.thresholdSturges,
      smooth = smoothLinear;

  function contours(values) {
    var tz = threshold(values); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var domain = (0, _d3Array.extent)(values),
          start = domain[0],
          stop = domain[1];
      tz = (0, _d3Array.tickStep)(start, stop, tz);
      tz = (0, _d3Array.range)(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
    } else {
      tz = tz.slice().sort(_ascending.default);
    }

    return tz.map(function (value) {
      return contour(values, value);
    });
  } // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js


  function contour(values, value) {
    var polygons = [],
        holes = [];
    isorings(values, value, function (ring) {
      smooth(ring, values, value);
      if ((0, _area.default)(ring) > 0) polygons.push([ring]);else holes.push(ring);
    });
    holes.forEach(function (hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if ((0, _contains.default)((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });
    return {
      type: "MultiPolygon",
      value: value,
      coordinates: polygons
    };
  } // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js


  function isorings(values, value, callback) {
    var fragmentByStart = new Array(),
        fragmentByEnd = new Array(),
        x,
        y,
        t0,
        t1,
        t2,
        t3; // Special case for the first row (y = -1, t2 = t3 = 0).

    x = y = -1;
    t1 = values[0] >= value;
    cases[t1 << 1].forEach(stitch);

    while (++x < dx - 1) {
      t0 = t1, t1 = values[x + 1] >= value;
      cases[t0 | t1 << 1].forEach(stitch);
    }

    cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.

    while (++y < dy - 1) {
      x = -1;
      t1 = values[y * dx + dx] >= value;
      t2 = values[y * dx] >= value;
      cases[t1 << 1 | t2 << 2].forEach(stitch);

      while (++x < dx - 1) {
        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }

      cases[t1 | t2 << 3].forEach(stitch);
    } // Special case for the last row (y = dy - 1, t0 = t1 = 0).


    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);

    while (++x < dx - 1) {
      t3 = t2, t2 = values[y * dx + x + 1] >= value;
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }

    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f,
          g;

      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {
              start: f.start,
              end: g.end,
              ring: f.ring.concat(g.ring)
            };
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {
              start: g.start,
              end: f.end,
              ring: g.ring.concat(f.ring)
            };
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
          start: startIndex,
          end: endIndex,
          ring: [start, end]
        };
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function (point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v0,
          v1 = values[yt * dx + xt];

      if (x > 0 && x < dx && xt === x) {
        v0 = values[yt * dx + xt - 1];
        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
      }

      if (y > 0 && y < dy && yt === y) {
        v0 = values[(yt - 1) * dx + xt];
        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
      }
    });
  }

  contours.contour = contour;

  contours.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };

  contours.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), contours) : threshold;
  };

  contours.smooth = function (_) {
    return arguments.length ? (smooth = _ ? smoothLinear : _noop.default, contours) : smooth === smoothLinear;
  };

  return contours;
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./array":"../node_modules/d3-contour/src/array.js","./ascending":"../node_modules/d3-contour/src/ascending.js","./area":"../node_modules/d3-contour/src/area.js","./constant":"../node_modules/d3-contour/src/constant.js","./contains":"../node_modules/d3-contour/src/contains.js","./noop":"../node_modules/d3-contour/src/noop.js"}],"../node_modules/d3-contour/src/blur.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blurX = blurX;
exports.blurY = blurY;

// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurX(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var j = 0; j < m; ++j) {
    for (var i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source.data[i + j * n];
      }

      if (i >= r) {
        if (i >= w) {
          sr -= source.data[i - w + j * n];
        }

        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
      }
    }
  }
} // TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.


function blurY(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var i = 0; i < n; ++i) {
    for (var j = 0, sr = 0; j < m + r; ++j) {
      if (j < m) {
        sr += source.data[i + j * n];
      }

      if (j >= r) {
        if (j >= w) {
          sr -= source.data[i + (j - w) * n];
        }

        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
      }
    }
  }
}
},{}],"../node_modules/d3-contour/src/density.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _blur = require("./blur");

var _constant = _interopRequireDefault(require("./constant"));

var _contours = _interopRequireDefault(require("./contours"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultX(d) {
  return d[0];
}

function defaultY(d) {
  return d[1];
}

function defaultWeight() {
  return 1;
}

function _default() {
  var x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20,
      // blur radius
  k = 2,
      // log2(grid cell size)
  o = r * 3,
      // grid offset, to pad for blur
  n = dx + o * 2 >> k,
      // grid width
  m = dy + o * 2 >> k,
      // grid height
  threshold = (0, _constant.default)(20);

  function density(data) {
    var values0 = new Float32Array(n * m),
        values1 = new Float32Array(n * m);
    data.forEach(function (d, i, data) {
      var xi = +x(d, i, data) + o >> k,
          yi = +y(d, i, data) + o >> k,
          wi = +weight(d, i, data);

      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
        values0[xi + yi * n] += wi;
      }
    }); // TODO Optimize.

    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    var tz = threshold(values0); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var stop = (0, _d3Array.max)(values0);
      tz = (0, _d3Array.tickStep)(0, stop, tz);
      tz = (0, _d3Array.range)(0, Math.floor(stop / tz) * tz, tz);
      tz.shift();
    }

    return (0, _contours.default)().thresholds(tz).size([n, m])(values0).map(transform);
  }

  function transform(geometry) {
    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.

    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  } // TODO Optimize.


  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
  }

  function resize() {
    o = r * 3;
    n = dx + o * 2 >> k;
    m = dy + o * 2 >> k;
    return density;
  }

  density.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : x;
  };

  density.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : y;
  };

  density.weight = function (_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : weight;
  };

  density.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };

  density.cellSize = function (_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k = Math.floor(Math.log(_) / Math.LN2), resize();
  };

  density.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), density) : threshold;
  };

  density.bandwidth = function (_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
  };

  return density;
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./array":"../node_modules/d3-contour/src/array.js","./blur":"../node_modules/d3-contour/src/blur.js","./constant":"../node_modules/d3-contour/src/constant.js","./contours":"../node_modules/d3-contour/src/contours.js"}],"../node_modules/d3-contour/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "contours", {
  enumerable: true,
  get: function () {
    return _contours.default;
  }
});
Object.defineProperty(exports, "contourDensity", {
  enumerable: true,
  get: function () {
    return _density.default;
  }
});

var _contours = _interopRequireDefault(require("./contours"));

var _density = _interopRequireDefault(require("./density"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./contours":"../node_modules/d3-contour/src/contours.js","./density":"../node_modules/d3-contour/src/density.js"}],"../node_modules/d3-dsv/src/dsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function (name, i) {
    return JSON.stringify(name) + ": d[" + i + "] || \"\"";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function (row, i) {
    return f(object(row), i, columns);
  };
} // Compute unique columns in order of discovery.


function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];
  rows.forEach(function (row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}

function pad(value, width) {
  var s = value + "",
      length = s.length;
  return length < width ? new Array(width - length + 1).join(0) + s : s;
}

function formatYear(year) {
  return year < 0 ? "-" + pad(-year, 6) : year > 9999 ? "+" + pad(year, 6) : pad(year, 4);
}

function formatDate(date) {
  var hours = date.getUTCHours(),
      minutes = date.getUTCMinutes(),
      seconds = date.getUTCSeconds(),
      milliseconds = date.getUTCMilliseconds();
  return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear(), 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z" : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z" : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z" : "");
}

function _default(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert,
        columns,
        rows = parseRows(text, function (row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [],
        // output rows
    N = text.length,
        I = 0,
        // current character index
    n = 0,
        // current line number
    t,
        // current token
    eof = N <= 0,
        // current token followed by EOF?
    eol = false; // current token followed by EOL?
    // Strip the trailing newline.

    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL; // Unescape quotes.

      var i,
          j = I,
          c;

      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);

        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      } // Find next delimiter or newline.


      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        } else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      } // Return last token before EOF.


      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];

      while (t !== EOL && t !== EOF) row.push(t), t = token();

      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function preformatBody(rows, columns) {
    return rows.map(function (row) {
      return columns.map(function (column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }

  function formatBody(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(value) {
    return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\"" : value;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatBody: formatBody,
    formatRows: formatRows,
    formatRow: formatRow,
    formatValue: formatValue
  };
}
},{}],"../node_modules/d3-dsv/src/csv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csvFormatValue = exports.csvFormatRow = exports.csvFormatRows = exports.csvFormatBody = exports.csvFormat = exports.csvParseRows = exports.csvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var csv = (0, _dsv.default)(",");
var csvParse = csv.parse;
exports.csvParse = csvParse;
var csvParseRows = csv.parseRows;
exports.csvParseRows = csvParseRows;
var csvFormat = csv.format;
exports.csvFormat = csvFormat;
var csvFormatBody = csv.formatBody;
exports.csvFormatBody = csvFormatBody;
var csvFormatRows = csv.formatRows;
exports.csvFormatRows = csvFormatRows;
var csvFormatRow = csv.formatRow;
exports.csvFormatRow = csvFormatRow;
var csvFormatValue = csv.formatValue;
exports.csvFormatValue = csvFormatValue;
},{"./dsv.js":"../node_modules/d3-dsv/src/dsv.js"}],"../node_modules/d3-dsv/src/tsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tsvFormatValue = exports.tsvFormatRow = exports.tsvFormatRows = exports.tsvFormatBody = exports.tsvFormat = exports.tsvParseRows = exports.tsvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tsv = (0, _dsv.default)("\t");
var tsvParse = tsv.parse;
exports.tsvParse = tsvParse;
var tsvParseRows = tsv.parseRows;
exports.tsvParseRows = tsvParseRows;
var tsvFormat = tsv.format;
exports.tsvFormat = tsvFormat;
var tsvFormatBody = tsv.formatBody;
exports.tsvFormatBody = tsvFormatBody;
var tsvFormatRows = tsv.formatRows;
exports.tsvFormatRows = tsvFormatRows;
var tsvFormatRow = tsv.formatRow;
exports.tsvFormatRow = tsvFormatRow;
var tsvFormatValue = tsv.formatValue;
exports.tsvFormatValue = tsvFormatValue;
},{"./dsv.js":"../node_modules/d3-dsv/src/dsv.js"}],"../node_modules/d3-dsv/src/autoType.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = autoType;

function autoType(object) {
  for (var key in object) {
    var value = object[key].trim(),
        number,
        m;
    if (!value) value = null;else if (value === "true") value = true;else if (value === "false") value = false;else if (value === "NaN") value = NaN;else if (!isNaN(number = +value)) value = number;else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
      if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
      value = new Date(value);
    } else continue;
    object[key] = value;
  }

  return object;
} // https://github.com/d3/d3-dsv/issues/45


var fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();
},{}],"../node_modules/d3-dsv/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dsvFormat", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csvParse", {
  enumerable: true,
  get: function () {
    return _csv.csvParse;
  }
});
Object.defineProperty(exports, "csvParseRows", {
  enumerable: true,
  get: function () {
    return _csv.csvParseRows;
  }
});
Object.defineProperty(exports, "csvFormat", {
  enumerable: true,
  get: function () {
    return _csv.csvFormat;
  }
});
Object.defineProperty(exports, "csvFormatBody", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatBody;
  }
});
Object.defineProperty(exports, "csvFormatRows", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatRows;
  }
});
Object.defineProperty(exports, "csvFormatRow", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatRow;
  }
});
Object.defineProperty(exports, "csvFormatValue", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatValue;
  }
});
Object.defineProperty(exports, "tsvParse", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParse;
  }
});
Object.defineProperty(exports, "tsvParseRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParseRows;
  }
});
Object.defineProperty(exports, "tsvFormat", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormat;
  }
});
Object.defineProperty(exports, "tsvFormatBody", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatBody;
  }
});
Object.defineProperty(exports, "tsvFormatRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatRows;
  }
});
Object.defineProperty(exports, "tsvFormatRow", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatRow;
  }
});
Object.defineProperty(exports, "tsvFormatValue", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatValue;
  }
});
Object.defineProperty(exports, "autoType", {
  enumerable: true,
  get: function () {
    return _autoType.default;
  }
});

var _dsv = _interopRequireDefault(require("./dsv.js"));

var _csv = require("./csv.js");

var _tsv = require("./tsv.js");

var _autoType = _interopRequireDefault(require("./autoType.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dsv.js":"../node_modules/d3-dsv/src/dsv.js","./csv.js":"../node_modules/d3-dsv/src/csv.js","./tsv.js":"../node_modules/d3-dsv/src/tsv.js","./autoType.js":"../node_modules/d3-dsv/src/autoType.js"}],"../node_modules/d3-fetch/src/blob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseBlob(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.blob();
}

function _default(input, init) {
  return fetch(input, init).then(responseBlob);
}
},{}],"../node_modules/d3-fetch/src/buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseArrayBuffer(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}

function _default(input, init) {
  return fetch(input, init).then(responseArrayBuffer);
}
},{}],"../node_modules/d3-fetch/src/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseText(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.text();
}

function _default(input, init) {
  return fetch(input, init).then(responseText);
}
},{}],"../node_modules/d3-fetch/src/dsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dsv;
exports.tsv = exports.csv = void 0;

var _d3Dsv = require("d3-dsv");

var _text = _interopRequireDefault(require("./text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dsvParse(parse) {
  return function (input, init, row) {
    if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
    return (0, _text.default)(input, init).then(function (response) {
      return parse(response, row);
    });
  };
}

function dsv(delimiter, input, init, row) {
  if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
  var format = (0, _d3Dsv.dsvFormat)(delimiter);
  return (0, _text.default)(input, init).then(function (response) {
    return format.parse(response, row);
  });
}

var csv = dsvParse(_d3Dsv.csvParse);
exports.csv = csv;
var tsv = dsvParse(_d3Dsv.tsvParse);
exports.tsv = tsv;
},{"d3-dsv":"../node_modules/d3-dsv/src/index.js","./text":"../node_modules/d3-fetch/src/text.js"}],"../node_modules/d3-fetch/src/image.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(input, init) {
  return new Promise(function (resolve, reject) {
    var image = new Image();

    for (var key in init) image[key] = init[key];

    image.onerror = reject;

    image.onload = function () {
      resolve(image);
    };

    image.src = input;
  });
}
},{}],"../node_modules/d3-fetch/src/json.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseJson(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.json();
}

function _default(input, init) {
  return fetch(input, init).then(responseJson);
}
},{}],"../node_modules/d3-fetch/src/xml.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.svg = exports.html = exports.default = void 0;

var _text = _interopRequireDefault(require("./text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parser(type) {
  return function (input, init) {
    return (0, _text.default)(input, init).then(function (text) {
      return new DOMParser().parseFromString(text, type);
    });
  };
}

var _default = parser("application/xml");

exports.default = _default;
var html = parser("text/html");
exports.html = html;
var svg = parser("image/svg+xml");
exports.svg = svg;
},{"./text":"../node_modules/d3-fetch/src/text.js"}],"../node_modules/d3-fetch/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "blob", {
  enumerable: true,
  get: function () {
    return _blob.default;
  }
});
Object.defineProperty(exports, "buffer", {
  enumerable: true,
  get: function () {
    return _buffer.default;
  }
});
Object.defineProperty(exports, "dsv", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csv", {
  enumerable: true,
  get: function () {
    return _dsv.csv;
  }
});
Object.defineProperty(exports, "tsv", {
  enumerable: true,
  get: function () {
    return _dsv.tsv;
  }
});
Object.defineProperty(exports, "image", {
  enumerable: true,
  get: function () {
    return _image.default;
  }
});
Object.defineProperty(exports, "json", {
  enumerable: true,
  get: function () {
    return _json.default;
  }
});
Object.defineProperty(exports, "text", {
  enumerable: true,
  get: function () {
    return _text.default;
  }
});
Object.defineProperty(exports, "xml", {
  enumerable: true,
  get: function () {
    return _xml.default;
  }
});
Object.defineProperty(exports, "html", {
  enumerable: true,
  get: function () {
    return _xml.html;
  }
});
Object.defineProperty(exports, "svg", {
  enumerable: true,
  get: function () {
    return _xml.svg;
  }
});

var _blob = _interopRequireDefault(require("./blob"));

var _buffer = _interopRequireDefault(require("./buffer"));

var _dsv = _interopRequireWildcard(require("./dsv"));

var _image = _interopRequireDefault(require("./image"));

var _json = _interopRequireDefault(require("./json"));

var _text = _interopRequireDefault(require("./text"));

var _xml = _interopRequireWildcard(require("./xml"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./blob":"../node_modules/d3-fetch/src/blob.js","./buffer":"../node_modules/d3-fetch/src/buffer.js","./dsv":"../node_modules/d3-fetch/src/dsv.js","./image":"../node_modules/d3-fetch/src/image.js","./json":"../node_modules/d3-fetch/src/json.js","./text":"../node_modules/d3-fetch/src/text.js","./xml":"../node_modules/d3-fetch/src/xml.js"}],"../node_modules/d3-force/src/center.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  var nodes;
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function (_) {
    nodes = _;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{}],"../node_modules/d3-force/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-force/src/jiggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return (Math.random() - 0.5) * 1e-6;
}
},{}],"../node_modules/d3-quadtree/src/add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.addAll = addAll;

function _default(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
}

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {
    data: d
  },
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.

  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  } // Is the new point is exactly coincident with the existing point?


  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.

  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));

  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d,
      i,
      n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity; // Compute the points and their extent.

  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  } // If there were no (valid) points, abort.


  if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.

  this.cover(x0, y0).cover(x1, y1); // Add the new points.

  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}
},{}],"../node_modules/d3-quadtree/src/cover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1; // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!

  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  } // Otherwise, double repeatedly to cover.
  else {
      var z = x1 - x0,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        i = (y < y0) << 1 | x < x0;
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;

        switch (i) {
          case 0:
            x1 = x0 + z, y1 = y0 + z;
            break;

          case 1:
            x0 = x1 - z, y1 = y0 + z;
            break;

          case 2:
            x1 = x0 + z, y0 = y1 - z;
            break;

          case 3:
            x0 = x1 - z, y0 = y1 - z;
            break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}
},{}],"../node_modules/d3-quadtree/src/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var data = [];
  this.visit(function (node) {
    if (!node.length) do data.push(node.data); while (node = node.next);
  });
  return data;
}
},{}],"../node_modules/d3-quadtree/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
}
},{}],"../node_modules/d3-quadtree/src/quad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}
},{}],"../node_modules/d3-quadtree/src/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;
  if (node) quads.push(new _quad.default(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {
    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.

    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;
      quads.push(new _quad.default(node[3], xm, ym, x2, y2), new _quad.default(node[2], x1, ym, xm, y2), new _quad.default(node[1], xm, y1, x2, ym), new _quad.default(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.

      if (i = (y >= ym) << 1 | x >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;

        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
  }

  return data;
}
},{"./quad.js":"../node_modules/d3-quadtree/src/quad.js"}],"../node_modules/d3-quadtree/src/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.removeAll = removeAll;

function _default(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return this; // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.

  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
  } // Find the point to remove.

  while (node.data !== d) if (!(previous = node, node = node.next)) return this;

  if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.

  if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.

  if (!parent) return this._root = next, this; // Remove this leaf.

  next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.

  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer) retainer[j] = node;else this._root = node;
  }

  return this;
}

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);

  return this;
}
},{}],"../node_modules/d3-quadtree/src/root.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return this._root;
}
},{}],"../node_modules/d3-quadtree/src/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.visit(function (node) {
    if (!node.length) do ++size; while (node = node.next);
  });
  return size;
}
},{}],"../node_modules/d3-quadtree/src/visit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      q,
      node = this._root,
      child,
      x0,
      y0,
      x1,
      y1;
  if (node) quads.push(new _quad.default(node, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
    }
  }

  return this;
}
},{"./quad.js":"../node_modules/d3-quadtree/src/quad.js"}],"../node_modules/d3-quadtree/src/visitAfter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      next = [],
      q;
  if (this._root) quads.push(new _quad.default(this._root, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    var node = q.node;

    if (node.length) {
      var child,
          x0 = q.x0,
          y0 = q.y0,
          x1 = q.x1,
          y1 = q.y1,
          xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
    }

    next.push(q);
  }

  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }

  return this;
}
},{"./quad.js":"../node_modules/d3-quadtree/src/quad.js"}],"../node_modules/d3-quadtree/src/x.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultX = defaultX;
exports.default = _default;

function defaultX(d) {
  return d[0];
}

function _default(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}
},{}],"../node_modules/d3-quadtree/src/y.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultY = defaultY;
exports.default = _default;

function defaultY(d) {
  return d[1];
}

function _default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}
},{}],"../node_modules/d3-quadtree/src/quadtree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quadtree;

var _add = _interopRequireWildcard(require("./add.js"));

var _cover = _interopRequireDefault(require("./cover.js"));

var _data = _interopRequireDefault(require("./data.js"));

var _extent = _interopRequireDefault(require("./extent.js"));

var _find = _interopRequireDefault(require("./find.js"));

var _remove = _interopRequireWildcard(require("./remove.js"));

var _root = _interopRequireDefault(require("./root.js"));

var _size = _interopRequireDefault(require("./size.js"));

var _visit = _interopRequireDefault(require("./visit.js"));

var _visitAfter = _interopRequireDefault(require("./visitAfter.js"));

var _x = _interopRequireWildcard(require("./x.js"));

var _y = _interopRequireWildcard(require("./y.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? _x.defaultX : x, y == null ? _y.defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {
    data: leaf.data
  },
      next = copy;

  while (leaf = leaf.next) next = next.next = {
    data: leaf.data
  };

  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function () {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;
  if (!node) return copy;
  if (!node.length) return copy._root = leaf_copy(node), copy;
  nodes = [{
    source: node,
    target: copy._root = new Array(4)
  }];

  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({
          source: child,
          target: node.target[i] = new Array(4)
        });else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = _add.default;
treeProto.addAll = _add.addAll;
treeProto.cover = _cover.default;
treeProto.data = _data.default;
treeProto.extent = _extent.default;
treeProto.find = _find.default;
treeProto.remove = _remove.default;
treeProto.removeAll = _remove.removeAll;
treeProto.root = _root.default;
treeProto.size = _size.default;
treeProto.visit = _visit.default;
treeProto.visitAfter = _visitAfter.default;
treeProto.x = _x.default;
treeProto.y = _y.default;
},{"./add.js":"../node_modules/d3-quadtree/src/add.js","./cover.js":"../node_modules/d3-quadtree/src/cover.js","./data.js":"../node_modules/d3-quadtree/src/data.js","./extent.js":"../node_modules/d3-quadtree/src/extent.js","./find.js":"../node_modules/d3-quadtree/src/find.js","./remove.js":"../node_modules/d3-quadtree/src/remove.js","./root.js":"../node_modules/d3-quadtree/src/root.js","./size.js":"../node_modules/d3-quadtree/src/size.js","./visit.js":"../node_modules/d3-quadtree/src/visit.js","./visitAfter.js":"../node_modules/d3-quadtree/src/visitAfter.js","./x.js":"../node_modules/d3-quadtree/src/x.js","./y.js":"../node_modules/d3-quadtree/src/y.js"}],"../node_modules/d3-quadtree/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "quadtree", {
  enumerable: true,
  get: function () {
    return _quadtree.default;
  }
});

var _quadtree = _interopRequireDefault(require("./quadtree.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./quadtree.js":"../node_modules/d3-quadtree/src/quadtree.js"}],"../node_modules/d3-force/src/collide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Quadtree = require("d3-quadtree");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function x(d) {
  return d.x + d.vx;
}

function y(d) {
  return d.y + d.vy;
}

function _default(radius) {
  var nodes,
      radii,
      strength = 1,
      iterations = 1;
  if (typeof radius !== "function") radius = (0, _constant.default)(radius == null ? 1 : +radius);

  function force() {
    var i,
        n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = (0, _d3Quadtree.quadtree)(nodes, x, y).visitAfter(prepare);

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data,
          rj = quad.r,
          r = ri + rj;

      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;

          if (l < r * r) {
            if (x === 0) x = (0, _jiggle.default)(), l += x * x;
            if (y === 0) y = (0, _jiggle.default)(), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }

        return;
      }

      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];

    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    radii = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js","./jiggle":"../node_modules/d3-force/src/jiggle.js","d3-quadtree":"../node_modules/d3-quadtree/src/index.js"}],"../node_modules/d3-force/src/link.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Collection = require("d3-collection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function index(d) {
  return d.index;
}

function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}

function _default(links) {
  var id = index,
      strength = defaultStrength,
      strengths,
      distance = (0, _constant.default)(30),
      distances,
      nodes,
      count,
      bias,
      iterations = 1;
  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || (0, _jiggle.default)();
        y = target.y + target.vy - source.y - source.vy || (0, _jiggle.default)();
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        m = links.length,
        nodeById = (0, _d3Collection.map)(nodes, id),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.links = function (_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function (_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeStrength(), force) : strength;
  };

  force.distance = function (_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeDistance(), force) : distance;
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js","./jiggle":"../node_modules/d3-force/src/jiggle.js","d3-collection":"../node_modules/d3-collection/src/index.js"}],"../node_modules/d3-force/src/simulation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Collection = require("d3-collection");

var _d3Timer = require("d3-timer");

function x(d) {
  return d.x;
}

function y(d) {
  return d.y;
}

var initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5));

function _default(nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = (0, _d3Collection.map)(),
      stepper = (0, _d3Timer.timer)(step),
      event = (0, _d3Dispatch.dispatch)("tick", "end");
  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);

    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick(iterations) {
    var i,
        n = nodes.length,
        node;
    if (iterations === undefined) iterations = 1;

    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.each(function (force) {
        force(alpha);
      });

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null) node.x += node.vx *= velocityDecay;else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= velocityDecay;else node.y = node.fy, node.vy = 0;
      }
    }

    return simulation;
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null) node.x = node.fx;
      if (node.fy != null) node.y = node.fy;

      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i),
            angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }

      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }

  initializeNodes();
  return simulation = {
    tick: tick,
    restart: function () {
      return stepper.restart(step), simulation;
    },
    stop: function () {
      return stepper.stop(), simulation;
    },
    nodes: function (_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },
    alpha: function (_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function (_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function (_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function (_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function (_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    force: function (name, _) {
      return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function (x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;
      if (radius == null) radius = Infinity;else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },
    on: function (name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}
},{"d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-collection":"../node_modules/d3-collection/src/index.js","d3-timer":"../node_modules/d3-timer/src/index.js"}],"../node_modules/d3-force/src/manyBody.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Quadtree = require("d3-quadtree");

var _simulation = require("./simulation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var nodes,
      node,
      alpha,
      strength = (0, _constant.default)(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i,
        n = nodes.length,
        tree = (0, _d3Quadtree.quadtree)(nodes, _simulation.x, _simulation.y).visitAfter(accumulate);

    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    strengths = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
  }

  function accumulate(quad) {
    var strength = 0,
        q,
        c,
        weight = 0,
        x,
        y,
        i; // For internal nodes, accumulate forces from child quadrants.

    if (quad.length) {
      for (x = y = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = Math.abs(q.value))) {
          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
        }
      }

      quad.x = x / weight;
      quad.y = y / weight;
    } // For leaf nodes, accumulate forces from coincident quadrants.
    else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;

        do strength += strengths[q.data.index]; while (q = q.next);
      }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;
    var x = quad.x - node.x,
        y = quad.y - node.y,
        w = x2 - x1,
        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.

    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x === 0) x = (0, _jiggle.default)(), l += x * x;
        if (y === 0) y = (0, _jiggle.default)(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x * quad.value * alpha / l;
        node.vy += y * quad.value * alpha / l;
      }

      return true;
    } // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.


    if (quad.data !== node || quad.next) {
      if (x === 0) x = (0, _jiggle.default)(), l += x * x;
      if (y === 0) y = (0, _jiggle.default)(), l += y * y;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do if (quad.data !== node) {
      w = strengths[quad.data.index] * alpha / l;
      node.vx += x * w;
      node.vy += y * w;
    } while (quad = quad.next);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.distanceMin = function (_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function (_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function (_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js","./jiggle":"../node_modules/d3-force/src/jiggle.js","d3-quadtree":"../node_modules/d3-quadtree/src/index.js","./simulation":"../node_modules/d3-force/src/simulation.js"}],"../node_modules/d3-force/src/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius, x, y) {
  var nodes,
      strength = (0, _constant.default)(0.1),
      strengths,
      radiuses;
  if (typeof radius !== "function") radius = (0, _constant.default)(+radius);
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force(alpha) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
      var node = nodes[i],
          dx = node.x - x || 1e-6,
          dy = node.y - y || 1e-6,
          r = Math.sqrt(dx * dx + dy * dy),
          k = (radiuses[i] - r) * strengths[i] * alpha / r;
      node.vx += dx * k;
      node.vy += dy * k;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    radiuses = new Array(n);

    for (i = 0; i < n; ++i) {
      radiuses[i] = +radius(nodes[i], i, nodes);
      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _, initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js"}],"../node_modules/d3-force/src/x.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      xz;
  if (typeof x !== "function") x = (0, _constant.default)(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : x;
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js"}],"../node_modules/d3-force/src/y.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(y) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      yz;
  if (typeof y !== "function") y = (0, _constant.default)(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : y;
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js"}],"../node_modules/d3-force/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "forceCenter", {
  enumerable: true,
  get: function () {
    return _center.default;
  }
});
Object.defineProperty(exports, "forceCollide", {
  enumerable: true,
  get: function () {
    return _collide.default;
  }
});
Object.defineProperty(exports, "forceLink", {
  enumerable: true,
  get: function () {
    return _link.default;
  }
});
Object.defineProperty(exports, "forceManyBody", {
  enumerable: true,
  get: function () {
    return _manyBody.default;
  }
});
Object.defineProperty(exports, "forceRadial", {
  enumerable: true,
  get: function () {
    return _radial.default;
  }
});
Object.defineProperty(exports, "forceSimulation", {
  enumerable: true,
  get: function () {
    return _simulation.default;
  }
});
Object.defineProperty(exports, "forceX", {
  enumerable: true,
  get: function () {
    return _x.default;
  }
});
Object.defineProperty(exports, "forceY", {
  enumerable: true,
  get: function () {
    return _y.default;
  }
});

var _center = _interopRequireDefault(require("./center"));

var _collide = _interopRequireDefault(require("./collide"));

var _link = _interopRequireDefault(require("./link"));

var _manyBody = _interopRequireDefault(require("./manyBody"));

var _radial = _interopRequireDefault(require("./radial"));

var _simulation = _interopRequireDefault(require("./simulation"));

var _x = _interopRequireDefault(require("./x"));

var _y = _interopRequireDefault(require("./y"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./center":"../node_modules/d3-force/src/center.js","./collide":"../node_modules/d3-force/src/collide.js","./link":"../node_modules/d3-force/src/link.js","./manyBody":"../node_modules/d3-force/src/manyBody.js","./radial":"../node_modules/d3-force/src/radial.js","./simulation":"../node_modules/d3-force/src/simulation.js","./x":"../node_modules/d3-force/src/x.js","./y":"../node_modules/d3-force/src/y.js"}],"../node_modules/d3-format/src/formatDecimal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function _default(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}
},{}],"../node_modules/d3-format/src/exponent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  return x = (0, _formatDecimal.default)(Math.abs(x)), x ? x[1] : NaN;
}
},{"./formatDecimal.js":"../node_modules/d3-format/src/formatDecimal.js"}],"../node_modules/d3-format/src/formatGroup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}
},{}],"../node_modules/d3-format/src/formatNumerals.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}
},{}],"../node_modules/d3-format/src/formatSpecifier.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatSpecifier;
exports.FormatSpecifier = FormatSpecifier;
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
},{}],"../node_modules/d3-format/src/formatTrim.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function _default(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      default:
        if (!+s[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }

  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
},{}],"../node_modules/d3-format/src/formatPrefixAuto.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.prefixExponent = void 0;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixExponent;
exports.prefixExponent = prefixExponent;

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (exports.prefixExponent = prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimal.default)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}
},{"./formatDecimal.js":"../node_modules/d3-format/src/formatDecimal.js"}],"../node_modules/d3-format/src/formatRounded.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
},{"./formatDecimal.js":"../node_modules/d3-format/src/formatDecimal.js"}],"../node_modules/d3-format/src/formatTypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formatPrefixAuto = _interopRequireDefault(require("./formatPrefixAuto.js"));

var _formatRounded = _interopRequireDefault(require("./formatRounded.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  "%": function (x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function (x) {
    return Math.round(x).toString(2);
  },
  "c": function (x) {
    return x + "";
  },
  "d": function (x) {
    return Math.round(x).toString(10);
  },
  "e": function (x, p) {
    return x.toExponential(p);
  },
  "f": function (x, p) {
    return x.toFixed(p);
  },
  "g": function (x, p) {
    return x.toPrecision(p);
  },
  "o": function (x) {
    return Math.round(x).toString(8);
  },
  "p": function (x, p) {
    return (0, _formatRounded.default)(x * 100, p);
  },
  "r": _formatRounded.default,
  "s": _formatPrefixAuto.default,
  "X": function (x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function (x) {
    return Math.round(x).toString(16);
  }
};
exports.default = _default;
},{"./formatPrefixAuto.js":"../node_modules/d3-format/src/formatPrefixAuto.js","./formatRounded.js":"../node_modules/d3-format/src/formatRounded.js"}],"../node_modules/d3-format/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"../node_modules/d3-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

var _formatGroup = _interopRequireDefault(require("./formatGroup.js"));

var _formatNumerals = _interopRequireDefault(require("./formatNumerals.js"));

var _formatSpecifier = _interopRequireDefault(require("./formatSpecifier.js"));

var _formatTrim = _interopRequireDefault(require("./formatTrim.js"));

var _formatTypes = _interopRequireDefault(require("./formatTypes.js"));

var _formatPrefixAuto = require("./formatPrefixAuto.js");

var _identity = _interopRequireDefault(require("./identity.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var map = Array.prototype.map,
    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

function _default(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "-" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = (0, _formatSpecifier.default)(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type; // The "n" type is an alias for ",g".

    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = _formatTypes.default[type],
        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Perform the initial formatting.

        var valueNegative = value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero during formatting, treat as positive.

        if (valueNegative && +value === 0) valueNegative = false; // Compute the prefix and suffix.

        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;

        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;

        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;

        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}
},{"./exponent.js":"../node_modules/d3-format/src/exponent.js","./formatGroup.js":"../node_modules/d3-format/src/formatGroup.js","./formatNumerals.js":"../node_modules/d3-format/src/formatNumerals.js","./formatSpecifier.js":"../node_modules/d3-format/src/formatSpecifier.js","./formatTrim.js":"../node_modules/d3-format/src/formatTrim.js","./formatTypes.js":"../node_modules/d3-format/src/formatTypes.js","./formatPrefixAuto.js":"../node_modules/d3-format/src/formatPrefixAuto.js","./identity.js":"../node_modules/d3-format/src/identity.js"}],"../node_modules/d3-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.formatPrefix = exports.format = void 0;

var _locale = _interopRequireDefault(require("./locale.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var format;
exports.format = format;
var formatPrefix;
exports.formatPrefix = formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.format = format = locale.format;
  exports.formatPrefix = formatPrefix = locale.formatPrefix;
  return locale;
}
},{"./locale.js":"../node_modules/d3-format/src/locale.js"}],"../node_modules/d3-format/src/precisionFixed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step) {
  return Math.max(0, -(0, _exponent.default)(Math.abs(step)));
}
},{"./exponent.js":"../node_modules/d3-format/src/exponent.js"}],"../node_modules/d3-format/src/precisionPrefix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3 - (0, _exponent.default)(Math.abs(step)));
}
},{"./exponent.js":"../node_modules/d3-format/src/exponent.js"}],"../node_modules/d3-format/src/precisionRound.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, (0, _exponent.default)(max) - (0, _exponent.default)(step)) + 1;
}
},{"./exponent.js":"../node_modules/d3-format/src/exponent.js"}],"../node_modules/d3-format/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "formatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _defaultLocale.format;
  }
});
Object.defineProperty(exports, "formatPrefix", {
  enumerable: true,
  get: function () {
    return _defaultLocale.formatPrefix;
  }
});
Object.defineProperty(exports, "formatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "formatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.default;
  }
});
Object.defineProperty(exports, "FormatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.FormatSpecifier;
  }
});
Object.defineProperty(exports, "precisionFixed", {
  enumerable: true,
  get: function () {
    return _precisionFixed.default;
  }
});
Object.defineProperty(exports, "precisionPrefix", {
  enumerable: true,
  get: function () {
    return _precisionPrefix.default;
  }
});
Object.defineProperty(exports, "precisionRound", {
  enumerable: true,
  get: function () {
    return _precisionRound.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale.js"));

var _locale = _interopRequireDefault(require("./locale.js"));

var _formatSpecifier = _interopRequireWildcard(require("./formatSpecifier.js"));

var _precisionFixed = _interopRequireDefault(require("./precisionFixed.js"));

var _precisionPrefix = _interopRequireDefault(require("./precisionPrefix.js"));

var _precisionRound = _interopRequireDefault(require("./precisionRound.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./defaultLocale.js":"../node_modules/d3-format/src/defaultLocale.js","./locale.js":"../node_modules/d3-format/src/locale.js","./formatSpecifier.js":"../node_modules/d3-format/src/formatSpecifier.js","./precisionFixed.js":"../node_modules/d3-format/src/precisionFixed.js","./precisionPrefix.js":"../node_modules/d3-format/src/precisionPrefix.js","./precisionRound.js":"../node_modules/d3-format/src/precisionRound.js"}],"../node_modules/d3-geo/src/adder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/
function _default() {
  return new Adder();
}

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function () {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function (y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;else this.s = temp.t;
  },
  valueOf: function () {
    return this.s;
  }
};
var temp = new Adder();

function add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = a - av + (b - bv);
}
},{}],"../node_modules/d3-geo/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.haversin = haversin;
exports.tan = exports.sqrt = exports.sign = exports.sin = exports.pow = exports.log = exports.floor = exports.exp = exports.ceil = exports.cos = exports.atan2 = exports.atan = exports.abs = exports.radians = exports.degrees = exports.tau = exports.quarterPi = exports.halfPi = exports.pi = exports.epsilon2 = exports.epsilon = void 0;
var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var quarterPi = pi / 4;
exports.quarterPi = quarterPi;
var tau = pi * 2;
exports.tau = tau;
var degrees = 180 / pi;
exports.degrees = degrees;
var radians = pi / 180;
exports.radians = radians;
var abs = Math.abs;
exports.abs = abs;
var atan = Math.atan;
exports.atan = atan;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var ceil = Math.ceil;
exports.ceil = ceil;
var exp = Math.exp;
exports.exp = exp;
var floor = Math.floor;
exports.floor = floor;
var log = Math.log;
exports.log = log;
var pow = Math.pow;
exports.pow = pow;
var sin = Math.sin;
exports.sin = sin;

var sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};

exports.sign = sign;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var tan = Math.tan;
exports.tan = tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}
},{}],"../node_modules/d3-geo/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = noop;

function noop() {}
},{}],"../node_modules/d3-geo/src/stream.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function (object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function (object, stream) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function (object, stream) {
    stream.sphere();
  },
  Point: function (object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function (object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function (object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function (object, stream) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1,
      n = coordinates.length - closed,
      coordinate;
  stream.lineStart();

  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);

  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1,
      n = coordinates.length;
  stream.polygonStart();

  while (++i < n) streamLine(coordinates[i], stream, 1);

  stream.polygonEnd();
}

function _default(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}
},{}],"../node_modules/d3-geo/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.areaStream = exports.areaRingSum = void 0;

var _adder = _interopRequireDefault(require("./adder.js"));

var _math = require("./math.js");

var _noop = _interopRequireDefault(require("./noop.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaRingSum = (0, _adder.default)();
exports.areaRingSum = areaRingSum;
var areaSum = (0, _adder.default)(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? _math.tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = _noop.default;
  },
  sphere: function () {
    areaSum.add(_math.tau);
  }
};
exports.areaStream = areaStream;

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, cosPhi0 = (0, _math.cos)(phi = phi / 2 + _math.quarterPi), sinPhi0 = (0, _math.sin)(phi);
}

function areaPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  phi = phi / 2 + _math.quarterPi; // half the angular distance from south pole
  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).

  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = (0, _math.cos)(phi),
      sinPhi = (0, _math.sin)(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * (0, _math.cos)(adLambda),
      v = k * sdLambda * (0, _math.sin)(adLambda);
  areaRingSum.add((0, _math.atan2)(v, u)); // Advance the previous points.

  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

function _default(object) {
  areaSum.reset();
  (0, _stream.default)(object, areaStream);
  return areaSum * 2;
}
},{"./adder.js":"../node_modules/d3-geo/src/adder.js","./math.js":"../node_modules/d3-geo/src/math.js","./noop.js":"../node_modules/d3-geo/src/noop.js","./stream.js":"../node_modules/d3-geo/src/stream.js"}],"../node_modules/d3-geo/src/cartesian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spherical = spherical;
exports.cartesian = cartesian;
exports.cartesianDot = cartesianDot;
exports.cartesianCross = cartesianCross;
exports.cartesianAddInPlace = cartesianAddInPlace;
exports.cartesianScale = cartesianScale;
exports.cartesianNormalizeInPlace = cartesianNormalizeInPlace;

var _math = require("./math.js");

function spherical(cartesian) {
  return [(0, _math.atan2)(cartesian[1], cartesian[0]), (0, _math.asin)(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0],
      phi = spherical[1],
      cosPhi = (0, _math.cos)(phi);
  return [cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
} // TODO return a


function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
} // TODO return d


function cartesianNormalizeInPlace(d) {
  var l = (0, _math.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}
},{"./math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder.js"));

var _area = require("./area.js");

var _cartesian = require("./cartesian.js");

var _math = require("./math.js");

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lambda0,
    phi0,
    lambda1,
    phi1,
    // bounds
lambda2,
    // previous lambda-coordinate
lambda00,
    phi00,
    // first point
p0,
    // previous 3D point
deltaSum = (0, _adder.default)(),
    ranges,
    range;
var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function () {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();

    _area.areaStream.polygonStart();
  },
  polygonEnd: function () {
    _area.areaStream.polygonEnd();

    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (_area.areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > _math.epsilon) phi1 = 90;else if (deltaSum < -_math.epsilon) phi0 = -90;
    range[0] = lambda0, range[1] = lambda1;
  },
  sphere: function () {
    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = (0, _cartesian.cartesian)([lambda * _math.radians, phi * _math.radians]);

  if (p0) {
    var normal = (0, _cartesian.cartesianCross)(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = (0, _cartesian.cartesianCross)(equatorial, normal);
    (0, _cartesian.cartesianNormalizeInPlace)(inflection);
    inflection = (0, _cartesian.spherical)(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * _math.degrees * sign,
        phii,
        antimeridian = (0, _math.abs)(delta) > 180;

    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * _math.degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * _math.degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
      }
    } else {
      if (lambda1 >= lambda0) {
        if (lambda < lambda0) lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  }

  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add((0, _math.abs)(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00 = lambda, phi00 = phi;
  }

  _area.areaStream.point(lambda, phi);

  linePoint(lambda, phi);
}

function boundsRingStart() {
  _area.areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00, phi00);

  _area.areaStream.lineEnd();

  if ((0, _math.abs)(deltaSum) > _math.epsilon) lambda0 = -(lambda1 = 180);
  range[0] = lambda0, range[1] = lambda1;
  p0 = null;
} // Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.


function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

function _default(feature) {
  var i, n, a, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
  ranges = [];
  (0, _stream.default)(feature, boundsStream); // First, sort ranges by their minimum longitudes.

  if (n = ranges.length) {
    ranges.sort(rangeCompare); // Then, merge any ranges that overlap.

    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];

      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    } // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.


    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;
  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];
}
},{"./adder.js":"../node_modules/d3-geo/src/adder.js","./area.js":"../node_modules/d3-geo/src/area.js","./cartesian.js":"../node_modules/d3-geo/src/cartesian.js","./math.js":"../node_modules/d3-geo/src/math.js","./stream.js":"../node_modules/d3-geo/src/stream.js"}],"../node_modules/d3-geo/src/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math.js");

var _noop = _interopRequireDefault(require("./noop.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point
x0, y0, z0; // previous point

var centroidStream = {
  sphere: _noop.default,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
}; // Arithmetic mean of Cartesian vectors.

function centroidPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  centroidPointCartesian(cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      w = (0, _math.atan2)((0, _math.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
} // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).


function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = (0, _math.sqrt)(cx * cx + cy * cy + cz * cz),
      w = (0, _math.asin)(m),
      // line weight = angle
  v = m && -w / m; // area weight multiplier

  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function _default(object) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
  (0, _stream.default)(object, centroidStream);
  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z; // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.

  if (m < _math.epsilon2) {
    x = X1, y = Y1, z = Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.

    if (W1 < _math.epsilon) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z; // If the feature still has an undefined ccentroid, then return.

    if (m < _math.epsilon2) return [NaN, NaN];
  }

  return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.asin)(z / (0, _math.sqrt)(m)) * _math.degrees];
}
},{"./math.js":"../node_modules/d3-geo/src/math.js","./noop.js":"../node_modules/d3-geo/src/noop.js","./stream.js":"../node_modules/d3-geo/src/stream.js"}],"../node_modules/d3-geo/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-geo/src/compose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };
  return compose;
}
},{}],"../node_modules/d3-geo/src/rotation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateRadians = rotateRadians;
exports.default = _default;

var _compose = _interopRequireDefault(require("./compose.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rotationIdentity(lambda, phi) {
  return [(0, _math.abs)(lambda) > _math.pi ? lambda + Math.round(-lambda / _math.tau) * _math.tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= _math.tau) ? deltaPhi || deltaGamma ? (0, _compose.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}

function forwardRotationLambda(deltaLambda) {
  return function (lambda, phi) {
    return lambda += deltaLambda, [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = (0, _math.cos)(deltaPhi),
      sinDeltaPhi = (0, _math.sin)(deltaPhi),
      cosDeltaGamma = (0, _math.cos)(deltaGamma),
      sinDeltaGamma = (0, _math.sin)(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [(0, _math.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), (0, _math.asin)(k * cosDeltaGamma + y * sinDeltaGamma)];
  }

  rotation.invert = function (lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [(0, _math.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), (0, _math.asin)(k * cosDeltaPhi - x * sinDeltaPhi)];
  };

  return rotation;
}

function _default(rotate) {
  rotate = rotateRadians(rotate[0] * _math.radians, rotate[1] * _math.radians, rotate.length > 2 ? rotate[2] * _math.radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  }

  forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  };

  return forward;
}
},{"./compose.js":"../node_modules/d3-geo/src/compose.js","./math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleStream = circleStream;
exports.default = _default;

var _cartesian = require("./cartesian.js");

var _constant = _interopRequireDefault(require("./constant.js"));

var _math = require("./math.js");

var _rotation = require("./rotation.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = (0, _math.cos)(radius),
      sinRadius = (0, _math.sin)(radius),
      step = direction * delta;

  if (t0 == null) {
    t0 = radius + direction * _math.tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * _math.tau;
  }

  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = (0, _cartesian.spherical)([cosRadius, -sinRadius * (0, _math.cos)(t), -sinRadius * (0, _math.sin)(t)]);
    stream.point(point[0], point[1]);
  }
} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].


function circleRadius(cosRadius, point) {
  point = (0, _cartesian.cartesian)(point), point[0] -= cosRadius;
  (0, _cartesian.cartesianNormalizeInPlace)(point);
  var radius = (0, _math.acos)(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + _math.tau - _math.epsilon) % _math.tau;
}

function _default() {
  var center = (0, _constant.default)([0, 0]),
      radius = (0, _constant.default)(90),
      precision = (0, _constant.default)(6),
      ring,
      rotate,
      stream = {
    point: point
  };

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= _math.degrees, x[1] *= _math.degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * _math.radians,
        p = precision.apply(this, arguments) * _math.radians;

    ring = [];
    rotate = (0, _rotation.rotateRadians)(-c[0] * _math.radians, -c[1] * _math.radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {
      type: "Polygon",
      coordinates: [ring]
    };
    ring = rotate = null;
    return c;
  }

  circle.center = function (_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : (0, _constant.default)([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : radius;
  };

  circle.precision = function (_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : precision;
  };

  return circle;
}
},{"./cartesian.js":"../node_modules/d3-geo/src/cartesian.js","./constant.js":"../node_modules/d3-geo/src/constant.js","./math.js":"../node_modules/d3-geo/src/math.js","./rotation.js":"../node_modules/d3-geo/src/rotation.js"}],"../node_modules/d3-geo/src/clip/buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var lines = [],
      line;
  return {
    point: function (x, y) {
      line.push([x, y]);
    },
    lineStart: function () {
      lines.push(line = []);
    },
    lineEnd: _noop.default,
    rejoin: function () {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function () {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}
},{"../noop.js":"../node_modules/d3-geo/src/noop.js"}],"../node_modules/d3-geo/src/pointEqual.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math.js");

function _default(a, b) {
  return (0, _math.abs)(a[0] - b[0]) < _math.epsilon && (0, _math.abs)(a[1] - b[1]) < _math.epsilon;
}
},{"./math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/clip/rejoin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pointEqual = _interopRequireDefault(require("../pointEqual.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection

  this.e = entry; // is an entry?

  this.v = false; // visited

  this.n = this.p = null; // next & previous
} // A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.


function _default(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;
  segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n,
        p0 = segment[0],
        p1 = segment[n],
        x; // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.

    if ((0, _pointEqual.default)(p0, p1)) {
      stream.lineStart();

      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);

      stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;

    while (current.v) if ((current = current.n) === start) return;

    points = current.z;
    stream.lineStart();

    do {
      current.v = current.o.v = true;

      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }

        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;

          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }

        current = current.p;
      }

      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);

    stream.lineEnd();
  }
}

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;

  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }

  a.n = b = array[0];
  b.p = a;
}
},{"../pointEqual.js":"../node_modules/d3-geo/src/pointEqual.js"}],"../node_modules/d3-geo/src/polygonContains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder.js"));

var _cartesian = require("./cartesian.js");

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sum = (0, _adder.default)();

function longitude(point) {
  if ((0, _math.abs)(point[0]) <= _math.pi) return point[0];else return (0, _math.sign)(point[0]) * (((0, _math.abs)(point[0]) + _math.pi) % _math.tau - _math.pi);
}

function _default(polygon, point) {
  var lambda = longitude(point),
      phi = point[1],
      sinPhi = (0, _math.sin)(phi),
      normal = [(0, _math.sin)(lambda), -(0, _math.cos)(lambda), 0],
      angle = 0,
      winding = 0;
  sum.reset();
  if (sinPhi === 1) phi = _math.halfPi + _math.epsilon;else if (sinPhi === -1) phi = -_math.halfPi - _math.epsilon;

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = longitude(point0),
        phi0 = point0[1] / 2 + _math.quarterPi,
        sinPhi0 = (0, _math.sin)(phi0),
        cosPhi0 = (0, _math.cos)(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = longitude(point1),
          phi1 = point1[1] / 2 + _math.quarterPi,
          sinPhi1 = (0, _math.sin)(phi1),
          cosPhi1 = (0, _math.cos)(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > _math.pi,
          k = sinPhi0 * sinPhi1;
      sum.add((0, _math.atan2)(k * sign * (0, _math.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _math.cos)(absDelta)));
      angle += antimeridian ? delta + sign * _math.tau : delta; // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?

      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = (0, _cartesian.cartesianCross)((0, _cartesian.cartesian)(point0), (0, _cartesian.cartesian)(point1));
        (0, _cartesian.cartesianNormalizeInPlace)(arc);
        var intersection = (0, _cartesian.cartesianCross)(normal, arc);
        (0, _cartesian.cartesianNormalizeInPlace)(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _math.asin)(intersection[2]);

        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  } // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.


  return (angle < -_math.epsilon || angle < _math.epsilon && sum < -_math.epsilon) ^ winding & 1;
}
},{"./adder.js":"../node_modules/d3-geo/src/adder.js","./cartesian.js":"../node_modules/d3-geo/src/cartesian.js","./math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/clip/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _buffer = _interopRequireDefault(require("./buffer.js"));

var _rejoin = _interopRequireDefault(require("./rejoin.js"));

var _math = require("../math.js");

var _polygonContains = _interopRequireDefault(require("../polygonContains.js"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(pointVisible, clipLine, interpolate, start) {
  return function (sink) {
    var line = clipLine(sink),
        ringBuffer = (0, _buffer.default)(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;
    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function () {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = (0, _d3Array.merge)(segments);
        var startInside = (0, _polygonContains.default)(polygon, start);

        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }

        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function () {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n) return; // No intersections.

      if (clean & 1) {
        segment = ringSegments[0];

        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();

          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);

          sink.lineEnd();
        }

        return;
      } // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?


      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
}

function validSegment(segment) {
  return segment.length > 1;
} // Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.


function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - _math.halfPi - _math.epsilon : _math.halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - _math.halfPi - _math.epsilon : _math.halfPi - b[1]);
}
},{"./buffer.js":"../node_modules/d3-geo/src/clip/buffer.js","./rejoin.js":"../node_modules/d3-geo/src/clip/rejoin.js","../math.js":"../node_modules/d3-geo/src/math.js","../polygonContains.js":"../node_modules/d3-geo/src/polygonContains.js","d3-array":"../node_modules/d3-array/src/index.js"}],"../node_modules/d3-geo/src/clip/antimeridian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _index.default)(function () {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-_math.pi, -_math.halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.


exports.default = _default;

function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function () {
      stream.lineStart();
      clean = 1;
    },
    point: function (lambda1, phi1) {
      var sign1 = lambda1 > 0 ? _math.pi : -_math.pi,
          delta = (0, _math.abs)(lambda1 - lambda0);

      if ((0, _math.abs)(delta - _math.pi) < _math.epsilon) {
        // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? _math.halfPi : -_math.halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= _math.pi) {
        // line crosses antimeridian
        if ((0, _math.abs)(lambda0 - sign0) < _math.epsilon) lambda0 -= sign0 * _math.epsilon; // handle degeneracies

        if ((0, _math.abs)(lambda1 - sign1) < _math.epsilon) lambda1 -= sign1 * _math.epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }

      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function () {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function () {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = (0, _math.sin)(lambda0 - lambda1);
  return (0, _math.abs)(sinLambda0Lambda1) > _math.epsilon ? (0, _math.atan)(((0, _math.sin)(phi0) * (cosPhi1 = (0, _math.cos)(phi1)) * (0, _math.sin)(lambda1) - (0, _math.sin)(phi1) * (cosPhi0 = (0, _math.cos)(phi0)) * (0, _math.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;

  if (from == null) {
    phi = direction * _math.halfPi;
    stream.point(-_math.pi, phi);
    stream.point(0, phi);
    stream.point(_math.pi, phi);
    stream.point(_math.pi, 0);
    stream.point(_math.pi, -phi);
    stream.point(0, -phi);
    stream.point(-_math.pi, -phi);
    stream.point(-_math.pi, 0);
    stream.point(-_math.pi, phi);
  } else if ((0, _math.abs)(from[0] - to[0]) > _math.epsilon) {
    var lambda = from[0] < to[0] ? _math.pi : -_math.pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}
},{"./index.js":"../node_modules/d3-geo/src/clip/index.js","../math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/clip/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian.js");

var _circle = require("../circle.js");

var _math = require("../math.js");

var _pointEqual = _interopRequireDefault(require("../pointEqual.js"));

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius) {
  var cr = (0, _math.cos)(radius),
      delta = 6 * _math.radians,
      smallRadius = cr > 0,
      notHemisphere = (0, _math.abs)(cr) > _math.epsilon; // TODO optimise for this common case


  function interpolate(from, to, direction, stream) {
    (0, _circle.circleStream)(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return (0, _math.cos)(lambda) * (0, _math.cos)(phi) > cr;
  } // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.


  function clipLine(stream) {
    var point0, // previous point
    c0, // code for previous point
    v0, // visibility of previous point
    v00, // visibility of first point
    clean; // no intersections

    return {
      lineStart: function () {
        v00 = v0 = false;
        clean = 1;
      },
      point: function (lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? _math.pi : -_math.pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.
        // TODO ignore if not clipping polygons.

        if (v !== v0) {
          point2 = intersect(point0, point1);

          if (!point2 || (0, _pointEqual.default)(point0, point2) || (0, _pointEqual.default)(point1, point2)) {
            point1[0] += _math.epsilon;
            point1[1] += _math.epsilon;
            v = visible(point1[0], point1[1]);
          }
        }

        if (v !== v0) {
          clean = 0;

          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }

          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t; // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.

          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;

            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }

        if (v && (!point0 || !(0, _pointEqual.default)(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }

        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function () {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function () {
        return clean | (v00 && v0) << 1;
      }
    };
  } // Intersects the great circle between a and b with the clip circle.


  function intersect(a, b, two) {
    var pa = (0, _cartesian.cartesian)(a),
        pb = (0, _cartesian.cartesian)(b); // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

    var n1 = [1, 0, 0],
        // normal
    n2 = (0, _cartesian.cartesianCross)(pa, pb),
        n2n2 = (0, _cartesian.cartesianDot)(n2, n2),
        n1n2 = n2[0],
        // cartesianDot(n1, n2),
    determinant = n2n2 - n1n2 * n1n2; // Two polar points.

    if (!determinant) return !two && a;
    var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = (0, _cartesian.cartesianCross)(n1, n2),
        A = (0, _cartesian.cartesianScale)(n1, c1),
        B = (0, _cartesian.cartesianScale)(n2, c2);
    (0, _cartesian.cartesianAddInPlace)(A, B); // Solve |p(t)|^2 = 1.

    var u = n1xn2,
        w = (0, _cartesian.cartesianDot)(A, u),
        uu = (0, _cartesian.cartesianDot)(u, u),
        t2 = w * w - uu * ((0, _cartesian.cartesianDot)(A, A) - 1);
    if (t2 < 0) return;
    var t = (0, _math.sqrt)(t2),
        q = (0, _cartesian.cartesianScale)(u, (-w - t) / uu);
    (0, _cartesian.cartesianAddInPlace)(q, A);
    q = (0, _cartesian.spherical)(q);
    if (!two) return q; // Two intersection points.

    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;
    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = (0, _math.abs)(delta - _math.pi) < _math.epsilon,
        meridian = polar || delta < _math.epsilon;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _math.abs)(q[0] - lambda0) < _math.epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > _math.pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = (0, _cartesian.cartesianScale)(u, (-w + t) / uu);
      (0, _cartesian.cartesianAddInPlace)(q1, A);
      return [q, (0, _cartesian.spherical)(q1)];
    }
  } // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.


  function code(lambda, phi) {
    var r = smallRadius ? radius : _math.pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right

    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above

    return code;
  }

  return (0, _index.default)(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-_math.pi, radius - _math.pi]);
}
},{"../cartesian.js":"../node_modules/d3-geo/src/cartesian.js","../circle.js":"../node_modules/d3-geo/src/circle.js","../math.js":"../node_modules/d3-geo/src/math.js","../pointEqual.js":"../node_modules/d3-geo/src/pointEqual.js","./index.js":"../node_modules/d3-geo/src/clip/index.js"}],"../node_modules/d3-geo/src/clip/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}
},{}],"../node_modules/d3-geo/src/clip/rectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = clipRectangle;

var _math = require("../math.js");

var _buffer = _interopRequireDefault(require("./buffer.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _rejoin = _interopRequireDefault(require("./rejoin.js"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clipMax = 1e9,
    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {
  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0,
        a1 = 0;

    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return (0, _math.abs)(p[0] - x0) < _math.epsilon ? direction > 0 ? 0 : 3 : (0, _math.abs)(p[0] - x1) < _math.epsilon ? direction > 0 ? 2 : 1 : (0, _math.abs)(p[1] - y0) < _math.epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }

  return function (stream) {
    var activeStream = stream,
        bufferStream = (0, _buffer.default)(),
        segments,
        polygon,
        ring,
        x__,
        y__,
        v__,
        // first point
    x_,
        y_,
        v_,
        // previous point
    first,
        clean;
    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

          if (a1 <= y1) {
            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
          } else {
            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
          }
        }
      }

      return winding;
    } // Buffer geometry within a polygon and then clip it en masse.


    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = (0, _d3Array.merge)(segments)).length;

      if (cleanInside || visible) {
        stream.polygonStart();

        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }

        if (visible) {
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, stream);
        }

        stream.polygonEnd();
      }

      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    } // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.


    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }

      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);

      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;

        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

          if ((0, _line.default)(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }

            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }

      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./buffer.js":"../node_modules/d3-geo/src/clip/buffer.js","./line.js":"../node_modules/d3-geo/src/clip/line.js","./rejoin.js":"../node_modules/d3-geo/src/clip/rejoin.js","d3-array":"../node_modules/d3-array/src/index.js"}],"../node_modules/d3-geo/src/clip/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("./rectangle.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;
  return clip = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = (0, _rectangle.default)(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function (_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
}
},{"./rectangle.js":"../node_modules/d3-geo/src/clip/rectangle.js"}],"../node_modules/d3-geo/src/length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder.js"));

var _math = require("./math.js");

var _noop = _interopRequireDefault(require("./noop.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lambda0,
    sinPhi0,
    cosPhi0;
var lengthStream = {
  sphere: _noop.default,
  point: _noop.default,
  lineStart: lengthLineStart,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = _noop.default;
}

function lengthPointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, sinPhi0 = (0, _math.sin)(phi), cosPhi0 = (0, _math.cos)(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var sinPhi = (0, _math.sin)(phi),
      cosPhi = (0, _math.cos)(phi),
      delta = (0, _math.abs)(lambda - lambda0),
      cosDelta = (0, _math.cos)(delta),
      sinDelta = (0, _math.sin)(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add((0, _math.atan2)((0, _math.sqrt)(x * x + y * y), z));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}

function _default(object) {
  lengthSum.reset();
  (0, _stream.default)(object, lengthStream);
  return +lengthSum;
}
},{"./adder.js":"../node_modules/d3-geo/src/adder.js","./math.js":"../node_modules/d3-geo/src/math.js","./noop.js":"../node_modules/d3-geo/src/noop.js","./stream.js":"../node_modules/d3-geo/src/stream.js"}],"../node_modules/d3-geo/src/distance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _length = _interopRequireDefault(require("./length.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var coordinates = [null, null],
    object = {
  type: "LineString",
  coordinates: coordinates
};

function _default(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return (0, _length.default)(object);
}
},{"./length.js":"../node_modules/d3-geo/src/length.js"}],"../node_modules/d3-geo/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _polygonContains = _interopRequireDefault(require("./polygonContains.js"));

var _distance = _interopRequireDefault(require("./distance.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var containsObjectType = {
  Feature: function (object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function (object, point) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;

    return false;
  }
};
var containsGeometryType = {
  Sphere: function () {
    return true;
  },
  Point: function (object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPoint(coordinates[i], point)) return true;

    return false;
  },
  LineString: function (object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsLine(coordinates[i], point)) return true;

    return false;
  },
  Polygon: function (object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;

    return false;
  },
  GeometryCollection: function (object, point) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) if (containsGeometry(geometries[i], point)) return true;

    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
}

function containsPoint(coordinates, point) {
  return (0, _distance.default)(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ao, bo, ab;

  for (var i = 0, n = coordinates.length; i < n; i++) {
    bo = (0, _distance.default)(coordinates[i], point);
    if (bo === 0) return true;

    if (i > 0) {
      ab = (0, _distance.default)(coordinates[i], coordinates[i - 1]);
      if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < _math.epsilon2 * ab) return true;
    }

    ao = bo;
  }

  return false;
}

function containsPolygon(coordinates, point) {
  return !!(0, _polygonContains.default)(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * _math.radians, point[1] * _math.radians];
}

function _default(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);
}
},{"./polygonContains.js":"../node_modules/d3-geo/src/polygonContains.js","./distance.js":"../node_modules/d3-geo/src/distance.js","./math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/graticule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = graticule;
exports.graticule10 = graticule10;

var _d3Array = require("d3-array");

var _math = require("./math.js");

function graticuleX(y0, y1, dy) {
  var y = (0, _d3Array.range)(y0, y1 - _math.epsilon, dy).concat(y1);
  return function (x) {
    return y.map(function (y) {
      return [x, y];
    });
  };
}

function graticuleY(x0, x1, dx) {
  var x = (0, _d3Array.range)(x0, x1 - _math.epsilon, dx).concat(x1);
  return function (y) {
    return x.map(function (x) {
      return [x, y];
    });
  };
}

function graticule() {
  var x1,
      x0,
      X1,
      X0,
      y1,
      y0,
      Y1,
      Y0,
      dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      x,
      y,
      X,
      Y,
      precision = 2.5;

  function graticule() {
    return {
      type: "MultiLineString",
      coordinates: lines()
    };
  }

  function lines() {
    return (0, _d3Array.range)((0, _math.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, _d3Array.range)((0, _math.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, _d3Array.range)((0, _math.ceil)(x0 / dx) * dx, x1, dx).filter(function (x) {
      return (0, _math.abs)(x % DX) > _math.epsilon;
    }).map(x)).concat((0, _d3Array.range)((0, _math.ceil)(y0 / dy) * dy, y1, dy).filter(function (y) {
      return (0, _math.abs)(y % DY) > _math.epsilon;
    }).map(y));
  }

  graticule.lines = function () {
    return lines().map(function (coordinates) {
      return {
        type: "LineString",
        coordinates: coordinates
      };
    });
  };

  graticule.outline = function () {
    return {
      type: "Polygon",
      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
    };
  };

  graticule.extent = function (_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function (_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function (_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function (_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function (_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function (_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function (_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule.extentMajor([[-180, -90 + _math.epsilon], [180, 90 - _math.epsilon]]).extentMinor([[-180, -80 - _math.epsilon], [180, 80 + _math.epsilon]]);
}

function graticule10() {
  return graticule()();
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/interpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math.js");

function _default(a, b) {
  var x0 = a[0] * _math.radians,
      y0 = a[1] * _math.radians,
      x1 = b[0] * _math.radians,
      y1 = b[1] * _math.radians,
      cy0 = (0, _math.cos)(y0),
      sy0 = (0, _math.sin)(y0),
      cy1 = (0, _math.cos)(y1),
      sy1 = (0, _math.sin)(y1),
      kx0 = cy0 * (0, _math.cos)(x0),
      ky0 = cy0 * (0, _math.sin)(x0),
      kx1 = cy1 * (0, _math.cos)(x1),
      ky1 = cy1 * (0, _math.sin)(x1),
      d = 2 * (0, _math.asin)((0, _math.sqrt)((0, _math.haversin)(y1 - y0) + cy0 * cy1 * (0, _math.haversin)(x1 - x0))),
      k = (0, _math.sin)(d);
  var interpolate = d ? function (t) {
    var B = (0, _math.sin)(t *= d) / k,
        A = (0, _math.sin)(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.atan2)(z, (0, _math.sqrt)(x * x + y * y)) * _math.degrees];
  } : function () {
    return [x0 * _math.degrees, y0 * _math.degrees];
  };
  interpolate.distance = d;
  return interpolate;
}
},{"./math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"../node_modules/d3-geo/src/path/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder.js"));

var _math = require("../math.js");

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaSum = (0, _adder.default)(),
    areaRingSum = (0, _adder.default)(),
    x00,
    y00,
    x0,
    y0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = _noop.default;
    areaSum.add((0, _math.abs)(areaRingSum));
    areaRingSum.reset();
  },
  result: function () {
    var area = areaSum / 2;
    areaSum.reset();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

var _default = areaStream;
exports.default = _default;
},{"../adder.js":"../node_modules/d3-geo/src/adder.js","../math.js":"../node_modules/d3-geo/src/math.js","../noop.js":"../node_modules/d3-geo/src/noop.js"}],"../node_modules/d3-geo/src/path/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var x0 = Infinity,
    y0 = x0,
    x1 = -x0,
    y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default,
  result: function () {
    var bounds = [[x0, y0], [x1, y1]];
    x1 = y1 = -(y0 = x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0) x0 = x;
  if (x > x1) x1 = x;
  if (y < y0) y0 = y;
  if (y > y1) y1 = y;
}

var _default = boundsStream;
exports.default = _default;
},{"../noop.js":"../node_modules/d3-geo/src/noop.js"}],"../node_modules/d3-geo/src/path/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

// TODO Enforce positive area for exterior, negative area for interior?
var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00,
    y00,
    x0,
    y0;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function () {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0 = x, y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  centroidPoint(x0 = x, y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00, y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00 = x0 = x, y00 = y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  z = y0 * x - x0 * y;
  X2 += z * (x0 + x);
  Y2 += z * (y0 + y);
  Z2 += z * 3;
  centroidPoint(x0 = x, y0 = y);
}

var _default = centroidStream;
exports.default = _default;
},{"../math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/path/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathContext;

var _math = require("../math.js");

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function (_) {
    return this._radius = _, this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._context.moveTo(x, y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._context.lineTo(x, y);

          break;
        }

      default:
        {
          this._context.moveTo(x + this._radius, y);

          this._context.arc(x, y, this._radius, 0, _math.tau);

          break;
        }
    }
  },
  result: _noop.default
};
},{"../math.js":"../node_modules/d3-geo/src/math.js","../noop.js":"../node_modules/d3-geo/src/noop.js"}],"../node_modules/d3-geo/src/path/measure.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder.js"));

var _math = require("../math.js");

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lengthRing,
    x00,
    y00,
    x0,
    y0;
var lengthStream = {
  point: _noop.default,
  lineStart: function () {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function () {
    if (lengthRing) lengthPoint(x00, y00);
    lengthStream.point = _noop.default;
  },
  polygonStart: function () {
    lengthRing = true;
  },
  polygonEnd: function () {
    lengthRing = null;
  },
  result: function () {
    var length = +lengthSum;
    lengthSum.reset();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add((0, _math.sqrt)(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}

var _default = lengthStream;
exports.default = _default;
},{"../adder.js":"../node_modules/d3-geo/src/adder.js","../math.js":"../node_modules/d3-geo/src/math.js","../noop.js":"../node_modules/d3-geo/src/noop.js"}],"../node_modules/d3-geo/src/path/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathString;

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function (_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._string.push("M", x, ",", y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._string.push("L", x, ",", y);

          break;
        }

      default:
        {
          if (this._circle == null) this._circle = circle(this._radius);

          this._string.push("M", x, ",", y, this._circle);

          break;
        }
    }
  },
  result: function () {
    if (this._string.length) {
      var result = this._string.join("");

      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}
},{}],"../node_modules/d3-geo/src/path/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("../identity.js"));

var _stream = _interopRequireDefault(require("../stream.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _bounds = _interopRequireDefault(require("./bounds.js"));

var _centroid = _interopRequireDefault(require("./centroid.js"));

var _context = _interopRequireDefault(require("./context.js"));

var _measure = _interopRequireDefault(require("./measure.js"));

var _string = _interopRequireDefault(require("./string.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      (0, _stream.default)(object, projectionStream(contextStream));
    }

    return contextStream.result();
  }

  path.area = function (object) {
    (0, _stream.default)(object, projectionStream(_area.default));
    return _area.default.result();
  };

  path.measure = function (object) {
    (0, _stream.default)(object, projectionStream(_measure.default));
    return _measure.default.result();
  };

  path.bounds = function (object) {
    (0, _stream.default)(object, projectionStream(_bounds.default));
    return _bounds.default.result();
  };

  path.centroid = function (object) {
    (0, _stream.default)(object, projectionStream(_centroid.default));
    return _centroid.default.result();
  };

  path.projection = function (_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, _identity.default) : (projection = _).stream, path) : projection;
  };

  path.context = function (_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new _string.default()) : new _context.default(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function (_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}
},{"../identity.js":"../node_modules/d3-geo/src/identity.js","../stream.js":"../node_modules/d3-geo/src/stream.js","./area.js":"../node_modules/d3-geo/src/path/area.js","./bounds.js":"../node_modules/d3-geo/src/path/bounds.js","./centroid.js":"../node_modules/d3-geo/src/path/centroid.js","./context.js":"../node_modules/d3-geo/src/path/context.js","./measure.js":"../node_modules/d3-geo/src/path/measure.js","./string.js":"../node_modules/d3-geo/src/path/string.js"}],"../node_modules/d3-geo/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.transformer = transformer;

function _default(methods) {
  return {
    stream: transformer(methods)
  };
}

function transformer(methods) {
  return function (stream) {
    var s = new TransformStream();

    for (var key in methods) s[key] = methods[key];

    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function (x, y) {
    this.stream.point(x, y);
  },
  sphere: function () {
    this.stream.sphere();
  },
  lineStart: function () {
    this.stream.lineStart();
  },
  lineEnd: function () {
    this.stream.lineEnd();
  },
  polygonStart: function () {
    this.stream.polygonStart();
  },
  polygonEnd: function () {
    this.stream.polygonEnd();
  }
};
},{}],"../node_modules/d3-geo/src/projection/fit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fitExtent = fitExtent;
exports.fitSize = fitSize;
exports.fitWidth = fitWidth;
exports.fitHeight = fitHeight;

var _stream = _interopRequireDefault(require("../stream.js"));

var _bounds = _interopRequireDefault(require("../path/bounds.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  (0, _stream.default)(object, projection.stream(_bounds.default));
  fitBounds(_bounds.default.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function (b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

function fitWidth(projection, width, object) {
  return fit(projection, function (b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitHeight(projection, height, object) {
  return fit(projection, function (b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
},{"../stream.js":"../node_modules/d3-geo/src/stream.js","../path/bounds.js":"../node_modules/d3-geo/src/path/bounds.js"}],"../node_modules/d3-geo/src/projection/resample.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian.js");

var _math = require("../math.js");

var _transform = require("../transform.js");

var maxDepth = 16,
    // maximum depth of subdivision
cosMinDistance = (0, _math.cos)(30 * _math.radians); // cos(minimum angular distance)

function _default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}

function resampleNone(project) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample(project, delta2) {
  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;

    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = (0, _math.sqrt)(a * a + b * b + c * c),
          phi2 = (0, _math.asin)(c /= m),
          lambda2 = (0, _math.abs)((0, _math.abs)(c) - 1) < _math.epsilon || (0, _math.abs)(lambda0 - lambda1) < _math.epsilon ? (lambda0 + lambda1) / 2 : (0, _math.atan2)(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;

      if (dz * dz / d2 > delta2 // perpendicular projected distance
      || (0, _math.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }

  return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
    lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function () {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = (0, _cartesian.cartesian)([lambda, phi]),
          p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}
},{"../cartesian.js":"../node_modules/d3-geo/src/cartesian.js","../math.js":"../node_modules/d3-geo/src/math.js","../transform.js":"../node_modules/d3-geo/src/transform.js"}],"../node_modules/d3-geo/src/projection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = projection;
exports.projectionMutator = projectionMutator;

var _antimeridian = _interopRequireDefault(require("../clip/antimeridian.js"));

var _circle = _interopRequireDefault(require("../clip/circle.js"));

var _rectangle = _interopRequireDefault(require("../clip/rectangle.js"));

var _compose = _interopRequireDefault(require("../compose.js"));

var _identity = _interopRequireDefault(require("../identity.js"));

var _math = require("../math.js");

var _rotation = require("../rotation.js");

var _transform = require("../transform.js");

var _fit = require("./fit.js");

var _resample = _interopRequireDefault(require("./resample.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transformRadians = (0, _transform.transformer)({
  point: function (x, y) {
    this.stream.point(x * _math.radians, y * _math.radians);
  }
});

function transformRotate(rotate) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function scaleTranslate(k, dx, dy) {
  function transform(x, y) {
    return [dx + k * x, dy - k * y];
  }

  transform.invert = function (x, y) {
    return [(x - dx) / k, (dy - y) / k];
  };

  return transform;
}

function scaleTranslateRotate(k, dx, dy, alpha) {
  var cosAlpha = (0, _math.cos)(alpha),
      sinAlpha = (0, _math.sin)(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k;

  function transform(x, y) {
    return [a * x - b * y + dx, dy - b * x - a * y];
  }

  transform.invert = function (x, y) {
    return [ai * x - bi * y + ci, fi - bi * x - ai * y];
  };

  return transform;
}

function projection(project) {
  return projectionMutator(function () {
    return project;
  })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150,
      // scale
  x = 480,
      y = 250,
      // translate
  lambda = 0,
      phi = 0,
      // center
  deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      rotate,
      // pre-rotate
  alpha = 0,
      // post-rotate
  theta = null,
      preclip = _antimeridian.default,
      // pre-clip angle
  x0 = null,
      y0,
      x1,
      y1,
      postclip = _identity.default,
      // post-clip extent
  delta2 = 0.5,
      // precision
  projectResample,
      projectTransform,
      projectRotateTransform,
      cache,
      cacheStream;

  function projection(point) {
    return projectRotateTransform(point[0] * _math.radians, point[1] * _math.radians);
  }

  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * _math.degrees, point[1] * _math.degrees];
  }

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function (_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function (_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? (0, _circle.default)(theta = _ * _math.radians) : (theta = null, _antimeridian.default), reset()) : theta * _math.degrees;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * _math.radians, phi = _[1] % 360 * _math.radians, recenter()) : [lambda * _math.degrees, phi * _math.degrees];
  };

  projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * _math.radians, deltaPhi = _[1] % 360 * _math.radians, deltaGamma = _.length > 2 ? _[2] % 360 * _math.radians : 0, recenter()) : [deltaLambda * _math.degrees, deltaPhi * _math.degrees, deltaGamma * _math.degrees];
  };

  projection.angle = function (_) {
    return arguments.length ? (alpha = _ % 360 * _math.radians, recenter()) : alpha * _math.degrees;
  };

  projection.precision = function (_) {
    return arguments.length ? (projectResample = (0, _resample.default)(projectTransform, delta2 = _ * _), reset()) : (0, _math.sqrt)(delta2);
  };

  projection.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return (0, _fit.fitSize)(projection, size, object);
  };

  projection.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(projection, width, object);
  };

  projection.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(projection, height, object);
  };

  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
    rotate = (0, _rotation.rotateRadians)(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = (0, _compose.default)(project, transform);
    projectRotateTransform = (0, _compose.default)(rotate, projectTransform);
    projectResample = (0, _resample.default)(projectTransform, delta2);
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}
},{"../clip/antimeridian.js":"../node_modules/d3-geo/src/clip/antimeridian.js","../clip/circle.js":"../node_modules/d3-geo/src/clip/circle.js","../clip/rectangle.js":"../node_modules/d3-geo/src/clip/rectangle.js","../compose.js":"../node_modules/d3-geo/src/compose.js","../identity.js":"../node_modules/d3-geo/src/identity.js","../math.js":"../node_modules/d3-geo/src/math.js","../rotation.js":"../node_modules/d3-geo/src/rotation.js","../transform.js":"../node_modules/d3-geo/src/transform.js","./fit.js":"../node_modules/d3-geo/src/projection/fit.js","./resample.js":"../node_modules/d3-geo/src/projection/resample.js"}],"../node_modules/d3-geo/src/projection/conic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicProjection = conicProjection;

var _math = require("../math.js");

var _index = require("./index.js");

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = _math.pi / 3,
      m = (0, _index.projectionMutator)(projectAt),
      p = m(phi0, phi1);

  p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * _math.radians, phi1 = _[1] * _math.radians) : [phi0 * _math.degrees, phi1 * _math.degrees];
  };

  return p;
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./index.js":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/cylindricalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cylindricalEqualAreaRaw = cylindricalEqualAreaRaw;

var _math = require("../math.js");

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (0, _math.sin)(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.asin)(y * cosPhi0)];
  };

  return forward;
}
},{"../math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/projection/conicEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEqualAreaRaw = conicEqualAreaRaw;
exports.default = _default;

var _math = require("../math.js");

var _conic = require("./conic.js");

var _cylindricalEqualArea = require("./cylindricalEqualArea.js");

function conicEqualAreaRaw(y0, y1) {
  var sy0 = (0, _math.sin)(y0),
      n = (sy0 + (0, _math.sin)(y1)) / 2; // Are the parallels symmetrical around the Equator?

  if ((0, _math.abs)(n) < _math.epsilon) return (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(y0);
  var c = 1 + sy0 * (2 * n - sy0),
      r0 = (0, _math.sqrt)(c) / n;

  function project(x, y) {
    var r = (0, _math.sqrt)(c - 2 * n * (0, _math.sin)(y)) / n;
    return [r * (0, _math.sin)(x *= n), r0 - r * (0, _math.cos)(x)];
  }

  project.invert = function (x, y) {
    var r0y = r0 - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(r0y)) / n * (0, _math.sign)(r0y), (0, _math.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./conic.js":"../node_modules/d3-geo/src/projection/conic.js","./cylindricalEqualArea.js":"../node_modules/d3-geo/src/projection/cylindricalEqualArea.js"}],"../node_modules/d3-geo/src/projection/albers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _conicEqualArea.default)().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}
},{"./conicEqualArea.js":"../node_modules/d3-geo/src/projection/conicEqualArea.js"}],"../node_modules/d3-geo/src/projection/albersUsa.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("../math.js");

var _albers = _interopRequireDefault(require("./albers.js"));

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea.js"));

var _fit = require("./fit.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function (x, y) {
      var i = -1;

      while (++i < n) streams[i].point(x, y);
    },
    sphere: function () {
      var i = -1;

      while (++i < n) streams[i].sphere();
    },
    lineStart: function () {
      var i = -1;

      while (++i < n) streams[i].lineStart();
    },
    lineEnd: function () {
      var i = -1;

      while (++i < n) streams[i].lineEnd();
    },
    polygonStart: function () {
      var i = -1;

      while (++i < n) streams[i].polygonStart();
    },
    polygonEnd: function () {
      var i = -1;

      while (++i < n) streams[i].polygonEnd();
    }
  };
} // A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers


function _default() {
  var cache,
      cacheStream,
      lower48 = (0, _albers.default)(),
      lower48Point,
      alaska = (0, _conicEqualArea.default)().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      alaskaPoint,
      // EPSG:3338
  hawaii = (0, _conicEqualArea.default)().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      hawaiiPoint,
      // ESRI:102007
  point,
      pointStream = {
    point: function (x, y) {
      point = [x, y];
    }
  };

  function albersUsa(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function (coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
  };

  albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function (_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function (_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function (_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(),
        x = +_[0],
        y = +_[1];
    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + _math.epsilon, y + 0.120 * k + _math.epsilon], [x - 0.214 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + _math.epsilon, y + 0.166 * k + _math.epsilon], [x - 0.115 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    return reset();
  };

  albersUsa.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(albersUsa, extent, object);
  };

  albersUsa.fitSize = function (size, object) {
    return (0, _fit.fitSize)(albersUsa, size, object);
  };

  albersUsa.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(albersUsa, width, object);
  };

  albersUsa.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./albers.js":"../node_modules/d3-geo/src/projection/albers.js","./conicEqualArea.js":"../node_modules/d3-geo/src/projection/conicEqualArea.js","./fit.js":"../node_modules/d3-geo/src/projection/fit.js"}],"../node_modules/d3-geo/src/projection/azimuthal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.azimuthalRaw = azimuthalRaw;
exports.azimuthalInvert = azimuthalInvert;

var _math = require("../math.js");

function azimuthalRaw(scale) {
  return function (x, y) {
    var cx = (0, _math.cos)(x),
        cy = (0, _math.cos)(y),
        k = scale(cx * cy);
    return [k * cy * (0, _math.sin)(x), k * (0, _math.sin)(y)];
  };
}

function azimuthalInvert(angle) {
  return function (x, y) {
    var z = (0, _math.sqrt)(x * x + y * y),
        c = angle(z),
        sc = (0, _math.sin)(c),
        cc = (0, _math.cos)(c);
    return [(0, _math.atan2)(x * sc, z * cc), (0, _math.asin)(z && y * sc / z)];
  };
}
},{"../math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/projection/azimuthalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEqualAreaRaw = void 0;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEqualAreaRaw = (0, _azimuthal.azimuthalRaw)(function (cxcy) {
  return (0, _math.sqrt)(2 / (1 + cxcy));
});
exports.azimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
azimuthalEqualAreaRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.asin)(z / 2);
});

function _default() {
  return (0, _index.default)(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./azimuthal.js":"../node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/azimuthalEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEquidistantRaw = void 0;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEquidistantRaw = (0, _azimuthal.azimuthalRaw)(function (c) {
  return (c = (0, _math.acos)(c)) && c / (0, _math.sin)(c);
});
exports.azimuthalEquidistantRaw = azimuthalEquidistantRaw;
azimuthalEquidistantRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return z;
});

function _default() {
  return (0, _index.default)(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./azimuthal.js":"../node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/mercator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mercatorRaw = mercatorRaw;
exports.default = _default;
exports.mercatorProjection = mercatorProjection;

var _math = require("../math.js");

var _rotation = _interopRequireDefault(require("../rotation.js"));

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mercatorRaw(lambda, phi) {
  return [lambda, (0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2))];
}

mercatorRaw.invert = function (x, y) {
  return [x, 2 * (0, _math.atan)((0, _math.exp)(y)) - _math.halfPi];
};

function _default() {
  return mercatorProjection(mercatorRaw).scale(961 / _math.tau);
}

function mercatorProjection(project) {
  var m = (0, _index.default)(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null,
      y0,
      x1,
      y1; // clip extent

  m.scale = function (_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function (_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function (_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function (_) {
    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = _math.pi * scale(),
        t = m((0, _rotation.default)(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","../rotation.js":"../node_modules/d3-geo/src/rotation.js","./index.js":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/conicConformal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicConformalRaw = conicConformalRaw;
exports.default = _default;

var _math = require("../math.js");

var _conic = require("./conic.js");

var _mercator = require("./mercator.js");

function tany(y) {
  return (0, _math.tan)((_math.halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (0, _math.log)(cy0 / (0, _math.cos)(y1)) / (0, _math.log)(tany(y1) / tany(y0)),
      f = cy0 * (0, _math.pow)(tany(y0), n) / n;
  if (!n) return _mercator.mercatorRaw;

  function project(x, y) {
    if (f > 0) {
      if (y < -_math.halfPi + _math.epsilon) y = -_math.halfPi + _math.epsilon;
    } else {
      if (y > _math.halfPi - _math.epsilon) y = _math.halfPi - _math.epsilon;
    }

    var r = f / (0, _math.pow)(tany(y), n);
    return [r * (0, _math.sin)(n * x), f - r * (0, _math.cos)(n * x)];
  }

  project.invert = function (x, y) {
    var fy = f - y,
        r = (0, _math.sign)(n) * (0, _math.sqrt)(x * x + fy * fy);
    return [(0, _math.atan2)(x, (0, _math.abs)(fy)) / n * (0, _math.sign)(fy), 2 * (0, _math.atan)((0, _math.pow)(f / r, 1 / n)) - _math.halfPi];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicConformalRaw).scale(109.5).parallels([30, 30]);
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./conic.js":"../node_modules/d3-geo/src/projection/conic.js","./mercator.js":"../node_modules/d3-geo/src/projection/mercator.js"}],"../node_modules/d3-geo/src/projection/equirectangular.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equirectangularRaw = equirectangularRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

function _default() {
  return (0, _index.default)(equirectangularRaw).scale(152.63);
}
},{"./index.js":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/conicEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEquidistantRaw = conicEquidistantRaw;
exports.default = _default;

var _math = require("../math.js");

var _conic = require("./conic.js");

var _equirectangular = require("./equirectangular.js");

function conicEquidistantRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (cy0 - (0, _math.cos)(y1)) / (y1 - y0),
      g = cy0 / n + y0;
  if ((0, _math.abs)(n) < _math.epsilon) return _equirectangular.equirectangularRaw;

  function project(x, y) {
    var gy = g - y,
        nx = n * x;
    return [gy * (0, _math.sin)(nx), g - gy * (0, _math.cos)(nx)];
  }

  project.invert = function (x, y) {
    var gy = g - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(gy)) / n * (0, _math.sign)(gy), g - (0, _math.sign)(n) * (0, _math.sqrt)(x * x + gy * gy)];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./conic.js":"../node_modules/d3-geo/src/projection/conic.js","./equirectangular.js":"../node_modules/d3-geo/src/projection/equirectangular.js"}],"../node_modules/d3-geo/src/projection/equalEarth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalEarthRaw = equalEarthRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var A1 = 1.340264,
    A2 = -0.081106,
    A3 = 0.000893,
    A4 = 0.003796,
    M = (0, _math.sqrt)(3) / 2,
    iterations = 12;

function equalEarthRaw(lambda, phi) {
  var l = (0, _math.asin)(M * (0, _math.sin)(phi)),
      l2 = l * l,
      l6 = l2 * l2 * l2;
  return [lambda * (0, _math.cos)(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];
}

equalEarthRaw.invert = function (x, y) {
  var l = y,
      l2 = l * l,
      l6 = l2 * l2 * l2;

  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if ((0, _math.abs)(delta) < _math.epsilon2) break;
  }

  return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / (0, _math.cos)(l), (0, _math.asin)((0, _math.sin)(l) / M)];
};

function _default() {
  return (0, _index.default)(equalEarthRaw).scale(177.158);
}
},{"./index.js":"../node_modules/d3-geo/src/projection/index.js","../math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/projection/gnomonic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gnomonicRaw = gnomonicRaw;
exports.default = _default;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gnomonicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

gnomonicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.atan);

function _default() {
  return (0, _index.default)(gnomonicRaw).scale(144.049).clipAngle(60);
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./azimuthal.js":"../node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("../clip/rectangle.js"));

var _identity = _interopRequireDefault(require("../identity.js"));

var _transform = require("../transform.js");

var _fit = require("./fit.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function scaleTranslate(kx, ky, tx, ty) {
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? _identity.default : (0, _transform.transformer)({
    point: function (x, y) {
      this.stream.point(x * kx + tx, y * ky + ty);
    }
  });
}

function _default() {
  var k = 1,
      tx = 0,
      ty = 0,
      sx = 1,
      sy = 1,
      transform = _identity.default,
      // scale, translate and reflect
  x0 = null,
      y0,
      x1,
      y1,
      // clip extent
  postclip = _identity.default,
      cache,
      cacheStream,
      projection;

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return projection = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    },
    postclip: function (_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    },
    clipExtent: function (_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },
    scale: function (_) {
      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
    },
    translate: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },
    reflectX: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },
    reflectY: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },
    fitExtent: function (extent, object) {
      return (0, _fit.fitExtent)(projection, extent, object);
    },
    fitSize: function (size, object) {
      return (0, _fit.fitSize)(projection, size, object);
    },
    fitWidth: function (width, object) {
      return (0, _fit.fitWidth)(projection, width, object);
    },
    fitHeight: function (height, object) {
      return (0, _fit.fitHeight)(projection, height, object);
    }
  };
}
},{"../clip/rectangle.js":"../node_modules/d3-geo/src/clip/rectangle.js","../identity.js":"../node_modules/d3-geo/src/identity.js","../transform.js":"../node_modules/d3-geo/src/transform.js","./fit.js":"../node_modules/d3-geo/src/projection/fit.js"}],"../node_modules/d3-geo/src/projection/naturalEarth1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naturalEarth1Raw = naturalEarth1Raw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2;
  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
}

naturalEarth1Raw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta;

  do {
    var phi2 = phi * phi,
        phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
};

function _default() {
  return (0, _index.default)(naturalEarth1Raw).scale(175.295);
}
},{"./index.js":"../node_modules/d3-geo/src/projection/index.js","../math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/projection/orthographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orthographicRaw = orthographicRaw;
exports.default = _default;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function orthographicRaw(x, y) {
  return [(0, _math.cos)(y) * (0, _math.sin)(x), (0, _math.sin)(y)];
}

orthographicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.asin);

function _default() {
  return (0, _index.default)(orthographicRaw).scale(249.5).clipAngle(90 + _math.epsilon);
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./azimuthal.js":"../node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/stereographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stereographicRaw = stereographicRaw;
exports.default = _default;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stereographicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = 1 + (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

stereographicRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.atan)(z);
});

function _default() {
  return (0, _index.default)(stereographicRaw).scale(250).clipAngle(142);
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./azimuthal.js":"../node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/transverseMercator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transverseMercatorRaw = transverseMercatorRaw;
exports.default = _default;

var _math = require("../math.js");

var _mercator = require("./mercator.js");

function transverseMercatorRaw(lambda, phi) {
  return [(0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function (x, y) {
  return [-y, 2 * (0, _math.atan)((0, _math.exp)(x)) - _math.halfPi];
};

function _default() {
  var m = (0, _mercator.mercatorProjection)(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function (_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function (_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90]).scale(159.155);
}
},{"../math.js":"../node_modules/d3-geo/src/math.js","./mercator.js":"../node_modules/d3-geo/src/projection/mercator.js"}],"../node_modules/d3-geo/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "geoArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "geoBounds", {
  enumerable: true,
  get: function () {
    return _bounds.default;
  }
});
Object.defineProperty(exports, "geoCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "geoCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "geoClipAntimeridian", {
  enumerable: true,
  get: function () {
    return _antimeridian.default;
  }
});
Object.defineProperty(exports, "geoClipCircle", {
  enumerable: true,
  get: function () {
    return _circle2.default;
  }
});
Object.defineProperty(exports, "geoClipExtent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "geoClipRectangle", {
  enumerable: true,
  get: function () {
    return _rectangle.default;
  }
});
Object.defineProperty(exports, "geoContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "geoDistance", {
  enumerable: true,
  get: function () {
    return _distance.default;
  }
});
Object.defineProperty(exports, "geoGraticule", {
  enumerable: true,
  get: function () {
    return _graticule.default;
  }
});
Object.defineProperty(exports, "geoGraticule10", {
  enumerable: true,
  get: function () {
    return _graticule.graticule10;
  }
});
Object.defineProperty(exports, "geoInterpolate", {
  enumerable: true,
  get: function () {
    return _interpolate.default;
  }
});
Object.defineProperty(exports, "geoLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});
Object.defineProperty(exports, "geoPath", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "geoAlbers", {
  enumerable: true,
  get: function () {
    return _albers.default;
  }
});
Object.defineProperty(exports, "geoAlbersUsa", {
  enumerable: true,
  get: function () {
    return _albersUsa.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualArea", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.azimuthalEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistant", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.azimuthalEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoConicConformal", {
  enumerable: true,
  get: function () {
    return _conicConformal.default;
  }
});
Object.defineProperty(exports, "geoConicConformalRaw", {
  enumerable: true,
  get: function () {
    return _conicConformal.conicConformalRaw;
  }
});
Object.defineProperty(exports, "geoConicEqualArea", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.default;
  }
});
Object.defineProperty(exports, "geoConicEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.conicEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoConicEquidistant", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.default;
  }
});
Object.defineProperty(exports, "geoConicEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.conicEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoEqualEarth", {
  enumerable: true,
  get: function () {
    return _equalEarth.default;
  }
});
Object.defineProperty(exports, "geoEqualEarthRaw", {
  enumerable: true,
  get: function () {
    return _equalEarth.equalEarthRaw;
  }
});
Object.defineProperty(exports, "geoEquirectangular", {
  enumerable: true,
  get: function () {
    return _equirectangular.default;
  }
});
Object.defineProperty(exports, "geoEquirectangularRaw", {
  enumerable: true,
  get: function () {
    return _equirectangular.equirectangularRaw;
  }
});
Object.defineProperty(exports, "geoGnomonic", {
  enumerable: true,
  get: function () {
    return _gnomonic.default;
  }
});
Object.defineProperty(exports, "geoGnomonicRaw", {
  enumerable: true,
  get: function () {
    return _gnomonic.gnomonicRaw;
  }
});
Object.defineProperty(exports, "geoIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "geoProjection", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "geoProjectionMutator", {
  enumerable: true,
  get: function () {
    return _index2.projectionMutator;
  }
});
Object.defineProperty(exports, "geoMercator", {
  enumerable: true,
  get: function () {
    return _mercator.default;
  }
});
Object.defineProperty(exports, "geoMercatorRaw", {
  enumerable: true,
  get: function () {
    return _mercator.mercatorRaw;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1", {
  enumerable: true,
  get: function () {
    return _naturalEarth.default;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1Raw", {
  enumerable: true,
  get: function () {
    return _naturalEarth.naturalEarth1Raw;
  }
});
Object.defineProperty(exports, "geoOrthographic", {
  enumerable: true,
  get: function () {
    return _orthographic.default;
  }
});
Object.defineProperty(exports, "geoOrthographicRaw", {
  enumerable: true,
  get: function () {
    return _orthographic.orthographicRaw;
  }
});
Object.defineProperty(exports, "geoStereographic", {
  enumerable: true,
  get: function () {
    return _stereographic.default;
  }
});
Object.defineProperty(exports, "geoStereographicRaw", {
  enumerable: true,
  get: function () {
    return _stereographic.stereographicRaw;
  }
});
Object.defineProperty(exports, "geoTransverseMercator", {
  enumerable: true,
  get: function () {
    return _transverseMercator.default;
  }
});
Object.defineProperty(exports, "geoTransverseMercatorRaw", {
  enumerable: true,
  get: function () {
    return _transverseMercator.transverseMercatorRaw;
  }
});
Object.defineProperty(exports, "geoRotation", {
  enumerable: true,
  get: function () {
    return _rotation.default;
  }
});
Object.defineProperty(exports, "geoStream", {
  enumerable: true,
  get: function () {
    return _stream.default;
  }
});
Object.defineProperty(exports, "geoTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});

var _area = _interopRequireDefault(require("./area.js"));

var _bounds = _interopRequireDefault(require("./bounds.js"));

var _centroid = _interopRequireDefault(require("./centroid.js"));

var _circle = _interopRequireDefault(require("./circle.js"));

var _antimeridian = _interopRequireDefault(require("./clip/antimeridian.js"));

var _circle2 = _interopRequireDefault(require("./clip/circle.js"));

var _extent = _interopRequireDefault(require("./clip/extent.js"));

var _rectangle = _interopRequireDefault(require("./clip/rectangle.js"));

var _contains = _interopRequireDefault(require("./contains.js"));

var _distance = _interopRequireDefault(require("./distance.js"));

var _graticule = _interopRequireWildcard(require("./graticule.js"));

var _interpolate = _interopRequireDefault(require("./interpolate.js"));

var _length = _interopRequireDefault(require("./length.js"));

var _index = _interopRequireDefault(require("./path/index.js"));

var _albers = _interopRequireDefault(require("./projection/albers.js"));

var _albersUsa = _interopRequireDefault(require("./projection/albersUsa.js"));

var _azimuthalEqualArea = _interopRequireWildcard(require("./projection/azimuthalEqualArea.js"));

var _azimuthalEquidistant = _interopRequireWildcard(require("./projection/azimuthalEquidistant.js"));

var _conicConformal = _interopRequireWildcard(require("./projection/conicConformal.js"));

var _conicEqualArea = _interopRequireWildcard(require("./projection/conicEqualArea.js"));

var _conicEquidistant = _interopRequireWildcard(require("./projection/conicEquidistant.js"));

var _equalEarth = _interopRequireWildcard(require("./projection/equalEarth.js"));

var _equirectangular = _interopRequireWildcard(require("./projection/equirectangular.js"));

var _gnomonic = _interopRequireWildcard(require("./projection/gnomonic.js"));

var _identity = _interopRequireDefault(require("./projection/identity.js"));

var _index2 = _interopRequireWildcard(require("./projection/index.js"));

var _mercator = _interopRequireWildcard(require("./projection/mercator.js"));

var _naturalEarth = _interopRequireWildcard(require("./projection/naturalEarth1.js"));

var _orthographic = _interopRequireWildcard(require("./projection/orthographic.js"));

var _stereographic = _interopRequireWildcard(require("./projection/stereographic.js"));

var _transverseMercator = _interopRequireWildcard(require("./projection/transverseMercator.js"));

var _rotation = _interopRequireDefault(require("./rotation.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

var _transform = _interopRequireDefault(require("./transform.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area.js":"../node_modules/d3-geo/src/area.js","./bounds.js":"../node_modules/d3-geo/src/bounds.js","./centroid.js":"../node_modules/d3-geo/src/centroid.js","./circle.js":"../node_modules/d3-geo/src/circle.js","./clip/antimeridian.js":"../node_modules/d3-geo/src/clip/antimeridian.js","./clip/circle.js":"../node_modules/d3-geo/src/clip/circle.js","./clip/extent.js":"../node_modules/d3-geo/src/clip/extent.js","./clip/rectangle.js":"../node_modules/d3-geo/src/clip/rectangle.js","./contains.js":"../node_modules/d3-geo/src/contains.js","./distance.js":"../node_modules/d3-geo/src/distance.js","./graticule.js":"../node_modules/d3-geo/src/graticule.js","./interpolate.js":"../node_modules/d3-geo/src/interpolate.js","./length.js":"../node_modules/d3-geo/src/length.js","./path/index.js":"../node_modules/d3-geo/src/path/index.js","./projection/albers.js":"../node_modules/d3-geo/src/projection/albers.js","./projection/albersUsa.js":"../node_modules/d3-geo/src/projection/albersUsa.js","./projection/azimuthalEqualArea.js":"../node_modules/d3-geo/src/projection/azimuthalEqualArea.js","./projection/azimuthalEquidistant.js":"../node_modules/d3-geo/src/projection/azimuthalEquidistant.js","./projection/conicConformal.js":"../node_modules/d3-geo/src/projection/conicConformal.js","./projection/conicEqualArea.js":"../node_modules/d3-geo/src/projection/conicEqualArea.js","./projection/conicEquidistant.js":"../node_modules/d3-geo/src/projection/conicEquidistant.js","./projection/equalEarth.js":"../node_modules/d3-geo/src/projection/equalEarth.js","./projection/equirectangular.js":"../node_modules/d3-geo/src/projection/equirectangular.js","./projection/gnomonic.js":"../node_modules/d3-geo/src/projection/gnomonic.js","./projection/identity.js":"../node_modules/d3-geo/src/projection/identity.js","./projection/index.js":"../node_modules/d3-geo/src/projection/index.js","./projection/mercator.js":"../node_modules/d3-geo/src/projection/mercator.js","./projection/naturalEarth1.js":"../node_modules/d3-geo/src/projection/naturalEarth1.js","./projection/orthographic.js":"../node_modules/d3-geo/src/projection/orthographic.js","./projection/stereographic.js":"../node_modules/d3-geo/src/projection/stereographic.js","./projection/transverseMercator.js":"../node_modules/d3-geo/src/projection/transverseMercator.js","./rotation.js":"../node_modules/d3-geo/src/rotation.js","./stream.js":"../node_modules/d3-geo/src/stream.js","./transform.js":"../node_modules/d3-geo/src/transform.js"}],"../node_modules/d3-hierarchy/src/cluster.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;

  while (children = node.children) node = children[0];

  return node;
}

function leafRight(node) {
  var children;

  while (children = node.children) node = children[children.length - 1];

  return node;
}

function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0; // First walk, computing the initial x & y values.

    root.eachAfter(function (node) {
      var children = node.children;

      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2; // Second walk, normalizing x & y to the desired size.

    return root.eachAfter(nodeSize ? function (node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function (node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function (x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];
  };

  cluster.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;
  };

  return cluster;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/count.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

function _default() {
  return this.eachAfter(count);
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      current,
      next = [node],
      children,
      i,
      n;

  do {
    current = next.reverse(), next = [];

    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);

  return this;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      children,
      i;

  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }

  return this;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      next = [],
      children,
      i,
      n;

  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }

  while (node = next.pop()) {
    callback(node);
  }

  return this;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return this.eachAfter(function (node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;

    while (--i >= 0) sum += children[i].value;

    node.value = sum;
  });
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(compare) {
  return this.eachBefore(function (node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];

  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }

  var k = nodes.length;

  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }

  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();

  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }

  return c;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/ancestors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var node = this,
      nodes = [node];

  while (node = node.parent) {
    nodes.push(node);
  }

  return nodes;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/descendants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = [];
  this.each(function (node) {
    nodes.push(node);
  });
  return nodes;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/leaves.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var leaves = [];
  this.eachBefore(function (node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/links.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var root = this,
      links = [];
  root.each(function (node) {
    if (node !== root) {
      // Don’t include the root’s parent, if any.
      links.push({
        source: node.parent,
        target: node
      });
    }
  });
  return links;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hierarchy;
exports.computeHeight = computeHeight;
exports.Node = Node;

var _count = _interopRequireDefault(require("./count.js"));

var _each = _interopRequireDefault(require("./each.js"));

var _eachBefore = _interopRequireDefault(require("./eachBefore.js"));

var _eachAfter = _interopRequireDefault(require("./eachAfter.js"));

var _sum = _interopRequireDefault(require("./sum.js"));

var _sort = _interopRequireDefault(require("./sort.js"));

var _path = _interopRequireDefault(require("./path.js"));

var _ancestors = _interopRequireDefault(require("./ancestors.js"));

var _descendants = _interopRequireDefault(require("./descendants.js"));

var _leaves = _interopRequireDefault(require("./leaves.js"));

var _links = _interopRequireDefault(require("./links.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;
  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;

    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;

  do node.height = height; while ((node = node.parent) && node.height < ++height);
}

function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: _count.default,
  each: _each.default,
  eachAfter: _eachAfter.default,
  eachBefore: _eachBefore.default,
  sum: _sum.default,
  sort: _sort.default,
  path: _path.default,
  ancestors: _ancestors.default,
  descendants: _descendants.default,
  leaves: _leaves.default,
  links: _links.default,
  copy: node_copy
};
},{"./count.js":"../node_modules/d3-hierarchy/src/hierarchy/count.js","./each.js":"../node_modules/d3-hierarchy/src/hierarchy/each.js","./eachBefore.js":"../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","./eachAfter.js":"../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","./sum.js":"../node_modules/d3-hierarchy/src/hierarchy/sum.js","./sort.js":"../node_modules/d3-hierarchy/src/hierarchy/sort.js","./path.js":"../node_modules/d3-hierarchy/src/hierarchy/path.js","./ancestors.js":"../node_modules/d3-hierarchy/src/hierarchy/ancestors.js","./descendants.js":"../node_modules/d3-hierarchy/src/hierarchy/descendants.js","./leaves.js":"../node_modules/d3-hierarchy/src/hierarchy/leaves.js","./links.js":"../node_modules/d3-hierarchy/src/hierarchy/links.js"}],"../node_modules/d3-hierarchy/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffle = shuffle;
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;

function shuffle(array) {
  var m = array.length,
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}
},{}],"../node_modules/d3-hierarchy/src/pack/enclose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array.js");

function _default(circles) {
  var i = 0,
      n = (circles = (0, _array.shuffle)(_array.slice.call(circles))).length,
      B = [],
      p,
      e;

  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }

  return e;
}

function extendBasis(B, p) {
  var i, j;
  if (enclosesWeakAll(p, B)) return [p]; // If we get here then B must have at least one element.

  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  } // If we get here then B must have at least two elements.


  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  } // If we get here then something is very wrong.


  throw new Error();
}

function enclosesNot(a, b) {
  var dr = a.r - b.r,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}

function enclosesWeak(a, b) {
  var dr = a.r - b.r + 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function enclosesWeakAll(a, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a, B[i])) {
      return false;
    }
  }

  return true;
}

function encloseBasis(B) {
  switch (B.length) {
    case 1:
      return encloseBasis1(B[0]);

    case 2:
      return encloseBasis2(B[0], B[1]);

    case 3:
      return encloseBasis3(B[0], B[1], B[2]);
  }
}

function encloseBasis1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function encloseBasis2(a, b) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x21 = x2 - x1,
      y21 = y2 - y1,
      r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function encloseBasis3(a, b, c) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x3 = c.x,
      y3 = c.y,
      r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r: r
  };
}
},{"../array.js":"../node_modules/d3-hierarchy/src/array.js"}],"../node_modules/d3-hierarchy/src/pack/siblings.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packEnclose = packEnclose;
exports.default = _default;

var _enclose = _interopRequireDefault(require("./enclose.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function place(b, a, c) {
  var dx = b.x - a.x,
      x,
      a2,
      dy = b.y - a.y,
      y,
      b2,
      d2 = dx * dx + dy * dy;

  if (d2) {
    a2 = a.r + c.r, a2 *= a2;
    b2 = b.r + c.r, b2 *= b2;

    if (a2 > b2) {
      x = (d2 + b2 - a2) / (2 * d2);
      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
      c.x = b.x - x * dx - y * dy;
      c.y = b.y - x * dy + y * dx;
    } else {
      x = (d2 + a2 - b2) / (2 * d2);
      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
      c.x = a.x + x * dx - y * dy;
      c.y = a.y + x * dy + y * dx;
    }
  } else {
    c.x = a.x + c.r;
    c.y = a.y;
  }
}

function intersects(a, b) {
  var dr = a.r + b.r - 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function score(node) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab;
  return dx * dx + dy * dy;
}

function Node(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;
  var a, b, c, n, aa, ca, i, j, k, sj, sk; // Place the first circle.

  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r; // Place the second circle.

  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r; // Place the third circle.

  place(b, a, c = circles[2]); // Initialize the front-chain using the first three circles a, b and c.

  a = new Node(a), b = new Node(b), c = new Node(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a; // Attempt to place each remaining circle…

  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node(c); // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.

    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;

    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          b = j, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          a = k, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next); // Success! Insert the new circle c between a and b.


    c.previous = a, c.next = b, a.next = b.previous = b = c; // Compute the new closest circle pair to the centroid.

    aa = score(a);

    while ((c = c.next) !== b) {
      if ((ca = score(c)) < aa) {
        a = c, aa = ca;
      }
    }

    b = a.next;
  } // Compute the enclosing circle of the front chain.


  a = [b._], c = b;

  while ((c = c.next) !== b) a.push(c._);

  c = (0, _enclose.default)(a); // Translate the circles to put the enclosing circle around the origin.

  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

  return c.r;
}

function _default(circles) {
  packEnclose(circles);
  return circles;
}
},{"./enclose.js":"../node_modules/d3-hierarchy/src/pack/enclose.js"}],"../node_modules/d3-hierarchy/src/accessors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optional = optional;
exports.required = required;

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error();
  return f;
}
},{}],"../node_modules/d3-hierarchy/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constantZero = constantZero;
exports.default = _default;

function constantZero() {
  return 0;
}

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-hierarchy/src/pack/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _siblings = require("./siblings.js");

var _accessors = require("../accessors.js");

var _constant = _interopRequireWildcard(require("../constant.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function defaultRadius(d) {
  return Math.sqrt(d.value);
}

function _default() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = _constant.constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;

    if (radius) {
      root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(_constant.constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }

    return root;
  }

  pack.radius = function (x) {
    return arguments.length ? (radius = (0, _accessors.optional)(x), pack) : radius;
  };

  pack.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function (x) {
    return arguments.length ? (padding = typeof x === "function" ? x : (0, _constant.default)(+x), pack) : padding;
  };

  return pack;
}

function radiusLeaf(radius) {
  return function (node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function (node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;
      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = (0, _siblings.packEnclose)(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function (node) {
    var parent = node.parent;
    node.r *= k;

    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}
},{"./siblings.js":"../node_modules/d3-hierarchy/src/pack/siblings.js","../accessors.js":"../node_modules/d3-hierarchy/src/accessors.js","../constant.js":"../node_modules/d3-hierarchy/src/constant.js"}],"../node_modules/d3-hierarchy/src/treemap/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}
},{}],"../node_modules/d3-hierarchy/src/treemap/dice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
}
},{}],"../node_modules/d3-hierarchy/src/partition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./treemap/round.js"));

var _dice = _interopRequireDefault(require("./treemap/dice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 = root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(dy, n) {
    return function (node) {
      if (node.children) {
        (0, _dice.default)(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }

      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function (x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function (x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
}
},{"./treemap/round.js":"../node_modules/d3-hierarchy/src/treemap/round.js","./treemap/dice.js":"../node_modules/d3-hierarchy/src/treemap/dice.js"}],"../node_modules/d3-hierarchy/src/stratify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessors = require("./accessors.js");

var _index = require("./hierarchy/index.js");

var keyPrefix = "$",
    // Protect against keys like “__proto__”.
preroot = {
  depth: -1
},
    ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

function _default() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new _index.Node(d);

      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);

      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function (node) {
      node.depth = node.parent.depth + 1;
      --n;
    }).eachBefore(_index.computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");
    return root;
  }

  stratify.id = function (x) {
    return arguments.length ? (id = (0, _accessors.required)(x), stratify) : id;
  };

  stratify.parentId = function (x) {
    return arguments.length ? (parentId = (0, _accessors.required)(x), stratify) : parentId;
  };

  return stratify;
}
},{"./accessors.js":"../node_modules/d3-hierarchy/src/accessors.js","./hierarchy/index.js":"../node_modules/d3-hierarchy/src/hierarchy/index.js"}],"../node_modules/d3-hierarchy/src/tree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./hierarchy/index.js");

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
} // function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.


function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
} // This function works analogously to nextLeft.


function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
} // Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.


function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
} // All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).


function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;

  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
} // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.


function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor

  this.a = this; // ancestor

  this.z = 0; // prelim

  this.m = 0; // mod

  this.c = 0; // change

  this.s = 0; // shift

  this.t = null; // thread

  this.i = i; // number
}

TreeNode.prototype = Object.create(_index.Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
} // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm


function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root); // Compute the layout using Buchheim et al.’s algorithm.

    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk); // If a fixed node size is specified, scale x and y.

    if (nodeSize) root.eachBefore(sizeNode); // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
        var left = root,
            right = root,
            bottom = root;
        root.eachBefore(function (node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2,
            tx = s - left.x,
            kx = dx / (right.x + s + tx),
            ky = dy / (bottom.depth || 1);
        root.eachBefore(function (node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
    return root;
  } // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.


  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;

    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;

      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }

    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  } // Computes all real x-coordinates by summing up the modifiers recursively.


  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  } // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).


  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;

      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);

        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }

        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }

      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }

      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }

    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function (x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];
  };

  tree.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;
  };

  return tree;
}
},{"./hierarchy/index.js":"../node_modules/d3-hierarchy/src/hierarchy/index.js"}],"../node_modules/d3-hierarchy/src/treemap/slice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
}
},{}],"../node_modules/d3-hierarchy/src/treemap/squarify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squarifyRatio = squarifyRatio;
exports.default = exports.phi = void 0;

var _dice = _interopRequireDefault(require("./dice.js"));

var _slice = _interopRequireDefault(require("./slice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var phi = (1 + Math.sqrt(5)) / 2;
exports.phi = phi;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx,
      dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.

    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);

    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.

    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);

      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }

      minRatio = newRatio;
    } // Position and record the row orientation.


    rows.push(row = {
      value: sumValue,
      dice: dx < dy,
      children: nodes.slice(i0, i1)
    });
    if (row.dice) (0, _dice.default)(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else (0, _slice.default)(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

var _default = function custom(ratio) {
  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
}(phi);

exports.default = _default;
},{"./dice.js":"../node_modules/d3-hierarchy/src/treemap/dice.js","./slice.js":"../node_modules/d3-hierarchy/src/treemap/slice.js"}],"../node_modules/d3-hierarchy/src/treemap/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./round.js"));

var _squarify = _interopRequireDefault(require("./squarify.js"));

var _accessors = require("../accessors.js");

var _constant = _interopRequireWildcard(require("../constant.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var tile = _squarify.default,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = _constant.constantZero,
      paddingTop = _constant.constantZero,
      paddingRight = _constant.constantZero,
      paddingBottom = _constant.constantZero,
      paddingLeft = _constant.constantZero;

  function treemap(root) {
    root.x0 = root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;

    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function (x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function (x) {
    return arguments.length ? (tile = (0, _accessors.required)(x), treemap) : tile;
  };

  treemap.padding = function (x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function (x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function (x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function (x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function (x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function (x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function (x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingLeft;
  };

  return treemap;
}
},{"./round.js":"../node_modules/d3-hierarchy/src/treemap/round.js","./squarify.js":"../node_modules/d3-hierarchy/src/treemap/squarify.js","../accessors.js":"../node_modules/d3-hierarchy/src/accessors.js","../constant.js":"../node_modules/d3-hierarchy/src/constant.js"}],"../node_modules/d3-hierarchy/src/treemap/binary.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i,
      n = nodes.length,
      sum,
      sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = value / 2 + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;
    }

    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if (x1 - x0 > y1 - y0) {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    } else {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    }
  }
}
},{}],"../node_modules/d3-hierarchy/src/treemap/sliceDice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _dice = _interopRequireDefault(require("./dice.js"));

var _slice = _interopRequireDefault(require("./slice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? _slice.default : _dice.default)(parent, x0, y0, x1, y1);
}
},{"./dice.js":"../node_modules/d3-hierarchy/src/treemap/dice.js","./slice.js":"../node_modules/d3-hierarchy/src/treemap/slice.js"}],"../node_modules/d3-hierarchy/src/treemap/resquarify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dice = _interopRequireDefault(require("./dice.js"));

var _slice = _interopRequireDefault(require("./slice.js"));

var _squarify = require("./squarify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function custom(ratio) {
  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;

        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;

        if (row.dice) (0, _dice.default)(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);else (0, _slice.default)(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = (0, _squarify.squarifyRatio)(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
}(_squarify.phi);

exports.default = _default;
},{"./dice.js":"../node_modules/d3-hierarchy/src/treemap/dice.js","./slice.js":"../node_modules/d3-hierarchy/src/treemap/slice.js","./squarify.js":"../node_modules/d3-hierarchy/src/treemap/squarify.js"}],"../node_modules/d3-hierarchy/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "cluster", {
  enumerable: true,
  get: function () {
    return _cluster.default;
  }
});
Object.defineProperty(exports, "hierarchy", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "pack", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "packSiblings", {
  enumerable: true,
  get: function () {
    return _siblings.default;
  }
});
Object.defineProperty(exports, "packEnclose", {
  enumerable: true,
  get: function () {
    return _enclose.default;
  }
});
Object.defineProperty(exports, "partition", {
  enumerable: true,
  get: function () {
    return _partition.default;
  }
});
Object.defineProperty(exports, "stratify", {
  enumerable: true,
  get: function () {
    return _stratify.default;
  }
});
Object.defineProperty(exports, "tree", {
  enumerable: true,
  get: function () {
    return _tree.default;
  }
});
Object.defineProperty(exports, "treemap", {
  enumerable: true,
  get: function () {
    return _index3.default;
  }
});
Object.defineProperty(exports, "treemapBinary", {
  enumerable: true,
  get: function () {
    return _binary.default;
  }
});
Object.defineProperty(exports, "treemapDice", {
  enumerable: true,
  get: function () {
    return _dice.default;
  }
});
Object.defineProperty(exports, "treemapSlice", {
  enumerable: true,
  get: function () {
    return _slice.default;
  }
});
Object.defineProperty(exports, "treemapSliceDice", {
  enumerable: true,
  get: function () {
    return _sliceDice.default;
  }
});
Object.defineProperty(exports, "treemapSquarify", {
  enumerable: true,
  get: function () {
    return _squarify.default;
  }
});
Object.defineProperty(exports, "treemapResquarify", {
  enumerable: true,
  get: function () {
    return _resquarify.default;
  }
});

var _cluster = _interopRequireDefault(require("./cluster.js"));

var _index = _interopRequireDefault(require("./hierarchy/index.js"));

var _index2 = _interopRequireDefault(require("./pack/index.js"));

var _siblings = _interopRequireDefault(require("./pack/siblings.js"));

var _enclose = _interopRequireDefault(require("./pack/enclose.js"));

var _partition = _interopRequireDefault(require("./partition.js"));

var _stratify = _interopRequireDefault(require("./stratify.js"));

var _tree = _interopRequireDefault(require("./tree.js"));

var _index3 = _interopRequireDefault(require("./treemap/index.js"));

var _binary = _interopRequireDefault(require("./treemap/binary.js"));

var _dice = _interopRequireDefault(require("./treemap/dice.js"));

var _slice = _interopRequireDefault(require("./treemap/slice.js"));

var _sliceDice = _interopRequireDefault(require("./treemap/sliceDice.js"));

var _squarify = _interopRequireDefault(require("./treemap/squarify.js"));

var _resquarify = _interopRequireDefault(require("./treemap/resquarify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./cluster.js":"../node_modules/d3-hierarchy/src/cluster.js","./hierarchy/index.js":"../node_modules/d3-hierarchy/src/hierarchy/index.js","./pack/index.js":"../node_modules/d3-hierarchy/src/pack/index.js","./pack/siblings.js":"../node_modules/d3-hierarchy/src/pack/siblings.js","./pack/enclose.js":"../node_modules/d3-hierarchy/src/pack/enclose.js","./partition.js":"../node_modules/d3-hierarchy/src/partition.js","./stratify.js":"../node_modules/d3-hierarchy/src/stratify.js","./tree.js":"../node_modules/d3-hierarchy/src/tree.js","./treemap/index.js":"../node_modules/d3-hierarchy/src/treemap/index.js","./treemap/binary.js":"../node_modules/d3-hierarchy/src/treemap/binary.js","./treemap/dice.js":"../node_modules/d3-hierarchy/src/treemap/dice.js","./treemap/slice.js":"../node_modules/d3-hierarchy/src/treemap/slice.js","./treemap/sliceDice.js":"../node_modules/d3-hierarchy/src/treemap/sliceDice.js","./treemap/squarify.js":"../node_modules/d3-hierarchy/src/treemap/squarify.js","./treemap/resquarify.js":"../node_modules/d3-hierarchy/src/treemap/resquarify.js"}],"../node_modules/d3-polygon/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }

  return area / 2;
}
},{}],"../node_modules/d3-polygon/src/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      x = 0,
      y = 0,
      a,
      b = polygon[n - 1],
      c,
      k = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
  }

  return k *= 3, [x / k, y / k];
}
},{}],"../node_modules/d3-polygon/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
function _default(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
}
},{}],"../node_modules/d3-polygon/src/hull.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cross = _interopRequireDefault(require("./cross.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lexicographicOrder(a, b) {
  return a[0] - b[0] || a[1] - b[1];
} // Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.


function computeUpperHullIndexes(points) {
  var n = points.length,
      indexes = [0, 1],
      size = 2;

  for (var i = 2; i < n; ++i) {
    while (size > 1 && (0, _cross.default)(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;

    indexes[size++] = i;
  }

  return indexes.slice(0, size); // remove popped points
}

function _default(points) {
  if ((n = points.length) < 3) return null;
  var i,
      n,
      sortedPoints = new Array(n),
      flippedPoints = new Array(n);

  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];

  sortedPoints.sort(lexicographicOrder);

  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

  var upperIndexes = computeUpperHullIndexes(sortedPoints),
      lowerIndexes = computeUpperHullIndexes(flippedPoints); // Construct the hull polygon, removing possible duplicate endpoints.

  var skipLeft = lowerIndexes[0] === upperIndexes[0],
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
      hull = []; // Add upper hull in right-to-l order.
  // Then add lower hull in left-to-right order.

  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);

  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

  return hull;
}
},{"./cross.js":"../node_modules/d3-polygon/src/cross.js"}],"../node_modules/d3-polygon/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon, point) {
  var n = polygon.length,
      p = polygon[n - 1],
      x = point[0],
      y = point[1],
      x0 = p[0],
      y0 = p[1],
      x1,
      y1,
      inside = false;

  for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1) inside = !inside;
    x0 = x1, y0 = y1;
  }

  return inside;
}
},{}],"../node_modules/d3-polygon/src/length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0;

  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }

  return perimeter;
}
},{}],"../node_modules/d3-polygon/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "polygonArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "polygonCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "polygonHull", {
  enumerable: true,
  get: function () {
    return _hull.default;
  }
});
Object.defineProperty(exports, "polygonContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "polygonLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});

var _area = _interopRequireDefault(require("./area.js"));

var _centroid = _interopRequireDefault(require("./centroid.js"));

var _hull = _interopRequireDefault(require("./hull.js"));

var _contains = _interopRequireDefault(require("./contains.js"));

var _length = _interopRequireDefault(require("./length.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area.js":"../node_modules/d3-polygon/src/area.js","./centroid.js":"../node_modules/d3-polygon/src/centroid.js","./hull.js":"../node_modules/d3-polygon/src/hull.js","./contains.js":"../node_modules/d3-polygon/src/contains.js","./length.js":"../node_modules/d3-polygon/src/length.js"}],"../node_modules/d3-random/src/defaultSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return Math.random();
}
},{}],"../node_modules/d3-random/src/uniform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomUniform(source) {
  function randomUniform(min, max) {
    min = min == null ? 0 : +min;
    max = max == null ? 1 : +max;
    if (arguments.length === 1) max = min, min = 0;else max -= min;
    return function () {
      return source() * max + min;
    };
  }

  randomUniform.source = sourceRandomUniform;
  return randomUniform;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js"}],"../node_modules/d3-random/src/normal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomNormal(source) {
  function randomNormal(mu, sigma) {
    var x, r;
    mu = mu == null ? 0 : +mu;
    sigma = sigma == null ? 1 : +sigma;
    return function () {
      var y; // If available, use the second previously-generated uniform random.

      if (x != null) y = x, x = null; // Otherwise, generate a new x and y.
      else do {
          x = source() * 2 - 1;
          y = source() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
    };
  }

  randomNormal.source = sourceRandomNormal;
  return randomNormal;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js"}],"../node_modules/d3-random/src/logNormal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

var _normal = _interopRequireDefault(require("./normal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomLogNormal(source) {
  function randomLogNormal() {
    var randomNormal = _normal.default.source(source).apply(this, arguments);

    return function () {
      return Math.exp(randomNormal());
    };
  }

  randomLogNormal.source = sourceRandomLogNormal;
  return randomLogNormal;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js","./normal":"../node_modules/d3-random/src/normal.js"}],"../node_modules/d3-random/src/irwinHall.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomIrwinHall(source) {
  function randomIrwinHall(n) {
    return function () {
      for (var sum = 0, i = 0; i < n; ++i) sum += source();

      return sum;
    };
  }

  randomIrwinHall.source = sourceRandomIrwinHall;
  return randomIrwinHall;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js"}],"../node_modules/d3-random/src/bates.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

var _irwinHall = _interopRequireDefault(require("./irwinHall"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomBates(source) {
  function randomBates(n) {
    var randomIrwinHall = _irwinHall.default.source(source)(n);

    return function () {
      return randomIrwinHall() / n;
    };
  }

  randomBates.source = sourceRandomBates;
  return randomBates;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js","./irwinHall":"../node_modules/d3-random/src/irwinHall.js"}],"../node_modules/d3-random/src/exponential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomExponential(source) {
  function randomExponential(lambda) {
    return function () {
      return -Math.log(1 - source()) / lambda;
    };
  }

  randomExponential.source = sourceRandomExponential;
  return randomExponential;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js"}],"../node_modules/d3-random/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "randomUniform", {
  enumerable: true,
  get: function () {
    return _uniform.default;
  }
});
Object.defineProperty(exports, "randomNormal", {
  enumerable: true,
  get: function () {
    return _normal.default;
  }
});
Object.defineProperty(exports, "randomLogNormal", {
  enumerable: true,
  get: function () {
    return _logNormal.default;
  }
});
Object.defineProperty(exports, "randomBates", {
  enumerable: true,
  get: function () {
    return _bates.default;
  }
});
Object.defineProperty(exports, "randomIrwinHall", {
  enumerable: true,
  get: function () {
    return _irwinHall.default;
  }
});
Object.defineProperty(exports, "randomExponential", {
  enumerable: true,
  get: function () {
    return _exponential.default;
  }
});

var _uniform = _interopRequireDefault(require("./uniform"));

var _normal = _interopRequireDefault(require("./normal"));

var _logNormal = _interopRequireDefault(require("./logNormal"));

var _bates = _interopRequireDefault(require("./bates"));

var _irwinHall = _interopRequireDefault(require("./irwinHall"));

var _exponential = _interopRequireDefault(require("./exponential"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./uniform":"../node_modules/d3-random/src/uniform.js","./normal":"../node_modules/d3-random/src/normal.js","./logNormal":"../node_modules/d3-random/src/logNormal.js","./bates":"../node_modules/d3-random/src/bates.js","./irwinHall":"../node_modules/d3-random/src/irwinHall.js","./exponential":"../node_modules/d3-random/src/exponential.js"}],"../node_modules/d3-scale/src/init.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initRange = initRange;
exports.initInterpolator = initInterpolator;

function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.range(domain);
      break;

    default:
      this.range(range).domain(domain);
      break;
  }

  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.interpolator(domain);
      break;

    default:
      this.interpolator(interpolator).domain(domain);
      break;
  }

  return this;
}
},{}],"../node_modules/d3-scale/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = exports.map = void 0;
var array = Array.prototype;
var map = array.map;
exports.map = map;
var slice = array.slice;
exports.slice = slice;
},{}],"../node_modules/d3-scale/src/ordinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ordinal;
exports.implicit = void 0;

var _d3Collection = require("d3-collection");

var _array = require("./array");

var _init = require("./init");

var implicit = {
  name: "implicit"
};
exports.implicit = implicit;

function ordinal() {
  var index = (0, _d3Collection.map)(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    var key = d + "",
        i = index.get(key);

    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }

    return range[(i - 1) % range.length];
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = (0, _d3Collection.map)();
    var i = -1,
        n = _.length,
        d,
        key;

    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));

    return scale;
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), scale) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return ordinal(domain, range).unknown(unknown);
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
},{"d3-collection":"../node_modules/d3-collection/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/band.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = band;
exports.point = point;

var _d3Array = require("d3-array");

var _init = require("./init");

var _ordinal = _interopRequireDefault(require("./ordinal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function band() {
  var scale = (0, _ordinal.default)().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = (0, _d3Array.range)(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function (_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function () {
    return band(domain(), range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return _init.initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./init":"../node_modules/d3-scale/src/init.js","./ordinal":"../node_modules/d3-scale/src/ordinal.js"}],"../node_modules/d3-scale/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-scale/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return +x;
}
},{}],"../node_modules/d3-scale/src/continuous.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identity = identity;
exports.copy = copy;
exports.transformer = transformer;
exports.default = continuous;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : (0, _constant.default)(isNaN(b) ? NaN : 0.5);
}

function clamper(domain) {
  var a = domain[0],
      b = domain[domain.length - 1],
      t;
  if (a > b) t = a, a = b, b = t;
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


function bimap(domain, range, interpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = (0, _d3Array.bisect)(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = _d3Interpolate.interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function (y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), _d3Interpolate.interpolateNumber)))(y)));
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = _array.slice.call(_), interpolate = _d3Interpolate.interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous(transform, untransform) {
  return transformer()(transform, untransform);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./constant":"../node_modules/d3-scale/src/constant.js","./number":"../node_modules/d3-scale/src/number.js"}],"../node_modules/d3-scale/src/tickFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

function _default(start, stop, count, specifier) {
  var step = (0, _d3Array.tickStep)(start, stop, count),
      precision;
  specifier = (0, _d3Format.formatSpecifier)(specifier == null ? ",f" : specifier);

  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionPrefix)(step, value))) specifier.precision = precision;
        return (0, _d3Format.formatPrefix)(specifier, value);
      }

    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionRound)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }

    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }

  return (0, _d3Format.format)(specifier);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","d3-format":"../node_modules/d3-format/src/index.js"}],"../node_modules/d3-scale/src/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linearish = linearish;
exports.default = linear;

var _d3Array = require("d3-array");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _init = require("./init");

var _tickFormat = _interopRequireDefault(require("./tickFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return (0, _d3Array.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    var d = domain();
    return (0, _tickFormat.default)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function (count) {
    if (count == null) count = 10;
    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = (0, _d3Array.tickIncrement)(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = (0, _continuous.default)(_continuous.identity, _continuous.identity);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, linear());
  };

  _init.initRange.apply(scale, arguments);

  return linearish(scale);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js","./tickFormat":"../node_modules/d3-scale/src/tickFormat.js"}],"../node_modules/d3-scale/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identity;

var _array = require("./array");

var _linear = require("./linear");

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function identity(domain) {
  var unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), scale) : domain.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return identity(domain).unknown(unknown);
  };

  domain = arguments.length ? _array.map.call(domain, _number.default) : [0, 1];
  return (0, _linear.linearish)(scale);
}
},{"./array":"../node_modules/d3-scale/src/array.js","./linear":"../node_modules/d3-scale/src/linear.js","./number":"../node_modules/d3-scale/src/number.js"}],"../node_modules/d3-scale/src/nice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(domain, interval) {
  domain = domain.slice();
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
},{}],"../node_modules/d3-scale/src/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loggish = loggish;
exports.default = log;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

var _nice = _interopRequireDefault(require("./nice"));

var _continuous = require("./continuous");

var _init = require("./init");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
    return Math.pow(base, x);
  };
}

function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
    return Math.log(x) / base;
  });
}

function reflect(f) {
  return function (x) {
    return -f(-x);
  };
}

function loggish(transform) {
  var scale = transform(transformLog, transformExp),
      domain = scale.domain,
      base = 10,
      logs,
      pows;

  function rescale() {
    logs = logp(base), pows = powp(base);

    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }

    return scale;
  }

  scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function (count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;
    if (r = v < u) i = u, u = v, v = i;
    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = (0, _d3Array.ticks)(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function (count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = (0, _d3Format.format)(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

    return function (d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function () {
    return domain((0, _nice.default)(domain(), {
      floor: function (x) {
        return pows(Math.floor(logs(x)));
      },
      ceil: function (x) {
        return pows(Math.ceil(logs(x)));
      }
    }));
  };

  return scale;
}

function log() {
  var scale = loggish((0, _continuous.transformer)()).domain([1, 10]);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, log()).base(scale.base());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
},{"d3-array":"../node_modules/d3-array/src/index.js","d3-format":"../node_modules/d3-format/src/index.js","./nice":"../node_modules/d3-scale/src/nice.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/symlog.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.symlogish = symlogish;
exports.default = symlog;

var _linear = require("./linear");

var _continuous = require("./continuous");

var _init = require("./init");

function transformSymlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1,
      scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function (_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return (0, _linear.linearish)(scale);
}

function symlog() {
  var scale = symlogish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, symlog()).constant(scale.constant());
  };

  return _init.initRange.apply(scale, arguments);
}
},{"./linear":"../node_modules/d3-scale/src/linear.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.powish = powish;
exports.default = pow;
exports.sqrt = sqrt;

var _linear = require("./linear");

var _continuous = require("./continuous");

var _init = require("./init");

function transformPow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(_continuous.identity, _continuous.identity),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(_continuous.identity, _continuous.identity) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return (0, _linear.linearish)(scale);
}

function pow() {
  var scale = powish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, pow()).exponent(scale.exponent());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}
},{"./linear":"../node_modules/d3-scale/src/linear.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantile;

var _d3Array = require("d3-array");

var _array = require("./array");

var _init = require("./init");

function quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0,
        n = Math.max(1, range.length);
    thresholds = new Array(n - 1);

    while (++i < n) thresholds[i - 1] = (0, _d3Array.quantile)(domain, i / n);

    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : range[(0, _d3Array.bisect)(thresholds, x)];
  }

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
  };

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return rescale();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function () {
    return thresholds.slice();
  };

  scale.copy = function () {
    return quantile().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantize;

var _d3Array = require("d3-array");

var _array = require("./array");

var _linear = require("./linear");

var _init = require("./init");

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);

    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);

    return scale;
  }

  scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function (_) {
    return arguments.length ? (n = (range = _array.slice.call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function () {
    return domain.slice();
  };

  scale.copy = function () {
    return quantize().domain([x0, x1]).range(range).unknown(unknown);
  };

  return _init.initRange.apply((0, _linear.linearish)(scale), arguments);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./linear":"../node_modules/d3-scale/src/linear.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/threshold.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = threshold;

var _d3Array = require("d3-array");

var _array = require("./array");

var _init = require("./init");

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
  }

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return threshold().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-time/src/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = newInterval;
var t0 = new Date(),
    t1 = new Date();

function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
  }

  interval.floor = function (date) {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

    do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);

    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}
},{}],"../node_modules/d3-time/src/millisecond.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.milliseconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var millisecond = (0, _interval.default)(function () {// noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
}); // An optimized implementation for this simple case.

millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return (0, _interval.default)(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

var _default = millisecond;
exports.default = _default;
var milliseconds = millisecond.range;
exports.milliseconds = milliseconds;
},{"./interval.js":"../node_modules/d3-time/src/interval.js"}],"../node_modules/d3-time/src/duration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.durationWeek = exports.durationDay = exports.durationHour = exports.durationMinute = exports.durationSecond = void 0;
var durationSecond = 1e3;
exports.durationSecond = durationSecond;
var durationMinute = 6e4;
exports.durationMinute = durationMinute;
var durationHour = 36e5;
exports.durationHour = durationHour;
var durationDay = 864e5;
exports.durationDay = durationDay;
var durationWeek = 6048e5;
exports.durationWeek = durationWeek;
},{}],"../node_modules/d3-time/src/second.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var second = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds());
}, function (date, step) {
  date.setTime(+date + step * _duration.durationSecond);
}, function (start, end) {
  return (end - start) / _duration.durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});
var _default = second;
exports.default = _default;
var seconds = second.range;
exports.seconds = seconds;
},{"./interval.js":"../node_modules/d3-time/src/interval.js","./duration.js":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/minute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var minute = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getMinutes();
});
var _default = minute;
exports.default = _default;
var minutes = minute.range;
exports.minutes = minutes;
},{"./interval.js":"../node_modules/d3-time/src/interval.js","./duration.js":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/hour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hour = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond - date.getMinutes() * _duration.durationMinute);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getHours();
});
var _default = hour;
exports.default = _default;
var hours = hour.range;
exports.hours = hours;
},{"./interval.js":"../node_modules/d3-time/src/interval.js","./duration.js":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/day.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.days = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var day = (0, _interval.default)(function (date) {
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setDate(date.getDate() + step);
}, function (start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationDay;
}, function (date) {
  return date.getDate() - 1;
});
var _default = day;
exports.default = _default;
var days = day.range;
exports.days = days;
},{"./interval.js":"../node_modules/d3-time/src/interval.js","./duration.js":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/week.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saturdays = exports.fridays = exports.thursdays = exports.wednesdays = exports.tuesdays = exports.mondays = exports.sundays = exports.saturday = exports.friday = exports.thursday = exports.wednesday = exports.tuesday = exports.monday = exports.sunday = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function weekday(i) {
  return (0, _interval.default)(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationWeek;
  });
}

var sunday = weekday(0);
exports.sunday = sunday;
var monday = weekday(1);
exports.monday = monday;
var tuesday = weekday(2);
exports.tuesday = tuesday;
var wednesday = weekday(3);
exports.wednesday = wednesday;
var thursday = weekday(4);
exports.thursday = thursday;
var friday = weekday(5);
exports.friday = friday;
var saturday = weekday(6);
exports.saturday = saturday;
var sundays = sunday.range;
exports.sundays = sundays;
var mondays = monday.range;
exports.mondays = mondays;
var tuesdays = tuesday.range;
exports.tuesdays = tuesdays;
var wednesdays = wednesday.range;
exports.wednesdays = wednesdays;
var thursdays = thursday.range;
exports.thursdays = thursdays;
var fridays = friday.range;
exports.fridays = fridays;
var saturdays = saturday.range;
exports.saturdays = saturdays;
},{"./interval.js":"../node_modules/d3-time/src/interval.js","./duration.js":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/month.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.months = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var month = (0, _interval.default)(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});
var _default = month;
exports.default = _default;
var months = month.range;
exports.months = months;
},{"./interval.js":"../node_modules/d3-time/src/interval.js"}],"../node_modules/d3-time/src/year.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.years = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var year = (0, _interval.default)(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
}); // An optimized implementation for this simple case.

year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var _default = year;
exports.default = _default;
var years = year.range;
exports.years = years;
},{"./interval.js":"../node_modules/d3-time/src/interval.js"}],"../node_modules/d3-time/src/utcMinute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMinutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMinute = (0, _interval.default)(function (date) {
  date.setUTCSeconds(0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getUTCMinutes();
});
var _default = utcMinute;
exports.default = _default;
var utcMinutes = utcMinute.range;
exports.utcMinutes = utcMinutes;
},{"./interval.js":"../node_modules/d3-time/src/interval.js","./duration.js":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/utcHour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcHours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcHour = (0, _interval.default)(function (date) {
  date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getUTCHours();
});
var _default = utcHour;
exports.default = _default;
var utcHours = utcHour.range;
exports.utcHours = utcHours;
},{"./interval.js":"../node_modules/d3-time/src/interval.js","./duration.js":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/utcDay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcDays = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcDay = (0, _interval.default)(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / _duration.durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});
var _default = utcDay;
exports.default = _default;
var utcDays = utcDay.range;
exports.utcDays = utcDays;
},{"./interval.js":"../node_modules/d3-time/src/interval.js","./duration.js":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/utcWeek.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcSaturdays = exports.utcFridays = exports.utcThursdays = exports.utcWednesdays = exports.utcTuesdays = exports.utcMondays = exports.utcSundays = exports.utcSaturday = exports.utcFriday = exports.utcThursday = exports.utcWednesday = exports.utcTuesday = exports.utcMonday = exports.utcSunday = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function utcWeekday(i) {
  return (0, _interval.default)(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / _duration.durationWeek;
  });
}

var utcSunday = utcWeekday(0);
exports.utcSunday = utcSunday;
var utcMonday = utcWeekday(1);
exports.utcMonday = utcMonday;
var utcTuesday = utcWeekday(2);
exports.utcTuesday = utcTuesday;
var utcWednesday = utcWeekday(3);
exports.utcWednesday = utcWednesday;
var utcThursday = utcWeekday(4);
exports.utcThursday = utcThursday;
var utcFriday = utcWeekday(5);
exports.utcFriday = utcFriday;
var utcSaturday = utcWeekday(6);
exports.utcSaturday = utcSaturday;
var utcSundays = utcSunday.range;
exports.utcSundays = utcSundays;
var utcMondays = utcMonday.range;
exports.utcMondays = utcMondays;
var utcTuesdays = utcTuesday.range;
exports.utcTuesdays = utcTuesdays;
var utcWednesdays = utcWednesday.range;
exports.utcWednesdays = utcWednesdays;
var utcThursdays = utcThursday.range;
exports.utcThursdays = utcThursdays;
var utcFridays = utcFriday.range;
exports.utcFridays = utcFridays;
var utcSaturdays = utcSaturday.range;
exports.utcSaturdays = utcSaturdays;
},{"./interval.js":"../node_modules/d3-time/src/interval.js","./duration.js":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/utcMonth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMonths = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMonth = (0, _interval.default)(function (date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
  return date.getUTCMonth();
});
var _default = utcMonth;
exports.default = _default;
var utcMonths = utcMonth.range;
exports.utcMonths = utcMonths;
},{"./interval.js":"../node_modules/d3-time/src/interval.js"}],"../node_modules/d3-time/src/utcYear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcYears = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcYear = (0, _interval.default)(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
}); // An optimized implementation for this simple case.

utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

var _default = utcYear;
exports.default = _default;
var utcYears = utcYear.range;
exports.utcYears = utcYears;
},{"./interval.js":"../node_modules/d3-time/src/interval.js"}],"../node_modules/d3-time/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeInterval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});
Object.defineProperty(exports, "timeMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "timeMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "utcMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "utcMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "timeSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "timeSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "utcSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "utcSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "timeMinute", {
  enumerable: true,
  get: function () {
    return _minute.default;
  }
});
Object.defineProperty(exports, "timeMinutes", {
  enumerable: true,
  get: function () {
    return _minute.minutes;
  }
});
Object.defineProperty(exports, "timeHour", {
  enumerable: true,
  get: function () {
    return _hour.default;
  }
});
Object.defineProperty(exports, "timeHours", {
  enumerable: true,
  get: function () {
    return _hour.hours;
  }
});
Object.defineProperty(exports, "timeDay", {
  enumerable: true,
  get: function () {
    return _day.default;
  }
});
Object.defineProperty(exports, "timeDays", {
  enumerable: true,
  get: function () {
    return _day.days;
  }
});
Object.defineProperty(exports, "timeWeek", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeWeeks", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeSunday", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeSundays", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeMonday", {
  enumerable: true,
  get: function () {
    return _week.monday;
  }
});
Object.defineProperty(exports, "timeMondays", {
  enumerable: true,
  get: function () {
    return _week.mondays;
  }
});
Object.defineProperty(exports, "timeTuesday", {
  enumerable: true,
  get: function () {
    return _week.tuesday;
  }
});
Object.defineProperty(exports, "timeTuesdays", {
  enumerable: true,
  get: function () {
    return _week.tuesdays;
  }
});
Object.defineProperty(exports, "timeWednesday", {
  enumerable: true,
  get: function () {
    return _week.wednesday;
  }
});
Object.defineProperty(exports, "timeWednesdays", {
  enumerable: true,
  get: function () {
    return _week.wednesdays;
  }
});
Object.defineProperty(exports, "timeThursday", {
  enumerable: true,
  get: function () {
    return _week.thursday;
  }
});
Object.defineProperty(exports, "timeThursdays", {
  enumerable: true,
  get: function () {
    return _week.thursdays;
  }
});
Object.defineProperty(exports, "timeFriday", {
  enumerable: true,
  get: function () {
    return _week.friday;
  }
});
Object.defineProperty(exports, "timeFridays", {
  enumerable: true,
  get: function () {
    return _week.fridays;
  }
});
Object.defineProperty(exports, "timeSaturday", {
  enumerable: true,
  get: function () {
    return _week.saturday;
  }
});
Object.defineProperty(exports, "timeSaturdays", {
  enumerable: true,
  get: function () {
    return _week.saturdays;
  }
});
Object.defineProperty(exports, "timeMonth", {
  enumerable: true,
  get: function () {
    return _month.default;
  }
});
Object.defineProperty(exports, "timeMonths", {
  enumerable: true,
  get: function () {
    return _month.months;
  }
});
Object.defineProperty(exports, "timeYear", {
  enumerable: true,
  get: function () {
    return _year.default;
  }
});
Object.defineProperty(exports, "timeYears", {
  enumerable: true,
  get: function () {
    return _year.years;
  }
});
Object.defineProperty(exports, "utcMinute", {
  enumerable: true,
  get: function () {
    return _utcMinute.default;
  }
});
Object.defineProperty(exports, "utcMinutes", {
  enumerable: true,
  get: function () {
    return _utcMinute.utcMinutes;
  }
});
Object.defineProperty(exports, "utcHour", {
  enumerable: true,
  get: function () {
    return _utcHour.default;
  }
});
Object.defineProperty(exports, "utcHours", {
  enumerable: true,
  get: function () {
    return _utcHour.utcHours;
  }
});
Object.defineProperty(exports, "utcDay", {
  enumerable: true,
  get: function () {
    return _utcDay.default;
  }
});
Object.defineProperty(exports, "utcDays", {
  enumerable: true,
  get: function () {
    return _utcDay.utcDays;
  }
});
Object.defineProperty(exports, "utcWeek", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcWeeks", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcSunday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcSundays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcMonday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMonday;
  }
});
Object.defineProperty(exports, "utcMondays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMondays;
  }
});
Object.defineProperty(exports, "utcTuesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesday;
  }
});
Object.defineProperty(exports, "utcTuesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesdays;
  }
});
Object.defineProperty(exports, "utcWednesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesday;
  }
});
Object.defineProperty(exports, "utcWednesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesdays;
  }
});
Object.defineProperty(exports, "utcThursday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursday;
  }
});
Object.defineProperty(exports, "utcThursdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursdays;
  }
});
Object.defineProperty(exports, "utcFriday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFriday;
  }
});
Object.defineProperty(exports, "utcFridays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFridays;
  }
});
Object.defineProperty(exports, "utcSaturday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturday;
  }
});
Object.defineProperty(exports, "utcSaturdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturdays;
  }
});
Object.defineProperty(exports, "utcMonth", {
  enumerable: true,
  get: function () {
    return _utcMonth.default;
  }
});
Object.defineProperty(exports, "utcMonths", {
  enumerable: true,
  get: function () {
    return _utcMonth.utcMonths;
  }
});
Object.defineProperty(exports, "utcYear", {
  enumerable: true,
  get: function () {
    return _utcYear.default;
  }
});
Object.defineProperty(exports, "utcYears", {
  enumerable: true,
  get: function () {
    return _utcYear.utcYears;
  }
});

var _interval = _interopRequireDefault(require("./interval.js"));

var _millisecond = _interopRequireWildcard(require("./millisecond.js"));

var _second = _interopRequireWildcard(require("./second.js"));

var _minute = _interopRequireWildcard(require("./minute.js"));

var _hour = _interopRequireWildcard(require("./hour.js"));

var _day = _interopRequireWildcard(require("./day.js"));

var _week = require("./week.js");

var _month = _interopRequireWildcard(require("./month.js"));

var _year = _interopRequireWildcard(require("./year.js"));

var _utcMinute = _interopRequireWildcard(require("./utcMinute.js"));

var _utcHour = _interopRequireWildcard(require("./utcHour.js"));

var _utcDay = _interopRequireWildcard(require("./utcDay.js"));

var _utcWeek = require("./utcWeek.js");

var _utcMonth = _interopRequireWildcard(require("./utcMonth.js"));

var _utcYear = _interopRequireWildcard(require("./utcYear.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./interval.js":"../node_modules/d3-time/src/interval.js","./millisecond.js":"../node_modules/d3-time/src/millisecond.js","./second.js":"../node_modules/d3-time/src/second.js","./minute.js":"../node_modules/d3-time/src/minute.js","./hour.js":"../node_modules/d3-time/src/hour.js","./day.js":"../node_modules/d3-time/src/day.js","./week.js":"../node_modules/d3-time/src/week.js","./month.js":"../node_modules/d3-time/src/month.js","./year.js":"../node_modules/d3-time/src/year.js","./utcMinute.js":"../node_modules/d3-time/src/utcMinute.js","./utcHour.js":"../node_modules/d3-time/src/utcHour.js","./utcDay.js":"../node_modules/d3-time/src/utcDay.js","./utcWeek.js":"../node_modules/d3-time/src/utcWeek.js","./utcMonth.js":"../node_modules/d3-time/src/utcMonth.js","./utcYear.js":"../node_modules/d3-time/src/utcYear.js"}],"../node_modules/d3-time-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatLocale;

var _d3Time = require("d3-time");

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }

  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {
    y: y,
    m: m,
    d: d,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  }; // These recursive directive definitions must be deferred.

  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;
      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function (string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day;
      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.

      if (Z && !("Z" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.

      if ("p" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.

      if (d.m === undefined) d.m = "q" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.

      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;

        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? _d3Time.utcMonday.ceil(week) : (0, _d3Time.utcMonday)(week);
          week = _d3Time.utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? _d3Time.timeMonday.ceil(week) : (0, _d3Time.timeMonday)(week);
          week = _d3Time.timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      } // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.


      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      } // Otherwise, all fields are in local time.


      return localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);

      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function (specifier) {
      var f = newFormat(specifier += "", formats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    parse: function (specifier) {
      var p = newParse(specifier += "", false);

      p.toString = function () {
        return specifier;
      };

      return p;
    },
    utcFormat: function (specifier) {
      var f = newFormat(specifier += "", utcFormats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    utcParse: function (specifier) {
      var p = newParse(specifier += "", true);

      p.toString = function () {
        return specifier;
      };

      return p;
    }
  };
}

var pads = {
  "-": "",
  "_": " ",
  "0": "0"
},
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {},
      i = -1,
      n = names.length;

  while (++i < n) map[names[i].toLowerCase()] = i;

  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + _d3Time.timeDay.count((0, _d3Time.timeYear)(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(_d3Time.timeSunday.count((0, _d3Time.timeYear)(d) - 1, d), p, 2);
}

function formatWeekNumberISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : _d3Time.timeThursday.ceil(d);
  return pad(_d3Time.timeThursday.count((0, _d3Time.timeYear)(d), d) + ((0, _d3Time.timeYear)(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(_d3Time.timeMonday.count((0, _d3Time.timeYear)(d) - 1, d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + _d3Time.utcDay.count((0, _d3Time.utcYear)(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(_d3Time.utcSunday.count((0, _d3Time.utcYear)(d) - 1, d), p, 2);
}

function formatUTCWeekNumberISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : _d3Time.utcThursday.ceil(d);
  return pad(_d3Time.utcThursday.count((0, _d3Time.utcYear)(d), d) + ((0, _d3Time.utcYear)(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(_d3Time.utcMonday.count((0, _d3Time.utcYear)(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}
},{"d3-time":"../node_modules/d3-time/src/index.js"}],"../node_modules/d3-time-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.utcParse = exports.utcFormat = exports.timeParse = exports.timeFormat = void 0;

var _locale = _interopRequireDefault(require("./locale.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var timeFormat;
exports.timeFormat = timeFormat;
var timeParse;
exports.timeParse = timeParse;
var utcFormat;
exports.utcFormat = utcFormat;
var utcParse;
exports.utcParse = utcParse;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.timeFormat = timeFormat = locale.format;
  exports.timeParse = timeParse = locale.parse;
  exports.utcFormat = utcFormat = locale.utcFormat;
  exports.utcParse = utcParse = locale.utcParse;
  return locale;
}
},{"./locale.js":"../node_modules/d3-time-format/src/locale.js"}],"../node_modules/d3-time-format/src/isoFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.isoSpecifier = void 0;

var _defaultLocale = require("./defaultLocale.js");

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
exports.isoSpecifier = isoSpecifier;

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString ? formatIsoNative : (0, _defaultLocale.utcFormat)(isoSpecifier);
var _default = formatIso;
exports.default = _default;
},{"./defaultLocale.js":"../node_modules/d3-time-format/src/defaultLocale.js"}],"../node_modules/d3-time-format/src/isoParse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isoFormat = require("./isoFormat.js");

var _defaultLocale = require("./defaultLocale.js");

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : (0, _defaultLocale.utcParse)(_isoFormat.isoSpecifier);
var _default = parseIso;
exports.default = _default;
},{"./isoFormat.js":"../node_modules/d3-time-format/src/isoFormat.js","./defaultLocale.js":"../node_modules/d3-time-format/src/defaultLocale.js"}],"../node_modules/d3-time-format/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeFormatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "timeFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeFormat;
  }
});
Object.defineProperty(exports, "timeParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeParse;
  }
});
Object.defineProperty(exports, "utcFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcFormat;
  }
});
Object.defineProperty(exports, "utcParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcParse;
  }
});
Object.defineProperty(exports, "timeFormatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "isoFormat", {
  enumerable: true,
  get: function () {
    return _isoFormat.default;
  }
});
Object.defineProperty(exports, "isoParse", {
  enumerable: true,
  get: function () {
    return _isoParse.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale.js"));

var _locale = _interopRequireDefault(require("./locale.js"));

var _isoFormat = _interopRequireDefault(require("./isoFormat.js"));

var _isoParse = _interopRequireDefault(require("./isoParse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./defaultLocale.js":"../node_modules/d3-time-format/src/defaultLocale.js","./locale.js":"../node_modules/d3-time-format/src/locale.js","./isoFormat.js":"../node_modules/d3-time-format/src/isoFormat.js","./isoParse.js":"../node_modules/d3-time-format/src/isoParse.js"}],"../node_modules/d3-scale/src/time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calendar = calendar;
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Time = require("d3-time");

var _d3TimeFormat = require("d3-time-format");

var _array = require("./array");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _init = require("./init");

var _nice = _interopRequireDefault(require("./nice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = (0, _continuous.default)(_continuous.identity, _continuous.identity),
      invert = scale.invert,
      domain = scale.domain;
  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");
  var tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.

    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = (0, _d3Array.bisector)(function (i) {
        return i[2];
      }).right(tickIntervals, target);

      if (i === tickIntervals.length) {
        step = (0, _d3Array.tickStep)(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max((0, _d3Array.tickStep)(start, stop, interval), 1);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(_array.map.call(_, number)) : domain().map(date);
  };

  scale.ticks = function (interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop

    return r ? t.reverse() : t;
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain((0, _nice.default)(d, interval)) : scale;
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function _default() {
  return _init.initRange.apply(calendar(_d3Time.timeYear, _d3Time.timeMonth, _d3Time.timeWeek, _d3Time.timeDay, _d3Time.timeHour, _d3Time.timeMinute, _d3Time.timeSecond, _d3Time.timeMillisecond, _d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","d3-time":"../node_modules/d3-time/src/index.js","d3-time-format":"../node_modules/d3-time-format/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js","./nice":"../node_modules/d3-scale/src/nice.js"}],"../node_modules/d3-scale/src/utcTime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _time = require("./time");

var _d3TimeFormat = require("d3-time-format");

var _d3Time = require("d3-time");

var _init = require("./init");

function _default() {
  return _init.initRange.apply((0, _time.calendar)(_d3Time.utcYear, _d3Time.utcMonth, _d3Time.utcWeek, _d3Time.utcDay, _d3Time.utcHour, _d3Time.utcMinute, _d3Time.utcSecond, _d3Time.utcMillisecond, _d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}
},{"./time":"../node_modules/d3-scale/src/time.js","d3-time-format":"../node_modules/d3-time-format/src/index.js","d3-time":"../node_modules/d3-time/src/index.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/sequential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = copy;
exports.default = sequential;
exports.sequentialLog = sequentialLog;
exports.sequentialSymlog = sequentialSymlog;
exports.sequentialPow = sequentialPow;
exports.sequentialSqrt = sequentialSqrt;

var _continuous = require("./continuous");

var _init = require("./init");

var _linear = require("./linear");

var _log = require("./log");

var _symlog = require("./symlog");

var _pow = require("./pow");

function transformer() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = _continuous.identity,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}

function sequential() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return copy(scale, sequential());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = (0, _log.loggish)(transformer()).domain([1, 10]);

  scale.copy = function () {
    return copy(scale, sequentialLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}
},{"./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js","./linear":"../node_modules/d3-scale/src/linear.js","./log":"../node_modules/d3-scale/src/log.js","./symlog":"../node_modules/d3-scale/src/symlog.js","./pow":"../node_modules/d3-scale/src/pow.js"}],"../node_modules/d3-scale/src/sequentialQuantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sequentialQuantile;

var _d3Array = require("d3-array");

var _continuous = require("./continuous");

var _init = require("./init");

function sequentialQuantile() {
  var domain = [],
      interpolator = _continuous.identity;

  function scale(x) {
    if (!isNaN(x = +x)) return interpolator(((0, _d3Array.bisect)(domain, x) - 1) / (domain.length - 1));
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return scale;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function () {
    return sequentialQuantile(interpolator).domain(domain);
  };

  return _init.initInterpolator.apply(scale, arguments);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/diverging.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diverging;
exports.divergingLog = divergingLog;
exports.divergingSymlog = divergingSymlog;
exports.divergingPow = divergingPow;
exports.divergingSqrt = divergingSqrt;

var _continuous = require("./continuous");

var _init = require("./init");

var _linear = require("./linear");

var _log = require("./log");

var _sequential = require("./sequential");

var _symlog = require("./symlog");

var _pow = require("./pow");

function transformer() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = _continuous.identity,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);
    return scale;
  };
}

function diverging() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return (0, _sequential.copy)(scale, diverging());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingLog() {
  var scale = (0, _log.loggish)(transformer()).domain([0.1, 1, 10]);

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}
},{"./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js","./linear":"../node_modules/d3-scale/src/linear.js","./log":"../node_modules/d3-scale/src/log.js","./sequential":"../node_modules/d3-scale/src/sequential.js","./symlog":"../node_modules/d3-scale/src/symlog.js","./pow":"../node_modules/d3-scale/src/pow.js"}],"../node_modules/d3-scale/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "scaleBand", {
  enumerable: true,
  get: function () {
    return _band.default;
  }
});
Object.defineProperty(exports, "scalePoint", {
  enumerable: true,
  get: function () {
    return _band.point;
  }
});
Object.defineProperty(exports, "scaleIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "scaleLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "scaleLog", {
  enumerable: true,
  get: function () {
    return _log.default;
  }
});
Object.defineProperty(exports, "scaleSymlog", {
  enumerable: true,
  get: function () {
    return _symlog.default;
  }
});
Object.defineProperty(exports, "scaleOrdinal", {
  enumerable: true,
  get: function () {
    return _ordinal.default;
  }
});
Object.defineProperty(exports, "scaleImplicit", {
  enumerable: true,
  get: function () {
    return _ordinal.implicit;
  }
});
Object.defineProperty(exports, "scalePow", {
  enumerable: true,
  get: function () {
    return _pow.default;
  }
});
Object.defineProperty(exports, "scaleSqrt", {
  enumerable: true,
  get: function () {
    return _pow.sqrt;
  }
});
Object.defineProperty(exports, "scaleQuantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "scaleQuantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "scaleThreshold", {
  enumerable: true,
  get: function () {
    return _threshold.default;
  }
});
Object.defineProperty(exports, "scaleTime", {
  enumerable: true,
  get: function () {
    return _time.default;
  }
});
Object.defineProperty(exports, "scaleUtc", {
  enumerable: true,
  get: function () {
    return _utcTime.default;
  }
});
Object.defineProperty(exports, "scaleSequential", {
  enumerable: true,
  get: function () {
    return _sequential.default;
  }
});
Object.defineProperty(exports, "scaleSequentialLog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialLog;
  }
});
Object.defineProperty(exports, "scaleSequentialPow", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialPow;
  }
});
Object.defineProperty(exports, "scaleSequentialSqrt", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSqrt;
  }
});
Object.defineProperty(exports, "scaleSequentialSymlog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSymlog;
  }
});
Object.defineProperty(exports, "scaleSequentialQuantile", {
  enumerable: true,
  get: function () {
    return _sequentialQuantile.default;
  }
});
Object.defineProperty(exports, "scaleDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "scaleDivergingLog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingLog;
  }
});
Object.defineProperty(exports, "scaleDivergingPow", {
  enumerable: true,
  get: function () {
    return _diverging.divergingPow;
  }
});
Object.defineProperty(exports, "scaleDivergingSqrt", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSqrt;
  }
});
Object.defineProperty(exports, "scaleDivergingSymlog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSymlog;
  }
});
Object.defineProperty(exports, "tickFormat", {
  enumerable: true,
  get: function () {
    return _tickFormat.default;
  }
});

var _band = _interopRequireWildcard(require("./band"));

var _identity = _interopRequireDefault(require("./identity"));

var _linear = _interopRequireDefault(require("./linear"));

var _log = _interopRequireDefault(require("./log"));

var _symlog = _interopRequireDefault(require("./symlog"));

var _ordinal = _interopRequireWildcard(require("./ordinal"));

var _pow = _interopRequireWildcard(require("./pow"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _quantize = _interopRequireDefault(require("./quantize"));

var _threshold = _interopRequireDefault(require("./threshold"));

var _time = _interopRequireDefault(require("./time"));

var _utcTime = _interopRequireDefault(require("./utcTime"));

var _sequential = _interopRequireWildcard(require("./sequential"));

var _sequentialQuantile = _interopRequireDefault(require("./sequentialQuantile"));

var _diverging = _interopRequireWildcard(require("./diverging"));

var _tickFormat = _interopRequireDefault(require("./tickFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./band":"../node_modules/d3-scale/src/band.js","./identity":"../node_modules/d3-scale/src/identity.js","./linear":"../node_modules/d3-scale/src/linear.js","./log":"../node_modules/d3-scale/src/log.js","./symlog":"../node_modules/d3-scale/src/symlog.js","./ordinal":"../node_modules/d3-scale/src/ordinal.js","./pow":"../node_modules/d3-scale/src/pow.js","./quantile":"../node_modules/d3-scale/src/quantile.js","./quantize":"../node_modules/d3-scale/src/quantize.js","./threshold":"../node_modules/d3-scale/src/threshold.js","./time":"../node_modules/d3-scale/src/time.js","./utcTime":"../node_modules/d3-scale/src/utcTime.js","./sequential":"../node_modules/d3-scale/src/sequential.js","./sequentialQuantile":"../node_modules/d3-scale/src/sequentialQuantile.js","./diverging":"../node_modules/d3-scale/src/diverging.js","./tickFormat":"../node_modules/d3-scale/src/tickFormat.js"}],"../node_modules/d3-scale-chromatic/src/colors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(specifier) {
  var n = specifier.length / 6 | 0,
      colors = new Array(n),
      i = 0;

  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);

  return colors;
}
},{}],"../node_modules/d3-scale-chromatic/src/categorical/category10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Accent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Dark2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Paired.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Pastel1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Pastel2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Set1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Set2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Set3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Tableau10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/ramp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

function _default(scheme) {
  return (0, _d3Interpolate.interpolateRgbBasis)(scheme[scheme.length - 1]);
}
},{"d3-interpolate":"../node_modules/d3-interpolate/src/index.js"}],"../node_modules/d3-scale-chromatic/src/diverging/BrBG.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/PRGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/PiYG.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/PuOr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/RdBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/RdGy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/Spectral.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Blues.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Greens.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Greys.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Purples.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Reds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
}
},{}],"../node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var _default = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(300, 0.5, 0.0), (0, _d3Color.cubehelix)(-240, 0.5, 1.0));

exports.default = _default;
},{"d3-color":"../node_modules/d3-color/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.cool = exports.warm = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var warm = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(-100, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.warm = warm;
var cool = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(260, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.cool = cool;
var c = (0, _d3Color.cubehelix)();

function _default(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c.h = 360 * t - 100;
  c.s = 1.5 - 1.5 * ts;
  c.l = 0.8 - 0.9 * ts;
  return c + "";
}
},{"d3-color":"../node_modules/d3-color/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var c = (0, _d3Color.rgb)(),
    pi_1_3 = Math.PI / 3,
    pi_2_3 = Math.PI * 2 / 3;

function _default(t) {
  var x;
  t = (0.5 - t) * Math.PI;
  c.r = 255 * (x = Math.sin(t)) * x;
  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
  return c + "";
}
},{"d3-color":"../node_modules/d3-color/src/index.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
}
},{}],"../node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plasma = exports.inferno = exports.magma = exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ramp(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var _default = ramp((0, _colors.default)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

exports.default = _default;
var magma = ramp((0, _colors.default)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
exports.magma = magma;
var inferno = ramp((0, _colors.default)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
exports.inferno = inferno;
var plasma = ramp((0, _colors.default)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
exports.plasma = plasma;
},{"../colors.js":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "schemeCategory10", {
  enumerable: true,
  get: function () {
    return _category.default;
  }
});
Object.defineProperty(exports, "schemeAccent", {
  enumerable: true,
  get: function () {
    return _Accent.default;
  }
});
Object.defineProperty(exports, "schemeDark2", {
  enumerable: true,
  get: function () {
    return _Dark.default;
  }
});
Object.defineProperty(exports, "schemePaired", {
  enumerable: true,
  get: function () {
    return _Paired.default;
  }
});
Object.defineProperty(exports, "schemePastel1", {
  enumerable: true,
  get: function () {
    return _Pastel.default;
  }
});
Object.defineProperty(exports, "schemePastel2", {
  enumerable: true,
  get: function () {
    return _Pastel2.default;
  }
});
Object.defineProperty(exports, "schemeSet1", {
  enumerable: true,
  get: function () {
    return _Set.default;
  }
});
Object.defineProperty(exports, "schemeSet2", {
  enumerable: true,
  get: function () {
    return _Set2.default;
  }
});
Object.defineProperty(exports, "schemeSet3", {
  enumerable: true,
  get: function () {
    return _Set3.default;
  }
});
Object.defineProperty(exports, "schemeTableau10", {
  enumerable: true,
  get: function () {
    return _Tableau.default;
  }
});
Object.defineProperty(exports, "interpolateBrBG", {
  enumerable: true,
  get: function () {
    return _BrBG.default;
  }
});
Object.defineProperty(exports, "schemeBrBG", {
  enumerable: true,
  get: function () {
    return _BrBG.scheme;
  }
});
Object.defineProperty(exports, "interpolatePRGn", {
  enumerable: true,
  get: function () {
    return _PRGn.default;
  }
});
Object.defineProperty(exports, "schemePRGn", {
  enumerable: true,
  get: function () {
    return _PRGn.scheme;
  }
});
Object.defineProperty(exports, "interpolatePiYG", {
  enumerable: true,
  get: function () {
    return _PiYG.default;
  }
});
Object.defineProperty(exports, "schemePiYG", {
  enumerable: true,
  get: function () {
    return _PiYG.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuOr", {
  enumerable: true,
  get: function () {
    return _PuOr.default;
  }
});
Object.defineProperty(exports, "schemePuOr", {
  enumerable: true,
  get: function () {
    return _PuOr.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdBu", {
  enumerable: true,
  get: function () {
    return _RdBu.default;
  }
});
Object.defineProperty(exports, "schemeRdBu", {
  enumerable: true,
  get: function () {
    return _RdBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdGy", {
  enumerable: true,
  get: function () {
    return _RdGy.default;
  }
});
Object.defineProperty(exports, "schemeRdGy", {
  enumerable: true,
  get: function () {
    return _RdGy.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdYlBu", {
  enumerable: true,
  get: function () {
    return _RdYlBu.default;
  }
});
Object.defineProperty(exports, "schemeRdYlBu", {
  enumerable: true,
  get: function () {
    return _RdYlBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdYlGn", {
  enumerable: true,
  get: function () {
    return _RdYlGn.default;
  }
});
Object.defineProperty(exports, "schemeRdYlGn", {
  enumerable: true,
  get: function () {
    return _RdYlGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateSpectral", {
  enumerable: true,
  get: function () {
    return _Spectral.default;
  }
});
Object.defineProperty(exports, "schemeSpectral", {
  enumerable: true,
  get: function () {
    return _Spectral.scheme;
  }
});
Object.defineProperty(exports, "interpolateBuGn", {
  enumerable: true,
  get: function () {
    return _BuGn.default;
  }
});
Object.defineProperty(exports, "schemeBuGn", {
  enumerable: true,
  get: function () {
    return _BuGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateBuPu", {
  enumerable: true,
  get: function () {
    return _BuPu.default;
  }
});
Object.defineProperty(exports, "schemeBuPu", {
  enumerable: true,
  get: function () {
    return _BuPu.scheme;
  }
});
Object.defineProperty(exports, "interpolateGnBu", {
  enumerable: true,
  get: function () {
    return _GnBu.default;
  }
});
Object.defineProperty(exports, "schemeGnBu", {
  enumerable: true,
  get: function () {
    return _GnBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateOrRd", {
  enumerable: true,
  get: function () {
    return _OrRd.default;
  }
});
Object.defineProperty(exports, "schemeOrRd", {
  enumerable: true,
  get: function () {
    return _OrRd.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuBuGn", {
  enumerable: true,
  get: function () {
    return _PuBuGn.default;
  }
});
Object.defineProperty(exports, "schemePuBuGn", {
  enumerable: true,
  get: function () {
    return _PuBuGn.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuBu", {
  enumerable: true,
  get: function () {
    return _PuBu.default;
  }
});
Object.defineProperty(exports, "schemePuBu", {
  enumerable: true,
  get: function () {
    return _PuBu.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuRd", {
  enumerable: true,
  get: function () {
    return _PuRd.default;
  }
});
Object.defineProperty(exports, "schemePuRd", {
  enumerable: true,
  get: function () {
    return _PuRd.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdPu", {
  enumerable: true,
  get: function () {
    return _RdPu.default;
  }
});
Object.defineProperty(exports, "schemeRdPu", {
  enumerable: true,
  get: function () {
    return _RdPu.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlGnBu", {
  enumerable: true,
  get: function () {
    return _YlGnBu.default;
  }
});
Object.defineProperty(exports, "schemeYlGnBu", {
  enumerable: true,
  get: function () {
    return _YlGnBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlGn", {
  enumerable: true,
  get: function () {
    return _YlGn.default;
  }
});
Object.defineProperty(exports, "schemeYlGn", {
  enumerable: true,
  get: function () {
    return _YlGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlOrBr", {
  enumerable: true,
  get: function () {
    return _YlOrBr.default;
  }
});
Object.defineProperty(exports, "schemeYlOrBr", {
  enumerable: true,
  get: function () {
    return _YlOrBr.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlOrRd", {
  enumerable: true,
  get: function () {
    return _YlOrRd.default;
  }
});
Object.defineProperty(exports, "schemeYlOrRd", {
  enumerable: true,
  get: function () {
    return _YlOrRd.scheme;
  }
});
Object.defineProperty(exports, "interpolateBlues", {
  enumerable: true,
  get: function () {
    return _Blues.default;
  }
});
Object.defineProperty(exports, "schemeBlues", {
  enumerable: true,
  get: function () {
    return _Blues.scheme;
  }
});
Object.defineProperty(exports, "interpolateGreens", {
  enumerable: true,
  get: function () {
    return _Greens.default;
  }
});
Object.defineProperty(exports, "schemeGreens", {
  enumerable: true,
  get: function () {
    return _Greens.scheme;
  }
});
Object.defineProperty(exports, "interpolateGreys", {
  enumerable: true,
  get: function () {
    return _Greys.default;
  }
});
Object.defineProperty(exports, "schemeGreys", {
  enumerable: true,
  get: function () {
    return _Greys.scheme;
  }
});
Object.defineProperty(exports, "interpolatePurples", {
  enumerable: true,
  get: function () {
    return _Purples.default;
  }
});
Object.defineProperty(exports, "schemePurples", {
  enumerable: true,
  get: function () {
    return _Purples.scheme;
  }
});
Object.defineProperty(exports, "interpolateReds", {
  enumerable: true,
  get: function () {
    return _Reds.default;
  }
});
Object.defineProperty(exports, "schemeReds", {
  enumerable: true,
  get: function () {
    return _Reds.scheme;
  }
});
Object.defineProperty(exports, "interpolateOranges", {
  enumerable: true,
  get: function () {
    return _Oranges.default;
  }
});
Object.defineProperty(exports, "schemeOranges", {
  enumerable: true,
  get: function () {
    return _Oranges.scheme;
  }
});
Object.defineProperty(exports, "interpolateCividis", {
  enumerable: true,
  get: function () {
    return _cividis.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixDefault", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateRainbow", {
  enumerable: true,
  get: function () {
    return _rainbow.default;
  }
});
Object.defineProperty(exports, "interpolateWarm", {
  enumerable: true,
  get: function () {
    return _rainbow.warm;
  }
});
Object.defineProperty(exports, "interpolateCool", {
  enumerable: true,
  get: function () {
    return _rainbow.cool;
  }
});
Object.defineProperty(exports, "interpolateSinebow", {
  enumerable: true,
  get: function () {
    return _sinebow.default;
  }
});
Object.defineProperty(exports, "interpolateTurbo", {
  enumerable: true,
  get: function () {
    return _turbo.default;
  }
});
Object.defineProperty(exports, "interpolateViridis", {
  enumerable: true,
  get: function () {
    return _viridis.default;
  }
});
Object.defineProperty(exports, "interpolateMagma", {
  enumerable: true,
  get: function () {
    return _viridis.magma;
  }
});
Object.defineProperty(exports, "interpolateInferno", {
  enumerable: true,
  get: function () {
    return _viridis.inferno;
  }
});
Object.defineProperty(exports, "interpolatePlasma", {
  enumerable: true,
  get: function () {
    return _viridis.plasma;
  }
});

var _category = _interopRequireDefault(require("./categorical/category10.js"));

var _Accent = _interopRequireDefault(require("./categorical/Accent.js"));

var _Dark = _interopRequireDefault(require("./categorical/Dark2.js"));

var _Paired = _interopRequireDefault(require("./categorical/Paired.js"));

var _Pastel = _interopRequireDefault(require("./categorical/Pastel1.js"));

var _Pastel2 = _interopRequireDefault(require("./categorical/Pastel2.js"));

var _Set = _interopRequireDefault(require("./categorical/Set1.js"));

var _Set2 = _interopRequireDefault(require("./categorical/Set2.js"));

var _Set3 = _interopRequireDefault(require("./categorical/Set3.js"));

var _Tableau = _interopRequireDefault(require("./categorical/Tableau10.js"));

var _BrBG = _interopRequireWildcard(require("./diverging/BrBG.js"));

var _PRGn = _interopRequireWildcard(require("./diverging/PRGn.js"));

var _PiYG = _interopRequireWildcard(require("./diverging/PiYG.js"));

var _PuOr = _interopRequireWildcard(require("./diverging/PuOr.js"));

var _RdBu = _interopRequireWildcard(require("./diverging/RdBu.js"));

var _RdGy = _interopRequireWildcard(require("./diverging/RdGy.js"));

var _RdYlBu = _interopRequireWildcard(require("./diverging/RdYlBu.js"));

var _RdYlGn = _interopRequireWildcard(require("./diverging/RdYlGn.js"));

var _Spectral = _interopRequireWildcard(require("./diverging/Spectral.js"));

var _BuGn = _interopRequireWildcard(require("./sequential-multi/BuGn.js"));

var _BuPu = _interopRequireWildcard(require("./sequential-multi/BuPu.js"));

var _GnBu = _interopRequireWildcard(require("./sequential-multi/GnBu.js"));

var _OrRd = _interopRequireWildcard(require("./sequential-multi/OrRd.js"));

var _PuBuGn = _interopRequireWildcard(require("./sequential-multi/PuBuGn.js"));

var _PuBu = _interopRequireWildcard(require("./sequential-multi/PuBu.js"));

var _PuRd = _interopRequireWildcard(require("./sequential-multi/PuRd.js"));

var _RdPu = _interopRequireWildcard(require("./sequential-multi/RdPu.js"));

var _YlGnBu = _interopRequireWildcard(require("./sequential-multi/YlGnBu.js"));

var _YlGn = _interopRequireWildcard(require("./sequential-multi/YlGn.js"));

var _YlOrBr = _interopRequireWildcard(require("./sequential-multi/YlOrBr.js"));

var _YlOrRd = _interopRequireWildcard(require("./sequential-multi/YlOrRd.js"));

var _Blues = _interopRequireWildcard(require("./sequential-single/Blues.js"));

var _Greens = _interopRequireWildcard(require("./sequential-single/Greens.js"));

var _Greys = _interopRequireWildcard(require("./sequential-single/Greys.js"));

var _Purples = _interopRequireWildcard(require("./sequential-single/Purples.js"));

var _Reds = _interopRequireWildcard(require("./sequential-single/Reds.js"));

var _Oranges = _interopRequireWildcard(require("./sequential-single/Oranges.js"));

var _cividis = _interopRequireDefault(require("./sequential-multi/cividis.js"));

var _cubehelix = _interopRequireDefault(require("./sequential-multi/cubehelix.js"));

var _rainbow = _interopRequireWildcard(require("./sequential-multi/rainbow.js"));

var _sinebow = _interopRequireDefault(require("./sequential-multi/sinebow.js"));

var _turbo = _interopRequireDefault(require("./sequential-multi/turbo.js"));

var _viridis = _interopRequireWildcard(require("./sequential-multi/viridis.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./categorical/category10.js":"../node_modules/d3-scale-chromatic/src/categorical/category10.js","./categorical/Accent.js":"../node_modules/d3-scale-chromatic/src/categorical/Accent.js","./categorical/Dark2.js":"../node_modules/d3-scale-chromatic/src/categorical/Dark2.js","./categorical/Paired.js":"../node_modules/d3-scale-chromatic/src/categorical/Paired.js","./categorical/Pastel1.js":"../node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","./categorical/Pastel2.js":"../node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","./categorical/Set1.js":"../node_modules/d3-scale-chromatic/src/categorical/Set1.js","./categorical/Set2.js":"../node_modules/d3-scale-chromatic/src/categorical/Set2.js","./categorical/Set3.js":"../node_modules/d3-scale-chromatic/src/categorical/Set3.js","./categorical/Tableau10.js":"../node_modules/d3-scale-chromatic/src/categorical/Tableau10.js","./diverging/BrBG.js":"../node_modules/d3-scale-chromatic/src/diverging/BrBG.js","./diverging/PRGn.js":"../node_modules/d3-scale-chromatic/src/diverging/PRGn.js","./diverging/PiYG.js":"../node_modules/d3-scale-chromatic/src/diverging/PiYG.js","./diverging/PuOr.js":"../node_modules/d3-scale-chromatic/src/diverging/PuOr.js","./diverging/RdBu.js":"../node_modules/d3-scale-chromatic/src/diverging/RdBu.js","./diverging/RdGy.js":"../node_modules/d3-scale-chromatic/src/diverging/RdGy.js","./diverging/RdYlBu.js":"../node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","./diverging/RdYlGn.js":"../node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","./diverging/Spectral.js":"../node_modules/d3-scale-chromatic/src/diverging/Spectral.js","./sequential-multi/BuGn.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","./sequential-multi/BuPu.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","./sequential-multi/GnBu.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","./sequential-multi/OrRd.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","./sequential-multi/PuBuGn.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","./sequential-multi/PuBu.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","./sequential-multi/PuRd.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","./sequential-multi/RdPu.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","./sequential-multi/YlGnBu.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","./sequential-multi/YlGn.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","./sequential-multi/YlOrBr.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","./sequential-multi/YlOrRd.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","./sequential-single/Blues.js":"../node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","./sequential-single/Greens.js":"../node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","./sequential-single/Greys.js":"../node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","./sequential-single/Purples.js":"../node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","./sequential-single/Reds.js":"../node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","./sequential-single/Oranges.js":"../node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","./sequential-multi/cividis.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js","./sequential-multi/cubehelix.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","./sequential-multi/rainbow.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js","./sequential-multi/sinebow.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js","./sequential-multi/turbo.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js","./sequential-multi/viridis.js":"../node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js"}],"../node_modules/d3-shape/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function constant() {
    return x;
  };
}
},{}],"../node_modules/d3-shape/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.tau = exports.halfPi = exports.pi = exports.epsilon = exports.sqrt = exports.sin = exports.min = exports.max = exports.cos = exports.atan2 = exports.abs = void 0;
var abs = Math.abs;
exports.abs = abs;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var max = Math.max;
exports.max = max;
var min = Math.min;
exports.min = min;
var sin = Math.sin;
exports.sin = sin;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var epsilon = 1e-12;
exports.epsilon = epsilon;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = 2 * pi;
exports.tau = tau;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}
},{}],"../node_modules/d3-shape/src/arc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < _math.epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
} // Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html


function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / (0, _math.sqrt)(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * (0, _math.sqrt)((0, _math.max)(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?

  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function _default() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = (0, _constant.default)(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - _math.halfPi,
        a1 = endAngle.apply(this, arguments) - _math.halfPi,
        da = (0, _math.abs)(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = (0, _d3Path.path)(); // Ensure that the outer radius is always larger than the inner radius.

    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

    if (!(r1 > _math.epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?
    else if (da > _math.tau - _math.epsilon) {
        context.moveTo(r1 * (0, _math.cos)(a0), r1 * (0, _math.sin)(a0));
        context.arc(0, 0, r1, a0, a1, !cw);

        if (r0 > _math.epsilon) {
          context.moveTo(r0 * (0, _math.cos)(a1), r0 * (0, _math.sin)(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      } // Or is it a circular or annular sector?
      else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = ap > _math.epsilon && (padRadius ? +padRadius.apply(this, arguments) : (0, _math.sqrt)(r0 * r0 + r1 * r1)),
              rc = (0, _math.min)((0, _math.abs)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

          if (rp > _math.epsilon) {
            var p0 = (0, _math.asin)(rp / r0 * (0, _math.sin)(ap)),
                p1 = (0, _math.asin)(rp / r1 * (0, _math.sin)(ap));
            if ((da0 -= p0 * 2) > _math.epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > _math.epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * (0, _math.cos)(a01),
              y01 = r1 * (0, _math.sin)(a01),
              x10 = r0 * (0, _math.cos)(a10),
              y10 = r0 * (0, _math.sin)(a10); // Apply rounded corners?

          if (rc > _math.epsilon) {
            var x11 = r1 * (0, _math.cos)(a11),
                y11 = r1 * (0, _math.sin)(a11),
                x00 = r0 * (0, _math.cos)(a00),
                y00 = r0 * (0, _math.sin)(a00),
                oc; // Restrict the corner radius according to the sector angle.

            if (da < _math.pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / (0, _math.sin)((0, _math.acos)((ax * bx + ay * by) / ((0, _math.sqrt)(ax * ax + ay * ay) * (0, _math.sqrt)(bx * bx + by * by))) / 2),
                  lc = (0, _math.sqrt)(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = (0, _math.min)(rc, (r0 - lc) / (kc - 1));
              rc1 = (0, _math.min)(rc, (r1 - lc) / (kc + 1));
            }
          } // Is the sector collapsed to a line?


          if (!(da1 > _math.epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
          else if (rc1 > _math.epsilon) {
              t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the outer ring just a circular arc?
            else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?

          if (!(r0 > _math.epsilon) || !(da0 > _math.epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > _math.epsilon) {
              t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the inner ring just a circular arc?
            else context.arc(0, 0, r0, a10, a00, cw);
        }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - _math.pi / 2;
    return [(0, _math.cos)(a) * r, (0, _math.sin)(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
}
},{"d3-path":"../node_modules/d3-path/src/index.js","./constant.js":"../node_modules/d3-shape/src/constant.js","./math.js":"../node_modules/d3-shape/src/math.js"}],"../node_modules/d3-shape/src/curve/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        this._context.lineTo(x, y);

        break;
    }
  }
};

function _default(context) {
  return new Linear(context);
}
},{}],"../node_modules/d3-shape/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}
},{}],"../node_modules/d3-shape/src/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _point = require("./point.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }

      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : x;
  };

  line.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : y;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}
},{"d3-path":"../node_modules/d3-path/src/index.js","./constant.js":"../node_modules/d3-shape/src/constant.js","./curve/linear.js":"../node_modules/d3-shape/src/curve/linear.js","./point.js":"../node_modules/d3-shape/src/point.js"}],"../node_modules/d3-shape/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _point = require("./point.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = _point.x,
      x1 = null,
      y0 = (0, _constant.default)(0),
      y1 = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();

          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }

          output.lineEnd();
          output.areaEnd();
        }
      }

      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return (0, _line.default)().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}
},{"d3-path":"../node_modules/d3-path/src/index.js","./constant.js":"../node_modules/d3-shape/src/constant.js","./curve/linear.js":"../node_modules/d3-shape/src/curve/linear.js","./line.js":"../node_modules/d3-shape/src/line.js","./point.js":"../node_modules/d3-shape/src/point.js"}],"../node_modules/d3-shape/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"../node_modules/d3-shape/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(d) {
  return d;
}
},{}],"../node_modules/d3-shape/src/pie.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant.js"));

var _descending = _interopRequireDefault(require("./descending.js"));

var _identity = _interopRequireDefault(require("./identity.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      sortValues = _descending.default,
      sort = null,
      startAngle = (0, _constant.default)(0),
      endAngle = (0, _constant.default)(_math.tau),
      padAngle = (0, _constant.default)(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(_math.tau, Math.max(-_math.tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    } // Optionally sort the arcs by previously-computed values or by data.


    if (sortValues != null) index.sort(function (i, j) {
      return sortValues(arcs[i], arcs[j]);
    });else if (sort != null) index.sort(function (i, j) {
      return sort(data[i], data[j]);
    }); // Compute the arcs! They are stored in the original data's order.

    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : value;
  };

  pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : startAngle;
  };

  pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : endAngle;
  };

  pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : padAngle;
  };

  return pie;
}
},{"./constant.js":"../node_modules/d3-shape/src/constant.js","./descending.js":"../node_modules/d3-shape/src/descending.js","./identity.js":"../node_modules/d3-shape/src/identity.js","./math.js":"../node_modules/d3-shape/src/math.js"}],"../node_modules/d3-shape/src/curve/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = curveRadial;
exports.curveRadialLinear = void 0;

var _linear = _interopRequireDefault(require("./linear.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var curveRadialLinear = curveRadial(_linear.default);
exports.curveRadialLinear = curveRadialLinear;

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function () {
    this._curve.areaStart();
  },
  areaEnd: function () {
    this._curve.areaEnd();
  },
  lineStart: function () {
    this._curve.lineStart();
  },
  lineEnd: function () {
    this._curve.lineEnd();
  },
  point: function (a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;
  return radial;
}
},{"./linear.js":"../node_modules/d3-shape/src/curve/linear.js"}],"../node_modules/d3-shape/src/lineRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineRadial = lineRadial;
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial.js"));

var _line = _interopRequireDefault(require("./line.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function lineRadial(l) {
  var c = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return l;
}

function _default() {
  return lineRadial((0, _line.default)().curve(_radial.curveRadialLinear));
}
},{"./curve/radial.js":"../node_modules/d3-shape/src/curve/radial.js","./line.js":"../node_modules/d3-shape/src/line.js"}],"../node_modules/d3-shape/src/areaRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _lineRadial = require("./lineRadial.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default() {
  var a = (0, _area.default)().curve(_radial.curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;
  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function () {
    return (0, _lineRadial.lineRadial)(x0());
  }, delete a.lineX0;
  a.lineEndAngle = function () {
    return (0, _lineRadial.lineRadial)(x1());
  }, delete a.lineX1;
  a.lineInnerRadius = function () {
    return (0, _lineRadial.lineRadial)(y0());
  }, delete a.lineY0;
  a.lineOuterRadius = function () {
    return (0, _lineRadial.lineRadial)(y1());
  }, delete a.lineY1;

  a.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return a;
}
},{"./curve/radial.js":"../node_modules/d3-shape/src/curve/radial.js","./area.js":"../node_modules/d3-shape/src/area.js","./lineRadial.js":"../node_modules/d3-shape/src/lineRadial.js"}],"../node_modules/d3-shape/src/pointRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}
},{}],"../node_modules/d3-shape/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"../node_modules/d3-shape/src/link/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkHorizontal = linkHorizontal;
exports.linkVertical = linkVertical;
exports.linkRadial = linkRadial;

var _d3Path = require("d3-path");

var _array = require("../array.js");

var _constant = _interopRequireDefault(require("../constant.js"));

var _point = require("../point.js");

var _pointRadial = _interopRequireDefault(require("../pointRadial.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  var source = linkSource,
      target = linkTarget,
      x = _point.x,
      y = _point.y,
      context = null;

  function link() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv);

    if (!context) context = buffer = (0, _d3Path.path)();
    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }

  link.source = function (_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function (_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : x;
  };

  link.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : y;
  };

  link.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, link) : context;
  };

  return link;
}

function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}

function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}

function curveRadial(context, x0, y0, x1, y1) {
  var p0 = (0, _pointRadial.default)(x0, y0),
      p1 = (0, _pointRadial.default)(x0, y0 = (y0 + y1) / 2),
      p2 = (0, _pointRadial.default)(x1, y0),
      p3 = (0, _pointRadial.default)(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}

function linkHorizontal() {
  return link(curveHorizontal);
}

function linkVertical() {
  return link(curveVertical);
}

function linkRadial() {
  var l = link(curveRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}
},{"d3-path":"../node_modules/d3-path/src/index.js","../array.js":"../node_modules/d3-shape/src/array.js","../constant.js":"../node_modules/d3-shape/src/constant.js","../point.js":"../node_modules/d3-shape/src/point.js","../pointRadial.js":"../node_modules/d3-shape/src/pointRadial.js"}],"../node_modules/d3-shape/src/symbol/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / _math.pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, _math.tau);
  }
};
exports.default = _default;
},{"../math.js":"../node_modules/d3-shape/src/math.js"}],"../node_modules/d3-shape/src/symbol/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};
exports.default = _default;
},{}],"../node_modules/d3-shape/src/symbol/diamond.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;
var _default = {
  draw: function (context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};
exports.default = _default;
},{}],"../node_modules/d3-shape/src/symbol/star.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var ka = 0.89081309152928522810,
    kr = Math.sin(_math.pi / 10) / Math.sin(7 * _math.pi / 10),
    kx = Math.sin(_math.tau / 10) * kr,
    ky = -Math.cos(_math.tau / 10) * kr;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);

    for (var i = 1; i < 5; ++i) {
      var a = _math.tau * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }

    context.closePath();
  }
};
exports.default = _default;
},{"../math.js":"../node_modules/d3-shape/src/math.js"}],"../node_modules/d3-shape/src/symbol/square.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};
exports.default = _default;
},{}],"../node_modules/d3-shape/src/symbol/triangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var sqrt3 = Math.sqrt(3);
var _default = {
  draw: function (context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};
exports.default = _default;
},{}],"../node_modules/d3-shape/src/symbol/wye.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};
exports.default = _default;
},{}],"../node_modules/d3-shape/src/symbol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.symbols = void 0;

var _d3Path = require("d3-path");

var _circle = _interopRequireDefault(require("./symbol/circle.js"));

var _cross = _interopRequireDefault(require("./symbol/cross.js"));

var _diamond = _interopRequireDefault(require("./symbol/diamond.js"));

var _star = _interopRequireDefault(require("./symbol/star.js"));

var _square = _interopRequireDefault(require("./symbol/square.js"));

var _triangle = _interopRequireDefault(require("./symbol/triangle.js"));

var _wye = _interopRequireDefault(require("./symbol/wye.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var symbols = [_circle.default, _cross.default, _diamond.default, _square.default, _star.default, _triangle.default, _wye.default];
exports.symbols = symbols;

function _default() {
  var type = (0, _constant.default)(_circle.default),
      size = (0, _constant.default)(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = (0, _d3Path.path)();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function (_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : (0, _constant.default)(_), symbol) : type;
  };

  symbol.size = function (_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : (0, _constant.default)(+_), symbol) : size;
  };

  symbol.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}
},{"d3-path":"../node_modules/d3-path/src/index.js","./symbol/circle.js":"../node_modules/d3-shape/src/symbol/circle.js","./symbol/cross.js":"../node_modules/d3-shape/src/symbol/cross.js","./symbol/diamond.js":"../node_modules/d3-shape/src/symbol/diamond.js","./symbol/star.js":"../node_modules/d3-shape/src/symbol/star.js","./symbol/square.js":"../node_modules/d3-shape/src/symbol/square.js","./symbol/triangle.js":"../node_modules/d3-shape/src/symbol/triangle.js","./symbol/wye.js":"../node_modules/d3-shape/src/symbol/wye.js","./constant.js":"../node_modules/d3-shape/src/constant.js"}],"../node_modules/d3-shape/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"../node_modules/d3-shape/src/curve/basis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Basis = Basis;
exports.default = _default;

function point(that, x, y) {
  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      // proceed

      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;

        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);

      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new Basis(context);
}
},{}],"../node_modules/d3-shape/src/curve/basisClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

var _basis = require("./basis.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x2, this._y2);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);

          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x, this._y2 = y;
        break;

      case 1:
        this._point = 2;
        this._x3 = x, this._y3 = y;
        break;

      case 2:
        this._point = 3;
        this._x4 = x, this._y4 = y;

        this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);

        break;

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisClosed(context);
}
},{"../noop.js":"../node_modules/d3-shape/src/noop.js","./basis.js":"../node_modules/d3-shape/src/curve/basis.js"}],"../node_modules/d3-shape/src/curve/basisOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis.js");

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x) / 6,
            y0 = (this._y0 + 4 * this._y1 + y) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisOpen(context);
}
},{"./basis.js":"../node_modules/d3-shape/src/curve/basis.js"}],"../node_modules/d3-shape/src/curve/bundle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _basis = require("./basis.js");

function Bundle(context, beta) {
  this._basis = new _basis.Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function () {
    this._x = [];
    this._y = [];

    this._basis.lineStart();
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;

        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
      }
    }

    this._x = this._y = null;

    this._basis.lineEnd();
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
};

var _default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new _basis.Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function (beta) {
    return custom(+beta);
  };

  return bundle;
}(0.85);

exports.default = _default;
},{"./basis.js":"../node_modules/d3-shape/src/curve/basis.js"}],"../node_modules/d3-shape/src/curve/cardinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Cardinal = Cardinal;
exports.default = void 0;

function point(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        point(this, this._x1, this._y1);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        this._x1 = x, this._y1 = y;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{}],"../node_modules/d3-shape/src/curve/cardinalClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalClosed = CardinalClosed;
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop.js"));

var _cardinal = require("./cardinal.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"../noop.js":"../node_modules/d3-shape/src/noop.js","./cardinal.js":"../node_modules/d3-shape/src/curve/cardinal.js"}],"../node_modules/d3-shape/src/curve/cardinalOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalOpen = CardinalOpen;
exports.default = void 0;

var _cardinal = require("./cardinal.js");

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"./cardinal.js":"../node_modules/d3-shape/src/curve/cardinal.js"}],"../node_modules/d3-shape/src/curve/catmullRom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.default = void 0;

var _math = require("../math.js");

var _cardinal = require("./cardinal.js");

function point(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > _math.epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > _math.epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        this.point(this._x2, this._y2);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new _cardinal.Cardinal(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"../math.js":"../node_modules/d3-shape/src/math.js","./cardinal.js":"../node_modules/d3-shape/src/curve/cardinal.js"}],"../node_modules/d3-shape/src/curve/catmullRomClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalClosed = require("./cardinalClosed.js");

var _noop = _interopRequireDefault(require("../noop.js"));

var _catmullRom = require("./catmullRom.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new _cardinalClosed.CardinalClosed(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalClosed.js":"../node_modules/d3-shape/src/curve/cardinalClosed.js","../noop.js":"../node_modules/d3-shape/src/noop.js","./catmullRom.js":"../node_modules/d3-shape/src/curve/catmullRom.js"}],"../node_modules/d3-shape/src/curve/catmullRomOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalOpen = require("./cardinalOpen.js");

var _catmullRom = require("./catmullRom.js");

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new _cardinalOpen.CardinalOpen(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalOpen.js":"../node_modules/d3-shape/src/curve/cardinalOpen.js","./catmullRom.js":"../node_modules/d3-shape/src/curve/catmullRom.js"}],"../node_modules/d3-shape/src/curve/linearClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._point) this._context.closePath();
  },
  point: function (x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
  }
};

function _default(context) {
  return new LinearClosed(context);
}
},{"../noop.js":"../node_modules/d3-shape/src/noop.js"}],"../node_modules/d3-shape/src/curve/monotone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monotoneX = monotoneX;
exports.monotoneY = monotoneY;

function sign(x) {
  return x < 0 ? -1 : 1;
} // Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.


function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
} // Calculate a one-sided slope.


function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


function point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;

  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;

      case 3:
        point(this, this._t0, slope2(this, this._t0));
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    var t1 = NaN;
    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        point(this, slope2(this, t1 = slope3(this, x, y)), t1);
        break;

      default:
        point(this, this._t0, t1 = slope3(this, x, y));
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function (x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function () {
    this._context.closePath();
  },
  lineTo: function (x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}
},{}],"../node_modules/d3-shape/src/curve/natural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = [];
    this._y = [];
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);

      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);

        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
}; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.

function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];

  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];

  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];

  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];

  a[n - 1] = r[n - 1] / b[n - 1];

  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];

  b[n - 1] = (x[n] + a[n - 1]) / 2;

  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];

  return [a, b];
}

function _default(context) {
  return new Natural(context);
}
},{}],"../node_modules/d3-shape/src/curve/step.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.stepBefore = stepBefore;
exports.stepAfter = stepAfter;

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y);

            this._context.lineTo(x, y);
          } else {
            var x1 = this._x * (1 - this._t) + x * this._t;

            this._context.lineTo(x1, this._y);

            this._context.lineTo(x1, y);
          }

          break;
        }
    }

    this._x = x, this._y = y;
  }
};

function _default(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}
},{}],"../node_modules/d3-shape/src/offset/none.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 1)) return;

  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];

    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}
},{}],"../node_modules/d3-shape/src/order/none.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series) {
  var n = series.length,
      o = new Array(n);

  while (--n >= 0) o[n] = n;

  return o;
}
},{}],"../node_modules/d3-shape/src/stack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array.js");

var _constant = _interopRequireDefault(require("./constant.js"));

var _none = _interopRequireDefault(require("./offset/none.js"));

var _none2 = _interopRequireDefault(require("./order/none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stackValue(d, key) {
  return d[key];
}

function _default() {
  var keys = (0, _constant.default)([]),
      order = _none2.default,
      offset = _none.default,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }

      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : keys;
  };

  stack.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), stack) : value;
  };

  stack.order = function (_) {
    return arguments.length ? (order = _ == null ? _none2.default : typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : order;
  };

  stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? _none.default : _, stack) : offset;
  };

  return stack;
}
},{"./array.js":"../node_modules/d3-shape/src/array.js","./constant.js":"../node_modules/d3-shape/src/constant.js","./offset/none.js":"../node_modules/d3-shape/src/offset/none.js","./order/none.js":"../node_modules/d3-shape/src/order/none.js"}],"../node_modules/d3-shape/src/offset/expand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;

    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }

  (0, _none.default)(series, order);
}
},{"./none.js":"../node_modules/d3-shape/src/offset/none.js"}],"../node_modules/d3-shape/src/offset/diverging.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}
},{}],"../node_modules/d3-shape/src/offset/silhouette.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;

    s0[j][1] += s0[j][0] = -y / 2;
  }

  (0, _none.default)(series, order);
}
},{"./none.js":"../node_modules/d3-shape/src/offset/none.js"}],"../node_modules/d3-shape/src/offset/wiggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;

  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;

      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }

      s1 += sij0, s2 += s3 * sij0;
    }

    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }

  s0[j - 1][1] += s0[j - 1][0] = y;
  (0, _none.default)(series, order);
}
},{"./none.js":"../node_modules/d3-shape/src/offset/none.js"}],"../node_modules/d3-shape/src/order/appearance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var peaks = series.map(peak);
  return (0, _none.default)(series).sort(function (a, b) {
    return peaks[a] - peaks[b];
  });
}

function peak(series) {
  var i = -1,
      j = 0,
      n = series.length,
      vi,
      vj = -Infinity;

  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;

  return j;
}
},{"./none.js":"../node_modules/d3-shape/src/order/none.js"}],"../node_modules/d3-shape/src/order/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.sum = sum;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var sums = series.map(sum);
  return (0, _none.default)(series).sort(function (a, b) {
    return sums[a] - sums[b];
  });
}

function sum(series) {
  var s = 0,
      i = -1,
      n = series.length,
      v;

  while (++i < n) if (v = +series[i][1]) s += v;

  return s;
}
},{"./none.js":"../node_modules/d3-shape/src/order/none.js"}],"../node_modules/d3-shape/src/order/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _ascending.default)(series).reverse();
}
},{"./ascending.js":"../node_modules/d3-shape/src/order/ascending.js"}],"../node_modules/d3-shape/src/order/insideOut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _appearance = _interopRequireDefault(require("./appearance.js"));

var _ascending = require("./ascending.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(_ascending.sum),
      order = (0, _appearance.default)(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];

    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}
},{"./appearance.js":"../node_modules/d3-shape/src/order/appearance.js","./ascending.js":"../node_modules/d3-shape/src/order/ascending.js"}],"../node_modules/d3-shape/src/order/reverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _none.default)(series).reverse();
}
},{"./none.js":"../node_modules/d3-shape/src/order/none.js"}],"../node_modules/d3-shape/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "arc", {
  enumerable: true,
  get: function () {
    return _arc.default;
  }
});
Object.defineProperty(exports, "area", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "line", {
  enumerable: true,
  get: function () {
    return _line.default;
  }
});
Object.defineProperty(exports, "pie", {
  enumerable: true,
  get: function () {
    return _pie.default;
  }
});
Object.defineProperty(exports, "areaRadial", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "radialArea", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "lineRadial", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "radialLine", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "pointRadial", {
  enumerable: true,
  get: function () {
    return _pointRadial.default;
  }
});
Object.defineProperty(exports, "linkHorizontal", {
  enumerable: true,
  get: function () {
    return _index.linkHorizontal;
  }
});
Object.defineProperty(exports, "linkVertical", {
  enumerable: true,
  get: function () {
    return _index.linkVertical;
  }
});
Object.defineProperty(exports, "linkRadial", {
  enumerable: true,
  get: function () {
    return _index.linkRadial;
  }
});
Object.defineProperty(exports, "symbol", {
  enumerable: true,
  get: function () {
    return _symbol.default;
  }
});
Object.defineProperty(exports, "symbols", {
  enumerable: true,
  get: function () {
    return _symbol.symbols;
  }
});
Object.defineProperty(exports, "symbolCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "symbolCross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "symbolDiamond", {
  enumerable: true,
  get: function () {
    return _diamond.default;
  }
});
Object.defineProperty(exports, "symbolSquare", {
  enumerable: true,
  get: function () {
    return _square.default;
  }
});
Object.defineProperty(exports, "symbolStar", {
  enumerable: true,
  get: function () {
    return _star.default;
  }
});
Object.defineProperty(exports, "symbolTriangle", {
  enumerable: true,
  get: function () {
    return _triangle.default;
  }
});
Object.defineProperty(exports, "symbolWye", {
  enumerable: true,
  get: function () {
    return _wye.default;
  }
});
Object.defineProperty(exports, "curveBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "curveBasisOpen", {
  enumerable: true,
  get: function () {
    return _basisOpen.default;
  }
});
Object.defineProperty(exports, "curveBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "curveBundle", {
  enumerable: true,
  get: function () {
    return _bundle.default;
  }
});
Object.defineProperty(exports, "curveCardinalClosed", {
  enumerable: true,
  get: function () {
    return _cardinalClosed.default;
  }
});
Object.defineProperty(exports, "curveCardinalOpen", {
  enumerable: true,
  get: function () {
    return _cardinalOpen.default;
  }
});
Object.defineProperty(exports, "curveCardinal", {
  enumerable: true,
  get: function () {
    return _cardinal.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomClosed", {
  enumerable: true,
  get: function () {
    return _catmullRomClosed.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomOpen", {
  enumerable: true,
  get: function () {
    return _catmullRomOpen.default;
  }
});
Object.defineProperty(exports, "curveCatmullRom", {
  enumerable: true,
  get: function () {
    return _catmullRom.default;
  }
});
Object.defineProperty(exports, "curveLinearClosed", {
  enumerable: true,
  get: function () {
    return _linearClosed.default;
  }
});
Object.defineProperty(exports, "curveLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "curveMonotoneX", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneX;
  }
});
Object.defineProperty(exports, "curveMonotoneY", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneY;
  }
});
Object.defineProperty(exports, "curveNatural", {
  enumerable: true,
  get: function () {
    return _natural.default;
  }
});
Object.defineProperty(exports, "curveStep", {
  enumerable: true,
  get: function () {
    return _step.default;
  }
});
Object.defineProperty(exports, "curveStepAfter", {
  enumerable: true,
  get: function () {
    return _step.stepAfter;
  }
});
Object.defineProperty(exports, "curveStepBefore", {
  enumerable: true,
  get: function () {
    return _step.stepBefore;
  }
});
Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function () {
    return _stack.default;
  }
});
Object.defineProperty(exports, "stackOffsetExpand", {
  enumerable: true,
  get: function () {
    return _expand.default;
  }
});
Object.defineProperty(exports, "stackOffsetDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "stackOffsetNone", {
  enumerable: true,
  get: function () {
    return _none.default;
  }
});
Object.defineProperty(exports, "stackOffsetSilhouette", {
  enumerable: true,
  get: function () {
    return _silhouette.default;
  }
});
Object.defineProperty(exports, "stackOffsetWiggle", {
  enumerable: true,
  get: function () {
    return _wiggle.default;
  }
});
Object.defineProperty(exports, "stackOrderAppearance", {
  enumerable: true,
  get: function () {
    return _appearance.default;
  }
});
Object.defineProperty(exports, "stackOrderAscending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "stackOrderDescending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "stackOrderInsideOut", {
  enumerable: true,
  get: function () {
    return _insideOut.default;
  }
});
Object.defineProperty(exports, "stackOrderNone", {
  enumerable: true,
  get: function () {
    return _none2.default;
  }
});
Object.defineProperty(exports, "stackOrderReverse", {
  enumerable: true,
  get: function () {
    return _reverse.default;
  }
});

var _arc = _interopRequireDefault(require("./arc.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _pie = _interopRequireDefault(require("./pie.js"));

var _areaRadial = _interopRequireDefault(require("./areaRadial.js"));

var _lineRadial = _interopRequireDefault(require("./lineRadial.js"));

var _pointRadial = _interopRequireDefault(require("./pointRadial.js"));

var _index = require("./link/index.js");

var _symbol = _interopRequireWildcard(require("./symbol.js"));

var _circle = _interopRequireDefault(require("./symbol/circle.js"));

var _cross = _interopRequireDefault(require("./symbol/cross.js"));

var _diamond = _interopRequireDefault(require("./symbol/diamond.js"));

var _square = _interopRequireDefault(require("./symbol/square.js"));

var _star = _interopRequireDefault(require("./symbol/star.js"));

var _triangle = _interopRequireDefault(require("./symbol/triangle.js"));

var _wye = _interopRequireDefault(require("./symbol/wye.js"));

var _basisClosed = _interopRequireDefault(require("./curve/basisClosed.js"));

var _basisOpen = _interopRequireDefault(require("./curve/basisOpen.js"));

var _basis = _interopRequireDefault(require("./curve/basis.js"));

var _bundle = _interopRequireDefault(require("./curve/bundle.js"));

var _cardinalClosed = _interopRequireDefault(require("./curve/cardinalClosed.js"));

var _cardinalOpen = _interopRequireDefault(require("./curve/cardinalOpen.js"));

var _cardinal = _interopRequireDefault(require("./curve/cardinal.js"));

var _catmullRomClosed = _interopRequireDefault(require("./curve/catmullRomClosed.js"));

var _catmullRomOpen = _interopRequireDefault(require("./curve/catmullRomOpen.js"));

var _catmullRom = _interopRequireDefault(require("./curve/catmullRom.js"));

var _linearClosed = _interopRequireDefault(require("./curve/linearClosed.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _monotone = require("./curve/monotone.js");

var _natural = _interopRequireDefault(require("./curve/natural.js"));

var _step = _interopRequireWildcard(require("./curve/step.js"));

var _stack = _interopRequireDefault(require("./stack.js"));

var _expand = _interopRequireDefault(require("./offset/expand.js"));

var _diverging = _interopRequireDefault(require("./offset/diverging.js"));

var _none = _interopRequireDefault(require("./offset/none.js"));

var _silhouette = _interopRequireDefault(require("./offset/silhouette.js"));

var _wiggle = _interopRequireDefault(require("./offset/wiggle.js"));

var _appearance = _interopRequireDefault(require("./order/appearance.js"));

var _ascending = _interopRequireDefault(require("./order/ascending.js"));

var _descending = _interopRequireDefault(require("./order/descending.js"));

var _insideOut = _interopRequireDefault(require("./order/insideOut.js"));

var _none2 = _interopRequireDefault(require("./order/none.js"));

var _reverse = _interopRequireDefault(require("./order/reverse.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./arc.js":"../node_modules/d3-shape/src/arc.js","./area.js":"../node_modules/d3-shape/src/area.js","./line.js":"../node_modules/d3-shape/src/line.js","./pie.js":"../node_modules/d3-shape/src/pie.js","./areaRadial.js":"../node_modules/d3-shape/src/areaRadial.js","./lineRadial.js":"../node_modules/d3-shape/src/lineRadial.js","./pointRadial.js":"../node_modules/d3-shape/src/pointRadial.js","./link/index.js":"../node_modules/d3-shape/src/link/index.js","./symbol.js":"../node_modules/d3-shape/src/symbol.js","./symbol/circle.js":"../node_modules/d3-shape/src/symbol/circle.js","./symbol/cross.js":"../node_modules/d3-shape/src/symbol/cross.js","./symbol/diamond.js":"../node_modules/d3-shape/src/symbol/diamond.js","./symbol/square.js":"../node_modules/d3-shape/src/symbol/square.js","./symbol/star.js":"../node_modules/d3-shape/src/symbol/star.js","./symbol/triangle.js":"../node_modules/d3-shape/src/symbol/triangle.js","./symbol/wye.js":"../node_modules/d3-shape/src/symbol/wye.js","./curve/basisClosed.js":"../node_modules/d3-shape/src/curve/basisClosed.js","./curve/basisOpen.js":"../node_modules/d3-shape/src/curve/basisOpen.js","./curve/basis.js":"../node_modules/d3-shape/src/curve/basis.js","./curve/bundle.js":"../node_modules/d3-shape/src/curve/bundle.js","./curve/cardinalClosed.js":"../node_modules/d3-shape/src/curve/cardinalClosed.js","./curve/cardinalOpen.js":"../node_modules/d3-shape/src/curve/cardinalOpen.js","./curve/cardinal.js":"../node_modules/d3-shape/src/curve/cardinal.js","./curve/catmullRomClosed.js":"../node_modules/d3-shape/src/curve/catmullRomClosed.js","./curve/catmullRomOpen.js":"../node_modules/d3-shape/src/curve/catmullRomOpen.js","./curve/catmullRom.js":"../node_modules/d3-shape/src/curve/catmullRom.js","./curve/linearClosed.js":"../node_modules/d3-shape/src/curve/linearClosed.js","./curve/linear.js":"../node_modules/d3-shape/src/curve/linear.js","./curve/monotone.js":"../node_modules/d3-shape/src/curve/monotone.js","./curve/natural.js":"../node_modules/d3-shape/src/curve/natural.js","./curve/step.js":"../node_modules/d3-shape/src/curve/step.js","./stack.js":"../node_modules/d3-shape/src/stack.js","./offset/expand.js":"../node_modules/d3-shape/src/offset/expand.js","./offset/diverging.js":"../node_modules/d3-shape/src/offset/diverging.js","./offset/none.js":"../node_modules/d3-shape/src/offset/none.js","./offset/silhouette.js":"../node_modules/d3-shape/src/offset/silhouette.js","./offset/wiggle.js":"../node_modules/d3-shape/src/offset/wiggle.js","./order/appearance.js":"../node_modules/d3-shape/src/order/appearance.js","./order/ascending.js":"../node_modules/d3-shape/src/order/ascending.js","./order/descending.js":"../node_modules/d3-shape/src/order/descending.js","./order/insideOut.js":"../node_modules/d3-shape/src/order/insideOut.js","./order/none.js":"../node_modules/d3-shape/src/order/none.js","./order/reverse.js":"../node_modules/d3-shape/src/order/reverse.js"}],"../node_modules/d3-voronoi/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-voronoi/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(d) {
  return d[0];
}

function y(d) {
  return d[1];
}
},{}],"../node_modules/d3-voronoi/src/RedBlackTree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedBlackNode = RedBlackNode;
exports.default = void 0;

function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,
  insert: function (after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;

      if (after.R) {
        after = after.R;

        while (after.L) after = after.L;

        after.L = node;
      } else {
        after.R = node;
      }

      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }

    node.L = node.R = null;
    node.U = parent;
    node.C = true;
    after = node;

    while (parent && parent.C) {
      grandpa = parent.U;

      if (parent === grandpa.L) {
        uncle = grandpa.R;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }

      parent = after.U;
    }

    this._.C = false;
  },
  remove: function (node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;
    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;
    if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;

      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;

    if (node && node.C) {
      node.C = false;
      return;
    }

    do {
      if (node === this._) break;

      if (node === parent.L) {
        sibling = parent.R;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }

          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }

          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }

      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) node = node.L;

  return node;
}

var _default = RedBlackTree;
exports.default = _default;
},{}],"../node_modules/d3-voronoi/src/Edge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEdge = createEdge;
exports.createBorderEdge = createBorderEdge;
exports.setEdgeEnd = setEdgeEnd;
exports.clipEdges = clipEdges;

var _Diagram = require("./Diagram");

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = _Diagram.edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);

  _Diagram.cells[left.index].halfedges.push(index);

  _Diagram.cells[right.index].halfedges.push(index);

  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
} // Liang–Barsky line clipping.


function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;
  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;

    if (lx > rx) {
      if (!v0) v0 = [fx, y0];else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;

    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = _Diagram.edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = _Diagram.edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > _Diagram.epsilon || Math.abs(edge[0][1] - edge[1][1]) > _Diagram.epsilon)) {
      delete _Diagram.edges[i];
    }
  }
}
},{"./Diagram":"../node_modules/d3-voronoi/src/Diagram.js"}],"../node_modules/d3-voronoi/src/Cell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCell = createCell;
exports.cellHalfedgeStart = cellHalfedgeStart;
exports.cellHalfedgeEnd = cellHalfedgeEnd;
exports.sortCellHalfedges = sortCellHalfedges;
exports.clipCells = clipCells;

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

function createCell(site) {
  return _Diagram.cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = _Diagram.cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = _Diagram.cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);

      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, _Diagram.edges[halfedges[j]]);

      index.sort(function (i, j) {
        return array[j] - array[i];
      });

      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];

      for (j = 0; j < m; ++j) halfedges[j] = array[j];
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = _Diagram.cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length; // Remove any dangling clipped edges.

      while (iHalfedge--) {
        if (!_Diagram.edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      } // Insert any border edges as necessary.


      iHalfedge = 0, nHalfedges = halfedges.length;

      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, _Diagram.edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, _Diagram.edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];

        if (Math.abs(endX - startX) > _Diagram.epsilon || Math.abs(endY - startY) > _Diagram.epsilon) {
          halfedges.splice(iHalfedge, 0, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, end, Math.abs(endX - x0) < _Diagram.epsilon && y1 - endY > _Diagram.epsilon ? [x0, Math.abs(startX - x0) < _Diagram.epsilon ? startY : y1] : Math.abs(endY - y1) < _Diagram.epsilon && x1 - endX > _Diagram.epsilon ? [Math.abs(startY - y1) < _Diagram.epsilon ? startX : x1, y1] : Math.abs(endX - x1) < _Diagram.epsilon && endY - y0 > _Diagram.epsilon ? [x1, Math.abs(startX - x1) < _Diagram.epsilon ? startY : y0] : Math.abs(endY - y0) < _Diagram.epsilon && endX - x0 > _Diagram.epsilon ? [Math.abs(startY - y0) < _Diagram.epsilon ? startX : x0, y0] : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  } // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!


  if (cover) {
    var dx,
        dy,
        d2,
        dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = _Diagram.cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0],
          v01 = [x0, y1],
          v11 = [x1, y1],
          v10 = [x1, y0];
      cover.halfedges.push(_Diagram.edges.push((0, _Edge.createBorderEdge)(site = cover.site, v00, v01)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v01, v11)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v11, v10)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v10, v00)) - 1);
    }
  } // Lastly delete any cells with no edges; these were entirely clipped.


  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      if (!cell.halfedges.length) {
        delete _Diagram.cells[iCell];
      }
    }
  }
}
},{"./Edge":"../node_modules/d3-voronoi/src/Edge.js","./Diagram":"../node_modules/d3-voronoi/src/Diagram.js"}],"../node_modules/d3-voronoi/src/Circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachCircle = attachCircle;
exports.detachCircle = detachCircle;
exports.firstCircle = void 0;

var _RedBlackTree = require("./RedBlackTree");

var _Diagram = require("./Diagram");

var circlePool = [];
var firstCircle;
exports.firstCircle = firstCircle;

function Circle() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.x = this.y = this.arc = this.site = this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;
  if (!lArc || !rArc) return;
  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;
  if (lSite === rSite) return;
  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;
  var d = 2 * (ax * cy - ay * cx);
  if (d >= -_Diagram.epsilon2) return;
  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;
  var circle = circlePool.pop() || new Circle();
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;
  var before = null,
      node = _Diagram.circles._;

  while (node) {
    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
      if (node.L) node = node.L;else {
        before = node.P;
        break;
      }
    } else {
      if (node.R) node = node.R;else {
        before = node;
        break;
      }
    }
  }

  _Diagram.circles.insert(before, circle);

  if (!before) exports.firstCircle = firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;

  if (circle) {
    if (!circle.P) exports.firstCircle = firstCircle = circle.N;

    _Diagram.circles.remove(circle);

    circlePool.push(circle);
    (0, _RedBlackTree.RedBlackNode)(circle);
    arc.circle = null;
  }
}
},{"./RedBlackTree":"../node_modules/d3-voronoi/src/RedBlackTree.js","./Diagram":"../node_modules/d3-voronoi/src/Diagram.js"}],"../node_modules/d3-voronoi/src/Beach.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeBeach = removeBeach;
exports.addBeach = addBeach;

var _RedBlackTree = require("./RedBlackTree");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

var beachPool = [];

function Beach() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.edge = this.site = this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach();
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  (0, _Circle.detachCircle)(beach);

  _Diagram.beaches.remove(beach);

  beachPool.push(beach);
  (0, _RedBlackTree.RedBlackNode)(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];
  detachBeach(beach);
  var lArc = previous;

  while (lArc.circle && Math.abs(x - lArc.circle.x) < _Diagram.epsilon && Math.abs(y - lArc.circle.cy) < _Diagram.epsilon) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  (0, _Circle.detachCircle)(lArc);
  var rArc = next;

  while (rArc.circle && Math.abs(x - rArc.circle.x) < _Diagram.epsilon && Math.abs(y - rArc.circle.cy) < _Diagram.epsilon) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  (0, _Circle.detachCircle)(rArc);
  var nArcs = disappearing.length,
      iArc;

  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    (0, _Edge.setEdgeEnd)(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = (0, _Edge.createEdge)(lArc.site, rArc.site, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = _Diagram.beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > _Diagram.epsilon) node = node.L;else {
      dxr = x - rightBreakPoint(node, directrix);

      if (dxr > _Diagram.epsilon) {
        if (!node.R) {
          lArc = node;
          break;
        }

        node = node.R;
      } else {
        if (dxl > -_Diagram.epsilon) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -_Diagram.epsilon) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }

        break;
      }
    }
  }

  (0, _Cell.createCell)(site);
  var newArc = createBeach(site);

  _Diagram.beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    (0, _Circle.detachCircle)(lArc);
    rArc = createBeach(lArc.site);

    _Diagram.beaches.insert(newArc, rArc);

    newArc.edge = rArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    (0, _Circle.attachCircle)(lArc);
    (0, _Circle.attachCircle)(rArc);
    return;
  }

  if (!rArc) {
    // && lArc
    newArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    return;
  } // else lArc !== rArc


  (0, _Circle.detachCircle)(lArc);
  (0, _Circle.detachCircle)(rArc);
  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
  (0, _Edge.setEdgeEnd)(rArc.edge, lSite, rSite, vertex);
  newArc.edge = (0, _Edge.createEdge)(lSite, site, null, vertex);
  rArc.edge = (0, _Edge.createEdge)(site, rSite, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;
  if (!pby2) return rfocx;
  var lArc = arc.P;
  if (!lArc) return -Infinity;
  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;
  if (!plby2) return lfocx;
  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;
  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}
},{"./RedBlackTree":"../node_modules/d3-voronoi/src/RedBlackTree.js","./Cell":"../node_modules/d3-voronoi/src/Cell.js","./Circle":"../node_modules/d3-voronoi/src/Circle.js","./Edge":"../node_modules/d3-voronoi/src/Edge.js","./Diagram":"../node_modules/d3-voronoi/src/Diagram.js"}],"../node_modules/d3-voronoi/src/Diagram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Diagram;
exports.edges = exports.circles = exports.cells = exports.beaches = exports.epsilon2 = exports.epsilon = void 0;

var _Beach = require("./Beach");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _RedBlackTree = _interopRequireDefault(require("./RedBlackTree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var beaches;
exports.beaches = beaches;
var cells;
exports.cells = cells;
var circles;
exports.circles = circles;
var edges;
exports.edges = edges;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1] || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;
  exports.edges = edges = [];
  exports.cells = cells = new Array(sites.length);
  exports.beaches = beaches = new _RedBlackTree.default();
  exports.circles = circles = new _RedBlackTree.default();

  while (true) {
    circle = _Circle.firstCircle;

    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
      if (site[0] !== x || site[1] !== y) {
        (0, _Beach.addBeach)(site);
        x = site[0], y = site[1];
      }

      site = sites.pop();
    } else if (circle) {
      (0, _Beach.removeBeach)(circle.arc);
    } else {
      break;
    }
  }

  (0, _Cell.sortCellHalfedges)();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    (0, _Edge.clipEdges)(x0, y0, x1, y1);
    (0, _Cell.clipCells)(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;
  exports.beaches = beaches = exports.circles = circles = exports.edges = edges = exports.cells = cells = null;
}

Diagram.prototype = {
  constructor: Diagram,
  polygons: function () {
    var edges = this.edges;
    return this.cells.map(function (cell) {
      var polygon = cell.halfedges.map(function (i) {
        return (0, _Cell.cellHalfedgeStart)(cell, edges[i]);
      });
      polygon.data = cell.site.data;
      return polygon;
    });
  },
  triangles: function () {
    var triangles = [],
        edges = this.edges;
    this.cells.forEach(function (cell, i) {
      if (!(m = (halfedges = cell.halfedges).length)) return;
      var site = cell.site,
          halfedges,
          j = -1,
          m,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;

        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });
    return triangles;
  },
  links: function () {
    return this.edges.filter(function (edge) {
      return edge.right;
    }).map(function (edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  },
  find: function (x, y, radius) {
    var that = this,
        i0,
        i1 = that._found || 0,
        n = that.cells.length,
        cell; // Use the previously-found cell, or start with an arbitrary one.

    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;

    var dx = x - cell.site[0],
        dy = y - cell.site[1],
        d2 = dx * dx + dy * dy; // Traverse the half-edges to find a closer cell, if any.

    do {
      cell = that.cells[i0 = i1], i1 = null;
      cell.halfedges.forEach(function (e) {
        var edge = that.edges[e],
            v = edge.left;
        if ((v === cell.site || !v) && !(v = edge.right)) return;
        var vx = x - v[0],
            vy = y - v[1],
            v2 = vx * vx + vy * vy;
        if (v2 < d2) d2 = v2, i1 = v.index;
      });
    } while (i1 !== null);

    that._found = i0;
    return radius == null || d2 <= radius * radius ? cell.site : null;
  }
};
},{"./Beach":"../node_modules/d3-voronoi/src/Beach.js","./Cell":"../node_modules/d3-voronoi/src/Cell.js","./Circle":"../node_modules/d3-voronoi/src/Circle.js","./Edge":"../node_modules/d3-voronoi/src/Edge.js","./RedBlackTree":"../node_modules/d3-voronoi/src/RedBlackTree.js"}],"../node_modules/d3-voronoi/src/voronoi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _point = require("./point");

var _Diagram = _interopRequireWildcard(require("./Diagram"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      extent = null;

  function voronoi(data) {
    return new _Diagram.default(data.map(function (d, i) {
      var s = [Math.round(x(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon, Math.round(y(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function (data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function (data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function (data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : x;
  };

  voronoi.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : y;
  };

  voronoi.extent = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
}
},{"./constant":"../node_modules/d3-voronoi/src/constant.js","./point":"../node_modules/d3-voronoi/src/point.js","./Diagram":"../node_modules/d3-voronoi/src/Diagram.js"}],"../node_modules/d3-voronoi/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "voronoi", {
  enumerable: true,
  get: function () {
    return _voronoi.default;
  }
});

var _voronoi = _interopRequireDefault(require("./voronoi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./voronoi":"../node_modules/d3-voronoi/src/voronoi.js"}],"../node_modules/d3-zoom/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-zoom/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZoomEvent;

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}
},{}],"../node_modules/d3-zoom/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transform = Transform;
exports.default = transform;
exports.identity = void 0;

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function (k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function (x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function (point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function (x) {
    return x * this.k + this.x;
  },
  applyY: function (y) {
    return y * this.k + this.y;
  },
  invert: function (location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function (x) {
    return (x - this.x) / this.k;
  },
  invertY: function (y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function (x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function (y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function () {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity = new Transform(1, 0, 0);
exports.identity = identity;
transform.prototype = Transform.prototype;

function transform(node) {
  while (!node.__zoom) if (!(node = node.parentNode)) return identity;

  return node.__zoom;
}
},{}],"../node_modules/d3-zoom/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js"}],"../node_modules/d3-zoom/src/zoom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Drag = require("d3-drag");

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _d3Transition = require("d3-transition");

var _constant = _interopRequireDefault(require("./constant.js"));

var _event = _interopRequireDefault(require("./event.js"));

var _transform = require("./transform.js");

var _noevent = _interopRequireWildcard(require("./noevent.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !_d3Selection.event.ctrlKey && !_d3Selection.event.button;
}

function defaultExtent() {
  var e = this;

  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;

    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }

    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }

  return [[0, 0], [e.clientWidth, e.clientHeight]];
}

function defaultTransform() {
  return this.__zoom || _transform.identity;
}

function defaultWheelDelta() {
  return -_d3Selection.event.deltaY * (_d3Selection.event.deltaMode === 1 ? 0.05 : _d3Selection.event.deltaMode ? 1 : 0.002);
}

function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}

function defaultConstrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}

function _default() {
  var filter = defaultFilter,
      extent = defaultExtent,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = _d3Interpolate.interpolateZoom,
      listeners = (0, _d3Dispatch.dispatch)("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0;

  function zoom(selection) {
    selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function (collection, transform, point) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);

    if (collection !== selection) {
      schedule(collection, transform, point);
    } else {
      selection.interrupt().each(function () {
        gesture(this, arguments).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
      });
    }
  };

  zoom.scaleBy = function (selection, k, p) {
    zoom.scaleTo(selection, function () {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p);
  };

  zoom.scaleTo = function (selection, k, p) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p);
  };

  zoom.translateBy = function (selection, x, y) {
    zoom.transform(selection, function () {
      return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
    });
  };

  zoom.translateTo = function (selection, x, y, p) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(_transform.identity.translate(p0[0], p0[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
    }, p);
  };

  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new _transform.Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k,
        y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new _transform.Transform(transform.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition, transform, point) {
    transition.on("start.zoom", function () {
      gesture(this, arguments).start();
    }).on("interrupt.zoom end.zoom", function () {
      gesture(this, arguments).end();
    }).tween("zoom", function () {
      var that = this,
          args = arguments,
          g = gesture(that, args),
          e = extent.apply(that, args),
          p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
          w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
          a = that.__zoom,
          b = typeof transform === "function" ? transform.apply(that, args) : transform,
          i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function (t) {
        if (t === 1) t = b; // Avoid rounding error on end.
        else {
            var l = i(t),
                k = w / l[2];
            t = new _transform.Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
          }
        g.zoom(null, t);
      };
    });
  }

  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }

  Gesture.prototype = {
    start: function () {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }

      return this;
    },
    zoom: function (key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function () {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }

      return this;
    },
    emit: function (type) {
      (0, _d3Selection.customEvent)(new _event.default(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = (0, _d3Selection.mouse)(this); // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.

    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }

      clearTimeout(g.wheel);
    } // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return; // Otherwise, capture the mouse point and location at the start.
      else {
          g.mouse = [p, t.invert(p)];
          (0, _d3Transition.interrupt)(this);
          g.start();
        }

    (0, _noevent.default)();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments, true),
        v = (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = (0, _d3Selection.mouse)(this),
        x0 = _d3Selection.event.clientX,
        y0 = _d3Selection.event.clientY;
    (0, _d3Drag.dragDisable)(_d3Selection.event.view);
    (0, _noevent.nopropagation)();
    g.mouse = [p, this.__zoom.invert(p)];
    (0, _d3Transition.interrupt)(this);
    g.start();

    function mousemoved() {
      (0, _noevent.default)();

      if (!g.moved) {
        var dx = _d3Selection.event.clientX - x0,
            dy = _d3Selection.event.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }

      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = (0, _d3Selection.mouse)(g.that), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      (0, _d3Drag.dragEnable)(_d3Selection.event.view, g.moved);
      (0, _noevent.default)();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = (0, _d3Selection.mouse)(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (_d3Selection.event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);
    (0, _noevent.default)();
    if (duration > 0) (0, _d3Selection.select)(this).transition().duration(duration).call(schedule, t1, p0);else (0, _d3Selection.select)(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = _d3Selection.event.touches,
        n = touches.length,
        g = gesture(this, arguments, _d3Selection.event.changedTouches.length === n),
        started,
        i,
        t,
        p;
    (0, _noevent.nopropagation)();

    for (i = 0; i < n; ++i) {
      t = touches[i], p = (0, _d3Selection.touch)(this, touches, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
    }

    if (touchstarting) touchstarting = clearTimeout(touchstarting);

    if (started) {
      if (g.taps < 2) touchstarting = setTimeout(function () {
        touchstarting = null;
      }, touchDelay);
      (0, _d3Transition.interrupt)(this);
      g.start();
    }
  }

  function touchmoved() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        t,
        p,
        l;
    (0, _noevent.default)();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    g.taps = 0;

    for (i = 0; i < n; ++i) {
      t = touches[i], p = (0, _d3Selection.touch)(this, touches, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }

    t = g.that.__zoom;

    if (g.touch1) {
      var p0 = g.touch0[0],
          l0 = g.touch0[1],
          p1 = g.touch1[0],
          l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];else return;

    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        t;
    (0, _noevent.nopropagation)();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, touchDelay);

    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }

    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);else {
      g.end(); // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.

      if (g.taps === 2) {
        var p = (0, _d3Selection.select)(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
      }
    }
  }

  zoom.wheelDelta = function (_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : (0, _constant.default)(+_), zoom) : wheelDelta;
  };

  zoom.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), zoom) : filter;
  };

  zoom.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), zoom) : touchable;
  };

  zoom.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constant.default)([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function (_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function (_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function (_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function (_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function (_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  return zoom;
}
},{"d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-drag":"../node_modules/d3-drag/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","d3-transition":"../node_modules/d3-transition/src/index.js","./constant.js":"../node_modules/d3-zoom/src/constant.js","./event.js":"../node_modules/d3-zoom/src/event.js","./transform.js":"../node_modules/d3-zoom/src/transform.js","./noevent.js":"../node_modules/d3-zoom/src/noevent.js"}],"../node_modules/d3-zoom/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "zoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "zoomTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});
Object.defineProperty(exports, "zoomIdentity", {
  enumerable: true,
  get: function () {
    return _transform.identity;
  }
});

var _zoom = _interopRequireDefault(require("./zoom.js"));

var _transform = _interopRequireWildcard(require("./transform.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./zoom.js":"../node_modules/d3-zoom/src/zoom.js","./transform.js":"../node_modules/d3-zoom/src/transform.js"}],"../node_modules/d3/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  version: true
};
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _package.version;
  }
});

var _package = require("./dist/package.js");

var _d3Array = require("d3-array");

Object.keys(_d3Array).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Array[key];
    }
  });
});

var _d3Axis = require("d3-axis");

Object.keys(_d3Axis).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Axis[key];
    }
  });
});

var _d3Brush = require("d3-brush");

Object.keys(_d3Brush).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Brush[key];
    }
  });
});

var _d3Chord = require("d3-chord");

Object.keys(_d3Chord).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Chord[key];
    }
  });
});

var _d3Collection = require("d3-collection");

Object.keys(_d3Collection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Collection[key];
    }
  });
});

var _d3Color = require("d3-color");

Object.keys(_d3Color).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Color[key];
    }
  });
});

var _d3Contour = require("d3-contour");

Object.keys(_d3Contour).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Contour[key];
    }
  });
});

var _d3Dispatch = require("d3-dispatch");

Object.keys(_d3Dispatch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Dispatch[key];
    }
  });
});

var _d3Drag = require("d3-drag");

Object.keys(_d3Drag).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Drag[key];
    }
  });
});

var _d3Dsv = require("d3-dsv");

Object.keys(_d3Dsv).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Dsv[key];
    }
  });
});

var _d3Ease = require("d3-ease");

Object.keys(_d3Ease).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Ease[key];
    }
  });
});

var _d3Fetch = require("d3-fetch");

Object.keys(_d3Fetch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Fetch[key];
    }
  });
});

var _d3Force = require("d3-force");

Object.keys(_d3Force).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Force[key];
    }
  });
});

var _d3Format = require("d3-format");

Object.keys(_d3Format).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Format[key];
    }
  });
});

var _d3Geo = require("d3-geo");

Object.keys(_d3Geo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Geo[key];
    }
  });
});

var _d3Hierarchy = require("d3-hierarchy");

Object.keys(_d3Hierarchy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Hierarchy[key];
    }
  });
});

var _d3Interpolate = require("d3-interpolate");

Object.keys(_d3Interpolate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Interpolate[key];
    }
  });
});

var _d3Path = require("d3-path");

Object.keys(_d3Path).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Path[key];
    }
  });
});

var _d3Polygon = require("d3-polygon");

Object.keys(_d3Polygon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Polygon[key];
    }
  });
});

var _d3Quadtree = require("d3-quadtree");

Object.keys(_d3Quadtree).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Quadtree[key];
    }
  });
});

var _d3Random = require("d3-random");

Object.keys(_d3Random).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Random[key];
    }
  });
});

var _d3Scale = require("d3-scale");

Object.keys(_d3Scale).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Scale[key];
    }
  });
});

var _d3ScaleChromatic = require("d3-scale-chromatic");

Object.keys(_d3ScaleChromatic).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3ScaleChromatic[key];
    }
  });
});

var _d3Selection = require("d3-selection");

Object.keys(_d3Selection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Selection[key];
    }
  });
});

var _d3Shape = require("d3-shape");

Object.keys(_d3Shape).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Shape[key];
    }
  });
});

var _d3Time = require("d3-time");

Object.keys(_d3Time).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Time[key];
    }
  });
});

var _d3TimeFormat = require("d3-time-format");

Object.keys(_d3TimeFormat).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3TimeFormat[key];
    }
  });
});

var _d3Timer = require("d3-timer");

Object.keys(_d3Timer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Timer[key];
    }
  });
});

var _d3Transition = require("d3-transition");

Object.keys(_d3Transition).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Transition[key];
    }
  });
});

var _d3Voronoi = require("d3-voronoi");

Object.keys(_d3Voronoi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Voronoi[key];
    }
  });
});

var _d3Zoom = require("d3-zoom");

Object.keys(_d3Zoom).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Zoom[key];
    }
  });
});
},{"./dist/package.js":"../node_modules/d3/dist/package.js","d3-array":"../node_modules/d3-array/src/index.js","d3-axis":"../node_modules/d3-axis/src/index.js","d3-brush":"../node_modules/d3-brush/src/index.js","d3-chord":"../node_modules/d3-chord/src/index.js","d3-collection":"../node_modules/d3-collection/src/index.js","d3-color":"../node_modules/d3-color/src/index.js","d3-contour":"../node_modules/d3-contour/src/index.js","d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-drag":"../node_modules/d3-drag/src/index.js","d3-dsv":"../node_modules/d3-dsv/src/index.js","d3-ease":"../node_modules/d3-ease/src/index.js","d3-fetch":"../node_modules/d3-fetch/src/index.js","d3-force":"../node_modules/d3-force/src/index.js","d3-format":"../node_modules/d3-format/src/index.js","d3-geo":"../node_modules/d3-geo/src/index.js","d3-hierarchy":"../node_modules/d3-hierarchy/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-path":"../node_modules/d3-path/src/index.js","d3-polygon":"../node_modules/d3-polygon/src/index.js","d3-quadtree":"../node_modules/d3-quadtree/src/index.js","d3-random":"../node_modules/d3-random/src/index.js","d3-scale":"../node_modules/d3-scale/src/index.js","d3-scale-chromatic":"../node_modules/d3-scale-chromatic/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","d3-shape":"../node_modules/d3-shape/src/index.js","d3-time":"../node_modules/d3-time/src/index.js","d3-time-format":"../node_modules/d3-time-format/src/index.js","d3-timer":"../node_modules/d3-timer/src/index.js","d3-transition":"../node_modules/d3-transition/src/index.js","d3-voronoi":"../node_modules/d3-voronoi/src/index.js","d3-zoom":"../node_modules/d3-zoom/src/index.js"}],"map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var topo = require("./geoworld.json");

var d3 = require("d3");

var Map =
/*#__PURE__*/
function () {
  function Map() {
    _classCallCheck(this, Map);

    var map = d3.select("#map");
    var width = map.node().getBoundingClientRect().width;
    var height = width / 2;
    this.svg = map.append("svg").attr("width", width).attr("height", height).append("g");
    var path = d3.geoPath().projection(d3.geoEqualEarth().scale(width / 7).translate([width / 2, height / 2]));
    this.svg.selectAll("path").data(topojson.feature(topo, topo.objects.countries).features).enter().append("path").attr("d", path);
  }

  _createClass(Map, [{
    key: "render",
    value: function render(data, color) {
      this.svg.selectAll("path").filter(function (d) {
        return d.properties.name === data;
      }).style("fill", color);
    }
  }]);

  return Map;
}();

exports.default = Map;
},{"./geoworld.json":"geoworld.json","d3":"../node_modules/d3/index.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "56294" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","map.js"], null)
//# sourceMappingURL=/map.27237bf4.js.map